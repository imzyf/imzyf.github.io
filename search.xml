<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式入门课</title>
      <link href="/2023/03/01/null/"/>
      <url>/2023/03/01/null/</url>
      
        <content type="html"><![CDATA[<h2 id="01-元字符"><a href="#01-元字符" class="headerlink" title="01 元字符"></a>01 元字符</h2><p>正则表达式 —— 字符串的规则。</p><p>元字符就是指那些在正则表达式中具有特殊意义的专用字符。</p><img width="900" alt="image" src="https://user-images.githubusercontent.com/9289792/222077541-e90a8a4f-7f2e-4047-ab7c-507a78273a2e.png"><h2 id="02-量词与贪婪"><a href="#02-量词与贪婪" class="headerlink" title="02 量词与贪婪"></a>02 量词与贪婪</h2><p>贪婪(Greedy) <code>*</code>：匹配最长。在贪婪量词模式下，正则表达式会尽可能长地去匹配符合规则的字符串，且会回溯。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/a*/i&quot;</span>, <span class="string">&quot;aaabb&quot;</span>, <span class="variable">$matches</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$matches</span>);</span><br></pre></td></tr></table></figure><p>非贪婪(Reluctant) <code>+?</code>：匹配最短。在非贪婪量词模式下，正则表达式会匹配尽可能短的字符串。</p><p>ENV：Python3</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.findall(<span class="string">r&#x27;a*&#x27;</span>, <span class="string">&#x27;aaabb&#x27;</span>) <span class="comment"># 贪婪模式</span></span><br><span class="line"><span class="comment"># [&#x27;aaa&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span></span><br><span class="line">re.findall(<span class="string">r&#x27;a*?&#x27;</span>, <span class="string">&#x27;aaabb&#x27;</span>) <span class="comment"># 非贪婪模式</span></span><br><span class="line"><span class="comment"># [&#x27;&#x27;, &#x27;a&#x27;, &#x27;&#x27;, &#x27;a&#x27;, &#x27;&#x27;, &#x27;a&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span></span><br><span class="line"></span><br><span class="line">re.findall(<span class="string">r&#x27;&quot;.+&quot;&#x27;</span>, <span class="string">&#x27;&quot;the little cat&quot; is a toy, it lokks &quot;a little bad&quot;&#x27;</span>) <span class="comment"># 贪婪模式</span></span><br><span class="line"><span class="comment"># [&#x27;&quot;the little cat&quot; is a toy, it lokks &quot;a little bad&quot;&#x27;]</span></span><br><span class="line">re.findall(<span class="string">r&#x27;&quot;.+?&quot;&#x27;</span>, <span class="string">&#x27;&quot;the little cat&quot; is a toy, it lokks &quot;a little bad&quot;&#x27;</span>) <span class="comment"># 贪婪模式</span></span><br><span class="line"><span class="comment"># [&#x27;&quot;the little cat&quot;&#x27;, &#x27;&quot;a little bad&quot;&#x27;]</span></span><br></pre></td></tr></table></figure><p>独占模式(Possessive) <code>++</code>：同贪婪一样匹配最长。不过在独占量词模式下，正则表达式尽可能长地去匹配字符串，一旦匹配不成功就会结束匹配而 <strong>不会回溯</strong>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回溯示例：</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.findall(<span class="string">r&#x27;xy&#123;1,3&#125;z&#x27;</span>, <span class="string">&#x27;xyyz&#x27;</span>) <span class="comment"># 回溯</span></span><br><span class="line"><span class="comment"># [&#x27;xyyz&#x27;]</span></span><br><span class="line"><span class="comment"># 正则 xy&#123;1,3&#125; 会尽可能长地去匹配到 xyyz，无法匹配 z，向前回溯 xyy</span></span><br><span class="line"><span class="comment"># 正则 z 匹配到剩下字符串 z</span></span><br><span class="line">re.findall(<span class="string">r&#x27;xy&#123;1,3&#125;?z&#x27;</span>, <span class="string">&#x27;xyyz&#x27;</span>) <span class="comment"># 非贪婪</span></span><br><span class="line"><span class="comment"># [&#x27;xyyz&#x27;]</span></span><br><span class="line"><span class="comment"># 正则 xy&#123;1,3&#125; 会尽可能短地去匹配到 xy</span></span><br><span class="line"><span class="comment"># 正则 z 匹配到字符串 y，无法匹配，向前回溯</span></span><br><span class="line"><span class="comment"># 正则 xy&#123;1,3&#125; 会尽可能短地去匹配 xyy</span></span><br><span class="line"><span class="comment"># 正则 z 匹配到剩下字符串 z</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 独占模式示例：</span></span><br><span class="line"><span class="comment"># pip install regex -i https://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="keyword">import</span> regex</span><br><span class="line">regex.findall(<span class="string">r&#x27;xy&#123;1,3&#125;+z&#x27;</span>, <span class="string">&#x27;xyyz&#x27;</span>) <span class="comment"># 独占</span></span><br><span class="line"><span class="comment"># [&#x27;xyyz&#x27;]</span></span><br><span class="line"><span class="comment"># 正则 xy&#123;1,3&#125;+ 会尽可能长地去匹配到 xyy 并占用</span></span><br><span class="line"><span class="comment"># 正则 z 匹配到字符串 z</span></span><br><span class="line">regex.findall(<span class="string">r&#x27;xy&#123;1,3&#125;+yz&#x27;</span>, <span class="string">&#x27;xyyz&#x27;</span>) <span class="comment"># 独占</span></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"><span class="comment"># 正则 xy&#123;1,3&#125;+ 会尽可能长地去匹配到 xyy 并占用</span></span><br><span class="line"><span class="comment"># 正则 yz 无法匹配到剩下字符串 z</span></span><br></pre></td></tr></table></figure><h2 id="03-分组与引用"><a href="#03-分组与引用" class="headerlink" title="03 分组与引用"></a>03 分组与引用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> regex</span><br><span class="line"><span class="comment"># 不保存分组 (?:正则)</span></span><br><span class="line">regex.sub(<span class="string">r&#x27;(\d&#123;4&#125;)-(?:\d&#123;2&#125;)-(\d&#123;2&#125;)&#x27;</span>, <span class="string">r&quot;年：\1  日：\2&quot;</span>, <span class="string">&#x27;2023-03-01&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;年：2023  日：01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除重复连续单词</span></span><br><span class="line">regex.sub(<span class="string">r&#x27;(\w+)(\s\1)+&#x27;</span>, <span class="string">r&quot;\1&quot;</span>, <span class="string">&#x27;the little cat cat is in the hat hat hat, we like it.&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;the little cat is in the hat, we like it.&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="04-匹配模式"><a href="#04-匹配模式" class="headerlink" title="04 匹配模式"></a>04 匹配模式</h2><p>指改变元字符匹配行为。</p><p>不区分大小写模式（Case-Insensitive）<code>(?模式标识)</code> <code>(?i)</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> regex</span><br><span class="line">regex.findall(<span class="string">r&quot;(?i)cat&quot;</span>, <span class="string">&quot;cat Cat CAt&quot;</span>)</span><br><span class="line"><span class="comment"># [&#x27;cat&#x27;, &#x27;Cat&#x27;, &#x27;CAt&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight re"><table><tr><td class="code"><pre><span class="line"># https:<span class="comment">//regex101.com/r/3OUJda/1</span></span><br><span class="line"># 二次重复时的大小写一致</span><br><span class="line">((?i)cat) \<span class="number">1</span></span><br></pre></td></tr></table></figure><p>点号通配模式（Dot All）<code>(?s)</code> 让英文的点 <code>.</code> 可以匹配上包括换行的任何字符。等价 <code>[\s\S]</code> <code>[\d\D]</code> <code>[\w\W]</code>。</p><figure class="highlight re"><table><tr><td class="code"><pre><span class="line"># https:<span class="comment">//regex101.com/r/zXtwLv/1</span></span><br><span class="line"># 匹配包括换行符</span><br><span class="line">(?s).+</span><br></pre></td></tr></table></figure><p>多行匹配模式（Multiline）<code>(?m)</code> 使 <code>^</code> 和 <code>$</code> 能匹配上每行的开头或结尾。</p><figure class="highlight re"><table><tr><td class="code"><pre><span class="line"># 分行匹配</span><br><span class="line">(?m)^cat<span class="pattern-match">|dog<span class="constructor">$</span></span></span><br></pre></td></tr></table></figure><p>注释模式（Comment）<code>(?#)</code></p><figure class="highlight re"><table><tr><td class="code"><pre><span class="line">(\w+)(?#word) \<span class="number">1</span>(?#word repeat again)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vim 实用技巧必知必会</title>
      <link href="/2023/02/28/vim-practical-tips/"/>
      <url>/2023/02/28/vim-practical-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list installed | grep vim</span><br><span class="line"><span class="comment"># vim-X11.x86_64                   2:7.4.629-8.el7_9             @updates</span></span><br><span class="line"><span class="comment"># vim-common.x86_64                2:7.4.629-8.el7_9             @updates</span></span><br><span class="line"><span class="comment"># vim-enhanced.x86_64              2:7.4.629-8.el7_9             @updates</span></span><br><span class="line"><span class="comment"># vim-filesystem.x86_64            2:7.4.629-8.el7_9             @updates</span></span><br><span class="line"><span class="comment"># vim-minimal.x86_64               2:7.4.629-8.el7_9             @updates</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://gist.github.com/yevrah/21cdccc1dc65efd2a4712781815159fb</span></span><br><span class="line"><span class="comment"># Update to Vim8 on CentOS 7</span></span><br><span class="line"></span><br><span class="line">rpm -Uvh http://mirror.ghettoforge.org/distributions/gf/gf-release-latest.gf.el7.noarch.rpm</span><br><span class="line">rpm --import http://mirror.ghettoforge.org/distributions/gf/RPM-GPG-KEY-gf.el7</span><br><span class="line">yum -y remove vim-minimal vim-common vim-enhanced</span><br><span class="line">yum -y --enablerepo=gf-plus install vim-enhanced vim-filesystem sudo</span><br><span class="line"></span><br><span class="line">vim --version</span><br><span class="line"><span class="comment"># VIM - Vi IMproved 8.0 (2016 Sep 12, compiled Sep 18 2016 14:42:40)</span></span><br><span class="line">yum list installed | grep vim</span><br><span class="line"><span class="comment"># vim-common.x86_64                2:8.0.003-1.gf.el7            @gf-plus</span></span><br><span class="line"><span class="comment"># vim-enhanced.x86_64              2:8.0.003-1.gf.el7            @gf-plus</span></span><br><span class="line"><span class="comment"># vim-filesystem.x86_64            2:8.0.003-1.gf.el7            @gf-plus</span></span><br><span class="line"><span class="comment"># vim-minimal.x86_64               2:8.0.003-1.gf.el7            @gf-plus</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中文帮助</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.vim/pack/my/start</span><br><span class="line"><span class="built_in">cd</span> ~/.vim/pack/my/start</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/yianwillis/vimcdoc.git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自带教程</span></span><br><span class="line">LANG=zh_CN.UTF-8 vimtutor</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据经典论文解读</title>
      <link href="/2023/02/27/big-data-papers-reading-notes/"/>
      <url>/2023/02/27/big-data-papers-reading-notes/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 入门实战 Part3</title>
      <link href="/2023/02/24/kubernetes-getting-started-part3/"/>
      <url>/2023/02/24/kubernetes-getting-started-part3/</url>
      
        <content type="html"><![CDATA[<h2 id="24-PersistentVolume-数据持久化"><a href="#24-PersistentVolume-数据持久化" class="headerlink" title="24 PersistentVolume 数据持久化"></a>24 PersistentVolume 数据持久化</h2><p>PersistentVolume 属于集群的系统资源，是和 Node 平级的一种对象，Pod 对它没有管理权，只有使用权。</p><p>StorageClass 它抽象了特定类型的存储系统（比如 Ceph、NFS），在 PVC 和 PV 之间充当“协调人”的角色，帮助 PVC 找到合适的 PV。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim host-path-pv-pvc.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 只有 10MB 容量的存储设备</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">host-10m-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># kubectl explain PersistentVolume.spec.storageClassName</span></span><br><span class="line">  <span class="attr">storageClassName:</span></span><br><span class="line">    <span class="string">host-vol</span></span><br><span class="line">    <span class="comment"># kubectl explain PersistentVolume.spec.accessModes</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="comment"># ReadWriteOnce：存储卷可读可写，但只能被一个节点上的 Pod 挂载。</span></span><br><span class="line">    <span class="comment"># ReadOnlyMany：存储卷只读不可写，可以被任意节点上的 Pod 多次挂载。</span></span><br><span class="line">    <span class="comment"># ReadWriteMany：存储卷可读可写，也可以被任意节点上的 Pod 多次挂载。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="comment">#  Ki/Mi/Gi</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Mi</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/tmp/host-10m-pv/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># PVC 不表示实际的存储，而是一个“申请”或者“声明”</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">host-5m-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">host-vol</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Mi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /tmp/host-10m-pv</span><br><span class="line">kubectl apply -f host-path-pv-pvc.yml</span><br><span class="line">kubectl get pv</span><br><span class="line"><span class="comment"># NAME          CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS   REASON   AGE</span></span><br><span class="line"><span class="comment"># host-10m-pv   10Mi       RWO            Retain           Bound    default/host-5m-pvc   host-vol                4s</span></span><br><span class="line">kubectl get pvc</span><br><span class="line"><span class="comment"># NAME          STATUS   VOLUME        CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span></span><br><span class="line"><span class="comment"># host-5m-pvc   Bound    host-10m-pv   10Mi       RWO            host-vol       6s</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim host-pvc-pod.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">host-pvc-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-pvc-vol</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span> <span class="string">host-5m-pvc</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ngx-pvc-pod</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-pvc-vol</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f host-pvc-pod.yml</span><br><span class="line">kubectl get pod -o wide</span><br><span class="line">kubectl <span class="built_in">exec</span> -it host-pvc-pod -- sh</span><br><span class="line"><span class="built_in">cd</span> /tmp &amp;&amp; <span class="built_in">touch</span> a.md</span><br><span class="line"><span class="comment"># check in worker node</span></span><br><span class="line">/tmp/host-10m-pv/</span><br></pre></td></tr></table></figure><h2 id="25-NFS-网络共享存储"><a href="#25-NFS-网络共享存储" class="headerlink" title="25 NFS 网络共享存储"></a>25 NFS 网络共享存储</h2><p>…</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/chronolaw/k8s_study">chronolaw&#x2F;k8s_study | GitHub</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 入门实战 Part2</title>
      <link href="/2023/02/22/kubernetes-getting-started-part2/"/>
      <url>/2023/02/22/kubernetes-getting-started-part2/</url>
      
        <content type="html"><![CDATA[<h2 id="17-多节点的-Kubernetes-集群"><a href="#17-多节点的-Kubernetes-集群" class="headerlink" title="17 多节点的 Kubernetes 集群"></a>17 多节点的 Kubernetes 集群</h2><p>在腾讯云 TencentOS Server 3.1 (TK4) 下测试：</p><ul><li>master SA3.MEDIUM4 2 核 4GB 5Mbps</li><li>worker S5.SMALL2 1 核 2GB 1Mbps</li><li>worker S5.SMALL2 1 核 2GB 1Mbps</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改源 https://mirrors.cloud.tencent.com/</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># install docker</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line">docker -v</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>一些准备工作：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改主机名</span></span><br><span class="line">vi /etc/hostname</span><br><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把 cgroup 的驱动程序改成 systemd</span></span><br><span class="line"><span class="comment"># 使用 Docker 作为 Kubernetes 的底层支持</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">  &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://kubernetes.io/zh-cn/docs/setup/production-environment/container-runtimes/</span></span><br><span class="line"><span class="comment"># 转发 IPv4 并让 iptables 看到桥接流量</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo modprobe overlay</span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line">lsmod | grep overlay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 sysctl 参数而不重新启动</span></span><br><span class="line">sudo sysctl --system</span><br><span class="line"></span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward</span><br><span class="line"><span class="comment"># net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="comment"># net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="comment"># net.ipv4.ip_forward = 1</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭 Linux 的 swap 分区</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -ri <span class="string">&#x27;/\sswap\s/s/^#?/#/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://developer.aliyun.com/mirror/kubernetes</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.cloud.tencent.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本搞不定</span></span><br><span class="line"><span class="comment"># yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes --nogpgcheck</span></span><br><span class="line"></span><br><span class="line">yum --showduplicate list kubelet</span><br><span class="line">yum install -y kubelet-1.23.16-0 kubeadm-1.23.16-0 kubectl-1.23.16-0 --disableexcludes=kubernetes --nogpgcheck</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line"></span><br><span class="line">kubeadm version</span><br><span class="line">kubectl version --output=yaml</span><br><span class="line">kubelet --version</span><br></pre></td></tr></table></figure><p>下载 Kubernetes 组件镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm config images list</span></span><br><span class="line">kubeadm config images list --kubernetes-version v1.23.16</span><br></pre></td></tr></table></figure><p>安装 Master 节点：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/containerd/config.toml</span><br><span class="line"><span class="comment">#disabled_plugins = [&quot;cri&quot;]</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br><span class="line">systemctl restart containerd</span><br><span class="line">systemctl status containerd</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet.service</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl status kubelet</span><br><span class="line"></span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line">yum install -y nc</span><br><span class="line">nc 127.0.0.1 6443</span><br><span class="line"></span><br><span class="line">kubeadm init -h</span><br><span class="line">kubeadm reset -f</span><br><span class="line"><span class="built_in">rm</span> -rf ~/.kube/config</span><br><span class="line"></span><br><span class="line">kubeadm init \</span><br><span class="line">    --image-repository=registry.aliyuncs.com/google_containers \</span><br><span class="line">    --pod-network-cidr=10.10.0.0/16 \</span><br><span class="line">    --kubernetes-version=v1.23.16 \</span><br><span class="line">    --v=9</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span></span><br><span class="line"><span class="comment">#   https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># success</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"><span class="comment"># NAME     STATUS     ROLES                  AGE    VERSION</span></span><br><span class="line"><span class="comment"># master   NotReady   control-plane,master   2m4s   v1.23.16</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dubug</span></span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl restart containerd</span><br><span class="line">journalctl -xeu kubelet</span><br><span class="line">crictr ps -a</span><br><span class="line">crictl --runtime-endpoint unix:///var/run/containerd/containerd.sock ps -a | grep kube | grep -v pause</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl describe pods -n kube-system</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Flannel 网络插件 https://github.com/flannel-io/flannel/tree/master</span></span><br><span class="line"><span class="comment"># curl https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml --output kube-flannel.yml</span></span><br><span class="line"><span class="comment">#  net-conf.json: |</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#       &quot;Network&quot;: &quot;10.10.0.0/16&quot;,</span></span><br><span class="line"><span class="comment">#       &quot;Backend&quot;: &#123;</span></span><br><span class="line"><span class="comment">#         &quot;Type&quot;: &quot;vxlan&quot;</span></span><br><span class="line"><span class="comment">#       &#125;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line">kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span><br><span class="line">kubectl get node</span><br><span class="line"><span class="comment"># NAME     STATUS   ROLES                  AGE   VERSION</span></span><br><span class="line"><span class="comment"># master   Ready    control-plane,master   14h   v1.23.16</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show join command in control-plane</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"><span class="comment"># work join; 云服务记得开放入站端口</span></span><br><span class="line">telnet 172.21.0.5 6443</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet.service</span><br><span class="line">kubeadm <span class="built_in">join</span> 172.21.0.5:6443 --token xxx --discovery-token-ca-cert-hash sha256:xxx --v=9</span><br><span class="line"><span class="comment"># check in control-plane</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># NAME            STATUS   ROLES                  AGE     VERSION</span></span><br><span class="line"><span class="comment"># master          Ready    control-plane,master   14h     v1.23.16</span></span><br><span class="line"><span class="comment"># vm-0-9-centos   Ready    &lt;none&gt;                 3m27s   v1.23.16</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run nginx</span></span><br><span class="line">kubectl run ngx --image=nginx:alpine</span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"><span class="comment"># NAME   READY   STATUS    RESTARTS   AGE   IP          NODE      NOMINATED NODE   READINESS GATES</span></span><br><span class="line"><span class="comment"># ngx    1/1     Running   0          52m   10.10.1.2   woker01   &lt;none&gt;           &lt;none&gt;</span></span><br></pre></td></tr></table></figure><h2 id="18-Deployment-部署应用"><a href="#18-Deployment-部署应用" class="headerlink" title="18 Deployment 部署应用"></a>18 Deployment 部署应用</h2><p>“单一职责”和“对象组合”。既然 Pod 管理不了自己，那么我们就再创建一个新的对象，由它来管理 Pod，采用和 Job&#x2F;CronJob 一样的形式——“对象套对象”。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl api-resources</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> out=<span class="string">&quot;--dry-run=client -o yaml&quot;</span></span><br><span class="line">kubectl create deploy ngx-dep --image=nginx:alpine <span class="variable">$out</span> &gt; ngx-dep.yml</span><br><span class="line">vim ngx-dep.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">ngx-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 定义了 Pod 的“期望数量”，Kubernetes 会自动维护 Pod 数量到正常水平</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># 定义了基于 labels 筛选 Pod 的规则，它必须与 template 里 Pod 的 labels 一致</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">ngx-dep</span></span><br><span class="line">  <span class="attr">strategy:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="comment"># 贴标签</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">ngx-dep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Deployment 实际上并不“持有”Pod 对象，它只是帮助 Pod 对象能够有足够的副本数量运行。</p><p>通过标签这种设计，Kubernetes 就解除了 Deployment 和模板里 Pod 的强绑定，把组合关系变成了“弱引用”。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replicas: 2</span></span><br><span class="line">kubectl apply -f ngx-dep.yml</span><br><span class="line"></span><br><span class="line">kubectl get deploy</span><br><span class="line"><span class="comment"># NAME      READY   UP-TO-DATE   AVAILABLE   AGE</span></span><br><span class="line"><span class="comment"># ngx-dep   2/2     2            2           57s</span></span><br><span class="line">kubectl get pod</span><br><span class="line"><span class="comment"># NAME                      READY   STATUS    RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-96scb   1/1     Running   0          3m20s</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-qnzbh   1/1     Running   0          3m20s</span></span><br></pre></td></tr></table></figure><ul><li>READY：运行的 Pod 数量，当前数量&#x2F;期望数量。</li><li>UP-TO-DATE：当前已经更新到最新状态的 Pod 数量。</li><li>AVAILABLE：不仅要求已经运行，还必须是健康状态，能够正常对外提供服务，它才是我们最关心的 Deployment 指标。</li><li>AGE：从创建到现在所经过的时间。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试自启恢复</span></span><br><span class="line">kubectl delete pod ngx-dep-bfbb5f64b-qnzbh</span><br><span class="line">kubectl get pod</span><br><span class="line"><span class="comment"># NAME                      READY   STATUS    RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-7n724   1/1     Running   0          33s</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-96scb   1/1     Running   0          4m52s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试伸缩</span></span><br><span class="line">kubectl scale --replicas=5 deploy ngx-dep</span><br><span class="line">kubectl get pod</span><br><span class="line"><span class="comment"># NAME                      READY   STATUS    RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-7n724   1/1     Running   0          77s</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-7xhbs   1/1     Running   0          7s</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-96scb   1/1     Running   0          5m36s</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-97qp5   1/1     Running   0          7s</span></span><br><span class="line"><span class="comment"># ngx-dep-bfbb5f64b-vjn4q   1/1     Running   0          7s</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筛选标签 ==、!=、in、notin</span></span><br><span class="line">kubectl get pod -l app=nginx</span><br><span class="line">kubectl get pod -l <span class="string">&#x27;app in (ngx, nginx, ngx-dep)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="19-DaemonSet-看门狗"><a href="#19-DaemonSet-看门狗" class="headerlink" title="19 DaemonSet 看门狗"></a>19 DaemonSet 看门狗</h2><p>在 Deployment 看来，Pod 的运行环境与功能是无关的，只要 Pod 的数量足够，应用程序应该会正常工作。</p><p>有些场景下，要在集群里的每个节点上都运行 Pod，也就是说 Pod 的数量与节点数量保持同步。防止在集群里漂移。</p><p>DaemonSet 的目标是在集群的每个节点上运行且仅运行一个 Pod。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl api-resources</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export out=&quot;--dry-run=client -o yaml&quot;</span></span><br><span class="line"><span class="comment"># kubectl create deploy redis-ds --image=redis:5-alpine $out</span></span><br><span class="line"><span class="comment"># kind modify DaemonSet, delete spec.replicas</span></span><br><span class="line"><span class="comment"># https://kubernetes.io/zh-cn/docs/concepts/workloads/controllers/daemonset/</span></span><br><span class="line"><span class="comment"># vim redis-ds.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-ds</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-ds</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 和 deplayment 比没有 replicas</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-ds</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis-ds</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:5-alpine</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f redis-ds.yml</span><br><span class="line">kubectl get ds</span><br><span class="line"><span class="comment"># NAME       DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span></span><br><span class="line"><span class="comment"># redis-ds   2         2         2       2            2           &lt;none&gt;          30m</span></span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"><span class="comment"># 两个 worker 的场景</span></span><br><span class="line"><span class="comment"># NAME                      READY   STATUS    RESTARTS   AGE   IP           NODE      NOMINATED NODE   READINESS GATES</span></span><br><span class="line"><span class="comment"># redis-ds-9r96k            1/1     Running   0          2m52s   10.10.3.2    woker02   &lt;none&gt;           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># redis-ds-hdl28            1/1     Running   0          21m     10.10.1.11   woker01   &lt;none&gt;           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># Master 节点却被排除在外了</span></span><br></pre></td></tr></table></figure><p>污点（taint）作用也是给节点“贴标签”。容忍度（toleration）Pod 能否“容忍”污点。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe node master</span><br><span class="line"><span class="comment"># Taints:             node-role.kubernetes.io/master:NoSchedule</span></span><br><span class="line"><span class="comment"># 污点会拒绝 Pod 调度到本节点上运行</span></span><br><span class="line">kubectl describe node woker01</span><br><span class="line"><span class="comment"># Taints:             &lt;none&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - 出掉 master 污点</span></span><br><span class="line">kubectl taint node master node-role.kubernetes.io/master:NoSchedule-</span><br><span class="line"><span class="comment"># NAME       DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span></span><br><span class="line"><span class="comment"># redis-ds   3         3         3       3            3           &lt;none&gt;          31m</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pod 添加 tolerations</span></span><br><span class="line"><span class="comment"># kubectl explain ds.spec.template.spec.tolerations</span></span><br><span class="line"><span class="comment"># vim redis-ds-t.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-ds-t</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-ds-t</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 和 deplayment 比没有 replicas</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redis-ds-t</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">redis-ds-t</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">redis:5-alpine</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">      <span class="comment"># 容忍 node-role.kubernetes.io/master</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">Exists</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f redis-ds-t.yml</span><br><span class="line">kubectl get ds</span><br><span class="line"><span class="comment"># NAME         DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span></span><br><span class="line"><span class="comment"># redis-ds     2         2         2       2            2           &lt;none&gt;          41m</span></span><br><span class="line"><span class="comment"># redis-ds-t   3         3         3       3            3           &lt;none&gt;          6s</span></span><br><span class="line"><span class="comment"># 差别在 master</span></span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"><span class="comment"># NAME                      READY   STATUS    RESTARTS   AGE   IP           NODE      NOMINATED NODE   READINESS GATES</span></span><br><span class="line"><span class="comment"># redis-ds-9r96k            1/1     Running   0          23m   10.10.3.2    woker02   &lt;none&gt;           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># redis-ds-hdl28            1/1     Running   0          42m   10.10.1.11   woker01   &lt;none&gt;           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># redis-ds-t-4mptv          1/1     Running   0          80s   10.10.3.4    woker02   &lt;none&gt;           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># redis-ds-t-dpcl8          1/1     Running   0          80s   10.10.1.12   woker01   &lt;none&gt;           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># redis-ds-t-kdjmn          1/1     Running   0          80s   10.10.0.6    master    &lt;none&gt;           &lt;none&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/taint-and-toleration/">https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/taint-and-toleration/</a></p><p>静态 Pod：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ll -a /etc/kubernetes/manifests</span><br><span class="line"><span class="comment"># -rw------- 1 root root 2274 Feb 22 12:47 etcd.yaml</span></span><br><span class="line"><span class="comment"># -rw------- 1 root root 3358 Feb 22 12:47 kube-apiserver.yaml</span></span><br><span class="line"><span class="comment"># -rw------- 1 root root 2878 Feb 22 12:47 kube-controller-manager.yaml</span></span><br><span class="line"><span class="comment"># -rw------- 1 root root 1465 Feb 22 12:47 kube-scheduler.yaml</span></span><br></pre></td></tr></table></figure><p>Kubernetes 的 4 个核心组件 apiserver、etcd、scheduler、controller-manager 原来都以静态 Pod 的形式存在的，这也是为什么它们能够先于 Kubernetes 集群启动的原因。</p><p>kubelet 会定期检查目录里的文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flannel 就是一个 DaemonSet</span></span><br><span class="line">kubectl get ns</span><br><span class="line">kubectl get ds -n kube-flannel</span><br><span class="line"><span class="comment"># NAME              DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span></span><br><span class="line"><span class="comment"># kube-flannel-ds   3         3         3       3            3           &lt;none&gt;          3h54m</span></span><br></pre></td></tr></table></figure><h2 id="20-Service-服务发现"><a href="#20-Service-服务发现" class="headerlink" title="20 Service 服务发现"></a>20 Service 服务发现</h2><p>由 kube-proxy 控制的四层负载均衡，在 TCP&#x2F;IP 协议栈上转发流量。</p><p>Pod 的生命周期很短暂，会不停地创建销毁，所以就需要用 Service 来实现负载均衡，它由 Kubernetes 分配固定的 IP 地址，能够屏蔽后端的 Pod 变化。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> out=<span class="string">&quot;--dry-run=client -o yaml&quot;</span></span><br><span class="line">kubectl expose deploy ngx-dep --port=80 --target-port=80 <span class="variable">$ou</span></span><br></pre></td></tr></table></figure><img width="600" alt="image" src="https://user-images.githubusercontent.com/9289792/220598245-da0f7319-8c28-4c08-b003-1dd209af1ee6.png"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim ngx-svc.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">ngx-dep</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx-conf</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">default.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    server &#123;</span></span><br><span class="line"><span class="string">      listen 80;</span></span><br><span class="line"><span class="string">      location / &#123;</span></span><br><span class="line"><span class="string">        default_type text/plain;</span></span><br><span class="line"><span class="string">        return 200</span></span><br><span class="line"><span class="string">          &#x27;srv : $server_addr:$server_port\nhost: $hostname\nuri : $request_method $host $request_uri\ndate: $time_iso8601\n&#x27;;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">ngx-dep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">ngx-dep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ngx-conf-vol</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">ngx-conf</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/nginx/conf.d</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">ngx-conf-vol</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ngx-svc.yml</span><br><span class="line">kubectl get svc</span><br><span class="line"><span class="comment"># NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span></span><br><span class="line"><span class="comment"># kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP   5h10m</span></span><br><span class="line"><span class="comment"># ngx-svc      ClusterIP   10.109.131.132   &lt;none&gt;        80/TCP    35s</span></span><br><span class="line"><span class="comment"># 虚地址 10.109.131.132</span></span><br><span class="line">kubectl describe svc ngx-svc</span><br><span class="line"><span class="comment"># Name:              ngx-svc</span></span><br><span class="line"><span class="comment"># Namespace:         default</span></span><br><span class="line"><span class="comment"># Labels:            &lt;none&gt;</span></span><br><span class="line"><span class="comment"># Annotations:       &lt;none&gt;</span></span><br><span class="line"><span class="comment"># Selector:          app=ngx-dep</span></span><br><span class="line"><span class="comment"># Type:              ClusterIP</span></span><br><span class="line"><span class="comment"># IP Family Policy:  SingleStack</span></span><br><span class="line"><span class="comment"># IP Families:       IPv4</span></span><br><span class="line"><span class="comment"># IP:                10.109.131.132</span></span><br><span class="line"><span class="comment"># IPs:               10.109.131.132</span></span><br><span class="line"><span class="comment"># Port:              &lt;unset&gt;  80/TCP</span></span><br><span class="line"><span class="comment"># TargetPort:        80/TCP</span></span><br><span class="line"><span class="comment"># Endpoints:         10.10.1.13:80,10.10.3.5:80</span></span><br><span class="line"><span class="comment"># Session Affinity:  None</span></span><br><span class="line"><span class="comment"># Events:            &lt;none&gt;</span></span><br><span class="line">kubectl get pod -o wide</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE    IP           NODE</span><br><span class="line">ngx-dep-6796688696-cwm8f   1/1     Running   0          2m4s   10.10.3.5    woker02</span><br><span class="line">ngx-dep-6796688696-khjnv   1/1     Running   0          2m2s   10.10.1.13   woker01</span><br><span class="line"><span class="comment"># same Endpoints</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 Service、 Pod 的 IP 地址都是 Kubernetes 集群的内部网段</span></span><br><span class="line"><span class="comment">#   所以我们需要用 kubectl exec 进入到 Pod 内部</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it ngx-dep-6796688696-cwm8f -- sh</span><br><span class="line">curl 10.109.131.132</span><br><span class="line"><span class="comment"># srv : 10.10.3.5:80</span></span><br><span class="line"><span class="comment"># host: ngx-dep-6796688696-cwm8f</span></span><br><span class="line"><span class="comment"># uri : GET 10.109.131.132 /</span></span><br><span class="line"><span class="comment"># date: 2023-02-22T10:09:49+00:00</span></span><br><span class="line">curl 10.109.131.132</span><br><span class="line"><span class="comment"># srv : 10.10.1.13:80</span></span><br><span class="line"><span class="comment"># host: ngx-dep-6796688696-khjnv</span></span><br><span class="line"><span class="comment"># uri : GET 10.109.131.132 /</span></span><br><span class="line"><span class="comment"># date: 2023-02-22T10:09:50+00:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试恢复</span></span><br><span class="line">kubectl delete pod ngx-dep-6796688696-khjnv</span><br><span class="line">kubectl describe svc ngx-svc</span><br><span class="line"><span class="comment"># Endpoints:         10.10.1.14:80,10.10.3.5:80</span></span><br><span class="line"><span class="comment"># 之前是 10.10.1.13:80,10.10.3.5:80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试扩容</span></span><br><span class="line">kubectl scale --replicas=5 deploy ngx-dep</span><br><span class="line">kubectl describe svc ngx-svc</span><br><span class="line"><span class="comment"># Endpoints:         10.10.1.14:80,10.10.1.15:80,10.10.3.5:80 + 2 more...</span></span><br></pre></td></tr></table></figure><p>Service 对象的域名完全形式是 <code>对象.名字空间.svc.cluster.local</code>，但很多时候也可以省略后面的部分，直接写 <code>对象.名字空间</code> 甚至 <code>对象名</code> 就足够了，默认会使用对象所在的名字空间（比如这里就是 default）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Name:              ngx-svc</span></span><br><span class="line"><span class="comment"># Namespace:         default</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it ngx-dep-6796688696-cwm8f -- sh</span><br><span class="line">curl ngx-svc</span><br><span class="line"><span class="comment"># srv : 10.10.3.5:80</span></span><br><span class="line"><span class="comment"># host: ngx-dep-6796688696-cwm8f</span></span><br><span class="line"><span class="comment"># uri : GET ngx-svc /</span></span><br><span class="line"><span class="comment"># date: 2023-02-22T10:19:25+00:00</span></span><br><span class="line">curl ngx-svc.default</span><br><span class="line"><span class="comment"># srv : 10.10.3.6:80</span></span><br><span class="line"><span class="comment"># host: ngx-dep-6796688696-lpcfs</span></span><br><span class="line"><span class="comment"># uri : GET ngx-svc.default /</span></span><br><span class="line"><span class="comment"># date: 2023-02-22T10:19:41+00:00</span></span><br><span class="line">curl ngx-svc.default.svc.cluster.local</span><br><span class="line"><span class="comment"># srv : 10.10.3.5:80</span></span><br><span class="line"><span class="comment"># host: ngx-dep-6796688696-cwm8f</span></span><br><span class="line"><span class="comment"># uri : GET ngx-svc.default.svc.cluster.local /</span></span><br><span class="line"><span class="comment"># date: 2023-02-22T10:20:04+00:00</span></span><br></pre></td></tr></table></figure><p>Pod 分配了域名：<code>IP 地址.名字空间.pod.cluster.local</code> IP 地址 . 改成 -。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl explain svc.spec.type</span></span><br><span class="line"><span class="comment"># vim ngx-svc.yml</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ngx-svc.yml</span><br><span class="line">kubectl get svc</span><br><span class="line"><span class="comment"># NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span></span><br><span class="line"><span class="comment"># kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP        5h56m</span></span><br><span class="line"><span class="comment"># ngx-svc      NodePort    10.109.131.132   &lt;none&gt;        80:30916/TCP   46m</span></span><br><span class="line"><span class="comment"># Service 的默认类型是“ClusterIP”，只能在集群内部访问，</span></span><br><span class="line"><span class="comment">#   如果改成“NodePort”，就会在节点上开启一个随机端口号，让外界也能够访问内部的服务。</span></span><br><span class="line">curl localhost:30916</span><br><span class="line"><span class="comment"># srv : 10.10.1.15:80</span></span><br><span class="line"><span class="comment"># host: ngx-dep-6796688696-l6skl</span></span><br><span class="line"><span class="comment"># uri : GET localhost /</span></span><br><span class="line"><span class="comment"># date: 2023-02-22T10:48:32+00:00</span></span><br></pre></td></tr></table></figure><img width="600" alt="image" src="https://user-images.githubusercontent.com/9289792/220598107-2899f665-3977-4e19-894d-bd273046fbae.png"><h2 id="21-Ingress-流量总管"><a href="#21-Ingress-流量总管" class="headerlink" title="21 Ingress 流量总管"></a>21 Ingress 流量总管</h2><p>Service 本身是没有服务能力的，它只是一些 iptables 规则，真正配置、应用这些规则的实际上是节点里的 kube-proxy 组件。</p><p>Ingress 也只是一些 HTTP 路由规则的集合，相当于一份静态的描述文件，真正要把这些规则在集群里实施运行，还需要有另外一个东西，这就是 Ingress Controller，它的作用就相当于 Service 的 kube-proxy，能够读取、应用 Ingress 规则，处理、调度流量。</p><p>Ingress Class 是插在 Ingress 和 Ingress Controller 中间，作为流量规则和控制器的协调人，解除了 Ingress 和 Ingress Controller 的强绑定关系。</p><p>Kubernetes 用户可以转向管理 Ingress Class，用它来定义不同的业务逻辑分组，简化 Ingress 规则的复杂度。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> out=<span class="string">&quot;--dry-run=client -o yaml&quot;</span></span><br><span class="line">kubectl create ing ngx-ing --rule=<span class="string">&quot;ngx.test/=ngx-svc:80&quot;</span> --class=ngx-ink <span class="variable">$out</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim ingress.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx-ing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">ngx-ink</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">ngx.test</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="comment"># 路径的匹配方式</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">ngx-svc</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="comment"># 精确匹配（Exact）或前缀匹配（Prefix）</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Exact</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx-ink</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">controller:</span> <span class="string">nginx.org/ingress-controller</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ingress.yml</span><br><span class="line"><span class="comment"># NAME      CONTROLLER                     PARAMETERS   AGE</span></span><br><span class="line"><span class="comment"># ngx-ink   nginx.org/ingress-controller   &lt;none&gt;       15s</span></span><br><span class="line">kubectl get ing</span><br><span class="line"><span class="comment"># NAME      CLASS     HOSTS      ADDRESS   PORTS   AGE</span></span><br><span class="line"><span class="comment"># ngx-ing   ngx-ink   ngx.test             80      84s</span></span><br><span class="line">kubectl describe ing ngx-ing</span><br><span class="line"><span class="comment"># Name:             ngx-ing</span></span><br><span class="line"><span class="comment"># Labels:           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># Namespace:        default</span></span><br><span class="line"><span class="comment"># Address:</span></span><br><span class="line"><span class="comment"># Default backend:  default-http-backend:80 (&lt;error: endpoints &quot;default-http-backend&quot; not found&gt;)</span></span><br><span class="line"><span class="comment"># Rules:</span></span><br><span class="line"><span class="comment">#   Host        Path  Backends</span></span><br><span class="line"><span class="comment">#   ----        ----  --------</span></span><br><span class="line"><span class="comment">#   ngx.test</span></span><br><span class="line"><span class="comment">#               /   ngx-svc:80 (10.10.1.14:80,10.10.1.15:80)</span></span><br><span class="line"><span class="comment"># Annotations:  &lt;none&gt;</span></span><br><span class="line"><span class="comment"># Events:       &lt;none&gt;</span></span><br></pre></td></tr></table></figure><p>在 Kubernetes 里使用 Ingress Controller：</p><p><a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/">https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nginxinc/kubernetes-ingress.git --branch v3.0.2</span><br><span class="line"><span class="built_in">cd</span> kubernetes-ingress/deployments</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure RBAC</span></span><br><span class="line"><span class="comment"># 为Ingress控制器创建一个命名空间和一个服务账户</span></span><br><span class="line">kubectl apply -f common/ns-and-sa.yaml</span><br><span class="line"><span class="comment"># 为服务账户创建一个集群角色和集群角色绑定</span></span><br><span class="line">kubectl apply -f rbac/rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Common Resources</span></span><br><span class="line"><span class="comment"># 为NGINX的默认服务器创建一个带有TLS证书和密钥的秘密</span></span><br><span class="line">kubectl apply -f common/default-server-secret.yaml</span><br><span class="line"><span class="comment"># 创建一个 config map，用于定制NGINX配置。</span></span><br><span class="line">kubectl apply -f common/nginx-config.yaml</span><br><span class="line"><span class="comment"># 创建一个IngressClass资源</span></span><br><span class="line">kubectl apply -f common/ingress-class.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Custom Resources</span></span><br><span class="line"><span class="comment"># kubectl apply -f common/crds/</span></span><br><span class="line">vim deployment/nginx-ingress.yaml</span><br><span class="line"><span class="comment"># args add:</span></span><br><span class="line"><span class="comment"># -enable-custom-resources=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the Ingress Controller</span></span><br><span class="line">kubectl apply -f deployment/nginx-ingress.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># check</span></span><br><span class="line">kubectl get pods --namespace=nginx-ingress</span><br><span class="line"><span class="comment"># NAME                             READY   STATUS    RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># nginx-ingress-5f98f8f5f9-nnkv7   1/1     Running   0          3m14s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get Access to the Ingress Controller</span></span><br><span class="line">kubectl create -f service/nodeport.yaml</span><br><span class="line">kubectl get service -n nginx-ingress</span><br><span class="line"><span class="comment"># NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span></span><br><span class="line"><span class="comment"># nginx-ingress   NodePort   10.111.210.52   &lt;none&gt;        80:31754/TCP,443:30188/TCP   5s</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># debug</span></span><br><span class="line">kubectl get IngressClass</span><br><span class="line">kubectl get ing -n nginx-ingress</span><br><span class="line">kubectl get deploy -n nginx-ingress</span><br><span class="line">kubectl get pod -n nginx-ingress -o wide</span><br><span class="line"></span><br><span class="line">kubectl describe service -n nginx-ingress -o wide</span><br><span class="line">kubectl describe pod -n nginx-ingress</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令kubectl port-forward，它可以直接把本地的端口映射到 Kubernetes 集群的某个 Pod 里</span></span><br><span class="line">kubectl port-forward -n nginx-ingress nginx-ingress-5f98f8f5f9-nnkv7 8080:80 &amp;</span><br></pre></td></tr></table></figure><img width="900" alt="image" src="https://user-images.githubusercontent.com/9289792/221135639-3b31c1be-f624-4abf-8851-cff396e9be45.png"><h2 id="22-玩转-Kubernetes-2"><a href="#22-玩转-Kubernetes-2" class="headerlink" title="22 玩转 Kubernetes 2"></a>22 玩转 Kubernetes 2</h2><p>Kubernetes 部署 WordPress：</p><img width="900" alt="image" src="https://user-images.githubusercontent.com/9289792/221116386-7f08aa66-941c-42ac-a0c3-bb8a111fc42d.png"><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim wp-maria.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">maria-cm</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">DATABASE:</span> <span class="string">&quot;db&quot;</span></span><br><span class="line">  <span class="attr">USER:</span> <span class="string">&quot;wp&quot;</span></span><br><span class="line">  <span class="attr">PASSWORD:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">  <span class="attr">ROOT_PASSWORD:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">maria-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">maria-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">maria-dep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">maria-dep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mariadb:10</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">mariadb</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">          <span class="attr">envFrom:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">prefix:</span> <span class="string">&quot;MARIADB_&quot;</span></span><br><span class="line">              <span class="attr">configMapRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">maria-cm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">maria-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">maria-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">maria-dep</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f wp-maria.yml</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim wp-app.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-cm</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># DNS HOST</span></span><br><span class="line">  <span class="attr">HOST:</span> <span class="string">&quot;maria-svc&quot;</span></span><br><span class="line">  <span class="attr">USER:</span> <span class="string">&quot;wp&quot;</span></span><br><span class="line">  <span class="attr">PASSWORD:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">  <span class="attr">NAME:</span> <span class="string">&quot;db&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wp-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">wp-dep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">wp-dep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">wordpress:5</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">wordpress</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">envFrom:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">prefix:</span> <span class="string">&quot;WORDPRESS_DB_&quot;</span></span><br><span class="line">              <span class="attr">configMapRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">wp-cm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wp-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http80</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="comment"># 指定端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30088</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wp-dep</span></span><br><span class="line">  <span class="comment"># NodePort</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f wp-app.yml</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line">kubectl port-forward service/wp-svc 80:80 --address 0.0.0.0</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim wp-ing.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-ink</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">controller:</span> <span class="string">nginx.org/ingress-controller</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># kubectl create ing wp-ing --rule=&quot;wp.test/=wp-svc:80&quot; --class=wp-ink $out</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-ing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">wp-ink</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">wp.test</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">wp-svc</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim wp-kic-dep.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-kic-dep</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">wp-kic-dep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">wp-kic-dep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># kubectl explain Deployment.spec.template.spec.serviceAccountName</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nginx-ingress</span></span><br><span class="line">      <span class="comment"># kubectl explain Deployment.spec.template.spec.hostNetwork</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx/nginx-ingress:3.0.2</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nginx-ingress</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness-port</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">9113</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/nginx-ready</span></span><br><span class="line">              <span class="attr">port:</span> <span class="string">readiness-port</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span> <span class="comment">#nginx</span></span><br><span class="line">            <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="comment"># 默认是 nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-ingress-class=wp-ink</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-enable-custom-resources=false</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-nginx-configmaps=$(POD_NAMESPACE)/nginx-config</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-kic-svc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nginx-ingress</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wp-kic-dep</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f wp-ing.yml -f wp-kic-dep.yml</span><br><span class="line"></span><br><span class="line">kubectl get ing</span><br><span class="line">kubectl get ingressclass</span><br><span class="line">kubectl get pod -n=nginx-ingress</span><br><span class="line">kubectl describe pod -n=nginx-ingress</span><br><span class="line">kubectl get deploy -n=nginx-ingress</span><br><span class="line">kubectl get svc -n=nginx-ingress</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在服务器上</span></span><br><span class="line">kubectl get pod -n=nginx-ingress -o=wide</span><br><span class="line"><span class="comment"># NAME                          READY   STATUS    RESTARTS   AGE   IP           NODE</span></span><br><span class="line"><span class="comment"># wp-kic-dep-68579bc688-d64zs   1/1     Running   0          10m   172.21.0.9   woker01</span></span><br><span class="line">curl 172.21.0.9 -H <span class="string">&quot;HOST: wp.test&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在服务器外</span></span><br><span class="line">kubectl port-forward service/wp-kic-svc -n=nginx-ingress 80:80 --address 0.0.0.0</span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line">[master ip] wp.test</span><br><span class="line"><span class="comment"># 游览器访问 wp.test</span></span><br></pre></td></tr></table></figure><img width="900" alt="image" src="https://user-images.githubusercontent.com/9289792/221134023-69087496-f390-4b6a-90ca-9e7dde86bfc1.png"><h2 id="23-中级篇实操总结"><a href="#23-中级篇实操总结" class="headerlink" title="23 中级篇实操总结"></a>23 中级篇实操总结</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DaemonSet 模板生成</span></span><br><span class="line">kubectl create deploy redis-ds --image=redis:5-alpine <span class="variable">$out</span> \</span><br><span class="line">  | sed <span class="string">&#x27;s/Deployment/DaemonSet/g&#x27;</span> - \</span><br><span class="line">  | sed -e <span class="string">&#x27;/replicas/d&#x27;</span> -</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/chronolaw/k8s_study">chronolaw&#x2F;k8s_study | GitHub</a></li><li><a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/">nginx-ingress-controller Installation with Manifests | nginx.com</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 入门实战 Part1</title>
      <link href="/2023/02/15/kubernetes-getting-started-part1/"/>
      <url>/2023/02/15/kubernetes-getting-started-part1/</url>
      
        <content type="html"><![CDATA[<h2 id="01-初识-Docker"><a href="#01-初识-Docker" class="headerlink" title="01 初识 Docker"></a>01 初识 Docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y docker.io</span><br><span class="line">service docker start</span><br><span class="line">usermod -aG docker <span class="variable">$&#123;USER&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker ps</span><br><span class="line">docker pull busybox</span><br><span class="line"><span class="comment"># show all images</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></p><h2 id="02-被隔离的进程"><a href="#02-被隔离的进程" class="headerlink" title="02 被隔离的进程"></a>02 被隔离的进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull alpine</span><br><span class="line">docker run -it alpine sh</span><br><span class="line"><span class="built_in">cat</span> /etc/os-release</span><br></pre></td></tr></table></figure><p>隔离资源，保证系统安全，提高资源的利用率。</p><p>资源隔离提供了三种技术：namespace、 cgroup、chroot（pivot_rott）。</p><h2 id="03-容器化的应用"><a href="#03-容器化的应用" class="headerlink" title="03 容器化的应用"></a>03 容器化的应用</h2><p>Build once, Run anywhere.</p><p>应用程序不再直接和操作系统打交道，而是封装成镜像，再交给容器环境去运行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove image</span></span><br><span class="line">docker rmi busybox</span><br><span class="line"><span class="comment"># 开启一个交互式操作的 Shell</span></span><br><span class="line">docker run -it busybox</span><br><span class="line"><span class="comment"># 在后台运行</span></span><br><span class="line">docker run -d busybox</span><br><span class="line"><span class="comment"># 为容器起一个名字</span></span><br><span class="line">docker run -d --name xxx busybox</span><br><span class="line"><span class="comment"># 不保存容器，只要运行完毕就自动清除</span></span><br><span class="line">docker run --<span class="built_in">rm</span> busybox <span class="built_in">echo</span> <span class="string">&quot;hello docker&quot;</span></span><br><span class="line"></span><br><span class="line">docker stop xxx</span><br><span class="line"><span class="comment"># remove container</span></span><br><span class="line">docker <span class="built_in">rm</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># show all container</span></span><br><span class="line">docker ps -a</span><br><span class="line">docker <span class="built_in">exec</span> xxx <span class="built_in">echo</span> <span class="string">&quot;hello docker&quot;</span></span><br></pre></td></tr></table></figure><h2 id="05-镜像仓库"><a href="#05-镜像仓库" class="headerlink" title="05 镜像仓库"></a>05 镜像仓库</h2><ul><li><a href="https://github.com/docker-library/official-images">https://github.com/docker-library/official-images</a></li><li><a href="https://hub.docker.com/u/library">https://hub.docker.com/u/library</a></li></ul><p><code>用户名/应用名:标签</code> 官方镜像用户名是 <code>library</code>。</p><ul><li>slim 经过精简的</li><li>fat 包含了较多的辅助工具</li><li>rc 候选版本，release candidate</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t</span><br><span class="line">docker tag ngx-app chronolaw/ngx-app:1.0</span><br><span class="line">docker push chronolaw/ngx-app:1.0</span><br></pre></td></tr></table></figure><p>save 和 load 这两个镜像归档命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save ngx-app:latest -o ngx.tar</span><br><span class="line">docker load -i ngx.tar</span><br></pre></td></tr></table></figure><h2 id="06-打破次元壁"><a href="#06-打破次元壁" class="headerlink" title="06 打破次元壁"></a>06 打破次元壁</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --<span class="built_in">rm</span> --name ubu phusion/baseimage:jammy-1.0.1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; a.txt</span><br><span class="line"><span class="comment"># a.txt 拷贝到容器 tmp</span></span><br><span class="line">docker <span class="built_in">cp</span> a.txt ubu:/tmp</span><br><span class="line">docker <span class="built_in">exec</span> -it ubu bash</span><br><span class="line"><span class="comment"># 考出容器</span></span><br><span class="line">docker <span class="built_in">cp</span> ubu:/tmp/a.txt ./b.txt</span><br></pre></td></tr></table></figure><p>容器和主机共享本地目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --mount</span></span><br><span class="line"><span class="comment"># -v /tmp:/tmp:ro 只读</span></span><br><span class="line">docker run -d --<span class="built_in">rm</span> -v /tmp:/tmp --name ubu phusion/baseimage:jammy-1.0.1</span><br><span class="line">docker <span class="built_in">exec</span> -it ubu bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull python:alpine</span><br><span class="line">docker run -it --<span class="built_in">rm</span> -v `<span class="built_in">pwd</span>`:/tmp python:alpine sh</span><br></pre></td></tr></table></figure><p>网络模式：<code>null</code> <code>host</code> <code>bridge</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># host</span></span><br><span class="line">docker run -d --<span class="built_in">rm</span> --net=host --name=ng nginx:alpine</span><br><span class="line">docker <span class="built_in">exec</span> ng ip addr</span><br><span class="line">docker inspect ng | grep IPAddress</span><br><span class="line">docker stop ng</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bridge 默认模式</span></span><br><span class="line">docker run -d --<span class="built_in">rm</span> --name=ng nginx:alpine</span><br><span class="line">docker inspect ng | grep IPAddress</span><br><span class="line"><span class="comment"># &quot;IPAddress&quot;: &quot;172.17.0.3&quot;</span></span><br><span class="line">docker run -d --<span class="built_in">rm</span> --name=rd redis</span><br><span class="line">docker inspect rd | grep IPAddress</span><br><span class="line"><span class="comment"># &quot;IPAddress&quot;: &quot;172.17.0.4&quot;</span></span><br></pre></td></tr></table></figure><p>分配服务端口号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --<span class="built_in">rm</span> nginx:alpine</span><br><span class="line">docker run -d -p 8080:80 --<span class="built_in">rm</span> nginx:alpine</span><br><span class="line"><span class="comment"># 分别“映射”到了两个容器里的 80 端口</span></span><br></pre></td></tr></table></figure><h2 id="07-玩转-Docker"><a href="#07-玩转-Docker" class="headerlink" title="07 玩转 Docker"></a>07 玩转 Docker</h2><p>Container Image Registry</p><p><a href="https://registry.hub.docker.com/_/registry/">https://registry.hub.docker.com/_/registry/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 registry</span><br><span class="line"><span class="comment"># 使用 docker tag 命令给镜像打标签再上传</span></span><br><span class="line">docker tag nginx:alpine 127.0.0.1:5000/nginx:alpine</span><br><span class="line">docker push 127.0.0.1:5000/nginx:alpine</span><br><span class="line"><span class="comment"># 本次重新拉取测试</span></span><br><span class="line">docker rmi 127.0.0.1:5000/nginx:alpine</span><br><span class="line">docker pull 127.0.0.1:5000/nginx:alpine</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/registry/spec/api/">https://docs.docker.com/registry/spec/api/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Listing Repositories</span></span><br><span class="line">curl 127.1:5000/v2/_catalog</span><br><span class="line"><span class="comment"># &#123;&quot;repositories&quot;:[&quot;nginx&quot;]&#125;</span></span><br><span class="line">curl 127.1:5000/v2/nginx/tags/list</span><br><span class="line"><span class="comment"># &#123;&quot;name&quot;:&quot;nginx&quot;,&quot;tags&quot;:[&quot;alpine&quot;]&#125;</span></span><br></pre></td></tr></table></figure><p>registry 默认会把镜像存储在 Docker 内部目录 <code>/var/lib/registry</code>。</p><p>搭建 WordPress：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --<span class="built_in">rm</span> \</span><br><span class="line">    --<span class="built_in">env</span> MARIADB_DATABASE=db \</span><br><span class="line">    --<span class="built_in">env</span> MARIADB_USER=wp \</span><br><span class="line">    --<span class="built_in">env</span> MARIADB_PASSWORD=123 \</span><br><span class="line">    --<span class="built_in">env</span> MARIADB_ROOT_PASSWORD=123 \</span><br><span class="line">    --name mariadb \</span><br><span class="line">    mariadb:10</span><br><span class="line"><span class="comment"># 进入 mariadb</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mariadb mysql -uwp -p123</span><br><span class="line"><span class="comment"># show mariadb ip</span></span><br><span class="line">docker inspect mariadb | grep IPAddress</span><br><span class="line"><span class="comment"># &quot;IPAddress&quot;: &quot;172.17.0.2&quot;</span></span><br><span class="line"></span><br><span class="line">docker run -d --<span class="built_in">rm</span> \</span><br><span class="line">    --<span class="built_in">env</span> WORDPRESS_DB_HOST=172.17.0.2 \</span><br><span class="line">    --<span class="built_in">env</span> WORDPRESS_DB_USER=wp \</span><br><span class="line">    --<span class="built_in">env</span> WORDPRESS_DB_PASSWORD=123 \</span><br><span class="line">    --<span class="built_in">env</span> WORDPRESS_DB_NAME=db \</span><br><span class="line">    --name wp \</span><br><span class="line">    wordpress:5</span><br><span class="line">docker inspect wp | grep IPAddress</span><br><span class="line"><span class="comment"># &quot;IPAddress&quot;: &quot;172.17.0.4&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim wp.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  default_type text/html;</span><br><span class="line">  location / &#123;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      <span class="comment"># wordpress server</span></span><br><span class="line">      proxy_pass http://172.17.0.4;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 感觉可以直接用 wordpress 的 80，无需再代理一次</span></span><br><span class="line">docker run -d --<span class="built_in">rm</span> \</span><br><span class="line">    -p 80:80 \</span><br><span class="line">    -v `<span class="built_in">pwd</span>`/wp.conf:/etc/nginx/conf.d/default.conf \</span><br><span class="line">    --name ng \</span><br><span class="line">    nginx:alpine</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show logs</span></span><br><span class="line">docker logs mariadb</span><br><span class="line">docker logs ng</span><br><span class="line">docker logs wp</span><br></pre></td></tr></table></figure><h2 id="08-入门篇总结"><a href="#08-入门篇总结" class="headerlink" title="08 入门篇总结"></a>08 入门篇总结</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull alpine</span><br><span class="line">docker run -it alpine sh</span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="comment"># Linux de3852b4ec42 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64 Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Darwin V_YFANZHAO-MB1 19.6.0 Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64 x86_64</span></span><br></pre></td></tr></table></figure><p>构建自己的镜像：</p><p><a href="https://github.com/chronolaw/k8s_study/blob/master/ch1/Dockerfile">https://github.com/chronolaw/k8s_study/blob/master/ch1/Dockerfile</a></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> IMAGE_BASE=<span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> IMAGE_TAG=<span class="string">&quot;1.21-alpine&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> $&#123;IMAGE_BASE&#125;:$&#123;IMAGE_TAG&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:/tmp</span><br><span class="line"><span class="keyword">ENV</span> DEBUG=OFF</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./default.conf /etc/nginx/conf.d/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /usr/share/nginx/html \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;hello nginx&quot;</span> &gt; a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8081</span> <span class="number">8082</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /etc/nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t ngx-app:1.0 .</span><br><span class="line">docker run -it --<span class="built_in">rm</span> ngx-app:1.0 sh</span><br><span class="line">docker save ngx-app:1.0 -o ngx.tar</span><br><span class="line">docker load -i ngx.tar</span><br></pre></td></tr></table></figure><h2 id="09-Kubernetes-环境"><a href="#09-Kubernetes-环境" class="headerlink" title="09 Kubernetes 环境"></a>09 Kubernetes 环境</h2><p>容器编排 Container Orchestration</p><p>Kubernetes 就是一个生产级别的容器编排平台和集群管理系统。</p><p><a href="https://minikube.sigs.k8s.io/docs/start/">https://minikube.sigs.k8s.io/docs/start/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minikube version</span><br><span class="line"><span class="comment"># minikube version: v1.29.0</span></span><br><span class="line"><span class="comment"># commit: ddac20b4b34a9c8c857fc602203b6ba2679794d3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统一实验环境</span></span><br><span class="line">minikube start --kubernetes-version=v1.23.3</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">minikube status</span><br><span class="line">minikube node list</span><br><span class="line"><span class="comment"># minikube 192.168.49.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录到这个节点上</span></span><br><span class="line">minikube ssh</span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="comment"># Linux minikube 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">ip add</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># minikube 管理 Kubernetes 集群环境</span></span><br><span class="line"><span class="comment"># kubectl 操作实际的 Kubernetes 功能</span></span><br><span class="line"><span class="comment"># install kubectl</span></span><br><span class="line">minikube kubectl</span><br><span class="line"></span><br><span class="line">minikube kubectl -- version</span><br><span class="line"><span class="built_in">alias</span> kubectl=<span class="string">&quot;minikube kubectl --&quot;</span></span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个镜像</span></span><br><span class="line">kubectl run ngx --image=nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># like docker ps</span></span><br><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><p><a href="https://kubernetes.io/zh/">https://kubernetes.io/zh/</a></p><h2 id="10-Kubernetes-工作机制"><a href="#10-Kubernetes-工作机制" class="headerlink" title="10 Kubernetes 工作机制"></a>10 Kubernetes 工作机制</h2><p>Kubernetes 采用了现今流行的“控制面 &#x2F; 数据面”（Control Plane &#x2F; Data Plane）架构，集群里的计算机被称为“节点”（Node），可以是实机也可以是虚机，少量的节点用作控制面来执行集群的管理维护工作，其他的大部分节点都被划归数据面，用来跑业务应用。Master 节点实现管理控制功能，Worker 节点运行具体业务。</p><img width="600" alt="image" src="https://user-images.githubusercontent.com/9289792/219293821-a4e1620a-c024-4edf-ba29-a5bc1f8d3f57.png"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"><span class="comment"># NAME       STATUS   ROLES                  AGE   VERSION</span></span><br><span class="line"><span class="comment"># minikube   Ready    control-plane,master   38m   v1.23.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 master Component pod</span></span><br><span class="line">kubectl get pod -n kube-system</span><br><span class="line"><span class="comment"># NAME                               READY   STATUS    RESTARTS        AGE</span></span><br><span class="line"><span class="comment"># coredns-65c54cc984-4pckd           1/1     Running   0               40m</span></span><br><span class="line"><span class="comment"># etcd-minikube                      1/1     Running   0               40m</span></span><br><span class="line"><span class="comment"># kube-apiserver-minikube            1/1     Running   0               40m</span></span><br><span class="line"><span class="comment"># kube-controller-manager-minikube   1/1     Running   0               40m</span></span><br><span class="line"><span class="comment"># kube-proxy-88wt2                   1/1     Running   0               40m</span></span><br><span class="line"><span class="comment"># kube-scheduler-minikube            1/1     Running   0               40m</span></span><br><span class="line"><span class="comment"># storage-provisioner                1/1     Running   3 (6m39s ago)   40m</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># worker node</span></span><br><span class="line">minikube ssh</span><br><span class="line"><span class="comment"># show kube-proxy</span></span><br><span class="line">docker ps |grep kube-proxy</span><br><span class="line"><span class="comment"># show kubelet, not exist docker</span></span><br><span class="line">ps -ef|grep kubelet</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show addons list</span></span><br><span class="line">minikube addons list</span><br><span class="line"></span><br><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><img width="600" alt="image" src="https://user-images.githubusercontent.com/9289792/219294564-12655273-044c-4d56-a99a-d6f6e7cf7525.png"><h2 id="11-YAML"><a href="#11-YAML" class="headerlink" title="11 YAML"></a>11 YAML</h2><p>YAML 是 JSON 的超集。</p><p>Shell 脚本和 Dockerfile 可以很好地描述“命令式”（Imperative）。“声明式”（Declarative）注重结果。</p><p>apiserver 采用了 HTTP 协议的 URL 资源理念，API 风格也用 RESTful，被称为是“API 对象”了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 kubectl api-service 支持的所有对象</span></span><br><span class="line">kubectl api-resources</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示出详细的命令执行过程</span></span><br><span class="line">kubectl get pod --v=9</span><br><span class="line"><span class="comment"># 自带的 API 文档 https://kubernetes.io/docs/reference/kubernetes-api/</span></span><br><span class="line">kubectl explain pod</span><br><span class="line">kubectl explain pod.metadata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令式</span></span><br><span class="line">kubectl run ngx --image=nginx:alpine</span><br><span class="line"><span class="comment"># 转换为 YAML 声名式</span></span><br><span class="line">kubectl run ngx --image=nginx:alpine --dry-run=client -o yaml &gt; ngx-pod.yml</span><br><span class="line">kubectl apply -f ngx-pod.yml</span><br><span class="line">kubectl delete -f ngx-pod.yml</span><br></pre></td></tr></table></figure><h2 id="12-Pod"><a href="#12-Pod" class="headerlink" title="12 Pod"></a>12 Pod</h2><p>为了解决这样多应用联合运行的问题，同时还要不破坏容器的隔离，就需要在容器外面再建立一个“收纳舱”。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">ngx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ngx</span></span><br><span class="line">      <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><img width="600" alt="image" src="https://user-images.githubusercontent.com/9289792/219309091-7436a44b-c0e4-4e8f-8dc1-7a208122ae7d.png"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ngx-pod.yml</span><br><span class="line">kubectl apply -f ngx-pod.yml</span><br><span class="line">kubectl logs ngx</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod ngx</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp file to pod</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;aaa&#x27;</span> &gt; a.txt</span><br><span class="line">kubectl <span class="built_in">cp</span> a.txt ngx:/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># exec need --</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it ngx -- sh</span><br></pre></td></tr></table></figure><h2 id="13-Job-CronJob-离线业务"><a href="#13-Job-CronJob-离线业务" class="headerlink" title="13 Job CronJob 离线业务"></a>13 Job CronJob 离线业务</h2><p>“单一职责”的意思是对象应该只专注于做好一件事情，不要贪大求全，保持足够小的粒度才更方便复用和管理。</p><p>“组合优于继承”的意思是应该尽量让对象在运行时产生联系，保持松耦合，而不要用硬编码的方式固定对象的关系。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create job echo-job --image=busybox --dry-run=client -o yaml &gt; job.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">echo-job</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">echo-job</span></span><br><span class="line">          <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">          <span class="comment"># 补充输出</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/echo&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f job.yml</span><br><span class="line">kubectl get job</span><br><span class="line"><span class="comment"># NAME       COMPLETIONS   DURATION   AGE</span></span><br><span class="line"><span class="comment"># echo-job   1/1           16s        33s</span></span><br><span class="line">kubectl get pod</span><br><span class="line"><span class="comment"># NAME             READY   STATUS      RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># echo-job-g2bf6   0/1     Completed   0          68s</span></span><br><span class="line">kubectl logs echo-job</span><br><span class="line"><span class="comment"># hello world</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sleep-job</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 设置 Pod 运行的超时时间</span></span><br><span class="line">  <span class="attr">activeDeadlineSeconds:</span> <span class="number">60</span></span><br><span class="line">  <span class="comment"># 设置 Pod 的失败重试次数</span></span><br><span class="line">  <span class="attr">backoffLimit:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Job 完成需要运行多少个 Pod，默认是 1</span></span><br><span class="line">  <span class="attr">completions:</span> <span class="number">4</span></span><br><span class="line">  <span class="comment"># 它与 completions 相关，表示允许并发运行的 Pod 数量，避免过多占用资源</span></span><br><span class="line">  <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">echo-job</span></span><br><span class="line">          <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">          <span class="comment"># 随机休眠</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">sleep</span> <span class="string">$(($RANDOM</span> <span class="string">%</span> <span class="number">10</span> <span class="string">+</span> <span class="number">1</span><span class="string">))</span> <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">done</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f sleep-job.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pod -w</span><br><span class="line"><span class="comment"># NAME              READY   STATUS      RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># sleep-job-92m4d   0/1     Completed   0          30s</span></span><br><span class="line"><span class="comment"># sleep-job-g8pmj   0/1     Completed   0          15s</span></span><br><span class="line"><span class="comment"># sleep-job-tsncl   0/1     Completed   0          30s</span></span><br><span class="line"><span class="comment"># sleep-job-x4qlp   0/1     Completed   0          15s</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cronjob</span></span><br><span class="line">kubectl create cj echo-cj --image=busybox --schedule=<span class="string">&quot;*/1 * * * *&quot;</span> --dry-run=client -o yaml &gt; echo-cj.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">echo-cj</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">echo-cj</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">echo-cj</span></span><br><span class="line">              <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">              <span class="comment"># 补充输出</span></span><br><span class="line">              <span class="attr">command:</span> [<span class="string">&quot;/bin/echo&quot;</span>]</span><br><span class="line">              <span class="attr">args:</span> [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f echo-cj.yaml</span><br><span class="line">kubectl get cj</span><br><span class="line"><span class="comment"># NAME      SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span></span><br><span class="line"><span class="comment"># echo-cj   */1 * * * *   False     1        5s              8s</span></span><br><span class="line">kubectl get pod</span><br><span class="line"><span class="comment"># NAME                     READY   STATUS      RESTARTS   AGE</span></span><br><span class="line"><span class="comment"># echo-cj-27942326-qng4j   0/1     Completed   0          93s</span></span><br><span class="line"><span class="comment"># echo-cj-27942327-vlrvs   0/1     Completed   0          33s</span></span><br></pre></td></tr></table></figure><h2 id="14-ConfigMap-Secret-管理配置信息"><a href="#14-ConfigMap-Secret-管理配置信息" class="headerlink" title="14 ConfigMap Secret 管理配置信息"></a>14 ConfigMap Secret 管理配置信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create cm info --from-literal=name=zhao --dry-run=client -o yaml &gt; cm.yml</span><br><span class="line">kubectl apply -f cm.yml</span><br><span class="line">kubectl get cm</span><br><span class="line">kubectl describe cm info</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic user --from-literal=name=root --dry-run=client -o yaml &gt; secret.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 去掉字符串里隐含的换行符</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;root&quot;</span> | <span class="built_in">base64</span></span><br><span class="line">kubectl apply -f secret.yml</span><br><span class="line">kubectl get secret</span><br><span class="line">kubectl describe secret user</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl explain pod.spec.containers.env.valueFrom</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">ngx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ngx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ngx</span></span><br><span class="line">      <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">info</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SNAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">name</span></span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f env-pod.yml</span><br><span class="line">kubectl <span class="built_in">exec</span> -it ngx -- sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$NAME</span> <span class="variable">$SNAME</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 Volume 的方式使用 ConfigMap/Secret</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">vol-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># Volume 属于 Pod 与 containers 同级</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-vol</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">info</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sec-vol</span></span><br><span class="line">      <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="comment"># 挂载到容器里的某个路径下</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp/cm-items</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cm-vol</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp/sec-items</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">sec-vol</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ngx</span></span><br><span class="line">      <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim vol-pod.yml</span><br><span class="line">kubectl apply -f vol-pod.yml</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl <span class="built_in">exec</span> -it vol-pod -- sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /tmp/cm-items/name</span><br><span class="line"><span class="built_in">cat</span> /tmp/sec-items/name</span><br><span class="line"><span class="comment"># ConfigMap 和 Secret 都变成了目录的形式，而它们里面的 Key-Value 变成了一个个的文件，而文件名就是 Key。</span></span><br></pre></td></tr></table></figure><h2 id="15-玩转-Kubernetes"><a href="#15-玩转-Kubernetes" class="headerlink" title="15 玩转 Kubernetes"></a>15 玩转 Kubernetes</h2><img width="600" alt="image" src="https://user-images.githubusercontent.com/9289792/219537942-31e778eb-888d-4331-8d65-03ae4095b003.png"><p>搭建 WordPress 环境：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim mariadb-pod.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">maria-cm</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">DATABASE:</span> <span class="string">&quot;db&quot;</span></span><br><span class="line">  <span class="attr">USER:</span> <span class="string">&quot;wp&quot;</span></span><br><span class="line">  <span class="attr">PASSWORD:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">  <span class="attr">ROOT_PASSWORD:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">maria-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">database</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">mariadb:10</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">maria</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">prefix:</span> <span class="string">&quot;MARIADB_&quot;</span></span><br><span class="line">          <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">maria-cm</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f mariadb-pod.yml</span><br><span class="line"><span class="comment"># 获取 IP 地址需要加上参数 -o wide</span></span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"><span class="comment"># NAME        READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES</span></span><br><span class="line"><span class="comment"># maria-pod   1/1     Running   0          64s   172.17.0.5   minikube   &lt;none&gt;           &lt;none&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim wp-pod.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-cm</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># MariaDB Pod 的 IP</span></span><br><span class="line">  <span class="attr">HOST:</span> <span class="string">&quot;172.17.0.5&quot;</span></span><br><span class="line">  <span class="attr">USER:</span> <span class="string">&quot;wp&quot;</span></span><br><span class="line">  <span class="attr">PASSWORD:</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">  <span class="attr">NAME:</span> <span class="string">&quot;db&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wp-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">website</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">wordpress:5</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">wp-pod</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">prefix:</span> <span class="string">&quot;WORDPRESS_DB_&quot;</span></span><br><span class="line">          <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">wp-cm</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f wp-pod.yml</span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"><span class="comment"># NAME        READY   STATUS    RESTARTS   AGE     IP           NODE       NOMINATED NODE   READINESS GATES</span></span><br><span class="line"><span class="comment"># maria-pod   1/1     Running   0          160m    172.17.0.5   minikube   &lt;none&gt;           &lt;none&gt;</span></span><br><span class="line"><span class="comment"># wp-pod      1/1     Running   0          2m47s   172.17.0.6   minikube   &lt;none&gt;           &lt;none&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地的 “8080” 映射到 WordPress Pod 的“80”</span></span><br><span class="line">kubectl port-forward wp-pod 8080:80 &amp;</span><br><span class="line"><span class="comment"># Forwarding from 127.0.0.1:8080 -&gt; 80</span></span><br><span class="line"><span class="comment"># Forwarding from [::1]:8080 -&gt; 80</span></span><br><span class="line"><span class="comment"># fg</span></span><br></pre></td></tr></table></figure><h2 id="16-初级篇总结"><a href="#16-初级篇总结" class="headerlink" title="16 初级篇总结"></a>16 初级篇总结</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minikube version</span><br><span class="line">minikube status</span><br><span class="line">minikube start --kubernetes-version=v1.23.3</span><br><span class="line">minikube node list</span><br><span class="line"></span><br><span class="line">kubectl version</span><br><span class="line">kubectl run ngx --image=nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># apiserver 等核心组件是在 kube-system 名字空间</span></span><br><span class="line">kubectl get pod -n kube-system</span><br><span class="line"></span><br><span class="line">kubectl api-resources</span><br><span class="line">kubectl explain pod.metadata</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> out=<span class="string">&quot;--dry-run=client -o yaml&quot;</span></span><br><span class="line">kubectl run ngx --image=nginx:alpine <span class="variable">$out</span> &gt; pod.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f ngx-pod.yml</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl logs ngx-pod</span><br><span class="line">kubectl <span class="built_in">exec</span> -it ngx-pod -- sh</span><br><span class="line">kubectl delete -f ngx-pod</span><br><span class="line"></span><br><span class="line">kubectl create job echo-job --image=busybox <span class="variable">$out</span></span><br><span class="line">kubectl apply -f job.yml</span><br><span class="line">kubectl get job</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl logs echo-job-l52l7</span><br><span class="line"></span><br><span class="line">kubectl create cj echo-cj --image=busybox --schedule=<span class="string">&quot;* * * * *&quot;</span> <span class="variable">$out</span></span><br><span class="line">kubectl apply -f cronjob.yml</span><br><span class="line">kubectl get cj</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line">kubectl create cm info --from-literal=k=v <span class="variable">$out</span></span><br><span class="line">kubectl get cm</span><br><span class="line">kubectl describe cm info</span><br><span class="line"></span><br><span class="line">kubectl create secret generic user --from-literal=name=root <span class="variable">$out</span></span><br><span class="line">kubectl get secret</span><br><span class="line">kubectl describe secret user</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> cm9vdA== | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/chronolaw/k8s_study">chronolaw&#x2F;k8s_study | GitHub</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言第一课</title>
      <link href="/2023/02/01/go-lesson-one/"/>
      <url>/2023/02/01/go-lesson-one/</url>
      
        <content type="html"><![CDATA[<h2 id="Go-语言的设计哲学"><a href="#Go-语言的设计哲学" class="headerlink" title="Go 语言的设计哲学"></a>Go 语言的设计哲学</h2><p>简单、显式、组合、并发和面向工程。</p><h2 id="Go-安装方法"><a href="#Go-安装方法" class="headerlink" title="Go 安装方法"></a>Go 安装方法</h2><ul><li><a href="https://go.dev/doc/devel/release">https://go.dev/doc/devel/release</a></li><li><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></li></ul><h3 id="安装多个-Go-版本"><a href="#安装多个-Go-版本" class="headerlink" title="安装多个 Go 版本"></a>安装多个 Go 版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get golang.org/dl/go1.15.13</span><br><span class="line"></span><br><span class="line">go1.15.13 download</span><br><span class="line"></span><br><span class="line">go1.15.13 version</span><br></pre></td></tr></table></figure><h3 id="配置-Go"><a href="#配置-Go" class="headerlink" title="配置 Go"></a>配置 Go</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span></span><br><span class="line"></span><br><span class="line">go <span class="built_in">help</span> environment</span><br></pre></td></tr></table></figure><h2 id="Go-程序的结构"><a href="#Go-程序的结构" class="headerlink" title="Go 程序的结构"></a>Go 程序的结构</h2><ul><li><code>import &quot;fmt&quot;</code> 一行中 <code>fmt</code> 代表的是包的导入路径(Import)，它表示的是标准库下的 fmt 目录，整个 import 声明语句的含义是导入标准库 fmt 目录下的包</li><li><code>fmt.Println</code> 函数调用一行中的 <code>fmt</code> 代表的则是包名。</li><li>通常导入路径的最后一个分段名与包名是相同的，这也很容易让人误解 import 声明语句中的 <code>fmt</code> 指的是包名，其实并不是这样的。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">gofmt main.go</span><br></pre></td></tr></table></figure><h3 id="Go-module"><a href="#Go-module" class="headerlink" title="Go module"></a>Go module</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h2 id="Go-项目的布局标准"><a href="#Go-项目的布局标准" class="headerlink" title="Go 项目的布局标准"></a>Go 项目的布局标准</h2><p>loccount 工具</p><p><a href="https://github.com/golang/go">https://github.com/golang/go</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree -LF 1 .</span><br></pre></td></tr></table></figure><h2 id="解决包依赖管理"><a href="#解决包依赖管理" class="headerlink" title="解决包依赖管理"></a>解决包依赖管理</h2><p>GOPATH -&gt; Vendor -&gt; Go Module</p><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span></span><br><span class="line"></span><br><span class="line">GOPATH=<span class="string">&quot;/Users/v_yfanzhao/go&quot;</span></span><br><span class="line"></span><br><span class="line">go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure><h3 id="vendor"><a href="#vendor" class="headerlink" title="vendor"></a>vendor</h3><ul><li>Go 项目必须放在 GOPATH 环境变量配置的路径下，庞大的 vendor 目录需要提交到代码仓库，不仅占用代码仓库空间，减慢仓库下载和更新的速度， 而且还会干扰代码评审，对实施代码统计等开发者效能工具也有比较大影响。</li><li>你还需要手工管理 vendor 下面的 Go 依赖包，包括项目依赖包的分析、版本的记 录、依赖包获取和存放，等等，最让开发者头疼的就是这一点。</li></ul><h3 id="Go-Module"><a href="#Go-Module" class="headerlink" title="Go Module"></a>Go Module</h3><p>Go Module 与 go.mod 是一一对应的。go.mod 文件所在的顶层目录也被称为 module 的根目录，module 根目录以及它子目录 下的所有 Go 包均归属于这个 Go Module，这个 module 也被称为 main module。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">logrus.Println(<span class="string">&quot;hello, go module mode&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod init</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module <span class="keyword">go</span>-lesson-one</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.17</span></span><br><span class="line"></span><br><span class="line">require github.com/sirupsen/logrus v1<span class="number">.9</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">require golang.org/x/sys v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20220715151400</span>-c0bba94af5f8 <span class="comment">// indirect</span></span><br></pre></td></tr></table></figure><p>major.minor.patch</p><p>Go 的语义导入版本机制：将包主版本号引入到包导入路径中。v0、v1 时不加入路径。</p><p>因此甚至可以同时依赖一个包的两个不兼容版本：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">  logv2 <span class="string">&quot;github.com/sirupsen/logrus/v2&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Go 会在该项目依赖项的所有版本中，选出符合项目整体要求的“最小版本”。这与 PHP Composer 最新最大 (Latest Greatest) 版本 相反。</p><h2 id="Go-Module-操作"><a href="#Go-Module-操作" class="headerlink" title="Go Module 操作"></a>Go Module 操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go list -m all</span><br><span class="line"></span><br><span class="line">go list -m -versions github.com/sirupsen/logrus</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本 升降级</span></span><br><span class="line">go get github.com/sirupsen/logrus@v1.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本 升降级</span></span><br><span class="line">go mod edit -require=github.com/sirupsen/logrus@v1.7.0</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="使用-vendor-机制"><a href="#使用-vendor-机制" class="headerlink" title="使用 vendor 机制"></a>使用 vendor 机制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go mod vendor</span><br><span class="line"></span><br><span class="line">go build -mod=verdor</span><br><span class="line"><span class="comment"># 顶层目录下存在 vendor 目录，那么 go build 默认也会优先基于 vendor 构建，除非：</span></span><br><span class="line">go build -mod=mod</span><br></pre></td></tr></table></figure><h2 id="Go-程序的执行次序"><a href="#Go-程序的执行次序" class="headerlink" title="Go 程序的执行次序"></a>Go 程序的执行次序</h2><p>可执行程序的 main 包必须定义 main 函数，否则 Go 编译器会报错。</p><p>除了 main 包外，其他包也可以拥有自己的名为 main 的函数 或方法。</p><h3 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h3><p>除了前面讲过的 main.main 函数之外，Go 语言还有一个特殊函数，它就是用于进行包初始化的 init 函数了。main 函数之前，常量和变量初 始化之后。每个 init 函数在整个 Go 程序生命周期内仅会被执行一次。Go 包可以拥有不止一个 init 函数。</p><p>Go 在进行包初始化的过程中，会采用“深度优先”的原则，递归初始化各个包的 依赖包。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">|- import pkg1</span><br><span class="line">    |- import pkg2</span><br><span class="line">        |- const</span><br><span class="line">        |- var</span><br><span class="line">        |- init()</span><br><span class="line">    |- const</span><br><span class="line">    |- var</span><br><span class="line">    |- init()</span><br><span class="line">|- const</span><br><span class="line">|- var</span><br><span class="line">|- init()</span><br><span class="line">|- main()</span><br></pre></td></tr></table></figure><h3 id="init-函数的用途"><a href="#init-函数的用途" class="headerlink" title="init 函数的用途"></a>init 函数的用途</h3><ul><li>重置包级变量值。被用于检查包级变量的初始状态。</li><li>实现对包级变量的复杂初始化。</li><li>在 init 函数中实现“注册模式”。通过在 init 函数中注册自己的实现的模式，就有效降低了 Go 包对外的直接 暴露，尤其是包级变量的暴露，从而避免了外部通过包级变量对包状态的改动。</li></ul><h2 id="构建一个-Web-服务"><a href="#构建一个-Web-服务" class="headerlink" title="构建一个 Web 服务"></a>构建一个 Web 服务</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;Hello World&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8888&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl localhost:8888</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/imzyf/go-bookstore">https://github.com/imzyf/go-bookstore</a></p></blockquote><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="comment">// 将变量名放在了类型的前面</span></span><br><span class="line"><span class="comment">// 修饰关键字 变量名 类型 初值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略类型信息的声明</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">12</span></span><br><span class="line"><span class="comment">// 显式赋予变量初值</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">int32</span>(<span class="number">13</span>)</span><br><span class="line"><span class="comment">// 声明多个</span></span><br><span class="line"><span class="keyword">var</span> a, b, c = <span class="number">12</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短变量声明</span></span><br><span class="line">a := <span class="number">12</span></span><br><span class="line">b := <span class="string">&#x27;A&#x27;</span></span><br><span class="line">c := <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">// 声明多个</span></span><br><span class="line">a, b, c := <span class="number">12</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Go-语言的两类变量"><a href="#Go-语言的两类变量" class="headerlink" title="Go 语言的两类变量"></a>Go 语言的两类变量</h3><ul><li>包级变量 (package varible)</li><li>局部变量 (local varible)</li></ul><h3 id="包级变量的声明形式"><a href="#包级变量的声明形式" class="headerlink" title="包级变量的声明形式"></a>包级变量的声明形式</h3><p>包级变量只能使用带有 var 关键字的变量声明形式，不能使用短变量声明形式，但在形式细节上可以有一定灵活度。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b <span class="type">int32</span> = <span class="number">17</span> <span class="comment">// 显式指定类型</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float32</span> = <span class="number">3.14</span> <span class="comment">// 显式指定类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">13</span> <span class="comment">// 使用默认类型</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">int32</span>(<span class="number">17</span>) <span class="comment">// 显式指定类型</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="type">float32</span>(<span class="number">3.14</span>) <span class="comment">// 显式指定类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int32</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明聚类</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    netGo <span class="type">bool</span></span><br><span class="line">    netCgo <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    aLongTimeAgo = time.Unix(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    noDeadline = time.Time&#123;&#125;</span><br><span class="line">    noCancel = (<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)(<span class="literal">nil</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 就近原则</span></span><br><span class="line"><span class="comment">// 尽可能在靠近第一次使用变量的位置声明这个变量</span></span><br></pre></td></tr></table></figure><h3 id="局部变量的声明形式"><a href="#局部变量的声明形式" class="headerlink" title="局部变量的声明形式"></a>局部变量的声明形式</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延迟初始化的局部变量</span></span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式初始化的局部变量</span></span><br><span class="line">a := <span class="number">17</span></span><br><span class="line">f := <span class="type">float32</span>(<span class="number">3.14</span>)</span><br><span class="line">s := []<span class="type">byte</span>(<span class="string">&quot;hello, gopher!&quot;</span>)</span><br><span class="line"><span class="comment">// 尽量在分支控制时使用短变量声明形式</span></span><br></pre></td></tr></table></figure><h2 id="代码块-Block-与作用域-Scope"><a href="#代码块-Block-与作用域-Scope" class="headerlink" title="代码块 Block 与作用域 Scope"></a>代码块 Block 与作用域 Scope</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量遮蔽</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span></span><br><span class="line">    a += n</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;a =&quot;</span>, a) <span class="comment">// 11</span></span><br><span class="line">    foo(<span class="number">5</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;after calling foo, a =&quot;</span>, a) <span class="comment">// 11</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>宇宙代码块(Universe Block)</li><li>包代码块(Package Block</li><li>文件代码块(File Block)</li><li>分支控制语句隐式代码块</li><li>switch&#x2F;select 的子句隐式代码块</li></ul><p>一个标识符的作用域就是指：这个标识符在被声明后可以被有效使用的源码区域。</p><p>导出标识符：</p><ul><li>声明在包代码块中</li><li>它名字第一个字符是一个大写的 Unicode 字符</li></ul><blockquote><p><a href="https://github.com/imzyf/go-lesson-one/blob/main/cmd/chapter11/main.go">https://github.com/imzyf/go-lesson-one/blob/main/cmd/chapter11/main.go</a></p></blockquote><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>Go 采用补码(2’s complement)作为整型的比特位编码方法。Go 的补码是通过原码逐位取反后再加 1 得到的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unit8  1 0 0 0 0 0 0 1 = 129</span><br><span class="line">int8   1 0 0 0 0 0 0 1 = -127</span><br><span class="line"></span><br><span class="line">0 1 1 1 1 1 1 1     127</span><br><span class="line">1 0 0 0 0 0 0 0     取反</span><br><span class="line">1 0 0 0 0 0 0 1     +1    -127</span><br></pre></td></tr></table></figure><h3 id="整型的溢出问题"><a href="#整型的溢出问题" class="headerlink" title="整型的溢出问题"></a>整型的溢出问题</h3><blockquote><p><a href="https://github.com/imzyf/go-lesson-one/blob/main/cmd/chapter12/main.go">https://github.com/imzyf/go-lesson-one/blob/main/cmd/chapter12/main.go</a></p></blockquote><p>这个问题最容易发生在循环语句的结束条件判断中，因为这也是经常使用整型变量的地方。</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IEEE 754</span><br><span class="line"></span><br><span class="line">符号位Sign  阶码Exponent  尾数Maintissa</span><br></pre></td></tr></table></figure><table><thead><tr><th>\bit 位\</th><th>符号位</th><th>阶码</th><th>阶码偏移值</th><th>尾数</th></tr></thead><tbody><tr><td>单精度 float32</td><td>1</td><td>8</td><td>127</td><td>23</td></tr><tr><td>双精度 float64</td><td>1</td><td>11</td><td>1023</td><td>52</td></tr></tbody></table><p>eg:129.8125</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">步骤一:我们要把这个浮点数值的整数部分和小数部分，分别转换为二进制形式(后缀 d 表示十进制数，后缀 b 表示二进制数):</span><br><span class="line"></span><br><span class="line">整数部分:139d =&gt; 10001011b;</span><br><span class="line"></span><br><span class="line">小数部分:0.8125d =&gt; 0.1101b(十进制小数转换为二进制可采用“乘 2 取整”的竖式计算)。</span><br><span class="line">0.8125 * 2 = 1.625 …… 1</span><br><span class="line">0.625 * 2 = 1.25   …… 1</span><br><span class="line">0.25 * 2 = 0.5     …… 0</span><br><span class="line">0.5 * 2 = 1        …… 1</span><br><span class="line"></span><br><span class="line">139.8125d -&gt; 10001011.1101b</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">步骤二:移动小数点，直到整数部分仅有一个 1。</span><br><span class="line"></span><br><span class="line">10001011.1101b -&gt; 1.00010111101b</span><br><span class="line"></span><br><span class="line">小数点向左移了 7 位，这样 指数就为 `7`，尾数为 `00010111101b`。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">步骤三:计算阶码。对于 float32 的单精度浮点数而言：</span><br><span class="line">阶码 = 指数 + 偏移值</span><br><span class="line">偏移值的计算公式为 2^(e-1)-1，其中 e 为阶码部分的 bit 位数，这里为 8，于是单精度浮点数的阶码偏移 值就为 2^(8-1)-1 = 127。</span><br><span class="line"></span><br><span class="line">阶码 = `7` + 127 = 134d = `10000110b`。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">步骤四:将符号位、阶码和尾数填到各自位置，得到最终浮点数的二进制表示</span><br><span class="line"></span><br><span class="line">符号位 0</span><br><span class="line">阶码 10000110</span><br><span class="line">尾数 00010111101 不足 23 位补零 `0_0010111101_00_0000000000`</span><br></pre></td></tr></table></figure><p><code>139.8125</code> -&gt; <code>0_10000110_00010111101_000000000000</code></p><ul><li><a href="https://stackoverflow.com/questions/75357159/go-float32bit-result-not-expected">Go Float32bit() result not expected | stackoverflow</a></li></ul><h3 id="复数型"><a href="#复数型" class="headerlink" title="复数型"></a>复数型</h3><p>矢量计算。</p><h3 id="创建自定义的数值类型"><a href="#创建自定义的数值类型" class="headerlink" title="创建自定义的数值类型"></a>创建自定义的数值类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="type">int32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="type">int</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> n <span class="type">int32</span> = <span class="number">6</span></span><br><span class="line"><span class="keyword">var</span> a MyInt = m <span class="comment">// error</span></span><br><span class="line"><span class="keyword">var</span> a MyInt = n <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = MyInt(m) <span class="comment">// ok</span></span><br><span class="line"><span class="keyword">var</span> a = MyInt(n) <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>MyInt 类型的底层类型是 int32，所以它的数值性质与 int32 完全相同，但它 们仍然是完全不同的两种类型。</p><h3 id="类型别名-Type-Alias"><a href="#类型别名-Type-Alias" class="headerlink" title="类型别名(Type Alias)"></a>类型别名(Type Alias)</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt = <span class="type">int32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n <span class="type">int32</span> = <span class="number">6</span></span><br><span class="line"><span class="keyword">var</span> a MyInt = n</span><br></pre></td></tr></table></figure><p>通过类型别名语法定义的新类型与原类型别无二致，可以完全相互替代。</p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>why-what-how</p><p>非原生字符串：</p><ul><li>不是原生类型，编译器不会对它进行类型校验，导致类型安全性差;</li><li>字符串操作时要时刻考虑结尾的 <code>\0</code>，防止缓冲区溢出;</li><li>以字符数组形式定义的“字符串”，它的值是可变的，在并发场景中需要考虑同步问题;</li><li>获取一个字符串的长度代价较大，通常是 O(n) 时间复杂度;</li><li>C 语言没有内置对非 ASCII 字符(如中文字符)的支持。</li></ul><p>string 类型的数据是不可变的，提高了字符串的并发安全性和存储利用率（同一个字符串值分配同一块存储）。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="type">string</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&#x27;k&#x27;</span> <span class="comment">// cannot assign to s[0] (value of type byte)</span></span><br><span class="line">s = <span class="string">&quot;gopher&quot;</span> <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>没有结尾 <code>\0</code>，而且获取长度的时间复杂度是常数时间，消除了获取字符串长度的开销。</p><p>反引号原生支持“所见即所得”的原始字符串，大大降低构造多行字符串时的心智负担。</p><p>对非 ASCII 字符提供原生支持，消除了源码在不同环境下显示乱码的可能。Unicode 字符是以 UTF-8 编码格式存储在内存。</p><p>通过单引号括起的字符字面值：</p><p><a href="https://github.com/imzyf/go-lesson-one/blob/main/cmd/chapter13/main.go">https://github.com/imzyf/go-lesson-one/blob/main/cmd/chapter13/main.go</a></p><p>UTF-8 编码解决的是 Unicode 码点值在计算机中如何存储和表示(位模式)的问题。UTF-8 方案使用变长度字节，从 1 个到 4 个不等。</p><p>一个 rune 存储一个 unicode 码点或 utf-32 的四字节编码；从字节视角，string 对应的底层存储存放的是 utf8 编码。</p><p>Go 字符串类型的内部标示</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StringHeader 是一个 string 的运行时表示</span></span><br><span class="line"><span class="comment">// string 类型其实是一个“描述符”</span></span><br><span class="line"><span class="keyword">type</span> StringHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">// 一个指向底层存储的指针</span></span><br><span class="line">  Data <span class="type">uintptr</span></span><br><span class="line">  <span class="comment">// 字符串的长度</span></span><br><span class="line">  Len <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接将 string 类型通过函数或方法参数传入也不会带来太多的开销。因为传入的仅仅是一个“描述符”，而不是真正的字符串数据。</p><h3 id="Go-字符串类型的常见操作"><a href="#Go-字符串类型的常见操作" class="headerlink" title="Go 字符串类型的常见操作"></a>Go 字符串类型的常见操作</h3><p>下标操作；下标操作，我们获取的是字符串中特定下标上的字节，而不是字符。</p><p>字符迭代：</p><ul><li>or 迭代，字节视角的迭代</li><li>字符串中 Unicode 字符的码点值，以及该字符在字符串中的偏移值（字节视角）</li></ul><p>字符串连接；<code>+</code> <code>+=</code> <code>strings.Builder</code> <code>strings.Join</code> <code>fmt.Sprintf</code>。</p><p>字符串比较；&#x3D; &#x3D;、!&#x3D; 、&gt;&#x3D;、&lt;&#x3D;、&gt; 和 &lt;。</p><p>字符串转换；string -&gt; <code>[]rune</code> <code>[]byte</code></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>支持无类型常量</li><li>支持隐式自动转型</li><li>可用于实现枚举</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line"><span class="comment">// 无类型常量(Untyped Constant)</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a myInt = <span class="number">5</span></span><br><span class="line">  <span class="comment">// 隐式转型</span></span><br><span class="line">  fmt.Println(a + n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无类型常量 + 隐式转型：使得在 Go 这样的具有强类型系统的语言，在处理表达式混合数据类型运算的时候具有比较大的灵活性，代码编写也得到了一定程度的简化。</span></span><br></pre></td></tr></table></figure><p>Go 的 const 语法提供了“隐式重复前一个非空表达式”的机制。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  Apple, Banana = <span class="literal">iota</span>, <span class="literal">iota</span> + <span class="number">10</span> <span class="comment">// 0, 10 (iota = 0)</span></span><br><span class="line">  Strawberry, Grape <span class="comment">// 1, 11 (iota = 1)</span></span><br><span class="line">  Pear, Watermelon <span class="comment">// 2, 12 (iota = 2)</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  _ = <span class="literal">iota</span> <span class="comment">// 略过 iota = 0</span></span><br><span class="line">  IPV6_V6ONLY <span class="comment">// 1</span></span><br><span class="line">  SOMAXCONN <span class="comment">// 2</span></span><br><span class="line">  SO_ERROR <span class="comment">// 3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="15-数组与切片"><a href="#15-数组与切片" class="headerlink" title="15 数组与切片"></a>15 数组与切片</h2><p>数组是一个固定长度的、由同构类型元素组成的连续序列。不仅是逻辑上的连续序列，而且在实际内存分配时也占据着一整块内存。</p><p>切片不定长同构数据类型。切片可以看成是数组的“描述符”（句柄），为数组打开了一个访问与修改的“窗口”。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">  array unsafe.Pointer <span class="comment">// 指向底层数组的指针</span></span><br><span class="line">  <span class="built_in">len</span> <span class="type">int</span> <span class="comment">// 切片的长度，即切片中当前元素的个数</span></span><br><span class="line">  <span class="built_in">cap</span> <span class="type">int</span> <span class="comment">// 底层数组的长度，也是切片的最大容量，cap 值永远大于等于 len 值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sl1 []<span class="type">int</span> <span class="comment">// 是声明，未初始化，是nil值，底层没有分配内存空间</span></span><br><span class="line"><span class="keyword">var</span> sl2 = []<span class="type">int</span>&#123;&#125; <span class="comment">// 初始化了，不是nil值，底层分配了内存空间，有地址。</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://go.dev/play/">The Go Playground</a></li></ul><p>– EOF —</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾 2022</title>
      <link href="/2022/12/31/review-2022/"/>
      <url>/2022/12/31/review-2022/</url>
      
        <content type="html"><![CDATA[<blockquote><p>犯错的人不会沉浸在错误里，而是继续战斗。 —— 管泽元 S12 总决赛 DRX vs SKT 2:2</p></blockquote><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP Migrating to 8.1</title>
      <link href="/2022/12/21/php-migrating-to-81/"/>
      <url>/2022/12/21/php-migrating-to-81/</url>
      
        <content type="html"><![CDATA[<ul><li>实验环境：<a href="https://onlinephp.io/">https://onlinephp.io/</a></li><li>Polyfill <a href="https://github.com/symfony/polyfill/tree/main/src">https://github.com/symfony/polyfill/tree/main/src</a></li></ul><h2 id="PHP8-0-to-PHP8-1"><a href="#PHP8-0-to-PHP8-1" class="headerlink" title="PHP8.0 to PHP8.1"></a>PHP8.0 to PHP8.1</h2><blockquote><p><a href="https://www.php.net/manual/en/migration81.php">https://www.php.net/manual/en/migration81.php</a></p><p><a href="https://php.watch/versions/8.1">https://php.watch/versions/8.1</a><br>brings major new features such as Enums, Fibers, never return type, Intersection Types, readonly properties, and more, while ironing out some of its undesired legacy features by deprecating them.</p></blockquote><h3 id="New-Features-8-1"><a href="#New-Features-8-1" class="headerlink" title="New Features 8.1"></a>New Features 8.1</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 八进制</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0o14</span>);</span><br><span class="line"><span class="comment">// int(12)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可解包字符串为 key 的数组</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>([...<span class="variable">$arr1</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;d&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数解包后的命名参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">foo</span>(...[<span class="number">1</span>,<span class="number">2</span>], <span class="attr">c</span>: <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Enumerations 枚举</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/en/language.enumerations.examples.php</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fibers 纤程</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/en/language.fibers.php</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Intersection Types 交叉类型</span></span><br><span class="line"><span class="comment">// 由类型 T、U 和 V 组成的交集类型将写为 T&amp;U&amp;V</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Never type</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new in Initializers</span></span><br><span class="line"><span class="comment">// 现在可以使用 new ClassName() 表达式作为参数、静态变量、全局常量初始值设定项和属性参数的默认值</span></span><br><span class="line"><span class="comment">// 现在也可以将对象传递给 define()</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Readonly properties</span></span><br><span class="line"><span class="comment">// Support for readonly has been added.</span></span><br></pre></td></tr></table></figure><h3 id="New-Functions-8-1"><a href="#New-Functions-8-1" class="headerlink" title="New Functions 8.1"></a>New Functions 8.1</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果数组的键由从 0 到 count($array)-1 的连续数字组成，则数组被认为是 list</span></span><br><span class="line"><span class="title function_ invoke__">array_is_list</span>([]); <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">array_is_list</span>([<span class="string">&#x27;apple&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="title function_ invoke__">array_is_list</span>([<span class="number">0</span> =&gt; <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The array does not start at 0</span></span><br><span class="line"><span class="title function_ invoke__">array_is_list</span>([<span class="number">1</span> =&gt; <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Migrating to 7.4 8.0</title>
      <link href="/2022/12/14/php-migrating-to-74-80/"/>
      <url>/2022/12/14/php-migrating-to-74-80/</url>
      
        <content type="html"><![CDATA[<ul><li>实验环境：<a href="https://onlinephp.io/">https://onlinephp.io/</a></li><li>Polyfill <a href="https://github.com/symfony/polyfill/tree/main/src">https://github.com/symfony/polyfill/tree/main/src</a></li></ul><h2 id="PHP7-3-to-PHP7-4"><a href="#PHP7-3-to-PHP7-4" class="headerlink" title="PHP7.3 to PHP7.4"></a>PHP7.3 to PHP7.4</h2><blockquote><p><a href="https://www.php.net/manual/en/migration74.php">https://www.php.net/manual/en/migration74.php</a></p><p><a href="https://php.watch/versions/7.4">https://php.watch/versions/7.4</a><br>PHP 7.4, the final release in the PHP 7.x series. PHP 7.4 brings typed properties, underscore numeric separator, and other minor improvements to PHP.</p></blockquote><h3 id="New-Features-7-4"><a href="#New-Features-7-4" class="headerlink" title="New Features 7.4"></a>New Features 7.4</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Typed properties</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="variable">$id</span>; <span class="comment">// 会强制要求 $user-&gt;id 只能为 int 类型，访问前必须进行处理化，?int 也要进行初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭头函数 Arrow functions</span></span><br><span class="line"><span class="variable">$factor</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$nums</span> = <span class="title function_ invoke__">array_map</span>(fn(<span class="variable">$n</span>) =&gt; <span class="variable">$n</span> * <span class="variable">$factor</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有限的 Limited 返回类型协变和参数类型逆变</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>): <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildProducer</span> <span class="keyword">extends</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>): <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PHP74</span></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// Fatal error: Declaration of ChildProducer::method(): B must be compatible with Producer::method(): A</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空合并赋值运算符</span></span><br><span class="line"><span class="variable">$array</span>[<span class="string">&#x27;key1&#x27;</span>] ??= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// is roughly equivalent to</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$array</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$array</span>[<span class="string">&#x27;key2&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="comment">// array(2) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;key1&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(1)</span></span><br><span class="line"><span class="comment">//   [&quot;key2&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(2)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unpacking inside arrays</span></span><br><span class="line"><span class="comment">// 可以平替 array_merge</span></span><br><span class="line"><span class="variable">$parts</span> = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>];</span><br><span class="line"><span class="variable">$fruits</span> = [<span class="string">&#x27;orange&#x27;</span>, ...<span class="variable">$parts</span>, <span class="string">&#x27;watermelon&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$fruits</span>);</span><br><span class="line"><span class="comment">// array(4) &#123;</span></span><br><span class="line"><span class="comment">//   [0]=&gt;</span></span><br><span class="line"><span class="comment">//   string(6) &quot;orange&quot;</span></span><br><span class="line"><span class="comment">//   [1]=&gt;</span></span><br><span class="line"><span class="comment">//   string(5) &quot;apple&quot;</span></span><br><span class="line"><span class="comment">//   [2]=&gt;</span></span><br><span class="line"><span class="comment">//   string(4) &quot;pear&quot;</span></span><br><span class="line"><span class="comment">//   [3]=&gt;</span></span><br><span class="line"><span class="comment">//   string(10) &quot;watermelon&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数字文字分隔符</span></span><br><span class="line"><span class="number">6.674_083e-11</span>; <span class="comment">// float</span></span><br><span class="line"><span class="number">299_792_458</span>;   <span class="comment">// decimal</span></span><br><span class="line"><span class="number">0xCAFE_F00D</span>;   <span class="comment">// hexadecimal</span></span><br><span class="line"><span class="number">0b0101_1111</span>;   <span class="comment">// binary</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">int</span>)<span class="string">&quot;1_123&quot;</span>);</span><br><span class="line"><span class="comment">// int(1)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WeakReference 类</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/zh/class.weakreference.php</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>;</span><br><span class="line"><span class="variable">$weakref</span> = <span class="title class_">WeakReference</span>::<span class="title function_ invoke__">create</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$weakref</span>-&gt;<span class="title function_ invoke__">get</span>());</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$weakref</span>-&gt;<span class="title function_ invoke__">get</span>());</span><br><span class="line"><span class="comment">// object(stdClass)#1 (0) &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// NULL</span></span><br></pre></td></tr></table></figure><h3 id="Backward-Incompatible-Changes-7-4"><a href="#Backward-Incompatible-Changes-7-4" class="headerlink" title="Backward Incompatible Changes 7.4"></a>Backward Incompatible Changes 7.4</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以数组形式访问非数组，将会抛出 notic</span></span><br><span class="line"><span class="comment">// null, bool, int, float or resource</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">12</span>;</span><br><span class="line"><span class="variable">$i</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="comment">// PHP74</span></span><br><span class="line"><span class="comment">// Notice: Trying to access array offset on value of type int</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// Warning: Trying to access array offset on value of type int</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP73 ok</span></span><br></pre></td></tr></table></figure><h3 id="Deprecated-Features-7-4"><a href="#Deprecated-Features-7-4" class="headerlink" title="Deprecated Features 7.4"></a>Deprecated Features 7.4</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 嵌套的三元运算必须明确地使用括号来指示运算的顺序</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">1</span> ? <span class="number">2</span> : <span class="number">3</span> ? <span class="number">4</span> : <span class="number">5</span>);</span><br><span class="line"><span class="comment">// PHP74</span></span><br><span class="line"><span class="comment">// Deprecated: Unparenthesized `a ? b : c ? d : e` is deprecated. Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)`</span></span><br><span class="line"><span class="comment">// int(4)</span></span><br></pre></td></tr></table></figure><h2 id="PHP7-4-to-PHP8-0"><a href="#PHP7-4-to-PHP8-0" class="headerlink" title="PHP7.4 to PHP8.0"></a>PHP7.4 to PHP8.0</h2><blockquote><p><a href="https://www.php.net/manual/en/migration80.php">https://www.php.net/manual/en/migration80.php</a></p></blockquote><h3 id="New-Features-8-0"><a href="#New-Features-8-0" class="headerlink" title="New Features 8.0"></a>New Features 8.0</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命名参数</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/zh/functions.arguments.php#functions.named-arguments</span></span><br><span class="line"><span class="comment">// array_fill(int $start_index, int $count, mixed $value): array</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">array_fill</span>(<span class="attr">value</span>: <span class="number">50</span>, <span class="attr">count</span>: <span class="number">3</span>, <span class="attr">start_index</span>: <span class="number">0</span>));</span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// array(3) &#123;</span></span><br><span class="line"><span class="comment">//   [0]=&gt;</span></span><br><span class="line"><span class="comment">//   int(50)</span></span><br><span class="line"><span class="comment">//   [1]=&gt;</span></span><br><span class="line"><span class="comment">//   int(50)</span></span><br><span class="line"><span class="comment">//   [2]=&gt;</span></span><br><span class="line"><span class="comment">//   int(50)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解（Attributes）</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/zh/language.attributes.php</span></span><br><span class="line"><span class="comment">// 定义注解 -&gt; 使用注解 -&gt; （通过反射）提取注释</span></span><br><span class="line"><span class="comment">// 注意以后用词：Attributes 注解，Properties 属性</span></span><br><span class="line"><span class="meta">#[\Attribute</span><span class="meta">]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonSerialize</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">public</span> ?<span class="keyword">string</span> <span class="variable">$fieldName</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;JsonSerialize:<span class="subst">$fieldName</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VersionedObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">#[JsonSerialize</span>(<span class="string">&#x27;json-foobar&#x27;</span>)<span class="meta">]</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$myValue</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="title class_">VersionedObject</span>();</span><br><span class="line"><span class="variable">$reflection</span> = <span class="keyword">new</span> <span class="title class_">ReflectionObject</span>(<span class="variable">$object</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getProperties</span>() <span class="keyword">as</span> <span class="variable">$reflectionProp</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$reflectionProp</span>-&gt;<span class="title function_ invoke__">getAttributes</span>(<span class="title class_">JsonSerialize</span>::<span class="variable language_">class</span>) <span class="keyword">as</span> <span class="variable">$jsonSerializeAttr</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$jsonSerializeAttr</span>-&gt;<span class="title function_ invoke__">getName</span>());</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$jsonSerializeAttr</span>-&gt;<span class="title function_ invoke__">getArguments</span>());</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$jsonSerializeAttr</span>-&gt;<span class="title function_ invoke__">getTarget</span>());</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$jsonSerializeAttr</span>-&gt;<span class="title function_ invoke__">isRepeated</span>());</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$jsonSerializeAttr</span>-&gt;<span class="title function_ invoke__">newInstance</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// string(13) &quot;JsonSerialize&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// array(1) &#123;</span></span><br><span class="line"><span class="comment">//   [0]=&gt;</span></span><br><span class="line"><span class="comment">//   string(11) &quot;json-foobar&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// int(8) Attribute::TARGET_PROPERTY</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// string(25) &quot;JsonSerialize:json-foobar&quot;</span></span><br><span class="line"><span class="comment">// object(JsonSerialize)#5 (1) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;fieldName&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   string(11) &quot;json-foobar&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造器属性提升</span></span><br><span class="line"><span class="comment">// 当构造器参数带访问控制（visibility modifier）时，PHP 会同时把它当作对象属性和构造器参数，并赋值到属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$y</span> = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line"><span class="comment">// object(Point)#1 (2) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;x&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//   int(2)</span></span><br><span class="line"><span class="comment">//   [&quot;y&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//   int(4)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">int</span> <span class="variable">$y</span> = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;x = <span class="variable">$x</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;y = <span class="variable">$y</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line"><span class="comment">// object(Point)#1 (2) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;x&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(2)</span></span><br><span class="line"><span class="comment">//   [&quot;y&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(4)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$y</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$x</span>, <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$y</span> = <span class="number">0</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此类中已经定义了具有相同名称的字段</span></span><br><span class="line"><span class="comment">// Fatal error: Cannot redeclare Point::$x</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Union types 联合类型</span></span><br><span class="line"><span class="comment">// ?T is same T|null</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// - 类型只能出现一次 int|string|INT 否则报错</span></span><br><span class="line"><span class="comment">// - 使用 mixed 会报错</span></span><br><span class="line"><span class="comment">// - bool 与 false or true 不能混用</span></span><br><span class="line"><span class="comment">// - object 与 class 不能混用</span></span><br><span class="line"><span class="comment">// - iterable 与 array Traversable 不能混用</span></span><br><span class="line"><span class="comment">// - 使用 self、parent 或 static 都会导致错误</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// match 表达式</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/en/control-structures.match.php</span></span><br><span class="line"><span class="comment">// match 表达式必须是详尽，则会抛出 UnhandledMatchError。</span></span><br><span class="line"><span class="variable">$food</span> = <span class="string">&#x27;cake&#x27;</span>;</span><br><span class="line"><span class="variable">$return_value</span> = <span class="keyword">match</span> (<span class="variable">$food</span>) &#123;</span><br><span class="line">    <span class="string">&#x27;apple&#x27;</span> =&gt; <span class="string">&#x27;This food is an apple&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bar&#x27;</span> =&gt; <span class="string">&#x27;This food is a bar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cake&#x27;</span> =&gt; <span class="string">&#x27;This food is a cake&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$return_value</span>);</span><br><span class="line"><span class="comment">// string(19) &quot;This food is a cake&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Nullsafe 方法和属性</span></span><br><span class="line"><span class="comment">// As of PHP 8.0.0, this line:</span></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$repository</span>?-&gt;<span class="title function_ invoke__">getUser</span>(<span class="number">5</span>)?-&gt;name;</span><br><span class="line"><span class="comment">// Is equivalent to the following code block:</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$repository</span>)) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$repository</span>-&gt;<span class="title function_ invoke__">getUser</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$user</span>)) &#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The WeakMap class has been added, accepts objects as keys, similar SplObjectStorage</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/en/class.weakmap.php</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/en/class.splobjectstorage.php</span></span><br><span class="line"><span class="comment">// final class WeakMap implements ArrayAccess, Countable, IteratorAggregate</span></span><br><span class="line"><span class="variable">$wm</span> = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">StdClass</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Dead!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$wm</span>[<span class="variable">$o</span>] = <span class="keyword">new</span> A;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$wm</span>));</span><br><span class="line"><span class="comment">// int(1)</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="comment">// Dead!</span></span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$wm</span>));</span><br><span class="line"><span class="comment">// int(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比 SplObjectStorage</span></span><br><span class="line"><span class="variable">$wm</span> = <span class="keyword">new</span> <span class="built_in">SplObjectStorage</span>();</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">StdClass</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Dead!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$wm</span>[<span class="variable">$o</span>] = <span class="keyword">new</span> A;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$wm</span>));</span><br><span class="line"><span class="comment">// int(1)</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="comment">// 未销毁</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$wm</span>));</span><br><span class="line"><span class="comment">// int(1)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要类型兼容，现在可以将任意数量的函数参数替换为可变参数 variadic argument</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$many</span>, <span class="keyword">string</span> <span class="variable">$parameters</span>, <span class="variable">$here</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params">...<span class="variable">$everything</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"><span class="keyword">int</span> ...<span class="variable">$everything</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Fatal error: Declaration of C::method(int ...$everything)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// static 后期静态绑定，现在可以用作返回类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>): <span class="title">static</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get_class($obj) === $obj::class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Test</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>::<span class="variable language_">class</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">get_class</span>(<span class="variable">$obj</span>));</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new instanceof 可以与任意表达式一起使用</span></span><br><span class="line"><span class="comment">// new (expression)(...$args)</span></span><br><span class="line"><span class="comment">// $obj instanceof (expression)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> (<span class="number">1</span>&gt;<span class="number">2</span> ? <span class="string">&quot;A&quot;</span> : <span class="string">&quot;B&quot;</span>)();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增 Stringable 接口。如果 class 定义了 __toString()，则自动实现了此接口</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Traits can define abstract private methods</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// throw 可以作为一个表达式 as an expression</span></span><br><span class="line"><span class="variable">$fn</span> = <span class="function"><span class="keyword">fn</span>(<span class="params"></span>) =&gt;</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Exception in arrow function&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数列表中现在允许使用可选的尾随逗号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionWithLongSignature</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    Type1 <span class="variable">$parameter1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    Type2 <span class="variable">$parameter2</span>, // &lt;-- This comma is now allowed.</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许 catch (Exception) 无需存储到变量</span></span><br><span class="line"><span class="keyword">try</span> &#123;&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">Exception</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在父类上声明的私有方法不再对子类的方法强制执行任何继承规则（私有构造函数除外）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h3 id="Backward-Incompatible-Changes-8-0"><a href="#Backward-Incompatible-Changes-8-0" class="headerlink" title="Backward Incompatible Changes 8.0"></a>Backward Incompatible Changes 8.0</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串与数字比较</span></span><br><span class="line"><span class="comment">// 0 == &quot;not-a-number&quot; is false</span></span><br><span class="line"><span class="comment">// 将数字转换为字符串，并使用字符串比较</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0</span> == <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">42</span> == <span class="string">&quot;42foo&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0</span> == <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP74</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;&quot;</span> &lt; <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;&quot;</span> &lt; -<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;a&quot;</span> &lt; <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;b&quot;</span> &lt; -<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;ab&quot;</span> &gt; <span class="number">0</span>);</span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP74</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// match is 保留关键字</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// is_callable() 在检查具有 classname 的 non-static 方法时将 false（必须检查对象实例）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_callable</span>([<span class="title class_">Test</span>::<span class="variable language_">class</span>, <span class="string">&#x27;method1&#x27;</span>]));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_callable</span>([<span class="keyword">new</span> <span class="title class_">Test</span>, <span class="string">&#x27;method1&#x27;</span>]));</span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP74</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"><span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// __autoload() function has been removed</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除了对 object 使用 array_key_exists() 的能力。isset() or property_exists() may be used instead</span></span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Migrating to 7.2 7.3</title>
      <link href="/2022/12/12/php-migrating-to-72-73/"/>
      <url>/2022/12/12/php-migrating-to-72-73/</url>
      
        <content type="html"><![CDATA[<ul><li>实验环境：<a href="https://onlinephp.io/">https://onlinephp.io/</a></li><li>Polyfill <a href="https://github.com/symfony/polyfill/tree/main/src">https://github.com/symfony/polyfill/tree/main/src</a></li></ul><h2 id="PHP7-1-to-PHP7-2"><a href="#PHP7-1-to-PHP7-2" class="headerlink" title="PHP7.1 to PHP7.2"></a>PHP7.1 to PHP7.2</h2><blockquote><p><a href="https://www.php.net/manual/en/migration72.php">https://www.php.net/manual/en/migration72.php</a></p><p>Argon2 password hashing support, class constant visibility, object type, and many more.</p></blockquote><h3 id="New-Features-7-2"><a href="#New-Features-7-2" class="headerlink" title="New Features 7.2"></a>New Features 7.2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新的 object 类型</span></span><br><span class="line"><span class="comment">// 可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/zh/language.oop5.variance.php</span></span><br><span class="line"><span class="comment">// 协变使子类比父类方法能返回更具体的类型；逆变使子类比父类方法参数类型能接受更模糊的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="keyword">object</span> <span class="variable">$obj</span></span>) : <span class="title">object</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">SplQueue</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">test</span>(<span class="keyword">new</span> <span class="title class_">StdClass</span>());</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类可以重写被继承的抽象类的抽象方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$s</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// overridden - 仍然保持参数的逆变和返回的逆变</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$s</span></span>): <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重写方法和接口实现的参数类型可以省略</span></span><br><span class="line"><span class="comment">// 仍然是符合LSP，这种参数类型是逆变</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$input</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// type omitted for $input</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">new</span> <span class="title function_ invoke__">B</span>())-&gt;<span class="title function_ invoke__">test</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// int(1)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// Fatal error: Declaration of B::test($input) must be compatible with A::test(array $input)</span></span><br></pre></td></tr></table></figure><h3 id="Backward-incompatible-changes-7-2"><a href="#Backward-incompatible-changes-7-2" class="headerlink" title="Backward incompatible changes 7.2"></a>Backward incompatible changes 7.2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防止 number_format() 返回负零</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">number_format</span>(-<span class="number">0.01</span>));</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// string(1) &quot;0&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// string(2) &quot;-0&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换对象和数组中的数字键</span></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">0</span> =&gt; <span class="number">1</span>];</span><br><span class="line"><span class="variable">$obj</span> = (<span class="keyword">object</span>) <span class="variable">$arr</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj</span>-&gt;&#123;<span class="string">&#x27;0&#x27;</span>&#125;, // 新写法</span><br><span class="line">    <span class="variable">$obj</span>-&gt;&#123;<span class="number">0</span>&#125; // 新写法</span><br><span class="line">);</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// object(stdClass)#1 (1) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;0&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(1)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// int(1)</span></span><br><span class="line"><span class="comment">// int(1)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// object(stdClass)#1 (1) &#123;</span></span><br><span class="line"><span class="comment">//   [0]=&gt;</span></span><br><span class="line"><span class="comment">//   int(1)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Notice: Undefined property: stdClass::$0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;&#123;<span class="number">1</span>&#125; = <span class="string">&quot;value&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$arr</span> = (<span class="keyword">array</span>) <span class="variable">$obj</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>[<span class="string">&quot;1&quot;</span>]); <span class="comment">// 整数 或者 字符串整数 含义相同</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>[<span class="number">1</span>]); <span class="comment">// PHP71</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// array(1) &#123;</span></span><br><span class="line"><span class="comment">//   [1]=&gt;</span></span><br><span class="line"><span class="comment">//   string(2) &quot;my&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71 无法取整型字符串 key</span></span><br><span class="line"><span class="comment">// array(1) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;1&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   string(2) &quot;my&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Notice: Undefined offset: 1</span></span><br><span class="line"><span class="comment">// Notice: Undefined offset: 1</span></span><br><span class="line"><span class="comment">// Notice: Undefined offset: 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = [<span class="number">1.3</span> =&gt; <span class="string">&quot;v1&quot;</span>, <span class="number">1.4</span> =&gt; <span class="string">&quot;v2&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// ALL array key float 会被转换为 int</span></span><br><span class="line"><span class="comment">// array(1) &#123;</span></span><br><span class="line"><span class="comment">//   [1]=&gt;</span></span><br><span class="line"><span class="comment">//   string(2) &quot;v2&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get_class() 函数不再接受 null</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">get_class</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Warning: get_class() expects parameter 1 to be object</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// Warning: get_class() called without object from outside a class</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// Fatal error: Uncaught TypeError: get_class(): Argument #1 ($object) must be of type object, null given</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算非可数类型（non-countable）时发出警告</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(</span><br><span class="line">    <span class="title function_ invoke__">count</span>(<span class="literal">null</span>), // <span class="literal">NULL</span> is not countable</span><br><span class="line">    <span class="title function_ invoke__">count</span>(<span class="number">1</span>), // integers are not countable</span><br><span class="line">    <span class="title function_ invoke__">count</span>(<span class="string">&#x27;abc&#x27;</span>), // strings are not countable</span><br><span class="line">    <span class="title function_ invoke__">count</span>(<span class="keyword">new</span> stdclass) // objects not implementing the <span class="built_in">Countable</span> <span class="keyword">interface</span> are not countable</span><br><span class="line">);</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Warning: count(): Parameter must be an array or an object that implements Countable</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// 无 Warning</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// Fatal error: Uncaught TypeError: count(): Argument #1 ($value) must be of type Countable|array</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用未定义的常量，现在会抛出一个 E_WARNING 错误（之前版本中为 E_NOTICE)）</span></span><br><span class="line"><span class="comment">// PHP8 将不会转化成他们自身的字符串，同时抛出 Error 异常</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(MY_CONST);</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Warning: Use of undefined constant MY_CONST - assumed &#x27;MY_CONST&#x27;</span></span><br><span class="line"><span class="comment">// string(8) &quot;MY_CONST&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// Notice: Use of undefined constant MY_CONST</span></span><br><span class="line"><span class="comment">// string(8) &quot;MY_CONST&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP80</span></span><br><span class="line"><span class="comment">// Fatal error: Uncaught Error: Undefined constant &quot;MY_CONST&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bcmod 任意精度数字取模，添加新增参数 scale</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">bcmod</span>(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;3.5&quot;</span>));</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// string(1) &quot;0&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// string(1) &quot;1&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">bcmod</span>(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;3.5&quot;</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// string(3) &quot;0.5&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// Warning: bcmod() expects exactly 2 parameters, 3 given</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json_decode associative 允许为 null</span></span><br><span class="line"><span class="comment">// 当为 true 时，JSON 对象将返回关联 array；当为 false 时，JSON 对象将返回 object。</span></span><br><span class="line"><span class="comment">// 当为 null 时，JSON 对象将返回关联 array 或 object，这取决于是否在 flags 中设置 JSON_OBJECT_AS_ARRAY</span></span><br><span class="line"><span class="comment">// https://www.php.net/manual/zh/function.json-decode.php</span></span><br><span class="line"><span class="variable">$json</span> = <span class="string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">null</span>, <span class="number">512</span>, JSON_OBJECT_AS_ARRAY));</span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// array(2) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;a&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(1)</span></span><br><span class="line"><span class="comment">//   [&quot;b&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(2)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP71</span></span><br><span class="line"><span class="comment">// object(stdClass)#1 (2) &#123;</span></span><br><span class="line"><span class="comment">//   [&quot;a&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(1)</span></span><br><span class="line"><span class="comment">//   [&quot;b&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//   int(2)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="PHP7-2-to-PHP7-3"><a href="#PHP7-2-to-PHP7-3" class="headerlink" title="PHP7.2 to PHP7.3"></a>PHP7.2 to PHP7.3</h2><blockquote><p><a href="https://www.php.net/manual/en/migration73.php">https://www.php.net/manual/en/migration73.php</a></p><p><a href="https://php.watch/versions/7.3">https://php.watch/versions/7.3</a><br>Heredoc&#x2F;nowdoc syntax improvements and a bunch of legacy code deprecations.</p></blockquote><h3 id="New-Features-7-3"><a href="#New-Features-7-3" class="headerlink" title="New Features 7.3"></a>New Features 7.3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Heredoc Nowdoc 不再需要后跟分号或换行符</span></span><br><span class="line"><span class="comment">// 结束标记可以缩进，结束时所引用的标识符必须在该行的第一列</span></span><br><span class="line"><span class="variable">$values</span> = [<span class="string">&lt;&lt;&lt;END</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">  b</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">END</span>, <span class="string">&#x27;d e f&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$values</span>);</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// array(2) &#123;</span></span><br><span class="line"><span class="comment">//   [0]=&gt;</span></span><br><span class="line"><span class="comment">//   string(13) &quot;a</span></span><br><span class="line"><span class="comment">//   b</span></span><br><span class="line"><span class="comment">//     c&quot;</span></span><br><span class="line"><span class="comment">//   [1]=&gt;</span></span><br><span class="line"><span class="comment">//   string(5) &quot;d e f&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Parse error: syntax error, unexpected end of file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;END</span></span><br><span class="line"><span class="string">      a</span></span><br><span class="line"><span class="string">     b</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    END</span>;</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">//   a</span></span><br><span class="line"><span class="comment">//  b</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Parse error: syntax error, unexpected end of file, expecting variable (T_VARIABLE) or heredoc end (T_END_HEREDOC) or $&#123; (T_DOLLAR_OPEN_CURLY_BRACES) or &#123;$ (T_CURLY_OPEN)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;END</span></span><br><span class="line"><span class="string">  a</span></span><br><span class="line"><span class="string"> b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">   END</span>;</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// Parse error: Invalid body indentation level</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组解构支持引用赋值</span></span><br><span class="line"><span class="variable">$arr</span> = [[<span class="number">1</span>], [<span class="number">1</span>]];</span><br><span class="line">[&amp;<span class="variable">$a</span>, <span class="variable">$b</span>] = <span class="variable">$arr</span>;</span><br><span class="line"><span class="variable">$a</span>[] = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$b</span>[] = <span class="number">3</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// array(2) &#123;</span></span><br><span class="line"><span class="comment">//   [0]=&gt;</span></span><br><span class="line"><span class="comment">//   &amp;array(2) &#123;</span></span><br><span class="line"><span class="comment">//     [0]=&gt;</span></span><br><span class="line"><span class="comment">//     int(1)</span></span><br><span class="line"><span class="comment">//     [1]=&gt;</span></span><br><span class="line"><span class="comment">//     int(2)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   [1]=&gt;</span></span><br><span class="line"><span class="comment">//   array(1) &#123;</span></span><br><span class="line"><span class="comment">//     [0]=&gt;</span></span><br><span class="line"><span class="comment">//     int(1)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Fatal error: [] and list() assignments cannot be by reference</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许将 literals 作为第一个操作数，always false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">stdClass</span>);</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// bool(false)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Fatal error: instanceof expects an object instance, constant given</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用中允许尾随逗号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my</span>(<span class="params"><span class="variable">$v</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;php-<span class="subst">&#123;$v&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">my</span>(<span class="number">73</span>,);</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// php-73</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// Parse error: syntax error, unexpected &#x27;)&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="New-Functions-7-3"><a href="#New-Functions-7-3" class="headerlink" title="New Functions 7.3"></a>New Functions 7.3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Gets the first key of an array</span></span><br><span class="line"><span class="title function_ invoke__">array_key_first</span>(<span class="keyword">array</span> <span class="variable">$array</span>): <span class="keyword">int</span>|<span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line"><span class="comment">// Gets the last key of an array</span></span><br><span class="line"><span class="title function_ invoke__">array_key_last</span>(<span class="keyword">array</span> <span class="variable">$array</span>): <span class="keyword">int</span>|<span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line"><span class="comment">// Get the system&#x27;s high resolution time</span></span><br><span class="line"><span class="comment">// [seconds, nanoseconds] int（64 位平台）或 float（32 位平台）</span></span><br><span class="line"><span class="title function_ invoke__">hrtime</span>(<span class="keyword">bool</span> <span class="variable">$as_number</span> = <span class="literal">false</span>): <span class="keyword">array</span>|<span class="keyword">int</span>|<span class="keyword">float</span>|<span class="literal">false</span></span><br><span class="line"><span class="comment">// 验证变量的内容是否为 countable 值</span></span><br><span class="line"><span class="comment">// return is_array($value) || $value instanceof Countable || $value instanceof ResourceBundle || $value instanceof SimpleXmlElement;</span></span><br><span class="line"><span class="title function_ invoke__">is_countable</span>(<span class="keyword">mixed</span> <span class="variable">$value</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><h3 id="Backward-Incompatible-Changes-7-3"><a href="#Backward-Incompatible-Changes-7-3" class="headerlink" title="Backward Incompatible Changes 7.3"></a>Backward Incompatible Changes 7.3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Continue Targeting Switch 问题警告</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$foo</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$foo</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;baz&quot;</span>:</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable">$foo</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// Warning: &quot;continue&quot; targeting switch is equivalent to &quot;break&quot;. Did you mean to use &quot;continue 2&quot;?</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// ok</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $obj[&quot;123&quot;] 类型的数组访问，其中 $obj 实现 ArrayAccess 且 &quot;123&quot; 是整数字符串文字将不再导致隐式转换为整数</span></span><br><span class="line"><span class="comment">// 数组的行为不会受到任何影响，它们继续将整数字符串键隐式转换为整数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetExists</span>(<span class="params"><span class="variable">$offset</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span>(<span class="params"><span class="variable">$offset</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$offset</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetSet</span>(<span class="params"><span class="variable">$offset</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetUnset</span>(<span class="params"><span class="variable">$offset</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>[<span class="string">&quot;123&quot;</span>];</span><br><span class="line"><span class="comment">// PHP73</span></span><br><span class="line"><span class="comment">// string(3) &quot;123&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// PHP72</span></span><br><span class="line"><span class="comment">// int(123)</span></span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Migrating to 7.0 7.1</title>
      <link href="/2022/11/28/php-migrating-to-70-71/"/>
      <url>/2022/11/28/php-migrating-to-70-71/</url>
      
        <content type="html"><![CDATA[<ul><li>实验环境：<a href="https://onlinephp.io/">https://onlinephp.io/</a></li><li>Polyfill <a href="https://github.com/symfony/polyfill/tree/main/src">https://github.com/symfony/polyfill/tree/main/src</a></li></ul><h2 id="PHP7-0-to-PHP7-1"><a href="#PHP7-0-to-PHP7-1" class="headerlink" title="PHP7.0 to PHP7.1"></a>PHP7.0 to PHP7.1</h2><blockquote><p><a href="https://www.php.net/manual/en/migration71.php">https://www.php.net/manual/en/migration71.php</a></p></blockquote><h3 id="7-1-New-Features"><a href="#7-1-New-Features" class="headerlink" title="7.1 New Features"></a>7.1 New Features</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Nullable types 可为空类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">?<span class="keyword">string</span> <span class="variable">$name</span></span>): ?<span class="title">string</span></span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Void 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">&amp;<span class="variable">$left</span>, &amp;<span class="variable">$right</span></span>) : <span class="title">void</span></span></span><br><span class="line"><span class="function">// 获取一个 <span class="title">void</span> 方法的返回值会得到 <span class="title">null</span>，并且不会产生任何警告</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对称数组解构</span></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">    [<span class="number">1</span>, <span class="string">&#x27;Tom&#x27;</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="string">&#x27;Fred&#x27;</span>],</span><br><span class="line">];</span><br><span class="line">[<span class="variable">$id</span>, <span class="variable">$name</span>] = <span class="variable">$data</span>[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 赋值部分</span></span><br><span class="line">[, <span class="variable">$name1</span>] = <span class="variable">$data</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> [<span class="variable">$id</span>, <span class="variable">$name</span>]) &#123;</span><br><span class="line">    <span class="comment">// logic here with $id and $name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">&amp;<span class="variable">$a</span>, &amp;<span class="variable">$b</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    [<span class="variable">$a</span>, <span class="variable">$b</span>] = [<span class="variable">$b</span>, <span class="variable">$a</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list 支持键名</span></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">    [<span class="string">&quot;id&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&#x27;Tom&#x27;</span>],</span><br><span class="line">    [<span class="string">&quot;id&quot;</span> =&gt; <span class="number">2</span>, <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&#x27;Fred&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> [<span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$name</span>, <span class="string">&quot;id&quot;</span> =&gt; <span class="variable">$id</span>]) &#123;</span><br><span class="line">    <span class="comment">// logic here with $id and $name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类常量支持可见性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="variable constant_">PUBLIC_CONST_A</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iterable 伪类（与 callable 类似）</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Traversable</span> <span class="keyword">extends</span> <span class="title">iterable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个接口没有任何方法，它的作用仅仅是作为所有可遍历类的基本接口</span></span><br><span class="line">    <span class="comment">// Traversable as part of either Iterator or IteratorAggregate，不能直接实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params"><span class="keyword">iterable</span> <span class="variable">$iter</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$iter</span> <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多异常捕获处理，可以通过管道字符(|)来实现多个异常的捕获</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FirstException | SecondException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// handle first and second exceptions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支持为负的字符串偏移量，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量</span></span><br><span class="line"><span class="comment">// 所有支持偏移量的字符串操作函数，都支持接受负数作为偏移量</span></span><br><span class="line"><span class="comment">// 中文操作要小心</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;abcdef&quot;</span>[-<span class="number">2</span>]); <span class="comment">// e</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&quot;aabbcc&quot;</span>, <span class="string">&quot;b&quot;</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&quot;aabbcc&quot;</span>, <span class="string">&quot;b&quot;</span>, -<span class="number">3</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增 Closure::fromCallable()，将 callable 转为一个 Closure 对象</span></span><br><span class="line"><span class="comment">// public static Closure::fromCallable(callable $callback): Closure</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exposeFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Closure</span>::<span class="title function_ invoke__">fromCallable</span>([<span class="variable">$this</span>, <span class="string">&#x27;privateFunction&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"><span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$param</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$privFunc</span> = (<span class="keyword">new</span> <span class="title class_">Test</span>)-&gt;<span class="title function_ invoke__">exposeFunction</span>();</span><br><span class="line"><span class="variable">$privFunc</span>(<span class="string">&#x27;some value&#x27;</span>);</span><br><span class="line"><span class="comment">// string(10) &quot;some value&quot;</span></span><br></pre></td></tr></table></figure><h3 id="7-1-New-Functions"><a href="#7-1-New-Functions" class="headerlink" title="7.1 New Functions"></a>7.1 New Functions</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 否为可迭代</span></span><br><span class="line"><span class="title function_ invoke__">is_iterable</span>()</span><br></pre></td></tr></table></figure><h3 id="7-1-Backward-Incompatible-Changes"><a href="#7-1-Backward-Incompatible-Changes" class="headerlink" title="7.1 Backward Incompatible Changes"></a>7.1 Backward Incompatible Changes</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当传递参数过少时将抛出错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;&#125;</span><br><span class="line"><span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">Fatal error: Uncaught ArgumentCountError: Too few arguments to function test()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PHP70</span></span><br><span class="line"><span class="comment">Warning: Missing argument 1 for test()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 禁止动态调用作用域自检函数</span></span><br><span class="line"><span class="comment">// $func() or array_map(&#x27;extract&#x27;, ...)</span></span><br><span class="line"><span class="comment">// function array_map($callback, array $array, array ...$arrays): array</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$func</span> = <span class="string">&#x27;func_num_args&#x27;</span>;</span><br><span class="line">    <span class="variable">$func</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">Warning: Cannot call func_num_args() dynamically</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下名称不能用于命名 class, interface, trait</span></span><br><span class="line"><span class="comment">// - void</span></span><br><span class="line"><span class="comment">// - iterable</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数字字符串转换 遵循科学记数法</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;1e5&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;1e5&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;e&#x27;</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">int(100000)</span></span><br><span class="line"><span class="comment">bool(true)</span></span><br><span class="line"><span class="comment">bool(false)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PHP70</span></span><br><span class="line"><span class="comment">int(1)</span></span><br><span class="line"><span class="comment">bool(true)</span></span><br><span class="line"><span class="comment">bool(false)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// call_user_func() 不再支持对传址的函数的调用</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params">&amp;<span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$var</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;increment&#x27;</span>, <span class="variable">$a</span>); <span class="comment">// ...expected to be a reference, value given</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func_array</span>(<span class="string">&#x27;increment&#x27;</span>, [&amp;<span class="variable">$a</span>]); <span class="comment">// 1</span></span><br><span class="line"><span class="variable">$increment</span> = <span class="string">&#x27;increment&#x27;</span>;</span><br><span class="line"><span class="variable">$increment</span>(<span class="variable">$a</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串不再支持空索引运算符</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">Fatal error: Uncaught Error: [] operator not supported for strings</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PHP70</span></span><br><span class="line"><span class="comment">array(1) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) &quot;abc&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>[<span class="number">0</span>] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">string(1) &quot;h&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PHP70</span></span><br><span class="line"><span class="comment">array(1) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt;</span></span><br><span class="line"><span class="comment">  string(11) &quot;hello world&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过空字符串上的字符串索引访问赋值</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$str</span>[<span class="number">10</span>] = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">string(11) &quot;          f&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PHP70</span></span><br><span class="line"><span class="comment">array(1) &#123;</span></span><br><span class="line"><span class="comment">  [10]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) &quot;foo&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当通过引用赋值引用它们自动创建这些元素时，数组中元素的顺序已更改。</span></span><br><span class="line"><span class="variable">$array</span> = [];</span><br><span class="line"><span class="variable">$array</span>[<span class="string">&#x27;a&#x27;</span>] = &amp;<span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">array(2) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;b&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  &amp;int(1)</span></span><br><span class="line"><span class="comment">  [&quot;a&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  &amp;int(1)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PHP70</span></span><br><span class="line"><span class="comment">array(2) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;a&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  &amp;int(1)</span></span><br><span class="line"><span class="comment">  [&quot;b&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  &amp;int(1)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 词法绑定变量不能重用名称，以下都将 fatal error</span></span><br><span class="line"><span class="variable">$f</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$_SERVER</span></span>) </span>&#123;&#125;; <span class="comment">// any superglobals</span></span><br><span class="line"><span class="variable">$f</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$this</span></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="variable">$f</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$param</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$param</span></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 禁止 &quot;return;&quot; 对于已经在编译时键入的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$i</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$i</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PHP Compile Error A function with return type must return a value</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;1b&#x27;</span> + <span class="string">&#x27;something&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP71</span></span><br><span class="line"><span class="comment">Notice: A non well formed numeric value encountered</span></span><br><span class="line"><span class="comment">Warning: A non-numeric value encountered</span></span><br><span class="line"><span class="comment">int(1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">PHP70</span></span><br><span class="line"><span class="comment">int(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="PHP5-6-to-PHP7-0"><a href="#PHP5-6-to-PHP7-0" class="headerlink" title="PHP5.6 to PHP7.0"></a>PHP5.6 to PHP7.0</h2><blockquote><p><a href="https://www.php.net/manual/en/migration70.php">https://www.php.net/manual/en/migration70.php</a></p></blockquote><h3 id="Backward-incompatible-changes"><a href="#Backward-incompatible-changes" class="headerlink" title="Backward incompatible changes"></a>Backward incompatible changes</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误和异常处理相关的变更</span></span><br><span class="line"><span class="comment">// set_exception_handler() 不再保证收到的一定是 Exception 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"><span class="built_in">Exception</span> <span class="variable">$e</span></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="title function_ invoke__">set_exception_handler</span>(<span class="string">&#x27;handler&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容 PHP 5 和 7</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"><span class="variable">$e</span></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅支持 PHP 7</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"><span class="built_in">Throwable</span> <span class="variable">$e</span></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当内部构造器失败的时候，总是抛出异常</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 间接调用的表达式的新旧解析顺序</span></span><br><span class="line"><span class="comment">// 现在严格遵循从左到右的顺序来解析</span></span><br><span class="line"><span class="comment">// 表达式               PHP 5 的解析方式           PHP 7 的解析方式</span></span><br><span class="line"><span class="variable">$$foo</span>[<span class="string">&#x27;bar&#x27;</span>][<span class="string">&#x27;baz&#x27;</span>]    $&#123;<span class="variable">$foo</span>[<span class="string">&#x27;bar&#x27;</span>][<span class="string">&#x27;baz&#x27;</span>]&#125;    (<span class="variable">$$foo</span>)[<span class="string">&#x27;bar&#x27;</span>][<span class="string">&#x27;baz&#x27;</span>]</span><br><span class="line"><span class="variable">$foo</span>-&gt;<span class="variable">$bar</span>[<span class="string">&#x27;baz&#x27;</span>]      <span class="variable">$foo</span>-&gt;&#123;<span class="variable">$bar</span>[<span class="string">&#x27;baz&#x27;</span>]&#125;      (<span class="variable">$foo</span>-&gt;<span class="variable">$bar</span>)[<span class="string">&#x27;baz&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foreach 通过值遍历时，操作的值为数组的副本</span></span><br><span class="line"><span class="variable">$array</span> = [<span class="number">0</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$val</span>);</span><br><span class="line">    <span class="variable">$array</span>[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach通过引用遍历时，有更好的迭代特性</span></span><br><span class="line"><span class="variable">$array</span> = [<span class="number">0</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> &amp;<span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$val</span>);</span><br><span class="line">    <span class="variable">$array</span>[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PHP 7.0</span></span><br><span class="line"><span class="comment">// int(0)</span></span><br><span class="line"><span class="comment">// int(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP 5.6</span></span><br><span class="line"><span class="comment">// int(0)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// call_user_method() and call_user_method_array() 被移除。</span></span><br><span class="line"><span class="comment">// 应该使用 call_user_func() 和 call_user_func_array()</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在函数中检视参数值会返回 当前 的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="variable">$x</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$x</span>++;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">func_get_arg</span>(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">foo</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// int(2) PHP 7.0</span></span><br><span class="line"><span class="comment">// int(1) PHP 5.6</span></span><br></pre></td></tr></table></figure><h3 id="7-0-New-Features"><a href="#7-0-New-Features" class="headerlink" title="7.0 New Features"></a>7.0 New Features</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标量类型声明</span></span><br><span class="line"><span class="comment">// 返回值类型声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arraysSum</span>(<span class="params"><span class="keyword">array</span> ...<span class="variable">$arrays</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_map</span>(function(<span class="keyword">array</span> <span class="variable">$array</span>): <span class="keyword">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">array_sum</span>(<span class="variable">$array</span>);</span><br><span class="line">    &#125;, <span class="variable">$arrays</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// null 合并运算符，对 isset() 的简化</span></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>] ?? <span class="string">&#x27;nobody&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 太空船操作符（组合比较符）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span> &lt;=&gt; <span class="number">2</span>; <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">2</span> &lt;=&gt; <span class="number">1</span>; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 define() 定义 常量数组</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;ANIMALS&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;dog&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bird&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名类 用来替代一些“用后即焚”的完整类定义</span></span><br><span class="line"><span class="variable">$app</span> = <span class="keyword">new</span> <span class="title class_">Application</span>;</span><br><span class="line"><span class="variable">$app</span>-&gt;<span class="title function_ invoke__">setLogger</span>(<span class="keyword">new</span> <span class="keyword">class</span> <span class="keyword">implements</span> Logger &#123;</span><br><span class="line">    <span class="keyword">public</span> function <span class="title function_ invoke__">log</span>(<span class="keyword">string</span> <span class="variable">$msg</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$msg</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unicode codepoint 转译语法</span></span><br><span class="line"><span class="comment">// 这接受一个以 16 进制形式的 Unicode codepoint</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\u&#123;9999&#125;&quot;</span>; <span class="comment">// 香</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Closure::call() 新方法，简化绑定一个方法到对象上闭包并调用它</span></span><br><span class="line"><span class="comment">// PHP 7 之前版本的代码</span></span><br><span class="line"><span class="variable">$getXCB</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;x;&#125;;</span><br><span class="line"><span class="comment">// function bindTo($newThis, $newScope = &#x27;static&#x27;) &#123; &#125;</span></span><br><span class="line"><span class="comment">// $newScope 将闭包关联到的类作用域</span></span><br><span class="line"><span class="variable">$getX</span> = <span class="variable">$getXCB</span>-&gt;<span class="title function_ invoke__">bindTo</span>(<span class="keyword">new</span> A, A::<span class="variable language_">class</span>); <span class="comment">// 中间层闭包</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$getX</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// PHP 7+ 及更高版本的代码</span></span><br><span class="line"><span class="variable">$getX</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;x;&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$getX</span>-&gt;<span class="title function_ invoke__">call</span>(<span class="keyword">new</span> A);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成器委托 yield from</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> <span class="title function_ invoke__">gen2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">gen</span>() <span class="keyword">as</span> <span class="variable">$val</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$val</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 柯里化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$b</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">add</span>(<span class="number">10</span>)(<span class="number">15</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$result</span>); <span class="comment">// int 25</span></span><br></pre></td></tr></table></figure><h3 id="Deprecated-features-in-PHP-7-0-x"><a href="#Deprecated-features-in-PHP-7-0-x" class="headerlink" title="Deprecated features in PHP 7.0.x"></a>Deprecated features in PHP 7.0.x</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数（方法名和类名一样）将被弃用，并在将来移除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I am the constructor&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PHP 7.0: Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP</span></span><br><span class="line"><span class="comment">// PHP 5.6: OK</span></span><br></pre></td></tr></table></figure><h3 id="Other-Changes"><a href="#Other-Changes" class="headerlink" title="Other Changes"></a>Other Changes</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 放宽了保留词限制，以前不能用 &#x27;new&#x27;、&#x27;private&#x27; 和 &#x27;for&#x27;</span></span><br><span class="line"><span class="title class_">Project</span>::<span class="keyword">new</span>(<span class="string">&#x27;Project Name&#x27;</span>)-&gt;<span class="keyword">private</span>()-&gt;<span class="keyword">for</span>(<span class="string">&#x27;purpose here&#x27;</span>)-&gt;<span class="title function_ invoke__">with</span>(<span class="string">&#x27;username here&#x27;</span>);</span><br><span class="line"><span class="comment">// class 关键词不能用于常量名，否则会和类名解析语法冲突（ClassName::class）</span></span><br></pre></td></tr></table></figure><h3 id="New-Global-Constants"><a href="#New-Global-Constants" class="headerlink" title="New Global Constants"></a>New Global Constants</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP_INT_MIN</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 ondrej/php PPA 管理多个 PHP 版本</title>
      <link href="/2022/11/18/ondrej-multiversion-php/"/>
      <url>/2022/11/18/ondrej-multiversion-php/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ostechnix.com/how-to-switch-between-multiple-php-versions-in-ubuntu/">https://ostechnix.com/how-to-switch-between-multiple-php-versions-in-ubuntu/</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://mwop.net/blog/2019-04-30-ondrej-multiversion-php.html">Managing Multiple PHP versions via the ondrej&#x2F;php PPA</a></li><li><a href="https://man7.org/linux/man-pages/man1/update-alternatives.1.html">update-alternatives(1) — Linux manual page</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Code Snippet</title>
      <link href="/2022/11/17/docker-code-snippet/"/>
      <url>/2022/11/17/docker-code-snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h3><p><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>该默认值可以在构建命令 docker build 中用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> LARADOCK_PHP_VERSION</span><br><span class="line"><span class="keyword">ARG</span> BASE_IMAGE_TAG_PREFIX=latest</span><br><span class="line"><span class="keyword">FROM</span> laradock/workspace:$&#123;BASE_IMAGE_TAG_PREFIX&#125;-$&#123;LARADOCK_PHP_VERSION&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;Mahmoud Zalt &lt;mahmoud@zalt.me&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ARG 指令有生效范围，如果在 FROM 指令之前指定，那么只能用于 FROM 指令中。</span></span><br><span class="line"><span class="comment"># 在 FROM 之后须再次指定 ARG</span></span><br><span class="line"><span class="keyword">ARG</span> LARADOCK_PHP_VERSION</span><br></pre></td></tr></table></figure><h2 id="Config-Setting"><a href="#Config-Setting" class="headerlink" title="Config Setting"></a>Config Setting</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://reg-mirror.qiniu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《MySQL 实战 45 讲》笔记 01</title>
      <link href="/2022/08/14/mysql-course-45-reading-notes-01/"/>
      <url>/2022/08/14/mysql-course-45-reading-notes-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://gk.link/a/11AmM">MySQL 实战 45 讲 | 林晓斌</a></p></blockquote><h2 id="01-基础架构：一条-SQL-查询语句是如何执行的？"><a href="#01-基础架构：一条-SQL-查询语句是如何执行的？" class="headerlink" title="01 | 基础架构：一条 SQL 查询语句是如何执行的？"></a>01 | 基础架构：一条 SQL 查询语句是如何执行的？</h2><img alt="image" src="https://user-images.githubusercontent.com/9289792/184530380-826038a0-335a-45f7-a56e-cff7b336b4a4.png" style="width: 420px" /><p>连接器：跟客户端建立连接、获取权限、维持和管理连接。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br><span class="line"></span><br><span class="line"><span class="number">137462239</span>  db  <span class="number">10.135</span><span class="number">.4</span><span class="number">.7</span>:<span class="number">41261</span>  db  Query  <span class="number">0</span>  starting  <span class="keyword">show</span> processlist</span><br><span class="line"><span class="comment">-- 一个空闲连接</span></span><br><span class="line"><span class="number">137462293</span>  db  <span class="number">10.130</span><span class="number">.128</span><span class="number">.1</span>:<span class="number">47174</span>  db  Sleep  <span class="number">24</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 客户端如果太长时间没动静，连接器就会自动将它断开</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@wait</span>_timeout;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;wait_timeout&#x27;</span>;</span><br><span class="line"><span class="comment">-- 28800 8h</span></span><br></pre></td></tr></table></figure><p>通过执行 <code>mysql_reset_connection</code> 来重新初始化连接资源，这是个接口函数，不是一个 SQL 语句。</p><p>查询缓存：不建议使用。在一个表上有更新的时候，跟这个表有关的查询缓存都会失效。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@query</span>_cache_type;</span><br><span class="line"><span class="comment">-- OFF</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_query_cache_type">sysvar_query_cache_type | mysql</a></li></ul><p>分析器：词法分析、语法分析。进行分词和验证语法规则。解析器和预处理器。</p><ul><li>解析器处理语法和解析查询，生成一课对应的解析树。</li><li>预处理器进一步检查解析树的合法。比如: 数据表和数据列是否存在，别名是否有歧义等。如果通过则生成新的解析树，再提交给优化器。</li></ul><p>优化器：决定使用哪个索引，决定各个表的连接顺序。</p><p>执行器：有没有执行查询的权限，操作引擎，返回结果。执行器调用的次数（rows_examined）与引擎总共扫描行数可能是不等的，后文有例子。</p><p>读写、存取数据在 engine 引擎层，连接、鉴权、计算在 server 服务层。</p><p>连接的长短是由客户端来决定的，MySQL 服务端不会主动断开连接，除非到了 waiting_timeout 所设置的时间。</p><p>查询一个没用 k 列的表 <code>1054 - Unknown column &#39;k&#39; in &#39;field list&#39;</code> 是在哪阶段报错的？</p><ul><li>答案是：分析器。分析器在词法分析阶段，需要知道 SQL 中的每个字段代表什么意思，所以在这个阶段就可以判断表中存不存在 k 这一列。</li><li>不是执行器的原因：有人说在执行器时才打开表获取数据，但是表的字段不是数据，是事先定义好的，所以可以直接读取的，不需要打开表。</li></ul><h2 id="02-日志系统：一条-SQL-更新语句是如何执行的？"><a href="#02-日志系统：一条-SQL-更新语句是如何执行的？" class="headerlink" title="02 | 日志系统：一条 SQL 更新语句是如何执行的？"></a>02 | 日志系统：一条 SQL 更新语句是如何执行的？</h2><p>WAL 的全称是 Write-Ahead Logging，先写日志，再写磁盘。</p><ol><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><ul><li>物理：InnoDB 存储引擎提供接口给执行器调用（操作数据），数据库的数据是存在磁盘上的（或者说硬盘上），那么 redo log 记录存储引擎修改硬盘上的数据的操作就叫做物理操作；物理日志就只有“我”自己能用，别人没有共享我的“物理格式”。</li><li>逻辑：binlog 归档日志，有两种模式 1 statement 记录 SQL；2 row 格式记录两条数据，数据修改前的样子，数据修改后的样子。记录的是一种逻辑上的变化 。逻辑日志可以给别的数据库，别的引擎使用，已经大家都讲得通这个“逻辑”。</li></ul><img alt="image" src="https://user-images.githubusercontent.com/9289792/184621469-ce7bea97-685a-421f-a582-0d571badc226.png" style="width: 420px" /><p>把 binlog 夹在 redo log 中间，就是为了保证如果 redo 提交前的任何失败，都会带来回滚，binlog 的写入也应该不会成功，只有这样，才能保证两个一致。</p><ul><li>如果提交了 binlog，提交事务接口崩溃了，恢复时 redo log 有日志记录，binlog 有日志记录，一致，直接自动提交事务，事务完成确认数据修改成功。</li><li>如果提交 binlog 前就崩了，redo log 是 prepare 阶段，binlog 没有记录不一致，事务回滚，事务执行失败。</li></ul><p>redo log 负责事务、crash-safe；binlog 负责归档恢复。redo log 是物理的，binlog 是逻辑的。</p><p>redo log 是顺序写，数据文件是随机写。</p><p>MySQL 的记录是以“页”为单位存取的，默认大小 16K。也就是说，你要访问磁盘中一个记录，不会只读这个记录，而会把它所在的 16K 数据一起读入内存。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 每个 binlog 文件的大小</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@max</span>_binlog_size <span class="operator">/</span> <span class="number">1024</span> <span class="operator">/</span> <span class="number">1024</span>;</span><br><span class="line"><span class="comment">-- 256.00000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一页数据大小</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@innodb</span>_page_size <span class="operator">/</span> <span class="number">1024</span>;</span><br><span class="line"><span class="comment">-- 16.0000</span></span><br></pre></td></tr></table></figure><p>redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 保证 crash-safe 能力；每次事务的 redo log 都直接持久化到磁盘</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@innodb</span>_flush_log_at_trx_commit;</span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 每次事务的 binlog 都持久化到磁盘</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@sync</span>_binlog;</span><br><span class="line"><span class="comment">-- 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@binlog</span>_format;</span><br><span class="line"><span class="comment">-- STATEMENT 是记 SQL 语句，但是有风险比如时间函数</span></span><br><span class="line"><span class="comment">-- ROW 记录行的内容，记两条，更新前和更新后都有</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://segmentfault.com/a/1190000042041728">彻底搞懂三大 MySQL 日志，Redo Log、Undo Log、Bin Log</a></li><li><a href="https://blog.51cto.com/u_3664660/3212550">彻底搞懂 mysql 日志系统 binlog,redolog,undolog</a></li></ul><h2 id="03-事务隔离：为什么你改了我还看不见？"><a href="#03-事务隔离：为什么你改了我还看不见？" class="headerlink" title="03 | 事务隔离：为什么你改了我还看不见？"></a>03 | 事务隔离：为什么你改了我还看不见？</h2><p>脏读（dirty read）读到其他事务未提交的数据，仅发生在读未提交的的隔离级别下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session1 当数据库中一个事务A正在修改一个数据但是还未提交或者回滚</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> k <span class="keyword">FROM</span> T1 <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">UPDATE</span> T1 <span class="keyword">SET</span> k<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2</span></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"><span class="keyword">SELECT</span> k <span class="keyword">FROM</span> T1 <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 2 session2 出现脏读</span></span><br></pre></td></tr></table></figure><p>不可重复读（non-repeatable read）前后读取的记录内容不一致，发生在读未提交、读提交的隔离级别：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session1 在一个事务A中多次操作数据，在事务操作过程中(未最终提交)</span></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> k <span class="keyword">FROM</span> T1 <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2 修改改值</span></span><br><span class="line"><span class="keyword">UPDATE</span> T1 <span class="keyword">SET</span> k<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- session1</span></span><br><span class="line"><span class="keyword">SELECT</span> k <span class="keyword">FROM</span> T1 <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 2 session1 出现不可重复读</span></span><br></pre></td></tr></table></figure><p>幻读（phantom read）前后读取的记录数量不一致，发生在读未提交、读提交的隔离级别，InnoDB RR 不发生幻读：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session1 获取当前行数量</span></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T1 <span class="keyword">WHERE</span> k<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2 插入一行数</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T1 (k) <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- session1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> T1;</span><br><span class="line"><span class="comment">-- 2</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session1 表数据</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T1;</span><br><span class="line"><span class="comment">-- id,k 1,1 只有一行数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2 更新 id 主键</span></span><br><span class="line"><span class="keyword">UPDATE</span> T1 <span class="keyword">SET</span> id<span class="operator">=</span><span class="number">5</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- session1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T1;</span><br><span class="line"><span class="comment">-- id,k 1,1</span></span><br><span class="line"><span class="keyword">UPDATE</span> T1 <span class="keyword">SET</span> id<span class="operator">=</span>id<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- ok</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T1;</span><br><span class="line"><span class="comment">-- 竟然看到了两行 1,1 6,1</span></span><br><span class="line"><span class="comment">-- 1,1 MVCC 保证了 1,1 的存在</span></span><br><span class="line"><span class="comment">-- 因为主键的 UPDATE 在 MySQL 里是以 insert+delete 方式执行的。这个 6 和 1 在 MySQL 看来已经不是同一行数据了，1 的 delete version 是在事务 1 的可见范围，所以才能看得到。如果是非主键就只用一行，就是下面的例子.</span></span><br><span class="line"><span class="comment">-- 这个例子不能被归类为幻读，只不过是当前最新读带来的问题。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session1 获取 id=1 的 k</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> k <span class="keyword">FROM</span> T1;</span><br><span class="line"><span class="comment">-- 1 一行数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- session2 更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> T1 <span class="keyword">SET</span> k<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- session1</span></span><br><span class="line"><span class="keyword">SELECT</span> k <span class="keyword">FROM</span> T1;</span><br><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">UPDATE</span> T1 <span class="keyword">SET</span> k<span class="operator">=</span>k<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- ok</span></span><br><span class="line"><span class="keyword">SELECT</span> k <span class="keyword">FROM</span> T1;</span><br><span class="line"><span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://www.zhihu.com/question/47007926">关于幻读，可重复读的真实用例是什么？| zhihu</a></li></ul><p>不可重复读和幻读区别：由于在 InnoDB RR 下模拟不出幻读的场景，退回到 RC 隔离级别的话就容易把幻读和不可重复读搞混淆。理论上 RR 级别是无法解决幻读的问题, 但是由于 InnoDB 引擎的 RR 级别还使用了 MVCC，所以也就避免了幻读的出现。</p><p>后文有讲到 FOR UPDATE 下的幻读。</p><p>事务隔离级别：</p><ul><li>读未提交（READ UNCOMMITTED）一个事务还没提交时，它做的变更就能被别的事务看到。直接返回记录上的最新值，没有视图概念。</li><li>读提交（READ COMMITTED）一个事务提交之后，它做的变更才会被其他事务看到。这个视图是在每个 SQL 语句开始执行的时候创建的。</li><li>可重复读（REPEATABLE READ）一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的 read-view。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。这个视图是在事务启动时（第一个 SQL 执行时）创建的，整个事务存在期间都用这个视图。</li><li>串行化（SERIALIZABLE）对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。用加锁的方式来避免并行访问。</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%tx_isolation%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;transaction_isolation&#x27;</span>;</span><br><span class="line"><span class="comment">-- tx_isolation  REPEATABLE-READ</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="comment">-- REPEATABLE-READ</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"><span class="comment">-- 修改 session 事务隔离级别</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://dev.mysql.com/doc/refman/8.0/en/set-transaction.html">SET TRANSACTION Statement | mysql</a></p></blockquote><p>多版本并发控制（MVCC）</p><p><code>set autocommit=0</code>，这个命令会将这个线程的自动提交关掉。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 持续时间超过 60s 的事务</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.innodb_trx <span class="keyword">where</span> TIME_TO_SEC(timediff(now(),trx_started))<span class="operator">&gt;</span><span class="number">60</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">commit</span> work <span class="keyword">and</span> chain;</span><br><span class="line"><span class="comment">-- 等价于 commit; begin;</span></span><br></pre></td></tr></table></figure><p>如何避免长事务对业务的影响？</p><ul><li>确认是否使用了 set autocommit&#x3D;0，如果没有，则可以使用 set autocommit&#x3D;1 来避免长事务对业务的影响。</li><li>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin&#x2F;commit 框起来。</li><li>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。</li><li>监控 information_schema.Innodb_trx 表，设置长事务阈值。</li><li>开发测试阶段输出所用 general_log，分析日志提前发现问题。</li></ul><h2 id="04-深入浅出索引（上）"><a href="#04-深入浅出索引（上）" class="headerlink" title="04 | 深入浅出索引（上）"></a>04 | 深入浅出索引（上）</h2><ul><li>哈希表：这种结构适用于只有等值查询的场景。</li><li>有序数组：有序数组在等值查询和范围查询场景中的性能就都非常优秀。但有序数组索引只适用于静态存储引擎</li><li>搜索树：平衡二叉树是 O(log(N)) 的查询复杂度；N 叉树，以 InnoDB 整数字段索引为例，这个 N 差不多是 1200。</li></ul><blockquote><p>MySQL 默认一个节点的长度为 16K，一个整数（bigint）字段索引的长度为 8B，另外每个索引还跟着 6B 的指向其子树的指针；所以 16K&#x2F;14B ≈ 1170</p></blockquote><p>innodb B+树主键索引的叶子节点存的是什么：</p><p>回复 1：</p><blockquote><p>InnoDB 磁盘管理的最小单位就是“页”，也就是说无论是叶子节点、非叶子节点和行数据，都是存放在页当中。页组成结构有头部数据、主体数据和尾部数据。头部数据主要存的是页相关数据，例如上一页、下一页、当前页号等。是一个双向链表结构。主体数据主要关注索引和数据的存储，也就是我们常说的索引和数据的存储位置。主体数据当中有一个“User Records”的概念，用来存储索引和数据，是一个单链表结构。<br>User Records 根据节点的不同，User Records 又分为四种不同类型：主键索引树叶子节点和非叶子节点，二级索引树叶子节点和非叶子节点。<br>有了页和 User Records 的认识，其实说叶子节点存的是页是一种笼统的回答，基于我的理解，我认为叶子节点（主键索引树叶子节点）存放的是行数据更为贴切。</p></blockquote><p>回复 2：</p><blockquote><p>B+树的叶子节点是 page（页），一个页里面可以存多个行。 B+树的结点跟 innoDB 的“页”都属于一种抽象逻辑概念。如果你要问“存”的是什么？我觉得回答行数据没毛病。因为存的不可能是“页”。这一逻辑概念，只能说这个叶结点大小等于 innoDB 里设置的页大小，或者说这个叶结点其实就是“页”。但存的是什么？那当然是数据，什么数据？当然是表中的行数据。</p></blockquote><p>索引类型分为主键索引和非主键索引。</p><ul><li>主键索引也被称为聚簇索引（clustered index）</li><li>非主键索引也被称为二级索引（secondary index）</li></ul><p>基于非主键索引的查询需要多扫描一棵索引树，也就是主键索引树，也就是回表操作。</p><p>自增主键的意义：</p><ul><li>性能方面：每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂（页分裂）。</li><li>存储空间方面：主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</li></ul><p>有没有什么场景适合用业务字段直接做主键的呢？</p><ul><li>只有一个索引</li><li>该索引必须是唯一索引</li></ul><p>即典型的 KV 场景。</p><p>非聚集索引上为啥叶子节点的 value 为什么不是地址，这样可以直接定位到整条数据，而不用再次对整棵树进行查询？</p><p>这个叫作“堆组织表”，MyISAM 就是这样的，各有利弊。你想一下如果修改了数据的位置的情况，InnoDB 这种模式是不是就方便些。主键索引页分裂的场景，就可能会导致主键记录的地址发生变化，这时候需要更新每一个索引上面对主键记录地址的引用。</p><h2 id="05-深入浅出索引（下）"><a href="#05-深入浅出索引（下）" class="headerlink" title="05 | 深入浅出索引（下）"></a>05 | 深入浅出索引（下）</h2><p>覆盖索引：在查询里索引已经覆盖了查询需要的列。覆盖索引可以减少树的搜索次数，显著提升查询性能，是一个常用的性能优化手段。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> k <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>表中 k 的值是：1，2，3，5，6，7。引擎内部使用覆盖索引在索引 k 上其实读了三个记录（第一次 3，第二次 3 的下一个 5，第三次 5 的下一个 6 不满足 ），但是对于 MySQL 的 Server 层来说，它只是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。这就是引擎实际扫描条数不等于 MySQL explain 语句中的 rows 字段的原因。</p><p>最左前缀原则：B+树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</p><p>第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p><p>如果需要常查人的名字与年龄。可以建立索引 (name,age) 与 (age)，而不是 (age,name) 与 (age)，考虑的原则就是空间。</p><p>索引下推优化（index condition pushdown)：</p><p>联合索引（name,age）为例，名字第一个字是张，而且年龄是 10 岁的所有男孩：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tuser <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> ismale<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这个语句在搜索索引树的时候，只能用 “张”。</p><ul><li>在 MySQL 5.6 之前，只能从符合 ‘张%’ 开始一个个回表。到主键索引上找出数据行，再对比字段值。</li><li>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</li></ul><img alt="image" src="https://user-images.githubusercontent.com/9289792/185831784-b6f62f71-a0f7-49c8-afe4-dda0f2dc335a.png" style="width: 420px" /><p>InnoDB 在（name,age）索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。</p><p>联合索引中是按索引列的顺序，来排序的。（name,age）先排 name 列的值，再排 age 列的值。</p><p>在满足语句需求的情况下，尽量少地访问资源是数据库设计的重要原则之一。</p><h2 id="06-全局锁和表锁：给表加个字段怎么有这么多阻碍？"><a href="#06-全局锁和表锁：给表加个字段怎么有这么多阻碍？" class="headerlink" title="06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍？"></a>06 | 全局锁和表锁：给表加个字段怎么有这么多阻碍？</h2><p>全局锁：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 加全局读锁 FTWRL，整个库处于只读状态；做全库逻辑备份</span></span><br><span class="line">FLUSH TABLES <span class="keyword">WITH</span> READ LOCK;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入一行数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br><span class="line"><span class="comment">-- Waiting for global read lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p>但是让整库都只读，听上去就很危险：</p><ul><li>如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</li><li>如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。</li></ul><p>在可重复读隔离级别下开启一个事务，来确保拿到一致性视图。mysqldump 使用参数 <code>-single-transaction</code> 就是如此执行的。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p><p>有了可重复读的事务隔离级别却还需要 FTWRL 的原因是：引擎不都支持这个事务隔离级别。</p><p>既然要全库只读，为什么不使用 <code>set global readonly=true</code> 的方式</p><ul><li>在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。修改 global 变量的方式影响面更大。</li><li>在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将<br>整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</li></ul><p>表级锁：</p><p>第一类表锁：<a href="https://dev.mysql.com/doc/refman/5.7/en/lock-tables.html">lock-tables | mysql</a></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOCK TABLES T1 READ, T2 WRITE;</span><br><span class="line"><span class="comment">-- 其他线程 写 T1、读写 T2 的语句都会被阻塞</span></span><br><span class="line"><span class="comment">-- 当前线程也只能执行 读 T1、读写 T2 的操作，其他表都不能访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当前线程读 T2</span></span><br><span class="line"><span class="comment">-- Waiting for table metadata lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当前线程读 T3</span></span><br><span class="line"><span class="comment">-- 1100 - Table &#x27;T3&#x27; was not locked with LOCK TABLES</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表锁</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">WHERE</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>第二类 MDL（metadata lock)：</p><p>MDL 不需要显式使用：</p><ul><li>当对一个表做增删改查操作的时候，加 MDL 读锁。读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。共享锁。</li><li>当要对表做结构变更操作的时候，加 MDL 写锁。读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。排他锁。</li></ul><p>给一个小表加个字段，导致整个库挂了：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session1</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 开启使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T;</span><br><span class="line"><span class="comment">-- 查询 T 表，一切 ok</span></span><br><span class="line"><span class="comment">-- 获取 MDL 读锁 ok，因为在事务中，查询结束后没有释放读锁。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.innodb_trx;</span><br><span class="line"><span class="comment">-- 查询事务有个 RUNNING</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T;</span><br><span class="line"><span class="comment">-- 查询 T 表，一切 ok</span></span><br><span class="line"><span class="comment">-- 获取 MDL 读锁 ok，查询结束后释放读锁。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session3</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `T` <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `c2` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 修改字段，卡住</span></span><br><span class="line"><span class="comment">-- blocked 原因：是因为 session1 的 MDL 读锁还没有释放，而 session3 需要 MDL 写锁，因此只能被阻塞。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">WHERE</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- In_use 1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- session4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> T;</span><br><span class="line"><span class="comment">-- 查询 T 表，卡住</span></span><br><span class="line"><span class="comment">-- blocked 原因：对表的增删改查操作都需要先申请 MDL 读锁，都被 session3 阻塞。</span></span><br></pre></td></tr></table></figure><img alt="image" src="https://user-images.githubusercontent.com/9289792/185884836-f36feff9-1668-4f37-ad06-1fff9d9c18ef.png" style="width: 420px" /><p>这里自己想了一个问题：session4 卡住后，session1 COMMIT 后，session4 的 SELECT 执行结果是否有 session3 的新列呢？</p><p>从结果上看是没有的。开始以为是事务级别，但是调整为 READ UNCOMMITTED，session4 仍然没有新列。后来了解到 online DDL 意识到应该有关系。测试后得出 session3 在获取写锁后，在做 DDL 前会释放写锁加读锁，这时 session4 就可以执行了，但是这时 DDL 还没有执行，所以 session4 的执行结果没有新列。</p><p>如果 session3 执行语句是：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `T` <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `c2` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NULL</span>, LOCK<span class="operator">=</span>EXCLUSIVE;</span><br><span class="line"><span class="comment">-- NONE：允许并发查询和DML操作；</span></span><br><span class="line"><span class="comment">-- SHARED：允许并发查询，但不允许DML操作；</span></span><br><span class="line"><span class="comment">-- DEFAULT：允许尽可能多的并发查询或DML操作(或两者都允许)，没指定LOCK选项默认就为DEFAULT；</span></span><br><span class="line"><span class="comment">-- EXCLUSIVE：不允许并发查询和DML操作。</span></span><br></pre></td></tr></table></figure><p>EXCLUSIVE 时写锁会一直持有，一直等到 DDL 完毕 session4 才开始执行，所以 session4 的执行结果有新列。</p><p>衍生问题：session3 如果没有 <code>LOCK=EXCLUSIVE</code>，session4 查询前 <code>BEGIN;</code> 开启事务那结果是如何呢？实验结果：session1 提交后，session3 session4 依然阻塞。</p><p>衍生问题：session3 添加 <code>LOCK=EXCLUSIVE</code>，session4 查询前 <code>BEGIN;</code> 开启事务那结果是如何呢？实验结果：ssession1 提交后，session3 session4 正常结束。</p><p>分析猜测 session3 阻塞的原因是：session1 提交后释放了读锁，session3 session4 拿到读锁，session3 DDL 操作完成后又要拿写锁，但是 session4 的读锁未释放，所以 session3 阻塞。那 session4 为啥阻塞呢？session4 可以获取读锁就应该可以执行完毕，遗留问题。</p><p>如何安全地给小表加字段？</p><ul><li>解决长事务，事务不提交，就会一直占着 MDL 锁。</li><li>在 ALTER TABLE 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name NOWAIT <span class="keyword">add</span> <span class="keyword">column</span> ...</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name WAIT N <span class="keyword">add</span> <span class="keyword">column</span> ...</span><br></pre></td></tr></table></figure><p>实测：MySQL 5.7.30 不支持。腾讯云 MySQL 5.7.18-txsql-log 支持。</p><ul><li><a href="https://cloud.tencent.com/document/product/236/48838">支持 NOWAIT 语法 | cloud.tencent</a></li></ul><h2 id="07-行锁功过：怎么减少行锁对性能的影响？"><a href="#07-行锁功过：怎么减少行锁对性能的影响？" class="headerlink" title="07 | 行锁功过：怎么减少行锁对性能的影响？"></a>07 | 行锁功过：怎么减少行锁对性能的影响？</h2><p>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</p><p>如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p><p>举例：</p><ol><li>从顾客 A 账户余额中扣除电影票价；UPDATE</li><li>给影院 B 的账户余额增加这张电影票价；UPDATE 最容易发送锁等待的地方</li><li>记录一条交易日志。INSERT</li></ol><p>以 3、1、2 顺序执行可以最大程度地减少了事务之间的锁等待，提升了并发度。</p><p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。</p><img alt="image" src="https://user-images.githubusercontent.com/9289792/186377931-53a1b737-3149-4985-820f-87ffd1319158.png" style="width: 420px" /><p>上图 session1 在等 session2 id&#x3D;2 的锁，session2 在等 session1 id&#x3D;1 的锁，进入死锁状态。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 所等待超时时间 s</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@innodb</span>_lock_wait_timeout;</span><br><span class="line"><span class="comment">-- 7200 2h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@innodb</span>_deadlock_detect;</span><br><span class="line"><span class="comment">-- 1213 - Deadlock found when trying to get lock; try restarting transaction</span></span><br></pre></td></tr></table></figure><p>主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的：</p><p>每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。</p><p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n)的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。这期间要消耗大量的 CPU 资源。即：热点行更新导致的性能问题。</p><p>可以通过尝试将热点数据拆分多行进行处理，提高并发处理。</p><h2 id="08-事务到底是隔离的还是不隔离的？"><a href="#08-事务到底是隔离的还是不隔离的？" class="headerlink" title="08 | 事务到底是隔离的还是不隔离的？"></a>08 | 事务到底是隔离的还是不隔离的？</h2><p><code>begin/start transaction</code> 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION <span class="keyword">WITH</span> CONSISTENT SNAPSHOT;</span><br></pre></td></tr></table></figure><p>有两个“视图”的概念：</p><ul><li>一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view …，而它的查询方法与表一样。</li><li>另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。</li></ul><p>在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。</p><p>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell Code Snippet</title>
      <link href="/2022/07/28/shell-code-snippet/"/>
      <url>/2022/07/28/shell-code-snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="pkgs-org"><a href="#pkgs-org" class="headerlink" title="pkgs.org"></a>pkgs.org</h2><p><a href="https://pkgs.org/download/vim-common">https://pkgs.org/download/vim-common</a></p><h2 id="命令后台运行"><a href="#命令后台运行" class="headerlink" title="命令后台运行"></a>命令后台运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台运行，关掉终端会停止运行</span></span><br><span class="line">cmd &amp;</span><br><span class="line"><span class="comment"># 后台运行，关掉终端不会停止运行</span></span><br><span class="line"><span class="built_in">nohup</span> cmd &amp;</span><br></pre></td></tr></table></figure><ul><li>ctrl + z 将正在前台执行的命令放到后台，且让命令处于暂停状态。？</li><li>jobs：查看当前有多少在后台运行的命令，-l 选项可显示所有任务的 PID。</li><li>fg：将后台命令放回前台运行（可以跟 jobid ）。</li><li>bg：将嵌套命令放到后台运行（可以跟 jobid ）。</li></ul><h2 id="lookup-CNAME-records"><a href="#lookup-CNAME-records" class="headerlink" title="lookup CNAME records"></a>lookup CNAME records</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig zyf.im cname</span><br><span class="line"><span class="comment"># ;; ANSWER SECTION:</span></span><br><span class="line"><span class="comment"># zyf.im.  300  IN  CNAME  imzyf.github.io.</span></span><br></pre></td></tr></table></figure><h2 id="查找大文件"><a href="#查找大文件" class="headerlink" title="查找大文件"></a>查找大文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -s ./*|<span class="built_in">sort</span> -nr|<span class="built_in">head</span> -3</span><br></pre></td></tr></table></figure><p>一般说来不会出现删除文件后空间不释放的情况，但是也存在例外，比如文件被进程锁定，或者有进程一直在向这个文件写数据等等，要理解这个问题，就需要知道 Linux 下文件的存储机制和存储结构。</p><p>一个文件在文件系统中的存放分为两个部分：数据部分和指针部分，指针位于文件系统的 meta-data 中，数据被删除后，这个指针就从 meta-data 中清除了，而数据部分存储在磁盘中，数据对应的指针从 meta-data 中清除后，文件数据部分占用的空间就可以被覆盖并写入新的内容，之所以出现删除 access_log 文件后，空间还没释放，就是因为 httpd 进程还在一直向这个文件写入内容，导致虽然删除了 access_log 文件，但文件对应的指针部分由于进程锁定，并未从 meta-data 中清除，而由于指针并未被删除，那么系统内核就认为文件并未被删除，因此通过 df 命令查询空间并未释放也就不足为奇了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取一个已经被删除但仍然被应用程序占用的文件列表</span></span><br><span class="line">lsof | grep delete</span><br></pre></td></tr></table></figure><p>通过这种方法，磁盘空间不但可以马上释放，也可保障进程继续向文件写入日志，这种方法经常用于在线清理 Apache、Tomcat、Nginx 等 Web 服务产生的日志文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span> &gt;/tmp/acess.log</span><br></pre></td></tr></table></figure><h2 id="grep-遍历文件夹查找文本内容"><a href="#grep-遍历文件夹查找文本内容" class="headerlink" title="grep 遍历文件夹查找文本内容"></a>grep 遍历文件夹查找文本内容</h2><p>有时候我们需要在某一个包含很多子目录的目录中搜索查找包含某个文本内容的文本，我们可以在 grep 中加上 -r 选项让 grep 命令迭代进入子目录查找。同时在命令最后加上代表文件通配符的*号，不然 grep 会一直等待输入。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r <span class="string">&quot;查找文本内容&quot;</span> *</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul><li><a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">The Set Builtin | gnu</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">Bash 脚本 set 命令教程 | ruanyifeng</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit <span class="comment">#等价 set -e。只要发生错误，就终止执行。认为非0就是错误。</span></span><br><span class="line"><span class="built_in">set</span> +o nounset <span class="comment"># 等价 set +u。遇到不存在的变量不报错。默认如此。</span></span><br><span class="line"><span class="built_in">set</span> -o pipefail <span class="comment"># 只要一个子命令失败，整个管道命令就失败，脚本就会终止执行。</span></span><br><span class="line"><span class="built_in">set</span> -o xtrace <span class="comment"># 等价 set -x。在运行结果之前，先输出执行的那一行命令，调试复杂的脚本是很有用。</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"><span class="built_in">set</span> -o xtrace</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4合1</span></span><br><span class="line"><span class="built_in">set</span> -euxo pipefail</span><br><span class="line"><span class="comment">## 写法二</span></span><br><span class="line"><span class="built_in">set</span> -eux</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者执行命令时</span></span><br><span class="line">bash -euxo pipefail script.sh</span><br></pre></td></tr></table></figure><p>如果脚本里面有运行失败的命令（返回值非 0），Bash 默认会继续执行后面的命令。</p><p>实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。这时，一般采用下面的写法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>上面的写法表示只要 command 有非零返回值，脚本就会停止执行。</p><p>如果停止执行之前需要完成多个操作，就要采用下面三种写法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line"><span class="built_in">command</span> || &#123; <span class="built_in">echo</span> <span class="string">&quot;command failed&quot;</span>; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;command failed&quot;</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span> -ne 0 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;command failed&quot;</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>如果两个命令有继承关系，只有第一个命令成功了，才能继续执行第二个命令，那么就要采用下面的写法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure><h2 id="CDPATH"><a href="#CDPATH" class="headerlink" title="CDPATH"></a>CDPATH</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Unset CDPATH so that path interpolation can work correctly</span></span><br><span class="line"><span class="built_in">unset</span> CDPATH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CDPATH=/etc</span><br><span class="line"><span class="built_in">cd</span> mail</span><br><span class="line">/etc/mail</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-命令行下设置时区"><a href="#Ubuntu-命令行下设置时区" class="headerlink" title="Ubuntu 命令行下设置时区"></a>Ubuntu 命令行下设置时区</h2><ul><li>Ubuntu 16.04</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><p>按提示进行选择完成。</p><p>设置完成后发现在 <code>crontab</code> 仍然是按 UTC 执行的，应该是需要重启下系统或者：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/rsyslog restart</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-命令行下打开-PDF"><a href="#Ubuntu-命令行下打开-PDF" class="headerlink" title="Ubuntu 命令行下打开 PDF"></a>Ubuntu 命令行下打开 PDF</h2><p>一个文件夹中存放了大量的文件后，在窗口打开中被打开时是非常耗时的。当我们已经明确知道文件名时，可以直接在 Terminal 中使用命令，调用应用打开文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">evince filename.pdf</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://askubuntu.com/questions/323131/setting-timezone-from-terminal">setting timezone from terminal - Ask Ubuntu</a></li><li><a href="https://askubuntu.com/questions/54364/how-do-you-set-the-timezone-for-crontab">cron - How do you set the timezone for crontab? - Ask Ubuntu</a></li><li><a href="http://blog.csdn.net/bigmarco/article/details/6555582">Ubuntu 命令行打开 PDF 文件 - bigmarco 的专栏</a></li><li><a href="https://www.cnblogs.com/xd502djj/p/6668632.html">Linux 文件删除，但是 df 之后磁盘空间没有释放 | cnblogs</a></li><li><a href="https://www.nslookup.io/cname-lookup/">How to lookup CNAME records | nslookup.io</a></li><li><a href="https://juejin.cn/post/6985727600320593951">Linux 命令后台运行</a></li></ul><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Front-end Code Snippet</title>
      <link href="/2022/07/26/front-end-code-snippet/"/>
      <url>/2022/07/26/front-end-code-snippet/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="库推荐"><a href="#库推荐" class="headerlink" title="库推荐"></a>库推荐</h2><h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p><a href="https://github.com/Pana/nrm">Pana&#x2F;nrm</a></p><p>nrm can help you easy and fast switch between different npm registries, now include: npm, cnpm, taobao, nj(nodejitsu).</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line"></span><br><span class="line">nrm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">nrm use tencent</span><br></pre></td></tr></table></figure><h2 id="Website"><a href="#Website" class="headerlink" title="Website"></a>Website</h2><ul><li><a href="https://w3techs.com/">W3Techs - World Wide Web Technology Surveys</a></li><li><a href="https://github.com/nodejs/release#release-schedule">nodejs release schedule</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022Q3 随想录</title>
      <link href="/2022/07/01/2022-q3-thinking/"/>
      <url>/2022/07/01/2022-q3-thinking/</url>
      
        <content type="html"><![CDATA[<p>生活或者工作中总有些值得记录下的小感想，没必单独写一篇独立文章那就写在 <code>随想录</code> 里吧。<code>随想录</code> 以季度为单位开设。</p><p>开 <code>随想录</code> 专题的直接原因是：在翻看扔进 <code>_drafts</code> 里 18 年写的工作笔记，看到当时留下的一些技术疑问而现在已有答案。这真是一种很棒的感觉，可以感觉到自己的成长、变化，可以复盘自己是否走向自己希望的方向。</p><p>自己每天都和自己在一起，很不容感觉到自己变化。不记录事件下当时的想法，在之后回顾此时身处事情之外很容易对当时的想法进行修饰或者修正，变的面目全非。</p><p>还是多写写吧，就当快照一样记录下当时的想法。“正经人谁写日记啊。”</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="Swoft-process-BF-getRequestBean"><a href="#Swoft-process-BF-getRequestBean" class="headerlink" title="Swoft process BF getRequestBean"></a>Swoft process BF getRequestBean</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="title class_">Co</span>::<span class="title function_ invoke__">tid</span>();</span><br><span class="line">SwoftBF::<span class="title function_ invoke__">getRequestBean</span>(<span class="string">&#x27;MyBean&#x27;</span>, (<span class="keyword">string</span>) <span class="variable">$id</span>);</span><br></pre></td></tr></table></figure><p>本意是每次请求下可以获取相同的 bean，但是在 process 模式下，<code>Co::tid()</code> 总为 1，不符合每次执行下的预期。暂改为 <code>Co::id()</code>。swoole 待继续深入学习。</p><h3 id="PHP-直接索引取值的风险"><a href="#PHP-直接索引取值的风险" class="headerlink" title="PHP 直接索引取值的风险"></a>PHP 直接索引取值的风险</h3><p>数组里有多个值是取第一个：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable">$first</span> = <span class="variable">$arr</span>[<span class="number">0</span>]; <span class="comment">// 风险操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$arr</code> 可能是个键值对，也可能之前调用过 <code>array_unqiue()</code> 索引有变化。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Arr::first 里是实现：</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"><span class="variable">$array</span>, <span class="keyword">callable</span> <span class="variable">$callback</span> = <span class="literal">null</span>, <span class="variable">$default</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="comment">// 进行遍历去第一个</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迁移-2018-笔记"><a href="#迁移-2018-笔记" class="headerlink" title="迁移 2018 笔记"></a>迁移 2018 笔记</h2><h3 id="未明确指定字段所属表的隐患"><a href="#未明确指定字段所属表的隐患" class="headerlink" title="未明确指定字段所属表的隐患"></a>未明确指定字段所属表的隐患</h3><p>在修改表结构时，在 <code>a</code> 表新添加 <code>name</code> 字段，<code>b</code> 表本事就有 <code>name</code> 字段；原来的项目中有 <code>a</code> <code>b</code> 表的关联查询，并用到了 <code>name</code> 字段。这时，原来 <code>name</code> 指的是 <code>a</code> 还是 <code>b</code> 表中的变的不确定了，造成报错。</p><p>主要原因就是在连表时：未明确指定字段所属表，造成了伏笔。</p><blockquote><p>2022Q3：关联查询现在多用模型的方案。</p></blockquote><h3 id="数据库枚举值的坑"><a href="#数据库枚举值的坑" class="headerlink" title="数据库枚举值的坑"></a>数据库枚举值的坑</h3><p>在数据库使用枚举时可以规范数据字典，但是也造成了要添加值时，需要修改数据库结构，这是不可接受的。</p><p>而且枚举值查询可以使用 <code>0</code>,<code>1</code>,<code>2</code>.. 索引值进行查询，也可以使用 ‘public’ ‘private’ 这样的规定的字典值查询，有二义性，可能有伏笔。</p><ul><li>典类型的字段我都以 <code>_type</code> 结尾，<code>tinyint</code> 型，无符号，数字代表的值写在字段注释里。eg: book_type</li><li>有 <code>是否</code> 概念的字段也不要用 枚举，我会使用 <code>is_</code> 开头。eg: is_review</li></ul><blockquote><p>2022Q3：数据库枚举值没再用过。<code>is_</code> <code>_type</code> 的命名方式沿用至今。</p></blockquote><p>补充说明：枚举类型不但可以使用下标 <code>0</code>,<code>1</code>,<code>2</code>.. 查询，也可以使用不加引号的 <code>0</code>,<code>1</code>,<code>2</code>..（下标）来写入某个类型。</p><p>举个栗子：</p><p>类型：<code>enum(&#39;none&#39;,&#39;public&#39;,&#39;private&#39;,&#39;1&#39;)</code> 当你 <code>insert into ... set a = 1</code> 时：</p><ul><li>当 <code>a = 1</code> 是插入 enum 的第一个值，即 public。</li><li>当 <code>a = &#39;1&#39;</code> 是插入 enum 值为 1 的类型。</li></ul><p>所以在 PHP 弱类型语言中，数字可以不加单引号，所以要注意到这点。</p><h3 id="NGINX-没有配置结束符的伏笔"><a href="#NGINX-没有配置结束符的伏笔" class="headerlink" title="NGINX 没有配置结束符的伏笔"></a>NGINX 没有配置结束符的伏笔</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~*.xml$ &#123;</span><br><span class="line">    rewrite &#x27;^/sitemap/([a-z_0-9]*)\.(xml)$&#x27; /sitemap/$1 last;</span><br><span class="line">    add_header X-Robots-Tag noindex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是配置 sitemap XML 转发和添加 header，在 <code>~*.xml$</code> 中，如果没有 <code>$</code> 会造成只要 slug 中有 <code>xml</code> 就进行了转发。eg: <code>/abc/abcxmldef</code> 将被转发 这是不符合预期的。</p><h3 id="MySQL-连接遇到的端口问题"><a href="#MySQL-连接遇到的端口问题" class="headerlink" title="MySQL 连接遇到的端口问题"></a>MySQL 连接遇到的端口问题</h3><p>自己的电脑有两个 MySQL 服务，一个 3306 一个 3307。在使用 <code>mysql -uroot -p -P3307</code> 这样指定端口连接是无效的。</p><p>其实这个是 MySQL 故意设计的，如果你的 host 是 localhost（如果不指定默认也是 localhost），那 MySQL 必须用 unix socket 连接，那样的话设置端口什么的当然没用啦。所以正确的做法是指定 host 为 127.0.0.1 再指定端口，绝对管用。</p><p>查看端口：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;port&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.popon.top/set-no-port-when-mysql-connect-localhost.html">MySQL 客户端的指定端口问题</a></li></ul><p>MySQL 配置文件的读取顺序和位置可以通过 <code>mysql --help</code> 查看。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Default options are <span class="built_in">read</span> from the following files <span class="keyword">in</span> the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/local/Cellar/mysql-client/8.0.30/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure><h3 id="测试，坚持如一"><a href="#测试，坚持如一" class="headerlink" title="测试，坚持如一"></a>测试，坚持如一</h3><p>今天发现了：因为测试不全导致的手机端部分页面显示异常的情况。问题的发现还是用户发现后反馈的。</p><p>原因：手机端的页面代码位置应该总体是和 PC 端是一致的，但是在整理代码时，一个两端的结构差异导致了缺少引用一个 JavaScript 库，在测试过程中，没有测试到此一级页面，PC 端代段此级正常。</p><p>还是自己懈怠了，测试，坚持如一，欠的总会还。引以为戒。</p><blockquote><p>2022Q3：近日也出现了整理代码删除了还在被使用的类文件。永远不能心存侥幸，要多看一眼。</p></blockquote><h3 id="MySQL-用户不同导致的数据库无法打开"><a href="#MySQL-用户不同导致的数据库无法打开" class="headerlink" title="MySQL 用户不同导致的数据库无法打开"></a>MySQL 用户不同导致的数据库无法打开</h3><p>使用 Navicat 无法打开数据库，提示大概是权限什么的问题，使用 mysql 命令是可以的。</p><p>后来发现是：在线上建立了一个视图，使用的是一个远程用户，后来数据备份，视图也被备份到本地了。但是这个远程用户在本地是没有的，所以导致使用 Navicat 时，无法打开数据库。</p><blockquote><p>2022Q3：现在多使用的是云数据库，授权用户权限要谨慎。</p></blockquote><h3 id="页面中-JavaScript-中正则表达式中的特殊字符被转码"><a href="#页面中-JavaScript-中正则表达式中的特殊字符被转码" class="headerlink" title="页面中 JavaScript 中正则表达式中的特殊字符被转码"></a>页面中 JavaScript 中正则表达式中的特殊字符被转码</h3><p>今天遇到 HTML 页面中直接写了 JavaScript 的验证的表达式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;[©]+&quot;</span>;</span><br></pre></td></tr></table></figure><p>里面涉及了一个特殊字符 <code>©</code>，页面第一次加载时，一起正常，但是 <code>ajax</code> 提交后，<code>pjax reload</code> 页面后，<code>©</code> 被 <code>encode</code>。</p><p>解决方法：使用 <code>unicode</code> <code>[\\u00A9]+·</code></p><blockquote><p>2022Q3：当时还是纯手写 JavaScript，现在使用 webpack babel 等工具，是否不会再有类似问题了？</p></blockquote><p>一款很秀的 正则表达式 工具推荐给大家 <a href="https://jex.im/regulex">jex.im&#x2F;regulex</a></p><h3 id="Firefox-word-break-break-word"><a href="#Firefox-word-break-break-word" class="headerlink" title="Firefox word-break: break-word"></a>Firefox word-break: break-word</h3><p>Firefox 疑似不支持 <code>word-break: break-word</code> 对词进行折行</p><ul><li>Use <code>word-break: break-all;</code> instead of <code>word-break: break-word;</code></li><li>Or, Use <code>word-wrap: break-word;</code> instead of <code>word-break: break-word;</code></li></ul><p>所以 CSS 编写要考虑好厂商差异，亟待使用前端工具，最近准备使用 gulp 优化项目前端。</p><ul><li><a href="https://stackoverflow.com/questions/17143614/word-breakbreak-word-not-working-in-firefox-21">Word-break:break-word not working in Firefox 21</a></li></ul><blockquote><p>2022Q3：现在使用 Vue2 全家桶，CSS 有相关 loader 处理兼容性。</p></blockquote><h3 id="Policy-条款要认真对待"><a href="#Policy-条款要认真对待" class="headerlink" title="Policy 条款要认真对待"></a>Policy 条款要认真对待</h3><p>在做部分功能是违反了 Google Policy，被直接标记为恶意网站，流量骤降。对应敏感信息要认真对待不可轻视。</p><blockquote><p>2022Q3：现在主要做内部系统。C 端问题遇到的比较少了。</p></blockquote><h3 id="数据查询的-N-1-问题"><a href="#数据查询的-N-1-问题" class="headerlink" title="数据查询的 N+1 问题"></a>数据查询的 N+1 问题</h3><p><a href="https://laravel-china.org/topics/7778/summary-using-the-laravel-development-tool-the-n-1-problem-of-the-orm-query">N+1 查询问题</a> 就是查询扩展字段时的循环查询问题。</p><p>为了解决 N+1 问题我使用了模型 <a href="https://laravel-china.org/docs/laravel/5.5/eloquent-relationships/1265#eager-loading">预加载</a> 方式，但是由于后台框架限制（也可能是使用不当），将 <em>一对多</em> 的被关联的模型数据都查出来了，数据量很大，导致页面卡顿，一次反向优化。优化要权衡不能硬搬书本。</p><blockquote><p>2022Q3：消除 N+1 问题仍是开发优化必修课。</p></blockquote><h3 id="使用-…-运算符定义变长参数函数"><a href="#使用-…-运算符定义变长参数函数" class="headerlink" title="使用 … 运算符定义变长参数函数"></a>使用 … 运算符定义变长参数函数</h3><p>在写一方式时使用了 <code>...</code> 运算符，但是这个运算符是 PHP 5.6 增加的，线上是 PHP 5.5 导致 500 报错，环境问题暴露。如果可能出错，就一定会出错。</p><ul><li><a href="http://php.net/manual/zh/migration56.new-features.php">从 PHP 5.5.x 移植到 PHP 5.6.x</a></li></ul><blockquote><p>2022Q3：开发、测试、UAT、PROD 环境一致性必须对齐。</p></blockquote><h3 id="Ubuntu-核心参数"><a href="#Ubuntu-核心参数" class="headerlink" title="Ubuntu 核心参数"></a>Ubuntu 核心参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_keepalive_time = 300</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.ip_local_port_range = 5000 65000</span><br></pre></td></tr></table></figure><p><code>sysctl -p</code> 显示系统内核参数变化。其中含义待研究。</p><blockquote><p>2022Q3：仍然不懂。</p></blockquote><h3 id="x2F-etc-x2F-sysctl-conf"><a href="#x2F-etc-x2F-sysctl-conf" class="headerlink" title="&#x2F;etc&#x2F;sysctl.conf"></a>&#x2F;etc&#x2F;sysctl.conf</h3><p><code>net.ipv4.tcp_tw_recycle</code> 改为 <code>0</code>。</p><p><code>tcp_tw_recycle</code> 和 <code>tcp_timestmaps</code> 同时开启时，会有 risk，来自 NAT 网路的用户访问会有丢包情况从而导致 504。<code>tcp_tw_recycle</code> 默认是不开启的，之前的优化配置开启该选项时时并没有考虑这一点。从 Linux 4.12 开始，该选项已被移除。</p><blockquote><p>2022Q3：仍然不懂。</p></blockquote><h3 id="正确使用-Redis"><a href="#正确使用-Redis" class="headerlink" title="正确使用 Redis"></a>正确使用 Redis</h3><p>在读 Redis 大数组会占用大量的 PHP-FPM 内存，影响查询效率。在大量（百万级）使用存储 Redis Key 发现慢查询，拖累服务器，<strong>是否是此原因待详细查</strong>。如何正确使用 Redis、配置 Redis 需要总结。</p><blockquote><p>2022Q3：Redis 一次读取大数据是可能造成阻塞的，当时使用 Redis 都是本地安装，现在都是使用云服务。类似问题没在遇到过，遇到后再分析。</p></blockquote><h3 id="MySQL-索引选择"><a href="#MySQL-索引选择" class="headerlink" title="MySQL 索引选择"></a>MySQL 索引选择</h3><p>某查询中通过 explain 发现 MySQL 选择了一个较慢的索引，发现相同条件下不同的时间会使用不同的索引，引发了慢查询。需要研究 MySQL 如何进行索引的选择，和如何建立合理的索引。</p><blockquote><p>2022Q3：最近在读《MySQL 实战 45 讲》真的收获很多。</p></blockquote><h3 id="AWS-EC2-服务器类型"><a href="#AWS-EC2-服务器类型" class="headerlink" title="AWS EC2 服务器类型"></a>AWS EC2 服务器类型</h3><p><code>定额配置</code> 与 <code>信用积分</code>，影响服务器性能。</p><h3 id="Python-SELECT-查询事务"><a href="#Python-SELECT-查询事务" class="headerlink" title="Python SELECT 查询事务"></a>Python SELECT 查询事务</h3><p>Python 的 <code>SELECT</code> 查询默认是事务性的操作，期间无法对表 <code>DDL</code> 进行改变。</p><p><code>SELECT</code> 语句也应该进行 <code>COMMIT</code>。道听途说，待自测详查。</p><blockquote><p>2022Q3：最近在读《MySQL 实战 45 讲》真的收获很多。应该是 MDL（metadata lock) 的原因。</p></blockquote><h3 id="NGINX-Log-中挖掘项目隐藏的问题"><a href="#NGINX-Log-中挖掘项目隐藏的问题" class="headerlink" title="NGINX Log 中挖掘项目隐藏的问题"></a>NGINX Log 中挖掘项目隐藏的问题</h3><ul><li>通过 log 监控流量、访问行为、发现爬虫</li><li>通过 log 分析非 200 状态码，检查项目页面</li></ul><blockquote><p>2022Q3：现在的使用的日志监控服务就是监控 NGINX 与项目应用日志。</p></blockquote><h3 id="数据库字段中包含-HTML-元素导致页面错乱"><a href="#数据库字段中包含-HTML-元素导致页面错乱" class="headerlink" title="数据库字段中包含 HTML 元素导致页面错乱"></a>数据库字段中包含 HTML 元素导致页面错乱</h3><p>数据库数据有 <code>&lt;/div&gt;</code> 等标签，与模板元素连接在一起，导致页面错乱。要显示的数据要 <code>htmlspecialchars</code> 转码。</p><blockquote><p>2022Q3：提防 HTML 注入。</p></blockquote><h3 id="爬取检查时发生-Connection-to-the-other-side-was-lost-in-non-clean"><a href="#爬取检查时发生-Connection-to-the-other-side-was-lost-in-non-clean" class="headerlink" title="爬取检查时发生 Connection to the other side was lost in non-clean"></a>爬取检查时发生 Connection to the other side was lost in non-clean</h3><blockquote><p>thanks for xq24.</p></blockquote><p>Scrapy 快速的三次 retry 之后 give up，然后接着 url 都出现这个问题。</p><p>此时状态：这时浏览器挂上代理能访问出现问题的 url，但是本地无代理时 IP 无法访问。</p><p>查看服务器 Log：</p><p>发现有状态码 499 但是，只有访问一次这个 url 会出现俩三个 499 的 response，然后一段时间内，整个站就都不能访问了，没有反应了，NGINX 日志里面也没有记录到任何东西了，说明数据没有到 NGINX 应该是 TCP 层的网络有问题。</p><p>验证：</p><p><code>tcpdump</code> + <code>Wirsshark</code> 分析。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump tcp -i eth0 -t -s 0 -c 1000 and dst port ! 22 -w ./target.cap</span><br></pre></td></tr></table></figure><p>出现了很多的 <code>RST</code> 导致 TCP 连接中断，仔细看，发现里面的 ACK 完全和上一个包的 Seq 对不上，我们客服端的 ACK 的是一个巨大的随机数。导致服务器端返回 <code>RST</code>。</p><p>因为项目是 HTTP 应用层的，不会影响到 TCP 层，所以 Google 关键字 <code>tcp reset + blogspot.com</code> 看到 reddit 一篇 8 年前的讨论。讲到了 <a href="https://www.reddit.com/r/programming/comments/aph4r/tcp_resets_how_the_baidublogspotgooglecomblockout/">关于中国防火墙</a>。中国 GFW 会有根据 tcp 协议里面的关键字来进行屏蔽。然后会通过 reset 修改来屏蔽整个站几分钟。https 协议的不会。</p><p>测试了俩个国外的网站：</p><ul><li><a href="http://site.aace.org/conf/blogspot.com">http://site.aace.org/conf/blogspot.com</a></li><li><a href="http://www.motogp.com/blogspot.com">http://www.motogp.com/blogspot.com</a></li></ul><p>加入了 blogspot.com 就无法访问了。</p><p>所以问题找到了中国 GFW 会通过 URL 里面的敏感字进行封锁网站，<a href="http://fanqianghuayuan.blogspot.com/2013/05/ignore-gfw.html">有篇具体分析的文章</a>。线上因为用的 HTTPS 协议所以内容加密了，没有被 block，解决方法:</p><ul><li>将测试服务器换成 HTTPS 然后就可以访问了</li><li>通过代理访问</li></ul><blockquote><p>2022Q3：网络知识问题，待继续学习。</p></blockquote><h3 id="NGINX-Log-出现大量（10K）HTTP-499-错误"><a href="#NGINX-Log-出现大量（10K）HTTP-499-错误" class="headerlink" title="NGINX Log 出现大量（10K）HTTP 499 错误"></a>NGINX Log 出现大量（10K）HTTP 499 错误</h3><p><a href="https://httpstatuses.com/499">499 CLIENT CLOSED REQUEST</a></p><p>A non-standard status code introduced by nginx for the case when a client closes the connection while nginx is processing the request.</p><p>NGINX Log 出现大量（10K）HTTP 499 错误，几乎都是 AJAX POST 请求。经过日志排查，发现这些 499 请求都是来自于 Safari 浏览器，再通过日志查看，这些请求都是正常的用户行为。在本地使用 Safari 浏览器实测时也是会出现这样的问题。基本可以断定是 Safari 浏览器导致。</p><p>最终确定为在点击一个 button 时同发送了两请求，分别为 async: false，async: true。</p><p>在进行控制变量的测试中，基本确定与 AJAX 同异步请求有关。不建议修改 async 为 false。</p><p>在测试的过程中，也发现虽然使用 Safari 请求显示 NGINX 日志中会显示 499，但是数据的记录并没有受到影响。</p><blockquote><p>2022Q3：待再研究。</p></blockquote><h3 id="服务器器运维工具-atop"><a href="#服务器器运维工具-atop" class="headerlink" title="服务器器运维工具 atop"></a>服务器器运维工具 atop</h3><p>待整理。</p><h3 id="完全独立的分支"><a href="#完全独立的分支" class="headerlink" title="完全独立的分支"></a>完全独立的分支</h3><p>在使用 Git 进行版本控制的某些场景中我们可能需要在一个项目中建立完全独立的分支，此分支将作为一个独立的版本历史根节点，不与之前任何分支拥有相同的版本祖先。</p><p>比如当我们要在一个项目中使用一个分支进行项目文档的管理时，或者当我们想要发布一个软件的开源版本但又不希望将软件的版本历史暴露给外界时，都可以使用以下的方法建立一个独立分支。</p><p>通过带有 <code>--orphan</code> 参数的 <code>checkout</code> 命令即可从 <code>start_point</code> 或者 <code>HEAD</code> 创建一个独立分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout --orphan 新分支名 &lt;start_point&gt;</span><br></pre></td></tr></table></figure><p>如果希望创建全新的独立分支，例如用于文档管理，不想出现项目代码，则还需要进行如下删除操作。注意如果有不在索引中的文件，则需要手工删除（包括 .gitignore），删除此分支中的索引及索引中的所有文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -rf .</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> thinking </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《JavaScript 教程 | 网道》笔记</title>
      <link href="/2022/06/09/javascript-wangdoc-reading-notes/"/>
      <url>/2022/06/09/javascript-wangdoc-reading-notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://wangdoc.com/javascript/index.html">JavaScript 教程 | 网道（WangDoc.com）</a></p></blockquote><span id="more"></span><h2 id="JavaScript-语言的历史"><a href="#JavaScript-语言的历史" class="headerlink" title="JavaScript 语言的历史"></a>JavaScript 语言的历史</h2><p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C 组织（World Wide Web Consortium）制定的。</p><p>2011 年 6 月，ECMAScript 5.1 版发布，并且成为 ISO 国际标准（ISO&#x2F;IEC 16262:2011）。到了 2012 年底，所有主要浏览器都支持 ECMAScript 5.1 版的全部功能。</p><p>2015 年 6 月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在 2016 年发布，称为“ECMAScript 2016”，2017 年发布“ECMAScript 2017”，以此类推。</p><h2 id="JavaScript-的基本语法"><a href="#JavaScript-的基本语法" class="headerlink" title="JavaScript 的基本语法"></a>JavaScript 的基本语法</h2><p>如果只是声明变量而没有赋值，则该变量的值是 undefined。undefined 是一个特殊的值，表示“无定义”。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果使用 var 重新声明一个已经存在的变量，是无效的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台（console）显示变量a的值。这时变量a还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>标识符命名规则如下：</p><ul><li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。</li><li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字 0-9。</li></ul><p>对于 var 命令来说，JavaScript 的区块不构成单独的作用域（scope）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>else 代码块总是与离自己最近的那个 if 语句配对。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m !== <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m !== <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句后面的表达式，与 case 语句后面的表示式比较运行结果时，采用的是严格相等运算符（&#x3D;&#x3D;&#x3D;），而不是相等运算符（&#x3D;&#x3D;），这意味着比较时不会发生类型转换。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">true</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x 发生类型转换&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x 没有发生类型转换&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x 没有发生类型转换</span></span><br></pre></td></tr></table></figure><p>for 语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码省略了 for 语句表达式的三个部分，结果就导致了一个无限循环。</p><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p><p>标签通常与 break 语句和 continue 语句配合使用，跳出特定的循环。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">top</span>: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">1</span> &amp;&amp; j === <span class="number">1</span>) <span class="keyword">break</span> top;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;, j=&quot;</span> + j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i=0, j=0</span></span><br><span class="line"><span class="comment">// i=0, j=1</span></span><br><span class="line"><span class="comment">// i=0, j=2</span></span><br><span class="line"><span class="comment">// i=1, j=0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">top</span>: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">1</span> &amp;&amp; j === <span class="number">1</span>) <span class="keyword">continue</span> top;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;, j=&quot;</span> + j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i=0, j=0</span></span><br><span class="line"><span class="comment">// i=0, j=1</span></span><br><span class="line"><span class="comment">// i=0, j=2</span></span><br><span class="line"><span class="comment">// i=1, j=0</span></span><br><span class="line"><span class="comment">// i=2, j=0</span></span><br><span class="line"><span class="comment">// i=2, j=1</span></span><br><span class="line"><span class="comment">// i=2, j=2</span></span><br></pre></td></tr></table></figure><h2 id="数据类型概述"><a href="#数据类型概述" class="headerlink" title="数据类型概述"></a>数据类型概述</h2><p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。）</p><ul><li>数值（number）：整数和小数（比如 1 和 3.14）。</li><li>字符串（string）：文本（比如 Hello World）。</li><li>布尔值（boolean）：表示真伪的两个特殊值，即 true（真）和 false（假）。</li><li>undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值。</li><li>null：表示空值，即此处的值为空。</li><li>对象（object）：各种值组成的集合。</li></ul><p>通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。</p><p>对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。</p><p>至于 undefined 和 null，一般将它们看成两个特殊值。</p><p>对象是最复杂的数据类型，又可以分成三个子类型。</p><ul><li>狭义的对象（object）</li><li>数组（array）</li><li>函数（function）</li></ul><p>函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p><p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p><ul><li>typeof 运算符</li><li>instanceof 运算符</li><li>Object.prototype.toString 方法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;123&quot;</span>; <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>; <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f;</span><br><span class="line"><span class="comment">// &quot;function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><p>利用这一点，typeof 可以用来检查一个没有声明的变量，而不报错。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v;</span><br><span class="line"><span class="comment">// ReferenceError: v is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> v;</span><br><span class="line"><span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">if</span> (v) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ReferenceError: v is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> v === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="variable language_">window</span>; <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，空数组（[]）的类型也是 object，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。instanceof 运算符可以区分数组和对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// false</span></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>null 的类型是 object，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑 null，只把它当作 object 的一种特殊值。后来 null 独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null 返回 object 就没法改变了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><h2 id="null-undefined-和布尔值"><a href="#null-undefined-和布尔值" class="headerlink" title="null, undefined 和布尔值"></a>null, undefined 和布尔值</h2><p>null 与 undefined 都可以表示“没有”，含义非常相似。将一个变量赋值为 undefined 或 null，语法效果几乎没区别。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;undefined is false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined is false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null is false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// null is false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>1995 年 JavaScript 诞生时，最初像 Java 一样，只设置了 null 表示”无”。根据 C 语言的传统，null 可以自动转为 0。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">null</span>; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，null 就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果 null 自动转为 0，很不容易发现错误。</p><p>因此，他又设计了一个 undefined。区别是这样的：null 是一个表示“空”的对象，转为数值时为 0；undefined 是一个表示”此处无定义”的原始值，转为数值时为 NaN。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">undefined</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><ul><li>null 表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入 null，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入 null，表示未发生错误。</li><li>undefined 表示“未定义”，下面是返回 undefined 的典型场景。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量声明了，但没有赋值</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象没有赋值的属性</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">o.<span class="property">p</span>; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数没有返回值时，默认返回 undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为 false，其他值都视为 true。</p><ul><li>undefined</li><li>null</li><li>false</li><li>0</li><li>NaN</li><li>“”或’’（空字符串）</li></ul><p>注意，空数组（[]）和空对象（{}）对应的布尔值，都是 true。</p><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><p>JavaScript 内部，所有数字都是以 64 位浮点数形式储存，即使整数也是如此。所以，1 与 1.0 是相同的，是同一个数。</p><p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64 位浮点数）。</p><blockquote><p>容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把 64 位浮点数，转成 32 位整数，然后再进行运算。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">1.0</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>;</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.3</span> /</span><br><span class="line">  <span class="number">0.1</span>(</span><br><span class="line">    <span class="comment">// 2.9999999999999996</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0.3</span> - <span class="number">0.2</span></span><br><span class="line">  ) ===</span><br><span class="line">  <span class="number">0.2</span> - <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>根据国际标准 IEEE 754，JavaScript 浮点数的 64 个二进制位，从最左边开始，是这样组成的。</p><ul><li>第 1 位：符号位，0 表示正数，1 表示负数</li><li>第 2 位到第 12 位（共 11 位）：指数部分</li><li>第 13 位到第 64 位（共 52 位）：小数部分（即有效数字）</li></ul><p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">53</span>);</span><br><span class="line"><span class="comment">// 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多出的三个有效数字，将无法保存</span></span><br><span class="line"><span class="number">9007199254740992111</span>;</span><br><span class="line"><span class="comment">// 9007199254740992000</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">1024</span>); <span class="comment">// Infinity “正向溢出”</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, -<span class="number">1075</span>); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>; <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>; <span class="comment">// 5e-324</span></span><br><span class="line"></span><br><span class="line"><span class="number">123e3</span>; <span class="comment">// 123000</span></span><br><span class="line"><span class="number">123e-3</span>; <span class="comment">// 0.123</span></span><br><span class="line">-<span class="number">3.1e12</span>;</span><br><span class="line"><span class="number">0.1e-23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数点前的数字多于21位。</span></span><br><span class="line"><span class="number">1234567890123456789012</span>;</span><br><span class="line"><span class="comment">// 1.2345678901234568e+21</span></span><br><span class="line"></span><br><span class="line"><span class="number">123456789012345678901</span>;</span><br><span class="line"><span class="comment">// 123456789012345680000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数点后的零多于5个。</span></span><br><span class="line"><span class="comment">// 小数点后紧跟5个以上的零，就自动转为科学计数法</span></span><br><span class="line"><span class="number">0.0000003</span>; <span class="comment">// 3e-7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则，就保持原来的字面形式</span></span><br><span class="line"><span class="number">0.000003</span>; <span class="comment">// 0.000003</span></span><br></pre></td></tr></table></figure><ul><li>十进制：没有前导 0 的数值。</li><li>八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。</li><li>十六进制：有前缀 0x 或 0X 的数值。</li><li>二进制：有前缀 0b 或 0B 的数值。</li></ul><p>有前导 0 的数值会被视为八进制，但是如果前导 0 后面有数字 8 和 9，则该数值被视为十进制。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0888</span>; <span class="comment">// 888</span></span><br><span class="line"><span class="number">0777</span>; <span class="comment">// 511</span></span><br></pre></td></tr></table></figure><p>JavaScript 的 64 位浮点数之中，有一个二进制位是符号位。这意味着，任何一个数都有一个对应的负值，就连 0 也不例外。</p><p>JavaScript 内部实际上存在 2 个 0：一个是 +0，一个是 -0，区别就是 64 位浮点数表示法的符号位不同。它们是等价的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-<span class="number">0</span> === +<span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> === -<span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> === +<span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">+<span class="number">0</span>; <span class="comment">// 0</span></span><br><span class="line">-<span class="number">0</span>; <span class="comment">// 0</span></span><br><span class="line">(-<span class="number">0</span>).<span class="title function_">toString</span>(); <span class="comment">// &#x27;0&#x27;</span></span><br><span class="line">(+<span class="number">0</span>).<span class="title function_">toString</span>(); <span class="comment">// &#x27;0&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> / +<span class="number">0</span> === <span class="number">1</span> / -<span class="number">0</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// +Infinity !== -Infinity</span></span><br></pre></td></tr></table></figure><p>NaN 是 JavaScript 的特殊值，表示“非数字” Not a Number，主要出现在将字符串解析成数字出错的场合。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> - <span class="string">&quot;x&quot;</span>; <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">acos</span>(<span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">log</span>(-<span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>(-<span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>NaN 不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于 Number。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span>; <span class="comment">// &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">NaN</span> + <span class="number">32</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">NaN</span> - <span class="number">32</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">NaN</span> * <span class="number">32</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">NaN</span> / <span class="number">32</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 场景一</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景二</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Infinity</span> === -<span class="title class_">Infinity</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> / -<span class="number">0</span>; <span class="comment">// -Infinity</span></span><br><span class="line"><span class="number">1</span> / -<span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Infinity</span> &gt; <span class="number">1000</span>; <span class="comment">// true</span></span><br><span class="line">-<span class="title class_">Infinity</span> &lt; -<span class="number">1000</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Infinity</span> &gt; <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line">-<span class="title class_">Infinity</span> &gt; <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Infinity</span> &lt; <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line">-<span class="title class_">Infinity</span> &lt; <span class="title class_">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> * <span class="title class_">Infinity</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">5</span> - <span class="title class_">Infinity</span>; <span class="comment">// -Infinity</span></span><br><span class="line"><span class="title class_">Infinity</span> / <span class="number">5</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">5</span> / <span class="title class_">Infinity</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> * <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="number">0</span> / <span class="title class_">Infinity</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Infinity</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Infinity</span> + <span class="title class_">Infinity</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="title class_">Infinity</span> * <span class="title class_">Infinity</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Infinity</span> - <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Infinity</span> / <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> * <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">null</span> / <span class="title class_">Infinity</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="title class_">Infinity</span> / <span class="literal">null</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> + <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">undefined</span> - <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">undefined</span> * <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">undefined</span> / <span class="title class_">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="title class_">Infinity</span> / <span class="literal">undefined</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="与数值相关的全局方法"><a href="#与数值相关的全局方法" class="headerlink" title="与数值相关的全局方法"></a>与数值相关的全局方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;123&quot;</span>); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果字符串头部有空格，空格会被自动去除。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;   81&quot;</span>); <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果parseInt的参数不是字符串，则会先转为字符串再转换。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">1.23</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1.23&quot;</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;8a&quot;</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;12**&quot;</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;12.34&quot;</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;15e2&quot;</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;15px&quot;</span>); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回NaN。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;.3&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;+&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;+1&quot;</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt的返回值只有两种可能，要么是一个十进制整数，要么是NaN。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;0x10&quot;</span>); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;011&quot;</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于那些会自动转为科学计数法的数字，parseInt会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">1000000000000000000000.5</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1e+21&quot;</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0.0000008</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;8e-7&quot;</span>); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1000&quot;</span>, <span class="number">2</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1000&quot;</span>, <span class="number">6</span>); <span class="comment">// 216</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1000&quot;</span>, <span class="number">8</span>); <span class="comment">// 512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数是0、undefined和null，则直接忽略。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">37</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">0</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="literal">null</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="literal">undefined</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1546&quot;</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;546&quot;</span>, <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果parseInt的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0x11</span>, <span class="number">36</span>); <span class="comment">// 43</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0x11</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">String</span>(<span class="number">0x11</span>), <span class="number">36</span>); <span class="comment">// 43</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">String</span>(<span class="number">0x11</span>), <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;17&quot;</span>, <span class="number">36</span>); <span class="comment">// 43</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;17&quot;</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 上面代码中，十六进制的0x11会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串17，最后返回结果43和1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">011</span>, <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">String</span>(<span class="number">011</span>), <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">String</span>(<span class="number">9</span>), <span class="number">2</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GROUP_CONCAT 截断</title>
      <link href="/2022/01/10/group-concat-max-len/"/>
      <url>/2022/01/10/group-concat-max-len/</url>
      
        <content type="html"><![CDATA[<p>今日在生产环境发生了：因为 <code>GROUP_CONCAT</code> 聚合的数据列发生截断导致异常，原来 <code>GROUP_CONCAT</code> 是有大小限制的。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GROUP</span>_CONCAT_MAX_LEN;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1024 bytes</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len">group_concat_max_len | mysql</a></p></blockquote><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾 2021</title>
      <link href="/2021/12/31/review-2021/"/>
      <url>/2021/12/31/review-2021/</url>
      
        <content type="html"><![CDATA[<p><a href="https://music.163.com/#/song?id=25638375">直到对的人来 · 追星族乐队</a></p><blockquote><p>我想跟他说：那家餐厅太美了，我一定要和你去一次。但是那个菜其实很一般的，那个老板娘戴的耳环特别漂亮。</p></blockquote><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP 安装 gRPC</title>
      <link href="/2021/10/13/php-install-grpc/"/>
      <url>/2021/10/13/php-install-grpc/</url>
      
        <content type="html"><![CDATA[<h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line"></span><br><span class="line">CentOS Linux release 7.2 (Final)</span><br><span class="line"></span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line">Linux xxx-xxx 3.10.107-1-tlinux2_kvm_guest-0052 <span class="comment">#1 SMP Wed Jan 15 18:42:19 CST 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h2 id="PECL"><a href="#PECL" class="headerlink" title="PECL"></a>PECL</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pecl install grpc</span><br></pre></td></tr></table></figure><p>如果遇到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Connection to `ssl://pecl.php.net:443′ failed:</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="/2020/08/07/deploy-swoft-framework/">PHP Swoft 框架环境配置 | ZYF.IM</a></p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><h3 id="通用手动安装-PECL-扩展"><a href="#通用手动安装-PECL-扩展" class="headerlink" title="通用手动安装 PECL 扩展"></a>通用手动安装 PECL 扩展</h3><p>For this to work, you’ll need to have root access to your server, and you’ll most probably need developer tools installed as well.</p><blockquote><p><a href="https://pecl.php.net/">https://pecl.php.net/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建临时目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp/download/ &amp;&amp; <span class="built_in">cd</span> /tmp/download/</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://pecl.php.net/get/[extension].tgz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf [extension].tgz</span><br><span class="line"><span class="built_in">cd</span> [extension]</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">phpize</span><br><span class="line"><span class="comment"># 查看参数</span></span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 设置参考 以实际情况为准</span></span><br><span class="line">./configure --<span class="built_in">enable</span>-[extension]</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make &amp;&amp; make <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 查看 ini 路径</span></span><br><span class="line">php --ini</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">vi [php-ini].ini</span><br><span class="line">extension=[extension].so</span><br></pre></td></tr></table></figure><h3 id="gcc-is-currently-not-installed"><a href="#gcc-is-currently-not-installed" class="headerlink" title="gcc is currently not installed"></a>gcc is currently not installed</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line">...already installed and latest version...</span><br><span class="line"></span><br><span class="line">gcc</span><br><span class="line"></span><br><span class="line">...gcc is currently not installed.</span><br><span class="line"></span><br><span class="line">yum reinstall gcc</span><br><span class="line"><span class="comment"># 重新安装后解决</span></span><br></pre></td></tr></table></figure><h3 id="GrpcLb-TokenAndClientStatsAttribute-ToString-const"><a href="#GrpcLb-TokenAndClientStatsAttribute-ToString-const" class="headerlink" title="GrpcLb::TokenAndClientStatsAttribute::ToString() const"></a>GrpcLb::TokenAndClientStatsAttribute::ToString() const</h3><p>原因：gcc 版本过低。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl</span><br><span class="line"></span><br><span class="line">yum install devtoolset-8-gcc*</span><br><span class="line"></span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-8 bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /opt/rh/devtoolset-8/enable</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://cloud.google.com/php/grpc">安装适用于 PHP 的 gRPC | cloud.google</a></li><li><a href="https://www.jianshu.com/p/387b7a46d9fd">PHP 安装 grpc 扩展报错 | jianshu</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分组聚合 OVER PARTITION BY</title>
      <link href="/2021/09/14/sql-over-partition-by/"/>
      <url>/2021/09/14/sql-over-partition-by/</url>
      
        <content type="html"><![CDATA[<h2 id="在-HIVE-中"><a href="#在-HIVE-中" class="headerlink" title="在 HIVE 中"></a>在 HIVE 中</h2><p>最近在使用 HIVE，需要统计 <code>当年累计和</code> 这样的指标，请教同事后发现了 <code>OVER(PARTITION BY)</code> 开窗函数。</p><p>分析函数用于计算基于组的某种聚合值，它和聚合函数的不同之处是：对于每个组返回多行，而聚合函数对于每个组只返回一行。</p><p>开窗函数指定了分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化。</p><p>测试语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.test_over_partition (</span><br><span class="line">  `fdate` <span class="type">Date</span>,</span><br><span class="line">  `<span class="keyword">year</span>` <span class="type">Int</span>,</span><br><span class="line">  `<span class="keyword">month</span>` <span class="type">Int</span>,</span><br><span class="line">  `category1` String,</span><br><span class="line">  `category2` String,</span><br><span class="line">  `income` <span class="keyword">Double</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hdp_fin_dash_ods.test_over_partition (`fdate`,`<span class="keyword">year</span>`,`<span class="keyword">month</span>`,`category1`,`category2`,`income`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;2020-01-01&#x27;</span>,<span class="number">2020</span>,<span class="number">1</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>,<span class="string">&#x27;1010&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2020-01-01&#x27;</span>,<span class="number">2020</span>,<span class="number">1</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>,<span class="string">&#x27;1011&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2020-02-01&#x27;</span>,<span class="number">2020</span>,<span class="number">2</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>,<span class="string">&#x27;1012&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2020-02-01&#x27;</span>,<span class="number">2020</span>,<span class="number">2</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>,<span class="string">&#x27;1013&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2020-03-01&#x27;</span>,<span class="number">2020</span>,<span class="number">3</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>,<span class="string">&#x27;1014&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2020-03-01&#x27;</span>,<span class="number">2020</span>,<span class="number">3</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>,<span class="string">&#x27;1015&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2021-04-01&#x27;</span>,<span class="number">2021</span>,<span class="number">4</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>,<span class="string">&#x27;1016&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2021-04-01&#x27;</span>,<span class="number">2021</span>,<span class="number">4</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>,<span class="string">&#x27;1017&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2021-05-01&#x27;</span>,<span class="number">2021</span>,<span class="number">5</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>,<span class="string">&#x27;1018&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2021-05-01&#x27;</span>,<span class="number">2021</span>,<span class="number">5</span>,<span class="string">&#x27;3C&#x27;</span>,<span class="string">&#x27;手机&#x27;</span>,<span class="string">&#x27;1019&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每年每 category2 日累计 income</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> `fdate`,`<span class="keyword">year</span>`,`<span class="keyword">month</span>`,`category1`,`category2`,`income`</span><br><span class="line">,<span class="built_in">SUM</span>(income) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> `<span class="keyword">year</span>`,`category1`,`category2` <span class="keyword">ORDER</span> <span class="keyword">BY</span> fdate) <span class="keyword">AS</span> ttl_year_income</span><br><span class="line"><span class="keyword">FROM</span> hdp_fin_dash_ods.test_over_partition;</span><br></pre></td></tr></table></figure><img src="https://user-images.githubusercontent.com/9289792/133225004-be0d2c88-e713-407b-b41d-da44e16ac960.png" /><h2 id="在-MySQL-中"><a href="#在-MySQL-中" class="headerlink" title="在 MySQL 中"></a>在 MySQL 中</h2><blockquote><p>Before MySQL 8.0 you can’t use window functions like ROW_NUMBER.</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/zhwbqd/p/4205821.html">Mysql 分组聚合实现 over partition by 功能 | cnblogs</a></li><li><a href="https://stackoverflow.com/questions/58645949/emulating-partition-over-with-mysql-5-7">Emulating PARTITION OVER with MySQL 5.7 | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP __invoke 使用</title>
      <link href="/2021/07/20/php-invoke-is-anybody-using-it/"/>
      <url>/2021/07/20/php-invoke-is-anybody-using-it/</url>
      
        <content type="html"><![CDATA[<p>why they are magic? Because they are magically called by PHP when specific actions happen.</p><p>The <code>__invoke()</code> method is called when a script tries to call an object as a function.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$x</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">CallableClass</span>;</span><br><span class="line"><span class="variable">$obj</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_callable</span>(<span class="variable">$obj</span>));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(5)</span><br><span class="line">bool(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="使用明显的操作方法初始化"><a href="#使用明显的操作方法初始化" class="headerlink" title="使用明显的操作方法初始化"></a>使用明显的操作方法初始化</h2><p>例如，当我们有一个提供者时，就会发生这种情况。</p><p><a href="https://github.com/aws/aws-sdk-php/blob/master/src/Endpoint/PatternEndpointProvider.php">aws-sdk-php&#x2F;src&#x2F;Endpoint&#x2F;PatternEndpointProvider.php</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$args</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$service</span> = <span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="string">&#x27;service&#x27;</span>]) ? <span class="variable">$args</span>[<span class="string">&#x27;service&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$region</span> = <span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="string">&#x27;region&#x27;</span>]) ? <span class="variable">$args</span>[<span class="string">&#x27;region&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$keys</span> = [<span class="string">&quot;<span class="subst">&#123;$region&#125;</span>/<span class="subst">&#123;$service&#125;</span>&quot;</span>, <span class="string">&quot;<span class="subst">&#123;$region&#125;</span>/*&quot;</span>, <span class="string">&quot;*/<span class="subst">&#123;$service&#125;</span>&quot;</span>, <span class="string">&quot;*/*&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$keys</span> <span class="keyword">as</span> <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;patterns[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expand</span>(</span><br><span class="line">                <span class="variable">$this</span>-&gt;patterns[<span class="variable">$key</span>],</span><br><span class="line">                <span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="string">&#x27;scheme&#x27;</span>]) ? <span class="variable">$args</span>[<span class="string">&#x27;scheme&#x27;</span>] : <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">                <span class="variable">$service</span>,</span><br><span class="line">                <span class="variable">$region</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它使用 invoke 使用一些参数提供端点。我们如何使用这个类？</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testReturnsNullWhenUnresolved</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$e</span> = <span class="keyword">new</span> <span class="title class_">PatternEndpointProvider</span>([<span class="string">&#x27;foo&#x27;</span> =&gt; [<span class="string">&#x27;rules&#x27;</span> =&gt; []]]);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertNull</span>(<span class="variable">$e</span>([<span class="string">&#x27;service&#x27;</span> =&gt; <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;region&#x27;</span> =&gt; <span class="string">&#x27;bar&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尝试使用单动作控制器？"><a href="#尝试使用单动作控制器？" class="headerlink" title="尝试使用单动作控制器？"></a>尝试使用单动作控制器？</h2><p>控制器应该大而广泛？他们不应该。我们应该有瘦控制器和胖服务。</p><p>在这里，invoke 可以帮助我们，因为我们可以定义一个只处理单个动作的控制器，并在其上放置单个 invoke 方法。</p><p>这也有助于我们实现单一职责原则，即 SOLID 中的 S，这是前五个面向对象设计 (OOD) 原则的首字母缩写词。</p><blockquote><p>A class should have one and only one reason to change, meaning that a class should have only one job.</p></blockquote><p>在 Laravel 中的例子：<a href="https://laravel.com/docs/5.7/controllers#single-action-controllers">Single Action Controllers | laravel</a>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowProfile</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the profile for the given user.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;user.profile&#x27;</span>, [<span class="string">&#x27;user&#x27;</span> =&gt; <span class="title class_">User</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="variable">$id</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在注册路由时，我们不需要指定方法名称。只有类名。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user/&#123;id&#125;&#x27;</span>, <span class="string">&#x27;ShowProfile&#x27;</span>);</span><br></pre></td></tr></table></figure><p>This way we can have Single Action Controllers.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://luis-barros-nobrega.medium.com/php-invoke-is-anybody-using-it-1933c64d17f1">PHP invoke: is anybody using it? | medium</a></li><li><a href="https://www.php.net/manual/en/language.oop5.magic.php#object.invoke">__invoke() | php</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP strict_types 严格模式</title>
      <link href="/2021/07/19/php-strict-types/"/>
      <url>/2021/07/19/php-strict-types/</url>
      
        <content type="html"><![CDATA[<ul><li>严格模式的声明 <em>必须</em> 放在文件的顶部。</li><li>严格模式不仅作用于函数参数的类型声明，也作用于函数的返回值类型。</li></ul><p>声明 PHP 文件作为严格模式的一个好事是，实际上只适用于当前文件。这确保了这个文件是严格类型，但是他没有影响到整个项目中的其他文件。这允许你一步一步的迁移非严格模式的代码。</p><p>使用提示类型没有 strict_types 可能导致微妙的错误。</p><p>严格类型之前，<code>int $x</code> 意味着 <code>$x must have a value coercible to an int</code>。</p><ul><li>a float (example: 13.1459 -&gt; 13)</li><li>a bool (example: true -&gt; 1)</li><li>a null (example: null -&gt; 0)</li><li>a string with leading digits (example: “15 Trees” -&gt; 15)</li></ul><p>设置严格模式后，you tell the engine that <code>int $x</code> means <code>$x must only be an int proper, no type coercion allowed</code>。</p><p>谁给更关心 <code>strict_type</code> 这行？is more for the reader than for the writer. Why? Bacause it will explicitly tell the reader:</p><p>The types in this current scope are treated strictly.</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">add</span>(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行输出 <code>int(3)</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">add</span>(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the <span class="built_in">type</span> int, <span class="built_in">float</span> given, ...</span><br></pre></td></tr></table></figure><h2 id="声明位置"><a href="#声明位置" class="headerlink" title="声明位置"></a>声明位置</h2><p>必须在脚本最前。不能写在脚本的中间，如下写法是错误的：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">add</span>(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  strict_types declaration must be the very first statement <span class="keyword">in</span> the script <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><p>不得使用 block mode 进行声明：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  strict_types declaration must not use block mode <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><h2 id="多文件场景"><a href="#多文件场景" class="headerlink" title="多文件场景"></a>多文件场景</h2><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><p><code>A.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 严格模式</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>B.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 非严格模式</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;A.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 违反了 A 的定义</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">add</span>(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php B.php</span><br><span class="line"></span><br><span class="line">int(3)</span><br></pre></td></tr></table></figure><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><p><code>A.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 非严格模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>B.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 严格模式</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;A.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 违反了 A 的定义</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">add</span>(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php B.php</span><br><span class="line"></span><br><span class="line">PHP Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the <span class="built_in">type</span> int, <span class="built_in">float</span> given, called <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>函数定义时的严格模式，行为并不会出现什么不同。</li><li>函数执行时的，严格模式会出现差异。</li><li><code>declare(strict_types=1);</code> 的声明本身在 A.php 文件中完成。被 B.php 文件 require，而 B.php 并没有定义严格模式，那么执行 require 的 B.php 文件不会变成严格模式。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只有在写 declare 的文件的执行部分才会执行严格模式，该文件中调用的其它函数（其它文件中的函数）也会被影响。</p><p>若果想完全使用严格模式，比较简单的方法是在所有 php 文件都写上 <code>declare(strict_types=1);</code>。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>推荐自动格式化工具：<a href="https://github.com/symplify/easy-coding-standard">symplify&#x2F;easy-coding-standard</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://segmentfault.com/a/1190000018389227">关于 declare(strict_types&#x3D;1) 的有效范围 | segmentfault</a></li><li><a href="https://chemaclass.medium.com/strict-types-in-php-d4166bd25394">Strict Types in PHP | medium</a></li><li><a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.scalar-type-declarations">Scalar type declarations | php</a></li><li><a href="https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict">Strict typing | php</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git and GitHub Secrets</title>
      <link href="/2021/07/12/git-and-github-secrets/"/>
      <url>/2021/07/12/git-and-github-secrets/</url>
      
        <content type="html"><![CDATA[<h2 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h2><p>Git 记住密码配置后，不用每次 pull、push 都需要输入密码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>会在 <code>cat ~/.gitconfig</code> 看到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure><h2 id="快速检出上一个分支"><a href="#快速检出上一个分支" class="headerlink" title="快速检出上一个分支"></a>快速检出上一个分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h2 id="提交空改动"><a href="#提交空改动" class="headerlink" title="提交空改动"></a>提交空改动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;empty commit&quot;</span> --allow-empty</span><br></pre></td></tr></table></figure><p>在如下几种情况下是有意义：</p><ul><li>标记一批工作或一个新功能的开始。</li><li>记录你对项目进行了跟代码无关的改动。</li><li>跟使用你仓库的其他人交流。</li><li>作为仓库的第一次提交，因为第一次提交日后是不能被 rebase 的：<code>git commit -m &quot;init repo&quot; --allow-empty</code>。</li></ul><h2 id="更直观的-status"><a href="#更直观的-status" class="headerlink" title="更直观的 status"></a>更直观的 status</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status -sb</span><br></pre></td></tr></table></figure><h2 id="更直观的-log"><a href="#更直观的-log" class="headerlink" title="更直观的 log"></a>更直观的 log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --graph --pretty=format:<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset&#x27;</span> --abbrev-commit --<span class="built_in">date</span>=relative</span><br></pre></td></tr></table></figure><h2 id="提交信息查询"><a href="#提交信息查询" class="headerlink" title="提交信息查询"></a>提交信息查询</h2><p>找到其中和搜索条件相匹配的最近的一条。query （区别大小写）是你想要搜索的词语。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show :/query</span><br></pre></td></tr></table></figure><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p>显示所有已经合并到你当前分支的分支列表：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --merged</span><br></pre></td></tr></table></figure><p>相反地：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --no-merged</span><br></pre></td></tr></table></figure><h2 id="gitconfig"><a href="#gitconfig" class="headerlink" title=".gitconfig"></a>.gitconfig</h2><p>打开编辑：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><p>命令修改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.co <span class="string">&#x27;checkout&#x27;</span></span><br><span class="line">git config --global alias.ac <span class="string">&#x27;add -A . &amp;&amp; commit&#x27;</span></span><br><span class="line">git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="整行高亮"><a href="#整行高亮" class="headerlink" title="整行高亮"></a>整行高亮</h3><p>多行高亮也可以，比如用 #L53-L60 选择范围，或者按住 shift 键，然后再点击选择的两行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb<span class="comment">#L53-L60</span></span><br></pre></td></tr></table></figure><h3 id="用-commit-信息关闭-issue"><a href="#用-commit-信息关闭-issue" class="headerlink" title="用 commit 信息关闭 issue"></a>用 commit 信息关闭 issue</h3><p>如果某个提交修复了一个 Issue，当提交到 master 分支时，提交信息里可以使用 fix&#x2F;fixes&#x2F;fixed , close&#x2F;closes&#x2F;closed 或者 resolve&#x2F;resolves&#x2F;resolved 等关键词，后面再跟上 Issue 号，这样就会关闭这个 Issue。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Fix screwup, fixes #12&quot;</span></span><br></pre></td></tr></table></figure><h3 id="链接其他仓库的-Issue"><a href="#链接其他仓库的-Issue" class="headerlink" title="链接其他仓库的 Issue"></a>链接其他仓库的 Issue</h3><p>如果你想引用到同一个仓库中的一个 Issue，只需使用井号 # 加上 Issue 号，这样就会自动创建到此 Issue 的链接。</p><p>要链接到其他仓库的 Issue，就使用 <code>user_name/repo_name#ISSUE_NUMBER</code> 的方式，例如 <code>tiimgreen/toc#12</code>。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://speakerdeck.com/holman/git-and-github-secrets">Git and GitHub Secrets | speakerdeck</a></li><li><a href="https://speakerdeck.com/holman/more-git-and-github-secrets">More Git and GitHub Secrets | speakerdeck</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做好技术协同及管理</title>
      <link href="/2021/07/08/how-to-do-technical-management/"/>
      <url>/2021/07/08/how-to-do-technical-management/</url>
      
        <content type="html"><![CDATA[<p>《如何做好技术协同及管理 —— 合作伙伴篇》一次沙龙后的笔记。</p><h2 id="招人"><a href="#招人" class="headerlink" title="招人"></a>招人</h2><ul><li>注重招人环节；在这一步要卡严，因为入职后再折腾就更费时费力了。</li><li>要关注的点：基础水平（工程能力）、离职原因（是否能长久）、个人性格（气场是否相合）。</li></ul><h2 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h2><ul><li>主动沟通是重要的特质。还有责任心、可塑性、执行力。</li><li>前紧后松；前期要做 code review，养成好习惯。</li><li>关注测试同学以及其他同学对其的反馈。了解工作状态、质量。</li><li>在突破底线后应该当机立断，无需心存幻想。</li></ul><h2 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h2><ul><li>没有归宿感；owner 意识。</li><li>每一位都是组内的一员。</li></ul><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><ul><li>早会；任务安排，跟踪进度。不能不闻不问，最后容易抓瞎。</li><li>超过 30min 解决不了的问题，直接沟通，避免团队时间的浪费。</li><li>读书会，组内分享；打造一个好的技术氛围，这里不只是工作，还能成长。</li><li>要对任务的工作量有判断；并且明确开发规模，并且进行核对，防止 “大事小做，小题大做”。</li><li>通过先编写好单元测试、框架结构、interface，控制需求实现、代码质量。</li><li>在无法进行横向对比的情况下，可以对比加入前后是否释放自身生产力来进行判断。</li><li>三个卡点：需求评审、技术实现评审、测试用例评审，把关质量。</li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式之美】笔记 Part 2</title>
      <link href="/2021/02/06/the-beauty-of-design-patterns-reading-notes-part2/"/>
      <url>/2021/02/06/the-beauty-of-design-patterns-reading-notes-part2/</url>
      
        <content type="html"><![CDATA[<h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>领域驱动设计（Domain Driven Design，简称 DDD）。</p><h3 id="什么是基于贫血模型的传统开发模式？"><a href="#什么是基于贫血模型的传统开发模式？" class="headerlink" title="什么是基于贫血模型的传统开发模式？"></a>什么是基于贫血模型的传统开发模式？</h3><p>UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，UserVo 和 UserController 在这里属于接口层。</p><p>Service 层的数据和业务逻辑，被分割为 BO 和 Service 两个类中。像 UserBo 这样，只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）。</p><p>这种贫血模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。</p><h3 id="什么是基于充血模型的-DDD-开发模式？"><a href="#什么是基于充血模型的-DDD-开发模式？" class="headerlink" title="什么是基于充血模型的 DDD 开发模式？"></a>什么是基于充血模型的 DDD 开发模式？</h3><p>领域驱动设计，即 DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。</p><p>基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。</p><h3 id="为什么基于贫血模型的传统开发模式如此受欢迎？"><a href="#为什么基于贫血模型的传统开发模式如此受欢迎？" class="headerlink" title="为什么基于贫血模型的传统开发模式如此受欢迎？"></a>为什么基于贫血模型的传统开发模式如此受欢迎？</h3><ul><li>系统业务可能都比较简单，简单到就是基于 SQL 的 CRUD 操作</li><li>充血模型的设计要比贫血模型更加有难度。我们从一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑。而不是像贫血模型那样，我们只需要定义数据，之后有什么功能开发需求，我们就在 Service 层定义什么操作，不需要事先做太多设计。</li><li>思维已固化，转型有成本。</li></ul><h3 id="什么项目应该考虑使用基于充血模型的-DDD-开发模式？"><a href="#什么项目应该考虑使用基于充血模型的-DDD-开发模式？" class="headerlink" title="什么项目应该考虑使用基于充血模型的 DDD 开发模式？"></a>什么项目应该考虑使用基于充血模型的 DDD 开发模式？</h3><p>适合业务复杂的系统开发。比如，包含各种利息计算模型、还款模型等复杂业务的金融系统。</p><p>两种不同的开发模式会导致不同的开发流程。基于充血模型的 DDD 开发模式的开发流程，在应对复杂业务系统的开发的时候更加有优势。</p><p>DDD 这种开发模式下，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。</p><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><h3 id="一个虚拟钱包系统"><a href="#一个虚拟钱包系统" class="headerlink" title="一个虚拟钱包系统"></a>一个虚拟钱包系统</h3><p>充值、提现、支付、查询余额、查询交易流水。甚至还有冻结、透支、转赠等。</p><p>整个钱包系统一部分单纯跟应用内的虚拟钱包账户打交道，另一部分单纯跟银行账户打交道。我们基于这样一个业务划分，给系统解耦，将整个钱包系统拆分为两个子系统：虚拟钱包系统和三方支付系统。</p><p><img src="https://user-images.githubusercontent.com/9289792/107135323-ba50b780-6934-11eb-8b85-1738440f42bc.png" alt="image"></p><p>不保证数据的强一致性，只实现数据的最终一致性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWalletService</span> &#123;</span><br><span class="line">  <span class="comment">// 通过构造函数或者 IOC 框架注入</span></span><br><span class="line">  <span class="keyword">private</span> VirtualWalletRepository walletRepo;</span><br><span class="line">  <span class="keyword">private</span> VirtualWalletTransactionRepository transactionRepo;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> VirtualWallet <span class="title function_">getVirtualWallet</span><span class="params">(Long walletId )</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line">    <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> convert(walletEntity);</span><br><span class="line">    <span class="keyword">return</span> wallet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">getBalance</span><span class="params">(Long walletId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> virtualWalletRepo.getBalance(walletId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 贫血型</span></span><br><span class="line">    <span class="comment">// BigDecimal balance = walletEntity.getBalance();</span></span><br><span class="line">    <span class="comment">// if (balance.compareTo(amount) &lt; 0) &#123;</span></span><br><span class="line">    <span class="comment">//   throw new NoSufficientBalanceException(...);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// walletRepo.updateBalance(walletId, balance.subtract(amount));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// DDD</span></span><br><span class="line">    <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> convert(walletEntity);</span><br><span class="line">    wallet.debit(amount);</span><br><span class="line">    walletRepo.updateBalance(walletId, wallet.balance());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">credit</span><span class="params">(Long walletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletEntity</span> <span class="variable">walletEntity</span> <span class="operator">=</span> walletRepo.getWalletEntity(walletId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 贫血型</span></span><br><span class="line">    <span class="comment">// BigDecimal balance = walletEntity.getBalance();</span></span><br><span class="line">    <span class="comment">// walletRepo.updateBalance(walletId, balance.add(amount));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// DDD</span></span><br><span class="line">    <span class="type">VirtualWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> convert(walletEntity);</span><br><span class="line">    wallet.credit(amount);</span><br><span class="line">    walletRepo.updateBalance(walletId, wallet.balance());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Long fromWalletId, Long toWalletId, BigDecimal amount)</span> &#123;</span><br><span class="line">    <span class="type">VirtualWalletTransactionEntity</span> <span class="variable">transactionEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VirtualWalletTransactionEntity</span>();</span><br><span class="line">    transactionEntity.setAmount(amount);</span><br><span class="line">    transactionEntity.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    transactionEntity.setFromWalletId(fromWalletId);</span><br><span class="line">    transactionEntity.setToWalletId(toWalletId);</span><br><span class="line">    transactionEntity.setStatus(Status.TO_BE_EXECUTED);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">transactionId</span> <span class="operator">=</span> transactionRepo.saveTransaction(transactionEntity);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      debit(fromWalletId, amount);</span><br><span class="line">      credit(toWalletId, amount);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InsufficientBalanceException e) &#123;</span><br><span class="line">      transactionRepo.updateStatus(transactionId, Status.CLOSED);</span><br><span class="line">      <span class="comment">// ...rethrow exception e...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      transactionRepo.updateStatus(transactionId, Status.FAILED);</span><br><span class="line">      <span class="comment">// ...rethrow exception e...</span></span><br><span class="line">    &#125;</span><br><span class="line">    transactionRepo.updateStatus(transactionId, Status.EXECUTED);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>领域模型 VirtualWallet 类很单薄，包含的业务逻辑很简单。相对于原来的贫血模型的设计思路，这种充血模型的设计思路，貌似并没有太大优势。这也是大部分业务系统都使用基于贫血模型开发的原因。不过，如果虚拟钱包系统需要支持更复杂的业务逻辑，那充血模型的优势就显现出来了。比如，我们要支持透支一定额度和冻结部分余额的功能。这个时候，我们重新来看一下 VirtualWallet 类的实现代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VirtualWallet</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">createTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">balance</span> <span class="operator">=</span> BigDecimal.ZERO;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isAllowedOverdraft</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">overdraftAmount</span> <span class="operator">=</span> BigDecimal.ZERO;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">BigDecimal</span> <span class="variable">frozenAmount</span> <span class="operator">=</span> BigDecimal.ZERO;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">VirtualWallet</span><span class="params">(Long preAllocatedId)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = preAllocatedId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">balance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> BigDecimal <span class="title function_">getAvaliableBalance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">totalAvaliableBalance</span> <span class="operator">=</span> <span class="built_in">this</span>.balance.subtract(<span class="built_in">this</span>.frozenAmount);</span><br><span class="line">    <span class="keyword">if</span> (isAllowedOverdraft) &#123;</span><br><span class="line">      totalAvaliableBalance += <span class="built_in">this</span>.overdraftAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalAvaliableBalance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debit</span><span class="params">(BigDecimal amount)</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">credit</span><span class="params">(BigDecimal amount)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">freeze</span><span class="params">(BigDecimal amount)</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unfreeze</span><span class="params">(BigDecimal amount)</span> &#123; ...&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increaseOverdraftAmount</span><span class="params">(BigDecimal amount)</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decreaseOverdraftAmount</span><span class="params">(BigDecimal amount)</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeOverdraft</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openOverdraft</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果功能继续演进，我们可以增加更加细化的冻结策略、透支策略、支持钱包账号（VirtualWallet id 字段）自动生成的逻辑（不是通过构造函数经外部传入 ID，而是通过分布式 ID 生成算法来自动生成 ID）等等。</p><h3 id="辩证思考与灵活应用"><a href="#辩证思考与灵活应用" class="headerlink" title="辩证思考与灵活应用"></a>辩证思考与灵活应用</h3><p>两种代码设计与实现中，并没有完全将 Service 类去掉，这是为什么？或者说，Service 类在这种情况下担当的职责是什么？哪些功能逻辑会放到 Service 类中？</p><ol><li>Service 类负责与 Repository 交流。获取数据库中的数据，转化成领域模型 VirtualWallet，然后由领域模型 VirtualWallet 来完成业务逻辑，最后调用 Repository 类的方法，将数据存回数据库。之所以让 VirtualWalletService 类与 Repository 打交道，而不是让领域模型 VirtualWallet 与 Repository 打交道，那是因为我们想保持领域模型的独立性，不与任何其他层的代码（Repository 层的代码）或开发框架（比如 Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从 DB 中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用。</li><li>Service 类负责跨领域模型的业务聚合功能。VirtualWalletService 类中的 transfer() 转账函数会涉及两个钱包的操作，因此这部分业务逻辑无法放到 VirtualWallet 类中，所以，我们暂且把转账业务放到 VirtualWalletService 类中了。当然，虽然功能演进，使得转账业务变得复杂起来之后，我们也可以将转账业务抽取出来，设计成一个独立的领域模型。</li><li>Service 类负责一些非功能性及与三方系统交互的工作。比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等，都可以放到 Service 类中。</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，主要区别在 Service 层。在基于充血模型的开发模式下，我们将部分原来在 Service 类中的业务逻辑移动到了一个充血的 Domain 领域模型中，让 Service 类的实现依赖这个 Domain 类。</p><p>在基于充血模型的 DDD 开发模式下，Service 类并不会完全移除，而是负责一些不适合放在 Domain 类中的功能。比如，负责与 Repository 层打交道、跨领域模型的业务聚合功能、幂等事务等非功能性的工作。</p><p>基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，Controller 层和 Repository 层的代码基本上相同。这是因为，Repository 层的 Entity 生命周期有限，Controller 层的 VO 只是单纯作为一种 DTO。两部分的业务逻辑都不会太复杂。业务逻辑主要集中在 Service 层。所以，Repository 层和 Controller 层继续沿用贫血模型的设计思路是没有问题的。</p><p>遗留问题：Entity 与 Domain 的转换应该放在哪里？</p><h2 id="13-如何对接口鉴权这样一个功能开发做面向对象分析？"><a href="#13-如何对接口鉴权这样一个功能开发做面向对象分析？" class="headerlink" title="13 如何对接口鉴权这样一个功能开发做面向对象分析？"></a>13 如何对接口鉴权这样一个功能开发做面向对象分析？</h2><p>面向对象分析（OOA）、面向对象设计（OOD）、面向对象编程（OOP），是面向对象开发的三个主要环节。</p><p>我们需要通过沟通、挖掘、分析、假设、梳理，搞清楚具体的需求有哪些，哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑做的。</p><blockquote><p>加密之后的密码及 AppID，可能被 <strong>重放攻击</strong>。</p></blockquote><p>调用方将请求接口的 URL 跟 AppID、密码拼接在一起，然后进行加密，生成一个 token。</p><p><img src="https://user-images.githubusercontent.com/9289792/107141538-3ca4a000-6964-11eb-903f-404295e31ebf.png" alt="image"></p><p>这样的设计仍然存在重放攻击的风险。</p><p>为了解决这个问题，我们可以进一步优化 token 生成算法，引入一个随机变量，让每次接口请求生成的 token 都不一样。</p><p>微服务端在收到这些数据之后，会验证当前时间戳跟传递过来的时间戳，是否在一定的时间窗口内（比如一分钟）。</p><p><img src="https://user-images.githubusercontent.com/9289792/107141588-ba68ab80-6964-11eb-8cc4-c84ddf91a6d4.png" alt="image"></p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><ol><li>把 URL、AppID、密码、时间戳拼接为一个字符串；</li><li>对字符串通过加密算法加密生成 token；</li><li>将 token、AppID、时间戳拼接到 URL 中，形成新的 URL；</li><li>解析 URL，得到 token、AppID、时间戳等信息；</li><li>从存储中取出 AppID 和对应的密码；</li><li>根据时间戳判断 token 是否过期失效；</li><li>验证两个 token 是否匹配；</li></ol><p>1、2、6、7 都是跟 token 有关，负责 token 的生成、验证；3、4 都是在处理 URL，负责 URL 的拼接、解析；5 是操作 AppID 和密码，负责从存储中读取 AppID 和密码。AuthToken、Url、CredentialStorage。</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> design-patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式之美】笔记 Part 1</title>
      <link href="/2021/02/05/the-beauty-of-design-patterns-reading-notes-part1/"/>
      <url>/2021/02/05/the-beauty-of-design-patterns-reading-notes-part1/</url>
      
        <content type="html"><![CDATA[<h2 id="00"><a href="#00" class="headerlink" title="00"></a>00</h2><p>KISS 原则（Keep It Simple and Stupid），这个原则理解起来很简单，一看貌似就懂了，那我问你，怎样的代码才算是足够简单呢？怎样才算不够简单需要优化呢？</p><p>“Talk is cheap, show me the code.”</p><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>为什么要学习设计模式：应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。</p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>灵活性（flexibility）、可扩展性（extensibility）、可维护性（maintainability）、可读性（readability）、可理解性（understandability）、易修改性（changeability）、可复用（reusability）、可测试性（testability）、模块化（modularity）、高内聚低耦合（high cohesion loose coupling）、高效（high effciency）、高性能（highperformance）、安全性（security）、兼容性（compatibility）、易用性（usability）、整洁（clean）、清晰（clarity）、简单（simple）、直接（straightforward）、少即是多（less code is more）、文档详尽（well-documented）、分层清晰（well-layered）、正确性（correctness、bug free）、健壮性（robustness）、鲁棒性（robustness）、可用性（reliability）、可伸缩性（scalability）、稳定性（stability）、优雅（elegant）、好（good）、坏（bad）</p><p>我们并不能通过单一的维度去评价一段代码写的好坏。比如，即使一段代码的可扩展性很好，但可读性很差，那我们也不能说这段代码质量高。</p><p>如果用数字来量化代码的可读性的话，它应该是一个连续的区间值，而非 0、1 这样的离散值。</p><p>代码质量的评价有很强的主观性。</p><p>有些词语过于笼统、抽象，比较偏向对于整体的描述，比如优雅、好、坏、整洁、清晰等；有些过于细节、偏重方法论，比如模块化、高内聚低耦合、文档详尽、分层清晰等；有些可能并不仅仅局限于编码，跟架构设计等也有关系，比如可伸缩性、可用性、稳定性等。</p><h3 id="可维护性（maintainability）"><a href="#可维护性（maintainability）" class="headerlink" title="可维护性（maintainability）"></a>可维护性（maintainability）</h3><p>破坏原有代码设计、不引入新的 bug 的情况下，能够快速地修改或者添加代码。与之相反，修改或者添加代码需要冒着极大的引入新 bug 的风险，并且需要花费很长的时间才能完成。</p><p>码分层清晰、模块化好、高内聚低耦合、遵从基于接口而非实现编程的设计原则等等，那就可能意味着代码易维护。</p><h3 id="可读性（readability）"><a href="#可读性（readability）" class="headerlink" title="可读性（readability）"></a>可读性（readability）</h3><p>“任何傻瓜都会编写计算机能理解的代码。好的程序员能够编写人能够理解的代码。”</p><p>是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等等。</p><p>code review 是一个很好的测验代码可读性的手段。如果你的同事可以轻松地读懂你写的代码，那说明你的代码可读性很好；如果同事在读你的代码时，有很多疑问，那就说明你的代码可读性有待提高了。</p><h3 id="可扩展性（extensibility）"><a href="#可扩展性（extensibility）" class="headerlink" title="可扩展性（extensibility）"></a>可扩展性（extensibility）</h3><p>我们在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码。说直白点就是，代码预留了一些功能扩展点，你可以把新功能代码，直接插到扩展点上，而不需要因为要添加一个功能而大动干戈，改动大量的原始代码。</p><p>“对修改关闭，对扩展开放”。</p><h3 id="灵活性（flexibility）"><a href="#灵活性（flexibility）" class="headerlink" title="灵活性（flexibility）"></a>灵活性（flexibility）</h3><p>如果一段代码易扩展、易复用或者易用，我们都可以称这段代码写得比较灵活。</p><ul><li>当我们添加一个新的功能代码的时候，原有的代码已经预留好了扩展点，我们不需要修改原有的代码，只要在扩展点上添加新的代码即可。这个时候，我们除了可以说代码易扩展，还可以说代码写得好灵活。</li><li>当我们要实现一个功能的时候，发现原有代码中，已经抽象出了很多底层可以复用的模块、类等代码，我们可以拿来直接使用。这个时候，我们除了可以说代码易复用之外，还可以说代码写得好灵活。</li><li>当我们使用某组接口的时候，如果这组接口可以应对各种使用场景，满足各种不同的需求，我们除了可以说接口易用之外，还可以说这个接口设计得好灵活或者代码写得好灵活。</li></ul><h3 id="简洁性（simplicity）"><a href="#简洁性（simplicity）" class="headerlink" title="简洁性（simplicity）"></a>简洁性（simplicity）</h3><p>尽量保持代码简单。代码简单、逻辑清晰，也就意味着易读、易维护。我们在编写代码的时候，往往也会把简单、清晰放到首位。</p><p>KISS 原则，思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。这也是一个编程老手跟编程新手的本质区别之一。</p><h3 id="可复用性（reusability）"><a href="#可复用性（reusability）" class="headerlink" title="可复用性（reusability）"></a>可复用性（reusability）</h3><p>尽量减少重复代码的编写，复用已有的代码。</p><p>当讲到面向对象特性的时候，我们会讲到继承、多态存在的目的之一，就是为了提高代码的可复用性；当讲到设计原则的时候，我们会讲到单一职责原则也跟代码的可复用性相关；当讲到重构技巧的时候，我们会讲到解耦、高内聚、模块化等都能提高代码的可复用性。可见，可复用性也是一个非常重要的代码评价标准，是很多设计原则、思想、模式等所要达到的最终效果。</p><p>DRY（Don’t Repeat Yourself）设计原则。</p><h3 id="可测试性（testability）"><a href="#可测试性（testability）" class="headerlink" title="可测试性（testability）"></a>可测试性（testability）</h3><p>代码可测试性的好坏，能从侧面上非常准确地反应代码质量的好坏。代码的可测试性差，比较难写单元测试，那基本上就能说明代码设计得有问题。</p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>面向对象的四大特性：封装、抽象、继承、多态面</li><li>向对象编程与面向过程编程的区别和联系</li><li>面向对象分析、面向对象设计、面向对象编程</li><li>接口和抽象类的区别以及各自的应用场景</li><li>基于接口而非实现编程的设计思想</li><li>多用组合少用继承的设计思想</li><li>面向过程的贫血模型和面向对象的充血模型</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>指导我们代码设计的一些经验总结。</p><ul><li>SOLID 原则 SRP 单一职责原则</li><li>SOLID 原则 OCP 开闭原则</li><li>SOLID 原则 SP 里式替换原则</li><li>SOLID 原则 ISP 接口隔离原则</li><li>SOLID 原则 DIP 依赖倒置原则</li><li>DRY 原则、KISS 原则、YAGNI 原则、LOD 法则</li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。</p><p>大部分设计模式要解决的都是代码的可扩展性问题。</p><ol><li>创建型 常用的有：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式。不常用的有：原型模式。</li><li>结构型 常用的有：代理模式、桥接模式、装饰者模式、适配器模式。不常用的有：门面模式、组合模式、享元模式。</li><li>行为型 常用的有：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式。不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、中介模式。</li></ol><h3 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h3><p>主要解决的是代码的可读性问题。</p><h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><p>在软件开发中，只要软件在不停地迭代，就没有一劳永逸的设计。</p><p>在开发初期，除非特别必须，我们一定不要过度设计，应用复杂的设计模式。而是当代码出现问题的时候，我们再针对问题，应用原则和模式进行重构。这样就能有效避免前期的过度设计。</p><ul><li>重构的目的（why）、对象（what）、时机（when）、方法（how）；</li><li>保证重构不出错的技术手段：单元测试和代码的可测试性；</li><li>两种不同规模的重构：大重构（大规模高层次）和小重构（小规模低层次）。</li></ul><h3 id="五者联系"><a href="#五者联系" class="headerlink" title="五者联系"></a>五者联系</h3><p>面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。</p><p>设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。比如，“开闭原则”是很多设计模式（策略、模板等）的指导原则。</p><p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行。</p><p>编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节、更加能落地。持续的小重构依赖的理论基础主要就是编程规范。</p><p>重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。</p><p><img src="https://user-images.githubusercontent.com/9289792/106997160-59eb3a00-67bd-11eb-8f71-db5336d3e77f.png" alt="image"></p><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><p>面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石。</p><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h3><p>封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部仅能通过类提供的方式来访问内部信息或者数据。</p><p>封装特性存在的意义，一方面是保护数据不被随意修改，提高代码的可维护性；另一方面是仅暴露有限的必要接口，提高类的易用性。</p><h3 id="抽象（Abstraction）"><a href="#抽象（Abstraction）" class="headerlink" title="抽象（Abstraction）"></a>抽象（Abstraction）</h3><p>抽象可以通过接口类或者抽象类来实现，但也并不需要特殊的语法机制来支持。</p><p>抽象存在的意义，一方面是提高代码的可扩展性、维护性，修改实现不需要改变定义，减少代码的改动范围；另一方面，它也是处理复杂系统的有效手段，能有效地过滤掉不必要关注的信息。</p><p>提供“函数”这一非常基础的语法机制，就可以实现抽象特性、所以，它没有很强的“特异性”，有时候并不被看作面向对象编程的特性之一。</p><p>在定义（或者叫命名）类的方法的时候，也要有抽象思维，不要在方法定义中，暴露太多的实现细节，以保证在某个时间点需要改变方法的实现逻辑的时候，不用去修改其定义。getPictureUrl 好于 getAliyunPictureUrl。</p><h3 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h3><p>继承是用来表示类之间的 is-a 关系。继承主要是用来解决代码复用的问题。</p><p>多用组合少用继承。</p><h3 id="多态（Polymorphism）"><a href="#多态（Polymorphism）" class="headerlink" title="多态（Polymorphism）"></a>多态（Polymorphism）</h3><p>多态是指子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。</p><p>多态这种特性也需要编程语言提供特殊的语法机制来实现，比如继承、接口类、duck-typing。多态可以提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。</p><p>只要两个类具有相同的方法，就可以实现多态，并不要求两个类之间有任何关系，这就是所谓的 duck-typing，是一些动态语言所特有的语法机制。</p><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><p>相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。</p><p>面向对象编程相比面向过程编程有哪些优势？</p><ul><li>对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。</li><li>面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。</li><li>从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。</li></ul><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><h3 id="滥用-getter、setter-方法"><a href="#滥用-getter、setter-方法" class="headerlink" title="滥用 getter、setter 方法"></a>滥用 getter、setter 方法</h3><p>尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器（比如例子中的 List 容器），也要防范集合内部数据被修改的危险。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line">    <span class="comment">// ... 省略其他代码...</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ShoppingCartItem&gt; <span class="title function_">getItems</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(<span class="built_in">this</span>.items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnmodifiableList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">UnmodifiableCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滥用全局变量和全局方法"><a href="#滥用全局变量和全局方法" class="headerlink" title="滥用全局变量和全局方法"></a>滥用全局变量和全局方法</h3><p>Constants 类、Utils 类的设计尽量能做到职责单一，定义一些细化的小类。</p><p>静态成员变量归属于类上的数据，被所有的实例化对象所共享，也相当于一定程度上的全局变量。</p><p>静态方法将方法与数据分离，破坏了封装特性，是典型的面向过程风格。</p><p>只包含静态方法不包含任何属性的 Utils 类，是彻彻底底的面向过程的编程风格。要尽量避免滥用，不要不加思考地随意去定义 Utils 类。</p><h3 id="定义数据和方法分离的类"><a href="#定义数据和方法分离的类" class="headerlink" title="定义数据和方法分离的类"></a>定义数据和方法分离的类</h3><p>Controller 层负责暴露接口给前端调用，Service 层负责核心业务逻辑，Repository 层负责数据读写。</p><p>而在每一层中，我们又会定义相应的 VO（View Object）、BO（Business Object）、Entity。一般情况下，VO、BO、Entity 中只会定义数据，不会定义方法，所有操作这些数据的业务逻辑都定义在对应的 Controller 类、Service 类、Repository 类中。这就是典型的面向过程的编程风格。</p><blockquote><p>实际上，这种开发模式叫作基于 <code>贫血模型的开发模式</code>，也是我们现在非常常用的一种 Web 项目的开发模式。看到这里，你内心里应该有很多疑惑吧？既然这种开发模式明显违背面向对象的编程风格，为什么大部分 Web 项目都是基于这种开发模式来开发呢？</p></blockquote><h3 id="在面向对象编程中，为什么容易写出面向过程风格的代码？"><a href="#在面向对象编程中，为什么容易写出面向过程风格的代码？" class="headerlink" title="在面向对象编程中，为什么容易写出面向过程风格的代码？"></a>在面向对象编程中，为什么容易写出面向过程风格的代码？</h3><p>面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。它是一种自底向上的思考方式。</p><p>它不是先去按照执行流程来分解任务，而是将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按照流程将类组装起来，完成整个任务。</p><p>在面向对象编程中，类的设计还是挺需要技巧，挺需要一定设计经验的。你要去思考如何封装合适的数据和方法到一个类里，如何设计类之间的关系，如何设计类之间的交互等等诸多设计问题。</p><h3 id="面向过程编程及面向过程编程语言就真的无用武之地了吗？"><a href="#面向过程编程及面向过程编程语言就真的无用武之地了吗？" class="headerlink" title="面向过程编程及面向过程编程语言就真的无用武之地了吗？"></a>面向过程编程及面向过程编程语言就真的无用武之地了吗？</h3><p>如果我们开发的是微小程序，或者是一个数据处理相关的代码，以算法为主，数据为辅，那脚本式的面向过程的编程风格就更适合一些。</p><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><h3 id="抽象类和接口的语法特性"><a href="#抽象类和接口的语法特性" class="headerlink" title="抽象类和接口的语法特性"></a>抽象类和接口的语法特性</h3><p>抽象类不允许被实例化，只能被继承。它可以包含属性和方法。方法既可以包含代码实现，也可以不包含代码实现。不包含代码实现的方法叫作抽象方法。子类继承抽象类，必须实现抽象类中的所有抽象方法。接口不能包含属性，只能声明方法，方法不能包含代码实现。类实现接口的时候，必须实现接口中声明的所有方法。</p><h3 id="抽象类和接口存在的意义"><a href="#抽象类和接口存在的意义" class="headerlink" title="抽象类和接口存在的意义"></a>抽象类和接口存在的意义</h3><p>抽象类是对成员变量和方法的抽象，是一种 is-a 关系，是为了解决代码复用问题。接口仅仅是对方法的抽象，是一种 has-a 关系，表示具有某一组行为特性，是为了解决解耦问题，隔离接口和具体的实现，提高代码的扩展性。</p><p>从类的继承层次上来看，抽象类是一种自下而上的设计思路，先有子类的代码重复，然后再抽象成上层的父类（也就是抽象类）。而接口正好相反，它是一种自上而下的设计思路。</p><h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><p>“Program to an interface, not animplementation”。“基于抽象而非实现编程”。</p><p>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。</p><p>“细节是魔鬼”。</p><ol><li>函数的命名不能暴露任何实现细节。</li><li>封装具体的实现细节。</li><li>为实现类定义抽象的接口。</li></ol><p>抽象意识、封装意识、接口意识。</p><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>继承层次过深、过复杂，也会影响到代码的可维护性。</p><p>鸟 -&gt; 会飞、不会飞、会叫、不会叫、会下蛋、不会下蛋。</p><p>利用组合（composition）、接口、委托（delegation 解决。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提高复用性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyAbility</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sparrow</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="comment">// 组合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">FlyAbility</span> <span class="variable">flyAbility</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlyAbility</span>();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 委托</span></span><br><span class="line">    flyAbility.fly();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。</p><p>组合并不完美，继承也不是一无是处。</p><p>如果类之间的继承结构稳定，层次比较浅，关系不复杂，我们就可以大胆地使用继承。反之，我们就尽量使用组合来替代继承。除此之外，还有一些设计模式、特殊的应用场景，会固定使用继承（模板模式（template pattern））或者组合（装饰者模式（decoratorpattern）、策略模式（strategy pattern）、组合模式（composite pattern））。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> design-patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Code Snippet</title>
      <link href="/2021/01/29/mysql-code-snippet/"/>
      <url>/2021/01/29/mysql-code-snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="Tips-SQL"><a href="#Tips-SQL" class="headerlink" title="Tips SQL"></a>Tips SQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看优化后的 SQL</span></span><br><span class="line"><span class="comment">-- 在联表查询时比较有效果</span></span><br><span class="line">EXPLAIN <span class="operator">&lt;</span>你的 <span class="keyword">SQL</span><span class="operator">&gt;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> WARNINGS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看处理</span></span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">DESC</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h2 id="ON-vs-USING"><a href="#ON-vs-USING" class="headerlink" title="ON vs USING"></a>ON vs USING</h2><p><a href="https://stackoverflow.com/questions/11366006/mysql-on-vs-using">MySQL ON vs USING? | stackoverflow</a></p><h2 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  ( <span class="keyword">SELECT</span> <span class="built_in">MIN</span>( id ) <span class="keyword">AS</span> id <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> `name` ) tmp)</span><br></pre></td></tr></table></figure><p>要多加一层 tmp 包装，否则会遇到：<code>1093 - You can&#39;t specify target table &#39;student&#39; for update in FROM clause</code></p><h2 id="备份表"><a href="#备份表" class="headerlink" title="备份表"></a>备份表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建同结构备份表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> zzz_my_table_220727 <span class="keyword">like</span> my_table;</span><br><span class="line"><span class="comment">-- 将需要数据写入备份表</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> zzz_my_table_220727 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> my_table <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">desc</span> LIMIT <span class="number">1000</span>;</span><br><span class="line"><span class="comment">-- 情况原表</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> my_table;</span><br></pre></td></tr></table></figure><h2 id="SQL-AND-OR-执行优先级"><a href="#SQL-AND-OR-执行优先级" class="headerlink" title="SQL AND OR 执行优先级"></a>SQL AND OR 执行优先级</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> table01 <span class="keyword">where</span> condition1 <span class="keyword">or</span> condition2 <span class="keyword">and</span> condition3;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于：</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> table01 <span class="keyword">where</span> condition1 <span class="keyword">or</span> (condition2 <span class="keyword">and</span> condition3);</span><br><span class="line"><span class="comment">-- 而非：</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> table01 <span class="keyword">where</span> (condition1 <span class="keyword">or</span> condition2) <span class="keyword">and</span> condition3;</span><br></pre></td></tr></table></figure><p><code>and</code> 级别高于 <code>or</code>。相当于可以把 <code>and</code> 看成 <code>乘号 *</code>，把 <code>or</code> 看成 <code>加号 +</code>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.standbyside.com/2019/06/19/tips-of-coding-3/">编程小技巧（3）：查看优化后的 SQL</a></li></ul><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 月份加减问题</title>
      <link href="/2021/01/27/php-strtotime-month/"/>
      <url>/2021/01/27/php-strtotime-month/</url>
      
        <content type="html"><![CDATA[<h2 id="看现象"><a href="#看现象" class="headerlink" title="看现象"></a>看现象</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2020-07-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2020-08-31&quot; 符合预期</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2020-05-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2020-07-01&quot; 不符合预期，预期 2020-06-30</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;-1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2020-02-29&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2020-01-29&quot; 符合预期</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;-1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2020-03-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2020-03-02&quot; 不符合预期，预期 2020-02-29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Carbon\Carbon</span></span><br><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">&quot;2020-07-31&quot;</span>)-&gt;<span class="title function_ invoke__">addMonth</span>()-&gt;<span class="title function_ invoke__">toDateString</span>();</span><br><span class="line"><span class="comment">// &quot;2020-08-31&quot;</span></span><br><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">&quot;2020-05-31&quot;</span>)-&gt;<span class="title function_ invoke__">addMonth</span>()-&gt;<span class="title function_ invoke__">toDateString</span>();</span><br><span class="line"><span class="comment">// &quot;2020-07-01&quot;</span></span><br><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">&quot;2020-02-29&quot;</span>)-&gt;<span class="title function_ invoke__">subMonth</span>()-&gt;<span class="title function_ invoke__">toDateString</span>();</span><br><span class="line"><span class="comment">// &quot;2020-01-29&quot;</span></span><br><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">&quot;2020-03-31&quot;</span>)-&gt;<span class="title function_ invoke__">subMonth</span>()-&gt;<span class="title function_ invoke__">toDateString</span>();</span><br><span class="line"><span class="comment">// &quot;2020-03-02&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果与 strtotime 一致。</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2020-05-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2020-07-01&quot;</span></span><br></pre></td></tr></table></figure><p>date 内部的处理逻辑：</p><ol><li><code>2020-05-31</code> 做 <code>+1 month</code> 也就是 <code>2020-06-31</code>。</li><li>再做日期规范化，因为没有 <code>06-31</code>，所以 <code>06-31</code> 就等于了 <code>07-01</code>。</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2020-06-31&quot;</span>)));</span><br><span class="line"><span class="comment">// string(10) &quot;2017-07-01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;next month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-01-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2017-03-03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;last month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-03-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2017-03-03&quot;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;last day of -1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-03-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2017-02-28&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;first day of +1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-08-31&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2017-09-01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但要注意短语的含义：</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;last day of -1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-03-01&quot;</span>))));</span><br><span class="line"><span class="comment">// string(10) &quot;2017-02-28&quot;</span></span><br></pre></td></tr></table></figure><p>如果使用 <code>Carbon\Carbon</code> 可以用 <code>subMonthNoOverflow</code> 与 <code>addMonthNoOverflow</code> 防止进位：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">&#x27;2020-03-31&#x27;</span>)-&gt;<span class="title function_ invoke__">subMonthNoOverflow</span>()-&gt;<span class="title function_ invoke__">toDateString</span>();</span><br><span class="line"><span class="comment">// &quot;2020-02-29&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="string">&quot;2020-05-31&quot;</span>)-&gt;<span class="title function_ invoke__">addMonthNoOverflow</span>()-&gt;<span class="title function_ invoke__">toDateString</span>();</span><br><span class="line"><span class="comment">// &quot;2020-06-30&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Ym-类似问题"><a href="#Ym-类似问题" class="headerlink" title="Ym 类似问题"></a>Ym 类似问题</h2><p>在当日是 31 号场景下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">createFromFormat</span>(<span class="string">&#x27;Ym&#x27;</span>, <span class="string">&#x27;202206&#x27;</span>)-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m&#x27;</span>);</span><br><span class="line"><span class="comment">// 结果是 2022-07 不符合本意</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://www.php.net/manual/en/datetimeimmutable.createfromformat.php">DateTimeImmutable::createFromFormat | php</a></li></ul><p><code>!</code> Resets all fields (year, month, day, hour, minute, second, fraction and timezone information) to zero-like values ( 0 for hour, minute, second and fraction, 1 for month and day, 1970 for year and UTC for timezone information)</p><p>Without !, all fields will be set to the current date and time.</p><p>如果 format 包含字符 !，则未在 format 中提供的生成日期&#x2F;时间部分以及 ! 左侧的值将设置为 Unix 纪元的相应值。</p><p>The Unix epoch is <code>1970-01-01 00:00:00</code> UTC.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">createFromFormat</span>(<span class="string">&#x27;!Ym&#x27;</span>, <span class="string">&#x27;202206&#x27;</span>)-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m&#x27;</span>);</span><br><span class="line"><span class="comment">// 结果是 2022-06</span></span><br><span class="line"><span class="title class_">Carbon</span>::<span class="title function_ invoke__">createFromFormat</span>(<span class="string">&#x27;Ym|&#x27;</span>, <span class="string">&#x27;202206&#x27;</span>)-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m&#x27;</span>);</span><br><span class="line"><span class="comment">// 结果是 2022-06</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$format</span> = <span class="string">&#x27;Y-m-!d H:i:s&#x27;</span>;</span><br><span class="line"><span class="variable">$date</span> = <span class="title class_">DateTimeImmutable</span>::<span class="title function_ invoke__">createFromFormat</span>(<span class="variable">$format</span>, <span class="string">&#x27;2009-02-15 15:16:17&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Format: <span class="subst">$format</span>; &quot;</span> . <span class="variable">$date</span>-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// Format: Y-m-!d H:i:s; 1970-01-15 15:16:17</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/briannesbitt/Carbon/issues/428">Why does subMonth not work correctly? | github</a></li><li><a href="https://www.laruence.com/2018/07/31/3207.html">令人困惑的 strtotime | laruence</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii2 Code Snippet</title>
      <link href="/2021/01/19/yii2-code-snippet/"/>
      <url>/2021/01/19/yii2-code-snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="gii-CLI"><a href="#gii-CLI" class="headerlink" title="gii CLI"></a>gii CLI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php yii <span class="built_in">help</span> gii/mode</span><br><span class="line"></span><br><span class="line">php yii gii/model --generateLabelsFromComments=1 --overwrite=1 --standardizeCapitals=1 --ns=<span class="string">&#x27;app\models\gii&#x27;</span> --tableName=<span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多数据库</span></span><br><span class="line">php yii gii/model --generateLabelsFromComments=1 --overwrite=1 --standardizeCapitals=1 --db=<span class="string">&quot;hub_db&quot;</span> --ns=<span class="string">&#x27;app\models\hub\gii&#x27;</span> --tableName=<span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="连接数据库时设置时区"><a href="#连接数据库时设置时区" class="headerlink" title="连接数据库时设置时区"></a>连接数据库时设置时区</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;class&#x27;</span> =&gt; <span class="string">&#x27;yii\db\Connection&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dsn&#x27;</span> =&gt; <span class="string">&#x27;mysql:host=mysql;port=3306;dbname=hub&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭日志记录，防止被 logs 平台拿走</span></span><br><span class="line"><span class="string">&#x27;enableLogging&#x27;</span> =&gt; YII_DEBUG ? <span class="literal">true</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">&#x27;enableProfiling&#x27;</span> =&gt; YII_DEBUG ? <span class="literal">true</span> : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置时区</span></span><br><span class="line"><span class="string">&#x27;on afterOpen&#x27;</span> =&gt; <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$event</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set &#x27;Asia/Bangkok&#x27; timezone</span></span><br><span class="line">  <span class="variable">$event</span>-&gt;sender-&gt;<span class="title function_ invoke__">createCommand</span>(<span class="string">&quot;SET time_zone=&#x27;+08:00&#x27;;&quot;</span>)-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="ActiveRecord-one"><a href="#ActiveRecord-one" class="headerlink" title="ActiveRecord one"></a>ActiveRecord one</h2><blockquote><p><code>yii\db\ActiveRecord::findOne()</code> 和 <code>yii\db\ActiveQuery::one()</code> 都不会添加 LIMIT 1 到 生成的 SQL 语句中。如果你的查询会返回很多行的数据， 你明确的应该加上 <code>limit(1)</code> 来提高性能，比如 <code>Customer::find()-&gt;limit(1)-&gt;one()</code>。</p></blockquote><h2 id="DB-where"><a href="#DB-where" class="headerlink" title="DB where"></a>DB where</h2><ul><li>字符串格式，例如：<code>&#39;status=1&#39;</code></li><li>哈希格式，例如： <code>[&#39;status&#39; =&gt; 1, &#39;type&#39; =&gt; 2]</code></li><li>操作符格式，例如：<code>[&#39;like&#39;, &#39;name&#39;, &#39;test&#39;]</code></li><li>对象格式，例如：<code>new LikeCondition(&#39;name&#39;, &#39;LIKE&#39;, &#39;test&#39;)</code></li></ul><h3 id="简单条件"><a href="#简单条件" class="headerlink" title="简单条件"></a>简单条件</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: (type = 1) AND (status = 2).</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;type&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: (id IN (1, 2, 3)) AND (status = 2)</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;id&#x27;</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: status IS NULL</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;status&#x27;</span> =&gt; <span class="literal">null</span>]</span><br></pre></td></tr></table></figure><h3 id="AND-OR"><a href="#AND-OR" class="headerlink" title="AND OR"></a>AND OR</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: `id=1 AND id=2`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;id=1&#x27;</span>, <span class="string">&#x27;id=2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `type=1 AND (id=1 OR id=2)`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;type=1&#x27;</span>, [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;id=1&#x27;</span>, <span class="string">&#x27;id=2&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `type=1 AND (id=1 OR id=2)`</span></span><br><span class="line"><span class="comment">// 此写法 &#x27;=&#x27; 可以换成其他操作符，例：in like != &gt;= 等</span></span><br><span class="line"><span class="variable">$cond</span> = [</span><br><span class="line">    <span class="string">&#x27;and&#x27;</span>,</span><br><span class="line">    [<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;or&#x27;</span>,</span><br><span class="line">        [<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: `NOT (attribute IS NULL)`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;not&#x27;</span>, [<span class="string">&#x27;attribute&#x27;</span> =&gt; <span class="literal">null</span>]]</span><br></pre></td></tr></table></figure><h3 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// not between 用法相同</span></span><br><span class="line"><span class="comment">// SQL: `id BETWEEN 1 AND 10`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;between&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// not in 用法相同</span></span><br><span class="line"><span class="comment">// SQL: `id IN (1, 2, 3)`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;between&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>, <span class="number">10</span>]</span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;id&#x27;</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// IN 条件也适用于多字段</span></span><br><span class="line"><span class="comment">// SQL: (`id`, `name`) IN ((1, &#x27;foo&#x27;), (2, &#x27;bar&#x27;))</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;in&#x27;</span>, [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>], [[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;foo&#x27;</span>], [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;bar&#x27;</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也适用于内嵌 SQL 语句</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;user_id&#x27;</span>, (<span class="keyword">new</span> <span class="title class_">Query</span>())-&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;id&#x27;</span>)-&gt;<span class="keyword">from</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>([<span class="string">&#x27;active&#x27;</span> =&gt; <span class="number">1</span>])]</span><br></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: `name LIKE &#x27;%tester%&#x27;`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;tester&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `name LIKE &#x27;%test%&#x27; AND name LIKE &#x27;%sample%&#x27;`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, [<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;sample&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `name LIKE &#x27;%tester&#x27;`</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;%tester&#x27;</span>, <span class="literal">false</span>]</span><br></pre></td></tr></table></figure><h3 id="EXIST"><a href="#EXIST" class="headerlink" title="EXIST"></a>EXIST</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// not exists用法类似</span></span><br><span class="line"><span class="comment">// SQL: EXISTS (SELECT &quot;id&quot; FROM &quot;users&quot; WHERE &quot;active&quot;=1)</span></span><br><span class="line"><span class="variable">$cond</span> = [<span class="string">&#x27;exists&#x27;</span>, (<span class="keyword">new</span> <span class="title class_">Query</span>())-&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;id&#x27;</span>)-&gt;<span class="keyword">from</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>([<span class="string">&#x27;active&#x27;</span> =&gt; <span class="number">1</span>])]</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/db-query-builder">查询构建器 | yiiframework</a></li><li><a href="https://blog.csdn.net/u013697959/article/details/79687746">YII where 条件 | csdn</a></li></ul><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> yii2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii2 Vue 跨域问题</title>
      <link href="/2021/01/10/yii2-vue-cors/"/>
      <url>/2021/01/10/yii2-vue-cors/</url>
      
        <content type="html"><![CDATA[<h2 id="旧的解决办法"><a href="#旧的解决办法" class="headerlink" title="旧的解决办法"></a>旧的解决办法</h2><p>在控制器的 behaviors 方法中增加下面的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$behaviors</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">behaviors</span>();</span><br><span class="line">    <span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">        <span class="comment">// add CORS filter</span></span><br><span class="line">        <span class="variable">$behaviors</span>[<span class="string">&#x27;corsFilter&#x27;</span>] = [</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span> =&gt; <span class="title class_">Cors</span>::<span class="variable language_">class</span>,</span><br><span class="line">            <span class="string">&#x27;cors&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;Origin&#x27;</span> =&gt; [<span class="string">&#x27;http://localhost:8080&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;Access-Control-Request-Method&#x27;</span> =&gt; [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>, <span class="string">&#x27;HEAD&#x27;</span>, <span class="string">&#x27;OPTIONS&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;Access-Control-Request-Headers&#x27;</span> =&gt; [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> =&gt; <span class="number">86400</span>,</span><br><span class="line">                <span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span> =&gt; [],</span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$behaviors</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边配置的解释：</p><ul><li><code>Origin</code> 即 <code>Access-Control-Allow-Origin</code> 表示：响应头指定了该响应的资源是否被允许与给定的 origin 共享。</li><li><code>Access-Control-Request-Method</code> 用于通知服务器在真正的请求中会采用哪种 HTTP 方法。因为预检请求所使用的方法总是 <code>OPTIONS</code> ，与实际请求所使用的方法不一样，所以这个请求头是必要的。</li><li><code>Access-Control-Request-Headers</code> 用于通知服务器在真正的请求中会采用哪些请求头。</li><li><code>Access-Control-Allow-Credentials</code> 表示是否可以将对请求的响应暴露给页面。返回 true 则可以，其他值均不可以。</li><li><code>Access-Control-Max-Age</code> 表示返回结果（即 <code>Access-Control-Allow-Methods</code> 和 <code>Access-Control-Allow-Headers</code> 提供的信息） 可以被缓存多久。</li><li><code>Access-Control-Expose-Headers</code> 列出了哪些首部可以作为响应的一部分暴露给外部。</li></ul><p>注意：</p><p>如果设置 <code>Origin</code> 为 <code>[&#39;*&#39;]</code>，即所有的前端跨域请求可以接受，同时把 <code>Access-Control-Allow-Credentials</code> 设置为 <code>true</code>，Yii 会直接报错：**Allowing credentials for wildcard origins is insecure. Please specify more restrictive origins or set ‘credentials’ to false in your CORS configuration.**。</p><p>告诉你使用通配符的凭证是不安全的，让你设置更严格的 <code>Origin</code> 或者把 <code>Access-Control-Allow-Credentials</code> 设置为 <code>false</code>。</p><p>也就是说不能 <code>Access-Control-Allow-Credentials</code> 为 <code>true</code> 并且 <code>Access-Control-Allow-Origin</code> 为 <code>*</code>。</p><p>因为 <code>Access-Control-Allow-Credentials</code> 的意思就是允许跨域请求在请求头中携带凭证，比如 <code>cookie</code>，做身份识别，但是你又把 <code>Access-Control-Allow-Origin</code> 设置为 <code>*</code>，这是说不通的，是相悖的。</p><p>具体可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials">Reason: Credential is not supported if the CORS header ‘Access-Control-Allow-Origin’ is ‘*‘ | mozilla</a></p><h2 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h2><p>上面的理论上解决了跨域问题，但是新版 Chrome 根据 Cookie 的 SameSite 属性，仍然会阻止 Cookie 的发送 <code>network</code> <code>show filtered out request cookies</code>。</p><p>参考：</p><ul><li><a href="https://medium.com/faun/whats-new-in-devtools-chrome-79-1b2df6cdd759">What’s New In DevTools (Chrome 79) | medium</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html">Cookie 的 SameSite 属性 | ruanyifeng</a></li></ul><p>在开发环境根治跨域问题，使用 <code>webpack-dev-server</code> 代理。</p><p>前端：abc.test<br>后端：abc-api.test<br>代理：<code>abc.test/web-api</code> -&gt; <code>abc-api.test</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;/web-api/&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://abc-api.test/&#x27;</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/web-api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 默认情况下，代理时会保留主机头的来源，您可以将 changeOrigin 设置为true 来覆盖此行为。</span></span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 接受在 HTTPS 上运行带有无效证书的后端服务器。</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://webpack.js.org/configuration/dev-server/#devserverproxy">dev-server devserverproxy | webpack</a></p><blockquote><p>是否可以 jwt 来解决待研究。</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.shiqidu.com/d/846">解决 Yii2 + Vue 前后台分离时跨域的问题 | shiqidu</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">跨源资源共享（CORS） | mozilla</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> yii2 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾 2020</title>
      <link href="/2020/12/31/review-2020/"/>
      <url>/2020/12/31/review-2020/</url>
      
        <content type="html"><![CDATA[<h2 id="过年就在石家庄"><a href="#过年就在石家庄" class="headerlink" title="过年就在石家庄"></a>过年就在石家庄</h2><h2 id="lwl-走学"><a href="#lwl-走学" class="headerlink" title="lwl 走学"></a>lwl 走学</h2><h2 id="肺炎在家办公"><a href="#肺炎在家办公" class="headerlink" title="肺炎在家办公"></a>肺炎在家办公</h2><h2 id="PR-剪辑"><a href="#PR-剪辑" class="headerlink" title="PR 剪辑"></a>PR 剪辑</h2><h2 id="表情包制作"><a href="#表情包制作" class="headerlink" title="表情包制作"></a>表情包制作</h2><h2 id="自己染发剪发"><a href="#自己染发剪发" class="headerlink" title="自己染发剪发"></a>自己染发剪发</h2><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>优化 PHP-FPM</title>
      <link href="/2020/12/30/optimization-of-php-fpm/"/>
      <url>/2020/12/30/optimization-of-php-fpm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2022-05-06 内容是否过期犹未可知。</p></blockquote><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li><a href="https://www.php.net/manual/zh/install.fpm.configuration.php">php-fpm.conf | php.net</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> php-fpm.conf | grep <span class="string">&#x27;^[^;]&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[www]</span><br><span class="line">user = nobody</span><br><span class="line">group = nobody</span><br><span class="line">listen = 127.0.0.1:10071</span><br><span class="line"></span><br><span class="line">#php-fpm进程启动模式，pm可以设置为static和dynamic和ondemand</span><br><span class="line">#如果选择static，则进程数就数固定的，由pm.max_children指定固定的子进程数。</span><br><span class="line">pm = dynamic</span><br><span class="line"></span><br><span class="line">#如果选择dynamic，则进程数是动态变化的,由以下参数决定：</span><br><span class="line">#子进程最大数</span><br><span class="line">pm.max_children = 50</span><br><span class="line">#启动时的进程数，默认值为: min_spare_servers + (max_spare_servers - min_spare_servers) / 2</span><br><span class="line">pm.start_servers = 2</span><br><span class="line"># 保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</span><br><span class="line">pm.min_spare_servers = 1</span><br><span class="line"># 保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</span><br><span class="line">pm.max_spare_servers = 3</span><br></pre></td></tr></table></figure><h2 id="static-还是-dynamic"><a href="#static-还是-dynamic" class="headerlink" title="static 还是 dynamic"></a>static 还是 dynamic</h2><p>很多人恐惧症来袭，不知道选什么好？</p><p>一般原则是：动态适合小内存机器，灵活分配进程，省内存。静态适用于大内存机器，动态创建回收进程对服务器资源也是一种消耗。</p><p>如果你的内存很大，有 8-20G，按照一个 php-fpm 进程 20M 算，100 个就 2G 内存了，那就可以开启 static 模式。如果你的内存很小，比如才 256M，那就要小心设置了，因为你的机器里面的其他的进程也算需要占用内存的，所以设置成 dynamic 是最好的，比如：pm.max_chindren &#x3D; 8, 占用内存 160M 左右，而且可以随时变化，对于一半访问量的网站足够了。</p><h2 id="慢日志查询"><a href="#慢日志查询" class="headerlink" title="慢日志查询"></a>慢日志查询</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 慢请求的记录日志,配合request_slowlog_timeout使用，默认关闭</span><br><span class="line">slowlog = log/$pool.log.slow</span><br><span class="line"></span><br><span class="line"># 当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 &#x27;0&#x27; 表示 &#x27;Off&#x27;</span><br><span class="line">request_slowlog_timeout = 10s</span><br><span class="line"></span><br><span class="line"># 设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的&#x27;max_execution_time&#x27;因为某些特殊原因没有中止运行的脚本有用. 设置为 &#x27;0&#x27; 表示 &#x27;Off&#x27;.当经常出现502错误时可以尝试更改此选项。</span><br><span class="line">request_terminate_timeout = 0</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/db-query-builder">查询构建器 | yiiframework</a></li><li><a href="https://blog.csdn.net/u013697959/article/details/79687746">YII where 条件 | csdn</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 空格问题</title>
      <link href="/2020/11/28/mysql-blank-space/"/>
      <url>/2020/11/28/mysql-blank-space/</url>
      
        <content type="html"><![CDATA[<h2 id="看现象"><a href="#看现象" class="headerlink" title="看现象"></a>看现象</h2><p>创建一个测试数据库表，插入测试数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blank_space` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `<span class="keyword">desc</span>` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uniq_key` (`uid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space`(`id`, `uid`, `<span class="keyword">desc</span>`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;abc &#x27;</span>, <span class="string">&#x27;末尾1个&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space`(`id`, `uid`, `<span class="keyword">desc</span>`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27; abc&#x27;</span>, <span class="string">&#x27;开头1个&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space`(`id`, `uid`, `<span class="keyword">desc</span>`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;  abc&#x27;</span>, <span class="string">&#x27;开头2个&#x27;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>uid</th><th>desc</th></tr></thead><tbody><tr><td>1</td><td>abc_</td><td>末尾 1 个</td></tr><tr><td>2</td><td>_abc</td><td>开头 1 个</td></tr><tr><td>3</td><td>__abc</td><td>开头 2 个</td></tr></tbody></table><blockquote><p>uid 实际上没有 <code>_</code>，这样写是为了看到空格。</p></blockquote><p>执行操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="string">&#x27;abc &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="string">&#x27;abc   &#x27;</span>;</span><br></pre></td></tr></table></figure><p>都可以查询出：</p><table><thead><tr><th>id</th><th>uid</th><th>desc</th></tr></thead><tbody><tr><td>1</td><td>abc_</td><td>末尾 1 个</td></tr></tbody></table><p>执行操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space`(`uid`, `<span class="keyword">desc</span>`) <span class="keyword">VALUES</span> (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;无空格&#x27;</span>);</span><br><span class="line"><span class="comment">-- 1062 - Duplicate entry &#x27;abc&#x27; for key &#x27;uniq_key&#x27;, Time: 0.322000s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space`(`uid`, `<span class="keyword">desc</span>`) <span class="keyword">VALUES</span> (<span class="string">&#x27;abc  &#x27;</span>, <span class="string">&#x27;末位两个&#x27;</span>);</span><br><span class="line"><span class="comment">-- 1062 - Duplicate entry &#x27;abc&#x27; for key &#x27;uniq_key&#x27;, Time: 0.322000s</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>MySQL 校对规则属于 PADSPACE，会忽略尾部空格。针对的是 varchar char text 等文本类的数据类型。此为 SQL 标准化行为。无需要设置也无法改变。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="type">BINARY</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="type">BINARY</span> <span class="string">&#x27;abc &#x27;</span>;</span><br><span class="line"><span class="comment">-- 1 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="operator">=</span> <span class="type">BINARY</span> <span class="string">&#x27;abc   &#x27;</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="keyword">like</span> <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="keyword">like</span> <span class="string">&#x27;abc &#x27;</span>;</span><br><span class="line"><span class="comment">-- 1 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="keyword">like</span> <span class="string">&#x27;abc   &#x27;</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br></pre></td></tr></table></figure><blockquote><p>BINARY 不是函数，是类型转换运算符，它用来强制它后面的字符串为一个二进制字符串，可以理解成精确匹配。</p></blockquote><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p><strong>需要在非严格模式下。</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blank_space_attack` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `pwd` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space_attack`(`id`, `uid`, `pwd`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space_attack`(`id`, `uid`, `pwd`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;tim&#x27;</span>, <span class="string">&#x27;234&#x27;</span>);</span><br></pre></td></tr></table></figure><p>攻击：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `blank_space_attack`(`uid`, `pwd`) <span class="keyword">VALUES</span> (<span class="string">&#x27;admin      1&#x27;</span>, <span class="string">&#x27;easy&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blank_space_attack <span class="keyword">where</span> uid <span class="operator">=</span> &quot;admin&quot; <span class="keyword">and</span> pwd <span class="operator">=</span> &quot;easy&quot;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>uid</th><th>desc</th></tr></thead><tbody><tr><td>3</td><td>admin_____</td><td>easy</td></tr></tbody></table><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li>服务端没有对用户名长度进行限制。如果服务端限制了用户名长度就不能导致数据库截断，也就没有利用条件。</li><li>登陆验证的 SQL 语句必须是用户名和密码一起验证。如果是验证流程是先根据用户名查找出对应的密码，然后再比对密码的话，那么也不能进行利用。因为当使用 admin 为用户名来查询密码的话，数据库此时就会返回两条记录，而一般取第一条则是目标用户的记录，那么你传输的密码肯定是和目标用户密码匹配不上的。</li><li>验证成功后返回的必须是用户传递进来的用户名，而不是从数据库取出的用户名。因为当我们以用户 admin 和密码 easy 登陆时，其实数据库返回的是我们自己的用户信息，而我们的用户名其实是 <code>admin_____</code>，如果此后的业务逻辑以该用户名为准，那么就不能达到越权的目的了。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.v0n.top/2019/08/05/SQL%E7%BA%A6%E6%9D%9F%E6%94%BB%E5%87%BB/">SQL 约束攻击 | v0n</a></li><li><a href="https://iluoy.com/articles/295">记一次数据库空格问题 | iluoy</a></li><li><a href="https://www.cnblogs.com/xjnotxj/p/9019866.html">Mysql 查询条件中字符串尾部有空格也能匹配上的问题 | xjnotxj</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Laravel 之外使用 illuminate 组件</title>
      <link href="/2020/09/11/use-illuminate-components-without-laravel/"/>
      <url>/2020/09/11/use-illuminate-components-without-laravel/</url>
      
        <content type="html"><![CDATA[<p>当代框架基本都是有组件构成，这使得框架变得更加灵活。<a href="https://github.com/illuminate">The Laravel Components | github</a> Laravel 中有不少优质组件，那如何在 Laravel 之外使用 illuminate 组件呢？</p><h2 id="illuminate-x2F-validation"><a href="#illuminate-x2F-validation" class="headerlink" title="illuminate&#x2F;validation"></a>illuminate&#x2F;validation</h2><p>以 <a href="https://github.com/illuminate/validation">illuminate&#x2F;validation</a> 为例，validation 有丰富的数据验证功能。</p><p>在项目的 <code>composer.json</code> 文件中添加：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="attr">&quot;illuminate/validation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从 <a href="https://github.com/Laravel-Lang/lang/tree/master/src/zh_CN">Laravel-Lang&#x2F;lang</a> 项目中复制需要的语言文件放到自己的项目中。</p><p>例如：在 Yii2 项目中，复制对应语言文件到项目中的 <code>assets/lang/zh-CN/validation.php</code>。</p><p>创建 <code>common/Validator.php</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">common</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Filesystem</span>\<span class="title">Filesystem</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Translation</span>\<span class="title">FileLoader</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Translation</span>\<span class="title">Translator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">Factory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>): <span class="title">Factory</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === <span class="built_in">static</span>::<span class="variable">$instance</span>) &#123;</span><br><span class="line">      <span class="variable">$translationPath</span> = <span class="title function_ invoke__">get_alias</span>(<span class="string">&#x27;@assets/lang&#x27;</span>);</span><br><span class="line">      <span class="variable">$translationLocale</span> = <span class="string">&#x27;zh-CN&#x27;</span>;</span><br><span class="line">      <span class="variable">$transFileLoader</span> = <span class="keyword">new</span> <span class="title class_">FileLoader</span>(<span class="keyword">new</span> <span class="title class_">Filesystem</span>(), <span class="variable">$translationPath</span>);</span><br><span class="line">      <span class="variable">$translator</span> = <span class="keyword">new</span> <span class="title class_">Translator</span>(<span class="variable">$transFileLoader</span>, <span class="variable">$translationLocale</span>);</span><br><span class="line">      <span class="built_in">static</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="title class_">Factory</span>(<span class="variable">$translator</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static</span>::<span class="variable">$instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全局函数文件添加：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://learnku.com/docs/laravel/5.8/validation/3899#manually-creating-validators</span></span><br><span class="line"><span class="comment">// $rules = [</span></span><br><span class="line"><span class="comment">//   &#x27;name&#x27; =&gt; &#x27;required|string|min:2|max:5&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;code&#x27; =&gt; &#x27;required|string|min:2|max:5&#x27;,</span></span><br><span class="line"><span class="comment">// ];</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span>, <span class="keyword">array</span> <span class="variable">$rules</span>, <span class="keyword">array</span> <span class="variable">$messages</span> = [], <span class="keyword">array</span> <span class="variable">$customAttributes</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> \app\common<span class="title class_">\Validator</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">make</span>(<span class="variable">$data</span>, <span class="variable">$rules</span>, <span class="variable">$messages</span>, <span class="variable">$customAttributes</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试使用：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$rules</span> = [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;required|numeric&#x27;</span>];</span><br><span class="line"><span class="variable">$customAttributes</span> = [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;My name&#x27;</span>];</span><br><span class="line"><span class="variable">$messages</span> = [<span class="string">&#x27;name.required&#x27;</span> =&gt; <span class="string">&#x27;A name is required&#x27;</span>,];</span><br><span class="line"></span><br><span class="line"><span class="variable">$validator</span> = <span class="title function_ invoke__">validator</span>(<span class="variable">$data</span>, <span class="variable">$rules</span>, <span class="variable">$customAttributes</span>, <span class="variable">$messages</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">fails</span>()) &#123;</span><br><span class="line">    <span class="variable">$errors</span> = <span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">errors</span>()-&gt;<span class="title function_ invoke__">all</span>();</span><br><span class="line">    <span class="title class_">Response</span>::<span class="title function_ invoke__">error</span>(<span class="title class_">Errors</span>::<span class="variable constant_">ParamsInvalid</span>, <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$errors</span>), <span class="variable">$errors</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 正则批量删除 key</title>
      <link href="/2020/08/17/redis-matching-a-pattern-delete-keys/"/>
      <url>/2020/08/17/redis-matching-a-pattern-delete-keys/</url>
      
        <content type="html"><![CDATA[<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">&quot;return redis.call(&#x27;del&#x27;, &#x27;defaultKey&#x27;, unpack(redis.call(&#x27;keys&#x27;, ARGV[1])))&quot;</span> <span class="number">0</span> prefix:*</span><br></pre></td></tr></table></figure><p>循环删除：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">&quot;local keys = redis.call(&#x27;keys&#x27;, ARGV[1]) \n for i=1,#keys,5000 do \n redis.call(&#x27;del&#x27;, unpack(keys, i, math.min(i+4999, #keys))) \n end \n return keys&quot;</span> <span class="number">0</span> prefix:*</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/4006324/how-to-atomically-delete-keys-matching-a-pattern-using-redis">How to atomically delete keys matching a pattern using Redis | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL JSON 数据类型</title>
      <link href="/2020/08/14/mysql-json-data-type/"/>
      <url>/2020/08/14/mysql-json-data-type/</url>
      
        <content type="html"><![CDATA[<p><a href="https://dev.mysql.com/doc/refman/5.7/en/json.html">The JSON Data Type | mysql</a></p><blockquote><p>As of MySQL 5.7.8, MySQL supports a native JSON data type</p></blockquote><p><a href="https://dev.mysql.com/doc/refman/5.7/en/json-function-reference.html">JSON Function Reference | mysql</a></p><p>A JSON column cannot have a non-NULL default value.</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>设置虚拟列 -&gt; 虚拟列建立索引</p><p>在 MySQL 5.7 中，支持两种 Generated Column，即 Virtual Generated Column 和 Stored Generated Column，前者只将 Generated Column 保存在数据字典中（表的元数据），并不会将这一列数据持久化到磁盘上；后者会将 Generated Column 持久化到磁盘上，而不是每次读取的时候计算所得。很明显，后者存放了可以通过已有数据计算而得的数据，需要更多的磁盘空间，与 Virtual Column 相比并没有优势，因此，MySQL 5.7 中，不指定 Generated Column 的类型，默认是 Virtual Column。</p><p>如果需要 Stored Generated Golumn 的话，可能在 Virtual Generated Column 上建立索引更加合适，一般情况下，都使用 Virtual Generated Column，这也是 MySQL 默认的方式。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sally&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;games_played&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Battlefield&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;weapon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sniper rifle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rank&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sergeant V&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `players` (</span><br><span class="line">  `id` <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `player_and_games` JSON <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `names_virtual` <span class="type">VARCHAR</span>(<span class="number">20</span>) GENERATED ALWAYS <span class="keyword">AS</span> (`player_and_games` <span class="operator">-</span><span class="operator">&gt;&gt;</span> <span class="string">&#x27;$.name&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="在-Yii2-中的使用"><a href="#在-Yii2-中的使用" class="headerlink" title="在 Yii2 中的使用"></a>在 Yii2 中的使用</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="built_in">static</span>::<span class="title function_ invoke__">find</span>()</span><br><span class="line">    -&gt;<span class="title function_ invoke__">andWhere</span>([<span class="string">&#x27;=&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Expression</span>(<span class="string">&quot;`json_value` -&gt; &#x27;$.source&#x27;&quot;</span>), <span class="keyword">new</span> <span class="title class_">JsonExpression</span>(<span class="variable">$array_param</span>)]);</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.lnmp.cn/mysql-57-new-features-json.html">MySQL 5.7 新特性 JSON 的创建，插入，查询，更新</a></li><li><a href="http://mysql.taobao.org/monthly/2017/12/09/">MySQL · 最佳实践 · 如何索引 JSON 字段</a></li><li><a href="https://www.cnblogs.com/waterystone/p/5626098.html">MySQL 常用 Json 函数 | cnblogs</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composer vendor 提交至 Git</title>
      <link href="/2020/08/10/commit-composer-vendor-to-git/"/>
      <url>/2020/08/10/commit-composer-vendor-to-git/</url>
      
        <content type="html"><![CDATA[<h2 id="应该将-vendor-提交到-Git-吗"><a href="#应该将-vendor-提交到-Git-吗" class="headerlink" title="应该将 vendor 提交到 Git 吗"></a>应该将 vendor 提交到 Git 吗</h2><p>一般建议是 <strong>不</strong>。<code>vendor</code> 目录应添加到 <code>.gitignore</code>。</p><p>最佳实践是让所有开发人员使用 Composer 来安装依赖项。类似地，构建服务器、CI、部署工具等都应该作为项目启动的一部分来运行 Composer。</p><p>虽然在某些环境下这样做很诱人，但也会导致一些问题：</p><ul><li>大型 VCS 存储库的大小和更新代码时的差异。</li><li>在你自己的 VCS 复制你所有依赖的历史。</li><li>将通过 git 安装的依赖项添加到 git repo 中将显示为 <code>submodules</code>。这是有问题的，因为它们不是真正的 <code>submodules</code>，您将会遇到问题。</li></ul><p>如果你真的觉得你必须这样做，你有几个选择：</p><ul><li>限制自己安装带标记的版本（没有 dev 版本），这样就只能安装压缩版，并避免与 git <code>submodules</code> 有关的问题。</li><li>Use <code>--prefer-dist</code> or set <code>preferred-install</code> to <code>dist</code> in your config.</li><li>Remove the <code>.git</code> directory of every dependency after the installation, then you can add them to your git repo. You can do that with <code>rm -rf vendor/\*\*/.git</code> in ZSH or <code>find vendor/ -type d -name &quot;.git&quot; -exec rm -rf &#123;&#125; \;</code> in Bash. 但这意味着您必须在运行 composer 更新之前从磁盘中删除这些依赖项。</li><li>Add a <code>.gitignore</code> rule <code>/vendor/**/.git</code> to ignore all the vendor <code>.git</code> folders. 这种方法不需要在运行编写器更新之前从磁盘删除依赖项。</li></ul><h2 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h2><blockquote><p>问题解决了，但是不确信做法是否正确。</p></blockquote><p>因为网络环境与部署的原因，在生产环境下是将 <code>vendor</code> 目录提交到 <code>git</code> 中的。使用过程中确实出现了，部分类库成为了 <code>submodules</code>，无法把真实的代码提交进 git。</p><p>可尝试执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> rf --cache vendor</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add vendor&quot;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md">Should I commit the dependencies in my vendor directory? | getcomposer</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> composer </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Swoft 框架环境配置</title>
      <link href="/2020/08/07/deploy-swoft-framework/"/>
      <url>/2020/08/07/deploy-swoft-framework/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Swoole"><a href="#安装-Swoole" class="headerlink" title="安装 Swoole"></a>安装 Swoole</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pecl install swoole</span><br></pre></td></tr></table></figure><p>可能出现：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Connection to `ssl://pecl.php.net:443′ failed:</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查</span></span><br><span class="line">php -r <span class="string">&quot;print_r(openssl_get_cert_locations());&quot;</span></span><br><span class="line"></span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [default_cert_file] =&gt; /private/etc/ssl/cert.pem</span><br><span class="line">    [default_cert_file_env] =&gt; SSL_CERT_FILE</span><br><span class="line">    [default_cert_dir] =&gt; /private/etc/ssl/certs</span><br><span class="line">    [default_cert_dir_env] =&gt; SSL_CERT_DIR</span><br><span class="line">    [default_private_dir] =&gt; /private/etc/ssl/private</span><br><span class="line">    [default_default_cert_area] =&gt; /private/etc/ssl</span><br><span class="line">    [ini_cafile] =&gt;</span><br><span class="line">    [ini_capath] =&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> /private/etc/ssl/</span><br><span class="line"><span class="comment"># 现没有 cert.pem 这个证书</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载证书</span></span><br><span class="line">wget -c https://curl.haxx.se/ca/cacert.pem /private/etc/ssl/cert.pem --no-check-certificate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次执行</span></span><br><span class="line">pecl install swoole</span><br></pre></td></tr></table></figure><h2 id="PEAR-PECL-Composer"><a href="#PEAR-PECL-Composer" class="headerlink" title="PEAR PECL Composer"></a>PEAR PECL Composer</h2><p><a href="http://pear.php.net/">PEAR</a>：PHP Extension and Application Repository，PEAR 将 PHP 程序开发过程中常用的功能编写成类库，涵盖了页面呈现、数据库访问、文件操作、数据结构、缓存操作、网络协议、WebService 等许多方面，用户可以通过下载这些类库并适当的作一些定制以实现自己需要的功能。避免重复发明“车轮”。PEAR 的出现大大提高了 PHP 程序的开发效率和开发质量。使用的时候，要在代码中进行 Include 才能够使用。但基本已经没落，被 Composer 取而代之。</p><p><a href="https://pecl.php.net/">PECL</a>：PHP Extension Community Library，是使用 C 语言开发的，通常用于补充一些用 PHP 难以完成的底层功能，往往需要重新编译或者在配置文件中设置后才能在用户自己的代码中使用。相对来说是比较底层的扩展。PECL 是 PEAR 的一部分。</p><p>官网说明：<a href="https://pecl.php.net/">https://pecl.php.net/</a></p><p>eg：安装 Reids 扩展 <a href="https://pecl.php.net/package/redis">https://pecl.php.net/package/redis</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pecl install redis</span><br></pre></td></tr></table></figure><p>Composer：PHP 的包管理工具，优点在于仅需要提供一个 composer.json 文件，申明需要用到的三方库，一个简单的命令就能将其依赖全部装好。</p><p>目前，我们使用 Composer 来管理 PHP 代码包，使用 PECL 来管理 C 扩展。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://itman.su520.com/2017/08/23/pecl-%E5%92%8C-pear-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/">关于 PHP 的扩展 PECL、PEAR、Composer | su520</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> swoft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcpdump 入门使用</title>
      <link href="/2020/06/29/tcpdump-getting-started/"/>
      <url>/2020/06/29/tcpdump-getting-started/</url>
      
        <content type="html"><![CDATA[<p>tcpdump 是 Unix&#x2F;Linux 下的抓包工具，可以针对指定网卡、端口、协议进行抓包。</p><span id="more"></span><h2 id="字太多不看"><a href="#字太多不看" class="headerlink" title="字太多不看"></a>字太多不看</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump host api.test and tcp port 80 -A -nn</span><br><span class="line">sudo tcpdump dst api.test and tcp port 80 -A</span><br></pre></td></tr></table></figure><h2 id="一举成名天下知"><a href="#一举成名天下知" class="headerlink" title="一举成名天下知"></a>一举成名天下知</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man tcpdump</span><br></pre></td></tr></table></figure><h2 id="获取适配器列表"><a href="#获取适配器列表" class="headerlink" title="获取适配器列表"></a>获取适配器列表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -D</span><br><span class="line">tcpdump --list-interfaces</span><br><span class="line"></span><br><span class="line">1.en0 [Up, Running]</span><br><span class="line">2.p2p0 [Up, Running]</span><br><span class="line">3.awdl0 [Up, Running]</span><br><span class="line">4.llw0 [Up, Running]</span><br><span class="line">5.utun0 [Up, Running]</span><br><span class="line">6.utun1 [Up, Running]</span><br><span class="line">7.utun2 [Up, Running]</span><br><span class="line">8.en5 [Up, Running]</span><br><span class="line">9.lo0 [Up, Running, Loopback]</span><br><span class="line">10.bridge0 [Up, Running]</span><br><span class="line">11.en1 [Up, Running]</span><br><span class="line">12.en2 [Up, Running]</span><br><span class="line">13.en3 [Up, Running]</span><br><span class="line">14.en4 [Up, Running]</span><br><span class="line">15.gif0 [none]</span><br><span class="line">16.stf0 [none]</span><br><span class="line">17.XHC0 [none]</span><br><span class="line">18.XHC1 [none]</span><br><span class="line">19.ap1 [none]</span><br><span class="line">20.XHC20 [none]</span><br><span class="line">21.VHC128 [none]</span><br></pre></td></tr></table></figure><h2 id="监听适配器"><a href="#监听适配器" class="headerlink" title="监听适配器"></a>监听适配器</h2><p>Listen on interface.</p><p>macOS 下监听适配器，必须使用 root 权限。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i en0</span><br><span class="line"></span><br><span class="line">sudo tcpdump -i 1</span><br></pre></td></tr></table></figure><h2 id="过滤监听适配器"><a href="#过滤监听适配器" class="headerlink" title="过滤监听适配器"></a>过滤监听适配器</h2><h3 id="过滤主机"><a href="#过滤主机" class="headerlink" title="过滤主机"></a>过滤主机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抓取所有经过 en0，目的或源地址是 192.168.50.1 的网络数据</span></span><br><span class="line">sudo tcpdump -i en0 host 192.168.50.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 源地址</span></span><br><span class="line">sudo tcpdump -i en0 src host 192.168.50.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目的地址</span></span><br><span class="line">sudo tcpdump -i en0 dst host 192.168.50.1</span><br></pre></td></tr></table></figure><h3 id="过滤端口"><a href="#过滤端口" class="headerlink" title="过滤端口"></a>过滤端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i en0 port 8080</span><br></pre></td></tr></table></figure><h3 id="过滤网段"><a href="#过滤网段" class="headerlink" title="过滤网段"></a>过滤网段</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i en0 net 192.168</span><br></pre></td></tr></table></figure><h3 id="协议过滤"><a href="#协议过滤" class="headerlink" title="协议过滤"></a>协议过滤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i en0 tcp</span><br><span class="line">sudo tcpdump -i en0 udp</span><br><span class="line">sudo tcpdump -i en0 ip</span><br><span class="line">sudo tcpdump -i en0 arp</span><br><span class="line">sudo tcpdump -i en0 icmp</span><br></pre></td></tr></table></figure><h3 id="使用表达式"><a href="#使用表达式" class="headerlink" title="使用表达式"></a>使用表达式</h3><ul><li>与：&amp;&amp; 或 and</li><li>或：|| 或 or</li><li>非：! 或 not</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>tcpdump 默认只会截取前 96 字节的内容，要想截取所有的报文内容，可以使用 -s number， number 就是你要截取的报文字节数，如果是 0 的话，表示截取报文全部内容。</p><ul><li>-i any 监听所有的网卡</li><li>-n 不要解析域名，会优先暂时主机的名字</li><li>-nn 不展示主机名和端口名（比如 443 端口会被展示成 https）</li><li>-A 只使用 ascii 打印报文的全部数据，不要和 -X 一起使用。截取 http 请求的时候可以用 sudo tcpdump -nSA port 80</li><li>-X 同时用 hex 和 ascii 显示报文的内容</li><li>-XX 同 -X，但同时显示以太网头部</li><li>-S 显示绝对的序列号（sequence number），而不是相对编号</li><li>-s 截取的包字节长度，默认情况下 tcpdump 会展示 96 字节的长度，要获取完整的长度可以用 -s0 或者 -s1600。</li><li>-v, -vv, -vvv：显示更多的详细信息</li><li>-c number 截取 number 个报文，然后结束</li></ul><h2 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h2><blockquote><p><a href="https://amits-notes.readthedocs.io/en/latest/networking/tcpdump.html#id2">tcpdump Flags | readthedocs</a></p></blockquote><table><thead><tr><th>TCP Flag</th><th>Flag</th><th>Meaning</th></tr></thead><tbody><tr><td>SYN</td><td>S</td><td>Syn packet, a session establishment request. 一个会话建立请求</td></tr><tr><td>ACK</td><td>A</td><td>Ack packet, acknowledge sender’s data. 确认发送方的数据</td></tr><tr><td>FIN</td><td>F</td><td>Finish flag, indication of termination. 终止的的标识</td></tr><tr><td>RESET</td><td>R</td><td>Reset, indication of immediate abort of conn. 指令立即中止</td></tr><tr><td>PUSH</td><td>P</td><td>Push, immediate push of data from sender. 从发送方立即推送数据</td></tr><tr><td>URGENT</td><td>U</td><td>Urgent, takes precedence over other data. 优先于其他数据</td></tr><tr><td>NONE</td><td>A dot .</td><td>Placeholder, usually used for ACK. 占位符，通常用于 ACK</td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>抓取所有经过 eth1，目的地址是 192.168.1.254 或 192.168.1.200 端口是 80 的 TCP 数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i eth1 <span class="string">&#x27;((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host</span></span><br><span class="line"><span class="string">192.168.1.200)))&#x27;</span></span><br></pre></td></tr></table></figure><p>抓取所有经过 eth1，目的网络是 192.168，但目的主机不是 192.168.1.200 的 TCP 数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i eth1 <span class="string">&#x27;((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))&#x27;</span></span><br></pre></td></tr></table></figure><p>只抓 SYN 包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i eth1 <span class="string">&#x27;tcp[tcpflags] = tcp-syn&#x27;</span></span><br></pre></td></tr></table></figure><p>抓 SYN, ACK：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i eth1 <span class="string">&#x27;tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0&#x27;</span></span><br></pre></td></tr></table></figure><p>抓 DNS 请求数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i en0 udp dst port 53</span><br></pre></td></tr></table></figure><p>-c 参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工 CTRL+C 还是抓的太多，于是可以用 -c 参数指定抓多少个包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo time tcpdump -nn -i en0 <span class="string">&#x27;tcp[tcpflags] = tcp-syn&#x27;</span> -c 10000 &gt; /dev/null</span><br></pre></td></tr></table></figure><p>实时抓取端口号 8000 的 GET 包，然后写入 GET.log：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i eth0 <span class="string">&#x27;((port 8000) and (tcp[(tcp[12]&gt;&gt;2):4]=0x47455420))&#x27;</span> -nnAl -w /tmp/GET.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="三次握手-四次挥手"><a href="#三次握手-四次挥手" class="headerlink" title="三次握手 四次挥手"></a>三次握手 四次挥手</h2><h3 id="TCP-连接建立（三次握手）"><a href="#TCP-连接建立（三次握手）" class="headerlink" title="TCP 连接建立（三次握手）"></a>TCP 连接建立（三次握手）</h3><p>客户端 A，服务器 B，初始序号 seq，确认号 ack。</p><p>初始状态：B 处于监听状态，A 处于打开状态。</p><ul><li>A -&gt; B : seq &#x3D; x （A 向 B 发送连接请求报文段，A 进入同步发送状态 SYN-SENT）</li><li>B -&gt; A : ack &#x3D; x + 1,seq &#x3D; y （B 收到报文段，向 A 发送确认，B 进入同步收到状态 SYN-RCVD）</li><li>A -&gt; B : ack &#x3D; y + 1 （A 收到 B 的确认后，再次确认，A 进入连接状态 ESTABLISHED）</li></ul><p>连接后的状态：B 收到 A 的确认后，进入连接状态 ESTABLISHED。</p><p>为什么要握手要三次？防止失效的连接请求突然传到服务器端，让服务器端误认为要建立连接。</p><h3 id="TCP-连接释放（四次挥手）"><a href="#TCP-连接释放（四次挥手）" class="headerlink" title="TCP 连接释放（四次挥手）"></a>TCP 连接释放（四次挥手）</h3><ul><li>A -&gt; B : seq &#x3D; u （A 发出连接释放报文段，进入终止等待 1 状态 FIN-WAIT-1）</li><li>B -&gt; A : ack &#x3D; u + 1,seq &#x3D; v （B 收到报文段，发出确认，TCP 处于半关闭，B 还可向 A 发数据，B 进入关闭等待状态 WAIT）</li><li>B -&gt; A : ack &#x3D; u + 1,seq &#x3D; w （B 重复发送确认号，进入最后确认状态 LAST-ACK）</li><li>A -&gt; B : ack &#x3D; w + 1,seq &#x3D; u + 1 （A 发出确认，进入时间等待状态 TIME-WAIT）</li></ul><p>经过时间等待计时器设置的时间 2MSL 后，A 才进入 CLOSED 状态。</p><p>为什么 A 进入 TIME-WAIT 后必须等待 2MSL：</p><ul><li>保证 A 发送的最后一个 ACK 报文段能达到 B</li><li>防止失效的报文段出现在连接中</li></ul><h3 id="需要思考的问题"><a href="#需要思考的问题" class="headerlink" title="需要思考的问题"></a>需要思考的问题</h3><p>问题 1: 请详细描述三次握手和四次挥手的过程<br>要求熟悉三次握手和四次挥手的机制，要求画出状态图。</p><p>问题 2: 四次挥手中 TIME_WAIT 状态存在的目的是什么?<br>这个问题是画出四次挥手状态图，会引申问你。不排除还会问为什么四次挥手是四次不是二次等问题。最好是把相关问题均掌握。</p><p>问题 3: TCP 是通过什么机制保障可靠性的?<br>从四个方面进行回答，ACK 确认机制、超时重传、滑动窗口以及流量控制，深入的话要求详细讲出流量控制的机制。</p><h3 id="抓包分析握手过程"><a href="#抓包分析握手过程" class="headerlink" title="抓包分析握手过程"></a>抓包分析握手过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i en0 host www.qq.com and tcp -S -c 50</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9289792/87918568-3377e280-caa9-11ea-831a-95000e308ad8.png" alt="tcpdump 抓包分析握手过程"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.jianshu.com/p/a57a5b0e58f0">macOS 下使用 tcpdump 抓包 | jianshu</a></li><li><a href="https://amits-notes.readthedocs.io/en/latest/networking/tcpdump.html">tcpdump | readthedocs</a></li><li><a href="https://www.cnblogs.com/fonxian/p/6565209.html">TCP 三次握手、四次挥手与 TcpDump 抓包分析 | 清泉白石</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置 Laradock PhpStorm Xdubug</title>
      <link href="/2020/05/26/config-laradock-phpstorm-xdubug/"/>
      <url>/2020/05/26/config-laradock-phpstorm-xdubug/</url>
      
        <content type="html"><![CDATA[<p>最近在学习 Yii2 的源码，为了方便调试所以研究下 Laradock + PhpStorm + Xdubug 的配置。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>macOS</li><li>Laradock v10.0</li></ul><p>请保证 Laradock 是最新的版本，可以减少不必要的麻烦。也推荐使用我精简过的项目 <a href="https://github.com/imzyf/my-dock">imzyf&#x2F;my-dock | github</a>。</p><span id="more"></span><h2 id="配置-Laradock"><a href="#配置-Laradock" class="headerlink" title="配置 Laradock"></a>配置 Laradock</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .<span class="built_in">env</span></span><br><span class="line"></span><br><span class="line">WORKSPACE_INSTALL_XDEBUG=<span class="literal">true</span></span><br><span class="line">PHP_FPM_INSTALL_XDEBUG=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>重新编译 php-fpm 和 workspace 容器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build php-fpm workspace</span><br></pre></td></tr></table></figure><h2 id="配置-PhpStorm"><a href="#配置-PhpStorm" class="headerlink" title="配置 PhpStorm"></a>配置 PhpStorm</h2><h3 id="配置-Docker"><a href="#配置-Docker" class="headerlink" title="配置 Docker"></a>配置 Docker</h3><p>Preferences &gt; Build, Execution, Deploymnent &gt; Docker</p><p><img src="https://user-images.githubusercontent.com/9289792/82999144-302d2100-a03b-11ea-8a21-08bc67838fc2.png" alt="docker"></p><h3 id="配置-PHP"><a href="#配置-PHP" class="headerlink" title="配置 PHP"></a>配置 PHP</h3><p>Preferences &gt; Languages &amp; Frameworks &gt; PHP，PHP CLI Interpreter 点 <code>...</code></p><p><img src="https://user-images.githubusercontent.com/9289792/82997395-e7746880-a038-11ea-98ca-d68052d5bd22.png" alt="php 1"></p><p>点击 +，选择 From Docker, Vagrant…</p><p><img src="https://user-images.githubusercontent.com/9289792/82997724-55209480-a039-11ea-8235-4a0479aeb832.png" alt="php 2"></p><p>Debugger 可以显示出 Xdebug。</p><h3 id="配置-Servers"><a href="#配置-Servers" class="headerlink" title="配置 Servers"></a>配置 Servers</h3><p>Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; Servers</p><p><img src="https://user-images.githubusercontent.com/9289792/82998171-f7d91300-a039-11ea-89e7-50b79664b0f6.png" alt="server"></p><p>注意：Name 必须填写 Laradock 中的 PHP_IDE_CONFIG 也就就是 <code>laradock</code>。</p><h3 id="配置-Xdebug"><a href="#配置-Xdebug" class="headerlink" title="配置 Xdebug"></a>配置 Xdebug</h3><p>Preferences &gt; Languages &amp; Frameworks &gt; PHP &gt; Debug。点击 <code>Validate</code>，填写。</p><p><img src="https://user-images.githubusercontent.com/9289792/82998451-530b0580-a03a-11ea-925a-1770df95eb66.png" alt="Xdebug"></p><p>run &gt; Edit Configurations，添加 PHP Remote Debug。IDE key 为 <code>PHPSTORM</code>。</p><p><img src="https://user-images.githubusercontent.com/9289792/82998663-95ccdd80-a03a-11ea-9dc4-5d00d012e7df.png" alt="Xdebug2"></p><h2 id="配置-Chrome"><a href="#配置-Chrome" class="headerlink" title="配置 Chrome"></a>配置 Chrome</h2><p>下载插件 <a href="https://chrome.google.com/webstore/detail/eadndfjplgieldjbigjakmdgkmoaaaoc">Xdebug helper</a>，右键图标 配置。</p><p><img src="https://user-images.githubusercontent.com/9289792/82998865-d3316b00-a03a-11ea-94cc-a6642fa0cdbf.png" alt="chrome"></p><h2 id="enjoy"><a href="#enjoy" class="headerlink" title="enjoy"></a>enjoy</h2><p><img src="https://user-images.githubusercontent.com/9289792/82999306-636fb000-a03b-11ea-9c0f-a059fbc47fd3.png" alt="start"></p><p>开启 debug，然后访问页面。</p><p><img src="https://user-images.githubusercontent.com/9289792/82999463-96b23f00-a03b-11ea-922a-4c91169628a9.png" alt="fly"></p><p>芜湖起飞。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learnku.com/articles/24389">Laradock 使用 PhpStorm Debug 代码 | learnku</a></li><li><a href="https://medium.com/@chenpohsun_12588/set-debugger-using-xdebug-with-phpstorm-laradock-454e8c2ad0d9">Set Debugger Using Xdebug With PHPStorm &amp; Laradock | medium</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> phpstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP float 精度</title>
      <link href="/2020/05/09/php-float-precision/"/>
      <url>/2020/05/09/php-float-precision/</url>
      
        <content type="html"><![CDATA[<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1.1</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">gettype</span>(<span class="variable">$a</span>)); <span class="comment">// string(6) &quot;double&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>); <span class="comment">// float(1.1)</span></span><br></pre></td></tr></table></figure><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;123456789.1100110011&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = (<span class="keyword">float</span>) <span class="variable">$a</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>); <span class="comment">// float(123456789.11001)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%.11f&#x27;</span>, <span class="variable">$a</span>)); <span class="comment">// string(21) &quot;123456789.11001099646&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="number">123456789.11001</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>); <span class="comment">// float(123456789.11001)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%.11f&#x27;</span>, <span class="variable">$b</span>)); <span class="comment">// string(21) &quot;123456789.11000999808&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;123456789.1100110011&#x27;</span>;</span><br><span class="line"><span class="variable">$c</span> = (<span class="keyword">float</span>) <span class="variable">$c</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>); <span class="comment">// float(123456789.11001)</span></span><br><span class="line"><span class="variable">$c</span> = (<span class="keyword">string</span>) <span class="variable">$c</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>); <span class="comment">// string(15) &quot;123456789.11001&quot;</span></span><br><span class="line"><span class="variable">$c</span> = (<span class="keyword">float</span>) <span class="variable">$c</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>); <span class="comment">// float(123456789.11001)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%.11f&#x27;</span>, <span class="variable">$c</span>)); <span class="comment">// string(21) &quot;123456789.11000999808&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span> === <span class="variable">$b</span>); <span class="comment">// bool(false) - 说明 $a 还是携带着 float 的精度</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span> === <span class="variable">$c</span>); <span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例 3"></a>实例 3</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// # 1</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">120085</span> === <span class="number">1200.85</span> * <span class="number">100</span>); <span class="comment">// bool(false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// # 2</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">120085</span> == <span class="number">1200.85</span> * <span class="number">100</span>); <span class="comment">// bool(false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// # 3</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">120081</span> == <span class="number">1200.81</span> * <span class="number">100</span>); <span class="comment">// bool(true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// # 4</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">120085</span> - <span class="number">1200.85</span> * <span class="number">100</span>); <span class="comment">// float(1.4551915228367E-11)</span></span><br></pre></td></tr></table></figure><h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例 4"></a>实例 4</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0.1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0.9</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="variable">$a</span> + <span class="variable">$b</span>) == <span class="variable">$c</span>); <span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="variable">$c</span> - <span class="variable">$b</span>) == <span class="variable">$a</span>); <span class="comment">// bool(false)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%.20f&#x27;</span>, <span class="variable">$a</span> + <span class="variable">$b</span>)); <span class="comment">// string(22) &quot;1.00000000000000000000&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%.20f&#x27;</span>, <span class="variable">$c</span> - <span class="variable">$b</span>)); <span class="comment">// string(22) &quot;0.09999999999999997780&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="number">0.5</span> - <span class="number">0.25</span>) === <span class="number">0.25</span>); <span class="comment">// bool(true) 0.5 二进制 0.1，0.25 二进制 0.01</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="number">0.25</span> + <span class="number">0.25</span>) === <span class="number">0.5</span>); <span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例 5"></a>实例 5</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$n</span> = <span class="number">19.99</span>;</span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="variable">$n</span> * <span class="number">100</span>); <span class="comment">// 1999.0</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>((<span class="keyword">int</span>) (<span class="variable">$n</span> * <span class="number">100</span>)); <span class="comment">// 1998 !!!</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>((<span class="keyword">string</span>) (<span class="variable">$n</span> * <span class="number">100</span>)); <span class="comment">// &quot;1999&quot;</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>((<span class="keyword">int</span>) (<span class="keyword">string</span>) (<span class="variable">$n</span> * <span class="number">100</span>)); <span class="comment">// 1999</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">round</span>(<span class="variable">$n</span> * <span class="number">100</span>)); <span class="comment">// 1999.0 !!!</span></span><br><span class="line"><span class="title function_ invoke__">dump</span>((<span class="keyword">int</span>) <span class="title function_ invoke__">round</span>(<span class="variable">$n</span> * <span class="number">100</span>)); <span class="comment">// 1999</span></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看文档：</p><ul><li><a href="https://www.php.net/manual/zh/function.gettype.php">gettype | php.net</a></li><li><a href="https://www.php.net/manual/zh/language.types.float.php">Float 浮点型 | php.net</a></li></ul><blockquote><p>浮点型（也叫浮点数 float，双精度数 double 或实数 real）<br>浮点数的字长和平台相关，尽管通常最大值是 1.8e308 并具有 14 位十进制数字的精度（64 位 IEEE 格式）。<br>所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用任意精度数学函数或者 gmp 函数。</p></blockquote><p>实例 1：说明在 PHP 中 <code>float</code> 与 <code>dobule</code> 是一回事。在 C 级别，所有内容都存储为 double。</p><p>实例 2、3：float 的比较结果是 _视情况而定_，<strong>永远不要相信浮点数结果精确到了最后一位</strong>。</p><p>实例 4：出现这个问题是因为浮点数计算涉及精度，当浮点数转为二进制时有可能会造成精度丢失。</p><h2 id="浮点数转二进制方法"><a href="#浮点数转二进制方法" class="headerlink" title="浮点数转二进制方法"></a>浮点数转二进制方法</h2><p>整数部分采用除以 2 取余方法，小数部分采用乘以 2 取整方法。</p><p>例如：把数字 8.5 转为二进制：</p><p>整数部分是 8：</p><ul><li>8&#x2F;2&#x3D;4 8%2&#x3D;0</li><li>4&#x2F;2&#x3D;2 4%2&#x3D;0</li><li>2&#x2F;2&#x3D;1 2%2&#x3D;0</li><li>1 比 2 小，因此不需要计算下去，整数 8 的二进制为 1000</li></ul><p>小数部分是 0.5：</p><ul><li>0.5x2 &#x3D; 1.0</li><li>因取整后小数部分为 0，因此不需要再计算下去，小数 0.5 的二进制为 0.1</li></ul><p><code>8.5</code> 的二进制为 <code>1000.1</code>。</p><p>计算数字 0.9 的二进制：</p><ul><li>0.9x2 &#x3D; 1.8</li><li>0.8x2 &#x3D; 1.6</li><li>0.6x2 &#x3D; 1.2</li><li>0.2x2 &#x3D; 0.4</li><li>0.4x2 &#x3D; 0.8</li><li>0.8x2 &#x3D; 1.6</li><li>… 之后不断循环下去，当截取精度为 N 时，N 后的数会被舍去，导致精度丢失。</li></ul><p>实例 4 中 <code>0.9</code> 在转为二进制时精度丢失，导致比较时出现错误。</p><blockquote><p>你看似有穷的小数，在计算机的二进制表示里却是无穷的。</p></blockquote><p>计算数字 0.25 的二进制：</p><ul><li>0.25x2 &#x3D; 0.5</li><li>0.5x2 &#x3D; 1.0</li></ul><p><code>0.25</code> 的二进制为 <code>0.01</code>。</p><h2 id="float-比较方法"><a href="#float-比较方法" class="headerlink" title="float 比较方法"></a>float 比较方法</h2><h3 id="使用-round-方法处理后再比较"><a href="#使用-round-方法处理后再比较" class="headerlink" title="使用 round 方法处理后再比较"></a>使用 round 方法处理后再比较</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">120085</span> == <span class="title function_ invoke__">round</span>(<span class="number">1200.85</span> * <span class="number">100</span>));</span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">12008.5</span> === <span class="title function_ invoke__">round</span>(<span class="number">1200.85</span> * <span class="number">10</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">// bool(true)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">1200.85</span> === <span class="title function_ invoke__">round</span>(<span class="number">1200.8499999</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><h3 id="使用高精度运算方法"><a href="#使用高精度运算方法" class="headerlink" title="使用高精度运算方法"></a>使用高精度运算方法</h3><p>见文档 <a href="https://www.php.net/manual/zh/ref.bc.php">BC 数学 函数 | php.net</a>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="number">1</span> - <span class="number">0.9</span>) == <span class="number">0.1</span>); <span class="comment">// bool(false)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">bcsub</span>(<span class="number">1</span>, <span class="number">0.9</span>, <span class="number">40</span>) == <span class="number">0.1</span>); <span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">float</span>) <span class="title function_ invoke__">bcsub</span>(<span class="number">1</span>, <span class="number">0.9</span>, <span class="number">40</span>) === <span class="number">0.1</span>); <span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.codecasts.com/blog/post/php-tricky-floats-comparison-with-int">PHP 浮点型与整型比较的小坑 | codecasts</a></li><li><a href="https://blog.csdn.net/fdipzone/article/details/48106065">php 浮点数比较方法 | csdn</a></li><li><a href="https://www.laruence.com/2013/03/26/2884.html">PHP 浮点数的一个常见问题的解答 | laruence</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Call to undefined function ftp_ssl_connect</title>
      <link href="/2020/05/08/php-call-to-undefined-function-ftp-ssl-connect/"/>
      <url>/2020/05/08/php-call-to-undefined-function-ftp-ssl-connect/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>CentOS 7.4</li><li>PHP 7.1.12 编译安装</li></ul><span id="more"></span><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/php71/bin/php -r <span class="string">&quot;ftp_ssl_connect(&#x27;server1.example.com&#x27;);&quot;</span></span><br><span class="line"></span><br><span class="line">PHP Fatal error:  Uncaught Error: Call to undefined <span class="keyword">function</span> ftp_ssl_connect() <span class="keyword">in</span> Command line code:1</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>看文档：<a href="https://www.php.net/ftp_ssl_connect">ftp_ssl_connect | php.net</a></p><ol><li>ftp 扩展没配置</li><li>opensll 没有启用</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /root/php-7.1.12/ is php source dir</span></span><br><span class="line"><span class="built_in">cd</span> /root/php-7.1.12/ext/ftp/</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/local/php71/ is php dir</span></span><br><span class="line">/usr/local/php71/bin/phpize</span><br><span class="line"></span><br><span class="line"><span class="comment"># the param --with-openssl-dir is very important</span></span><br><span class="line">./configure --with-php-config=/usr/local/php71/bin/php-config --with-openssl-dir</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">vim /usr/local/php71/lib/php.ini</span><br><span class="line"><span class="comment"># add last line</span></span><br><span class="line">extension=ftp.so</span><br><span class="line"></span><br><span class="line">service php-fpm reload</span><br></pre></td></tr></table></figure><p>这要注意一定要加上 <code>--with-openssl-dir</code>，不然会 <code>FTPS support =&gt; disabled</code>。</p><p>当不清楚 <code>./configure</code> 有什么参数时，可以执行 <code>./configure --help</code>。</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># method 1</span></span><br><span class="line">/usr/local/php71/bin/php -r <span class="string">&quot;phpinfo();&quot;</span> | grep FTP</span><br><span class="line"></span><br><span class="line">FTP support =&gt; enabled</span><br><span class="line">FTPS support =&gt; enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># method 2</span></span><br><span class="line">/usr/local/php71/bin/php -r <span class="string">&quot;ftp_ssl_connect(&#x27;server1.example.com&#x27;);&quot;</span></span><br><span class="line"></span><br><span class="line">PHP Warning:  ftp_ssl_connect(): php_network_getaddresses: getaddrinfo failed: Name or service not known <span class="keyword">in</span> Command line code on line 1</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/35085677/fatal-error-call-to-undefined-function-ftp-ssl-connect/61683198#61683198">Fatal error: Call to undefined function ftp_ssl_connect() | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 CentOS 编译安装 PHP</title>
      <link href="/2020/04/29/make-install-php-on-centos/"/>
      <url>/2020/04/29/make-install-php-on-centos/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>CentOS 7.4</li><li>PHP 5.6.40</li></ul><span id="more"></span><h2 id="下载-PHP"><a href="#下载-PHP" class="headerlink" title="下载 PHP"></a>下载 PHP</h2><p>源码地址：<a href="https://www.php.net/releases/#5.6.40">https://www.php.net/releases/#5.6.40</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget https://www.php.net/distributions/php-5.6.40.tar.gz --no-check-certificate</span><br><span class="line">tar zxvf php-5.6.40.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装相关库"><a href="#安装相关库" class="headerlink" title="安装相关库"></a>安装相关库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum groupinstall <span class="string">&quot;Development tools&quot;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p><a href="https://www.php.net/manual/zh/configure.about.php">核心配置选项列表 | php.net</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置参数</span></span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line">./configure --<span class="built_in">help</span> | grep openssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意替换 --prefix</span></span><br><span class="line">./configure --prefix=/usr/local/php56 \</span><br><span class="line">--with-openssl \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-ftp</span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4核编译</span></span><br><span class="line">make clean &amp;&amp; make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 macOS 编译安装 PHP</title>
      <link href="/2020/04/28/make-install-php-on-macos/"/>
      <url>/2020/04/28/make-install-php-on-macos/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>macOS 10.15.7</li><li>PHP 7.1.33</li></ul><span id="more"></span><h2 id="下载-PHP"><a href="#下载-PHP" class="headerlink" title="下载 PHP"></a>下载 PHP</h2><p>源码地址：<a href="https://www.php.net/releases/#7.1.33">https://www.php.net/releases/#7.1.33</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget https://www.php.net/distributions/php-7.1.33.tar.gz --no-check-certificate</span><br><span class="line">tar zxvf php-7.1.33.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装相关库"><a href="#安装相关库" class="headerlink" title="安装相关库"></a>安装相关库</h2><p>确保 Xcode 正确版本正常安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># libiconv</span></span><br><span class="line">brew install libiconv</span><br><span class="line"></span><br><span class="line"><span class="comment"># openssl</span></span><br><span class="line">brew install openssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># zlib 实现 GZIP 压缩页面</span></span><br><span class="line">brew install zlib</span><br></pre></td></tr></table></figure><h2 id="配置编译安装"><a href="#配置编译安装" class="headerlink" title="配置编译安装"></a>配置编译安装</h2><blockquote><p><a href="https://www.php.net/manual/zh/configure.about.php">核心配置选项列表 | php.net</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置参数</span></span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line">./configure --<span class="built_in">help</span> | grep openssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意替换 --prefix</span></span><br><span class="line"><span class="comment"># 按需进行调整</span></span><br><span class="line">./configure --prefix=/Users/yifan/php/php71 \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-calendar \</span><br><span class="line">--enable-dba \</span><br><span class="line">--enable-debug \</span><br><span class="line">--enable-exif \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--enable-mbregex \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-mysqlnd \</span><br><span class="line">--enable-opcache-file \</span><br><span class="line">--enable-soap \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--enable-zip \</span><br><span class="line">--with-curl=/usr/local/opt/curl \</span><br><span class="line">--with-freetype-dir=/usr/local/opt/freetype \</span><br><span class="line">--with-gd \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-iconv=/usr/local/opt/libiconv \</span><br><span class="line">--with-icu-dir=/usr/local/opt/icu4c \</span><br><span class="line">--with-jpeg-dir=/usr/local/opt/jpeg \</span><br><span class="line">--with-libzip \</span><br><span class="line">--with-openssl=/usr/local/opt/openssl@1.1 \</span><br><span class="line">--with-bz2=/usr/local/opt/bzip2 \</span><br><span class="line">--with-libxml-dir=/usr/local/opt/libxml2 \</span><br><span class="line">--with-zlib=/usr/local/opt/zlib</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4核编译</span></span><br><span class="line">make clean &amp;&amp; make -j4</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装常用库：</p><p>[<a href="https://pecl.php.net/]">https://pecl.php.net/]</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/pecl install grpc</span><br><span class="line">./bin/pecl install rdkafka</span><br><span class="line">./bin/pecl install redis</span><br><span class="line"></span><br><span class="line">./bin/pecl install mongodb</span><br><span class="line"><span class="comment"># PHP7.1</span></span><br><span class="line">./bin/pecl install https://pecl.php.net/get/mongodb-1.11.1.tgz</span><br><span class="line"></span><br><span class="line">./bin/pecl install swoole</span><br><span class="line"><span class="comment"># PHP7.1</span></span><br><span class="line">./bin/pecl install https://pecl.php.net/get/swoole-4.5.11.tgz</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="“-libiconv”-referenced-from"><a href="#“-libiconv”-referenced-from" class="headerlink" title="“_libiconv”, referenced from"></a>“_libiconv”, referenced from</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">  <span class="string">&quot;_libiconv&quot;</span>, referenced from:</span><br><span class="line">      _php_iconv_string <span class="keyword">in</span> iconv.o</span><br><span class="line">      __php_iconv_strlen <span class="keyword">in</span> iconv.o</span><br><span class="line">      __php_iconv_substr <span class="keyword">in</span> iconv.o</span><br><span class="line">      __php_iconv_strpos <span class="keyword">in</span> iconv.o</span><br><span class="line">      __php_iconv_mime_encode <span class="keyword">in</span> iconv.o</span><br><span class="line">      __php_iconv_appendl <span class="keyword">in</span> iconv.o</span><br><span class="line">      _php_iconv_stream_filter_append_bucket <span class="keyword">in</span> iconv.o</span><br><span class="line">      ...</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br><span class="line">clang: error: linker <span class="built_in">command</span> failed with <span class="built_in">exit</span> code 1 (use -v to see invocation)</span><br><span class="line">make: *** [sapi/cli/php] Error 1</span><br></pre></td></tr></table></figure><p>解决方法：打开 <code>Makefile</code> 找到：</p><ul><li><code>EXTRA_LDFLAGS</code></li><li><code>EXTRA_LDFLAGS_PROGRAM</code></li></ul><p>删除后面的 <code>-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib</code> 相关。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean &amp;&amp; make -j4</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">php --ri curl</span><br></pre></td></tr></table></figure><h3 id="Please-specify-the-install-prefix-of-iconv-with-–with-iconv-x3D-lt-DIR-gt"><a href="#Please-specify-the-install-prefix-of-iconv-with-–with-iconv-x3D-lt-DIR-gt" class="headerlink" title="Please specify the install prefix of iconv with –with-iconv&#x3D;&lt;DIR&gt;"></a>Please specify the install prefix of iconv with –with-iconv&#x3D;&lt;DIR&gt;</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install libiconv</span><br></pre></td></tr></table></figure><h3 id="Cannot-find-OpenSSL’s"><a href="#Cannot-find-OpenSSL’s" class="headerlink" title="Cannot find OpenSSL’s"></a>Cannot find OpenSSL’s</h3><blockquote><p>configure: error: Cannot find OpenSSL’s <code>&lt;evp.h&gt;</code></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install openssl</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --with-openssl-dir=(brew --prefix openssl)</span><br></pre></td></tr></table></figure><h3 id="error-implicit-declaration-of-function-‘getpid’-is-invalid-in-C99"><a href="#error-implicit-declaration-of-function-‘getpid’-is-invalid-in-C99" class="headerlink" title="error: implicit declaration of function ‘getpid’ is invalid in C99"></a>error: implicit declaration of function ‘getpid’ is invalid in C99</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Users/.../php/php-7.1.33/ext/zip/lib/mkstemp.c:75:8: error:</span><br><span class="line">      implicit declaration of <span class="keyword">function</span> <span class="string">&#x27;getpid&#x27;</span> is invalid <span class="keyword">in</span> C99</span><br><span class="line">      [-Werror,-Wimplicit-function-declaration]</span><br><span class="line">        pid = getpid();</span><br><span class="line">              ^</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [ext/zip/lib/mkstemp.lo] Error 1</span><br><span class="line">make: *** Waiting <span class="keyword">for</span> unfinished <span class="built_in">jobs</span>....</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install libzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./configure add</span></span><br><span class="line">--with-libzip=(brew --prefix libzip) \</span><br></pre></td></tr></table></figure><h3 id="reentrancy-c-error-too-few-arguments-to-function-call"><a href="#reentrancy-c-error-too-few-arguments-to-function-call" class="headerlink" title="reentrancy.c error: too few arguments to function call"></a>reentrancy.c error: too few arguments to function call</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Users/.../php/php-7.1.33/main/reentrancy.c:139:23: error: too few</span><br><span class="line">      arguments to <span class="keyword">function</span> call, expected 3, have 2</span><br><span class="line">        readdir_r(dirp, entry);</span><br><span class="line">        ~~~~~~~~~            ^</span><br><span class="line">/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/dirent.h:110:1: note:</span><br><span class="line">      <span class="string">&#x27;readdir_r&#x27;</span> declared here</span><br><span class="line">int readdir_r(DIR *, struct dirent *, struct dirent **) __DARWIN_INODE64...</span><br><span class="line">^</span><br><span class="line">1 error generated.</span><br><span class="line">make: *** [main/reentrancy.lo] Error 1</span><br><span class="line">make: *** Waiting <span class="keyword">for</span> unfinished <span class="built_in">jobs</span>....</span><br></pre></td></tr></table></figure><p>查找：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.../php-src/main/reentrancy.c</span><br><span class="line"></span><br><span class="line">int readdir_r(DIR *, struct dirent *, struct dirent **)</span><br><span class="line"></span><br><span class="line">eaddir_r(dirp, entry)</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">readdir_r(dirp, entry) 修改为 readdir_r(dirp, entry, &amp;entry)</span><br></pre></td></tr></table></figure><h3 id="PEAR-package-PHP-Archive-not-installed"><a href="#PEAR-package-PHP-Archive-not-installed" class="headerlink" title="PEAR package PHP_Archive not installed"></a>PEAR package PHP_Archive not installed</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">opcache.a(shared_alloc_shm.o) has no symbols</span><br><span class="line">PEAR package PHP_Archive not installed: generated phar will require PHP&#x27;s phar extension be enabled.</span><br><span class="line">directorytreeiterator.inc</span><br><span class="line">clicommand.inc</span><br><span class="line">directorygraphiterator.inc</span><br><span class="line">invertedregexiterator.inc</span><br><span class="line">pharcommand.inc</span><br><span class="line">make: *** [ext/phar/phar.phar] Segmentation fault: 11</span><br><span class="line">make: *** Waiting for unfinished jobs....</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --without-pear --disable-phar</span><br></pre></td></tr></table></figure><p>注意：不能加这个选项，会影响 composer 的使用。</p><h3 id="XCode-对编译的影响"><a href="#XCode-对编译的影响" class="headerlink" title="XCode 对编译的影响"></a>XCode 对编译的影响</h3><p>请保证 Xcode 正确的版本安装，否则可能有异常情况。如果系统不是最新版本可以通过下面的链接安装指定版本。</p><blockquote><p>[<a href="https://developer.apple.com/download/all/?q=11.5%5D">https://developer.apple.com/download/all/?q=11.5]</a></p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/52php/p/5683356.html">Mac Pro 编译安装 PHP 5.6.21 及 问题汇总 | cnblogs</a></li><li><a href="https://cloud.tencent.com/developer/article/1047033">PHP7 编译安装 | cloud.tencent</a></li><li><a href="https://qiita.com/imotas72/items/fa03435ff8bce471da75">Mac に php 7.0.3 を phpenv でインストールした時のメモ | qiita</a></li><li><a href="https://www.cnblogs.com/maohedashu/p/14554800.html">php Make 编译 PEAR package PHP_Archive not installed | cnblogs</a></li><li><a href="https://zhuanlan.zhihu.com/p/370921434">Mac 编译安装 php5.4.45 踩坑记录 1 | zhihu</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim Code Snippet</title>
      <link href="/2020/04/28/vim-code-snippet/"/>
      <url>/2020/04/28/vim-code-snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul><li>全选（高亮显示）：按 esc 后，然后 <code>ggvG</code> 或者 <code>ggVG</code></li><li>全部复制：按 esc 后，然后 <code>ggyG</code></li><li>全部删除：按 esc 后，然后 <code>dG</code></li></ul><h2 id="粘贴到终端-vim-缩进错乱"><a href="#粘贴到终端-vim-缩进错乱" class="headerlink" title="粘贴到终端 vim 缩进错乱"></a>粘贴到终端 vim 缩进错乱</h2><p><a href="https://stackoverflow.com/questions/2514445/turning-off-auto-indent-when-pasting-text-into-vim/38258720#38258720">https://stackoverflow.com/questions/2514445/turning-off-auto-indent-when-pasting-text-into-vim/38258720#38258720</a></p><p>在 vim 中粘贴前先输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="built_in">paste</span></span><br></pre></td></tr></table></figure><p>原因：在终端的 vim 中没有相应的程序来处理这个从其他应用复制粘贴的过程，所以 vim 通过插入键盘输入的 buffer 来模拟这个粘贴的过程，这个时候 vim 会以为这是用户输入的。</p><p>问题就是出在这：当上一行结束，光标进入下一行时 vim 会自动以上一行的的缩进为初始位置。这样就会破坏原始文件的缩进。</p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li><code>gg</code> 是让光标移到首行，在 vim 才有效，vi 中无效</li><li><code>G</code> 光标移到最后一行</li><li><code>d</code> 删除选中内容</li><li><code>y</code> 复制选中内容到 0 号寄存器</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/yangzailu/p/11531972.html">vim 全选，全部复制，全部删除 | cnblogs</a></li><li><a href="https://www.zhihu.com/question/22363620">用 vim 打开后中文乱码怎么办？ | zhihu</a></li></ul><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP GD 入门使用</title>
      <link href="/2020/04/16/php-gd-getting-started/"/>
      <url>/2020/04/16/php-gd-getting-started/</url>
      
        <content type="html"><![CDATA[<h2 id="GD-安装、配置"><a href="#GD-安装、配置" class="headerlink" title="GD 安装、配置"></a>GD 安装、配置</h2><p>考虑到功能需要使用字体库、图像格式 jpeg\png 所以先安装相关库。</p><h3 id="字体库-FreeType-2"><a href="#字体库-FreeType-2" class="headerlink" title="字体库 FreeType 2"></a>字体库 FreeType 2</h3><p><a href="https://www.freetype.org/">https://www.freetype.org/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在临时目录进行操作</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://download.savannah.gnu.org/releases/freetype/</span></span><br><span class="line">wget http://download.savannah.gnu.org/releases/freetype/freetype-2.10.1.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf freetype-2.10.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> freetype-2.10.1</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/freetype &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="图像格式-jpeg"><a href="#图像格式-jpeg" class="headerlink" title="图像格式 jpeg"></a>图像格式 jpeg</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.ijg.org/</span></span><br><span class="line">wget http://www.ijg.org/files/jpegsrc.v9d.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf jpegsrc.v9.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> jpeg-9/</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/jpeg &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="图像格式-png"><a href="#图像格式-png" class="headerlink" title="图像格式 png"></a>图像格式 png</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.libpng.org/pub/png/libpng.html</span></span><br><span class="line">wget https://download.sourceforge.net/libpng/libpng-1.6.37.tar.gz --no-check-certificate</span><br><span class="line"></span><br><span class="line">tar zxvf libpng-1.6.37.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> libpng-1.6.37</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/libpng &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="安装-GD"><a href="#安装-GD" class="headerlink" title="安装 GD"></a>安装 GD</h3><p><img src="https://user-images.githubusercontent.com/9289792/80169757-e35bc200-8618-11ea-8851-a4bc7411f6f9.png" alt="GD 安装、配置"></p><p>背景：服务器 php 7.1 通过编译自行安装的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到 php 源码 dir</span></span><br><span class="line"><span class="built_in">cd</span> &#123;php-source-dir&#125;/ext/gd/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 configure 文件</span></span><br><span class="line">&#123;php-dir&#125;/bin/phpize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用参数</span></span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line">./configure --with-php-config=&#123;php-dir&#125;/bin/php-config --with-jpeg-dir=/usr/local/jpeg --with-png-dir=/usr/local/libpng --with-freetype-dir=/usr/local/freetype --enable-gd-native-ttf</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">vim &#123;php-dir&#125;/lib/php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最底下增加一行</span></span><br><span class="line">extension=gd.so</span><br><span class="line"></span><br><span class="line">service php-fpm reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">php -r <span class="string">&quot;var_dump(gd_info());&quot;</span></span><br></pre></td></tr></table></figure><p>编译前一定要记得 <code>make clean</code> 清除上次的编译内容，尤其是已经编译安装过的。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pic</span> = <span class="title function_ invoke__">imagecreate</span>(<span class="variable">$maxWidth</span>, <span class="variable">$maxHeight</span>);</span><br><span class="line"><span class="comment">//定义颜色</span></span><br><span class="line"><span class="variable">$black</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$pic</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$white</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$pic</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 白底</span></span><br><span class="line"><span class="title function_ invoke__">imagefill</span>(<span class="variable">$pic</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$white</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打水印</span></span><br><span class="line"><span class="title function_ invoke__">imagettftext</span>(<span class="variable">$pic</span>, <span class="variable">$fontSize</span>, <span class="number">30</span>, <span class="variable">$x</span>, <span class="variable">$y</span>, <span class="variable">$lightGrey</span>, <span class="variable">$fontFile</span>, <span class="variable">$mark</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagejpeg</span>(<span class="variable">$pic</span>, <span class="variable">$resultPath</span>, <span class="number">100</span>);</span><br><span class="line"><span class="title function_ invoke__">imagedestroy</span>(<span class="variable">$pic</span>);</span><br></pre></td></tr></table></figure><p>文字右对齐：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://php.golaravel.com/function.imagettfbbox.html</span></span><br><span class="line"><span class="variable">$bbox</span> = <span class="title function_ invoke__">imagettfbbox</span>(<span class="variable">$fontSize</span>, <span class="number">0</span>, <span class="variable">$fontFile</span>, <span class="variable">$text</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$offset</span> = <span class="variable">$colWidth</span> - <span class="variable">$bbox</span>[<span class="number">2</span>] - <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagettftext</span>(<span class="variable">$pic</span>, <span class="variable">$fontSize</span>, <span class="number">0</span>, <span class="variable">$x</span> + <span class="variable">$offset</span>, <span class="variable">$y</span>, <span class="variable">$_color</span>, <span class="variable">$fontFile</span>, <span class="variable">$text</span>);</span><br></pre></td></tr></table></figure><h2 id="遇到的报错"><a href="#遇到的报错" class="headerlink" title="遇到的报错"></a>遇到的报错</h2><h3 id="Call-to-undefined-function-imagettftext"><a href="#Call-to-undefined-function-imagettftext" class="headerlink" title="Call to undefined function imagettftext()"></a>Call to undefined function imagettftext()</h3><p>出现此问题应该就是 <code>FreeType</code> 没有装好，可参考上面的步骤。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://php.golaravel.com/intro.image.html">php 中文手册 | golaravel</a></li><li><a href="https://stackoverflow.com/questions/7290958/php-fatal-error-call-to-undefined-function-imagettftext">PHP Fatal error: Call to undefined function imagettftext() | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Code Snippet</title>
      <link href="/2020/04/15/php-code-snippet/"/>
      <url>/2020/04/15/php-code-snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP-Sandbox"><a href="#PHP-Sandbox" class="headerlink" title="PHP Sandbox"></a>PHP Sandbox</h2><ul><li><a href="https://onlinephp.io/">PHP Sandbox</a></li><li><a href="https://legacy-sandbox.onlinephpfunctions.com/">https://legacy-sandbox.onlinephpfunctions.com/</a></li></ul><h2 id="PHP-net"><a href="#PHP-net" class="headerlink" title="PHP.net"></a>PHP.net</h2><ul><li><a href="https://www.php.net/supported-versions.php">Supported Versions | PHP.net</a></li><li><a href="https://www.php.net/eol.php">Unsupported Branches | PHP.net</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://php.watch/">PHP News, Articles, Upcoming Changes, and more | PHP.Watch</a></li></ul><h2 id="参数查看"><a href="#参数查看" class="headerlink" title="参数查看"></a>参数查看</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 PHP 编译时的参数</span></span><br><span class="line">php -r <span class="string">&quot;phpinfo();&quot;</span> | grep configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 .ini 配置文件路径</span></span><br><span class="line">php --ini</span><br><span class="line">php -r <span class="string">&quot;phpinfo();&quot;</span> | grep <span class="string">&quot;Configuration File&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Modules</span></span><br><span class="line">php -m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示扩展配置</span></span><br><span class="line">php --ri gd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查扩展是否存在</span></span><br><span class="line">php --re decimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式运行模式。具有函数、常量、类名、变量、静态方法调用和类常量的 `tab` 补全功能</span></span><br><span class="line"><span class="comment"># http://php.net/manual/en/features.commandline.interactive.php</span></span><br><span class="line">php -a</span><br></pre></td></tr></table></figure><h3 id="查看、修改内存限制"><a href="#查看、修改内存限制" class="headerlink" title="查看、修改内存限制"></a>查看、修改内存限制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&quot;echo ini_get(&#x27;memory_limit&#x27;);&quot;</span></span><br><span class="line"></span><br><span class="line">php -r <span class="string">&quot;phpinfo();&quot;</span> | grep memory</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">memory_limit</span> = <span class="number">1024</span>M<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 临时设置最大内存占用</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;memory_limit&#x27;</span>, <span class="string">&#x27;1024M&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置脚本最大执行时间为 0 永不过期</span></span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="Too-Many-Open-Files"><a href="#Too-Many-Open-Files" class="headerlink" title="Too Many Open Files"></a>Too Many Open Files</h3><blockquote><p>PHP-FPM Too Many Open Files 24 Error (set open file descriptor limit)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim php-fpm.conf</span><br><span class="line"></span><br><span class="line">;rlimit_files = 1024</span><br><span class="line">rlimit_files = 4096</span><br></pre></td></tr></table></figure><p>重启 PHP-FPM。</p><h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><h3 id="aliyun-repo"><a href="#aliyun-repo" class="headerlink" title="aliyun repo"></a>aliyun repo</h3><p><a href="https://developer.aliyun.com/composer">阿里云 Composer 全量镜像</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;disable-tls&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;gitlab-domains&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;optimize-autoloader&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;preferred-install&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;*&quot;</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;secure-http&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;sort-packages&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;repositories&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cvs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;composer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://mirrors.tencent.com/composer/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;composer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://mirrors.aliyun.com/composer/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;composer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://asset-packagist.org&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="忽略-php-版本限制"><a href="#忽略-php-版本限制" class="headerlink" title="忽略 php 版本限制"></a>忽略 php 版本限制</h3><p><strong>这个是极不推荐的，这样会造成库安装的版本错误。不应该使用。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer require hellogerard/jobby --ignore-platform-reqs</span><br></pre></td></tr></table></figure><p>推荐做法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> composer</span><br><span class="line"><span class="comment"># /usr/local/bin/composer</span></span><br><span class="line"></span><br><span class="line">&#123;正确的 PHP 版本&#125;/bin/php /usr/local/bin/composer require hellogerard/jobby</span><br><span class="line"></span><br><span class="line">/usr/local/opt/php@7.1/bin/php -d memory_limit=-1 /usr/local/bin/composer update -vvv</span><br></pre></td></tr></table></figure><h3 id="emory-limit-errors-for-more-info-on-how-to-handle-out-of-memory-errors"><a href="#emory-limit-errors-for-more-info-on-how-to-handle-out-of-memory-errors" class="headerlink" title="emory-limit-errors for more info on how to handle out of memory errors"></a>emory-limit-errors for more info on how to handle out of memory errors</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -d memory_limit=-1 /usr/local/bin/composer update</span><br></pre></td></tr></table></figure><h3 id="更新-composer-lock"><a href="#更新-composer-lock" class="headerlink" title="更新 composer.lock"></a>更新 composer.lock</h3><p>若项目之前已通过其他源安装，则需要更新 composer.lock 文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer update --lock</span><br></pre></td></tr></table></figure><h2 id="homebrew-PHP"><a href="#homebrew-PHP" class="headerlink" title="homebrew PHP"></a>homebrew PHP</h2><blockquote><p>🍺 Homebrew tap for PHP 5.6 to 8.2. PHP 8.2 is a nightly build.</p></blockquote><p><a href="https://github.com/shivammathur/homebrew-php">shivammathur&#x2F;homebrew-php</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap shivammathur/php</span><br><span class="line"></span><br><span class="line">brew install shivammathur/php/php@8.1 -vvv</span><br><span class="line"></span><br><span class="line">brew <span class="built_in">link</span> --overwrite --force shivammathur/php/php@8.1</span><br><span class="line">php -v</span><br></pre></td></tr></table></figure><blockquote><p>旧版本 MacOS 可以安装报错时尝试删除 XCode。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew untap shivammathur/php</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/shivammathur/homebrew-extensions">https://github.com/shivammathur/homebrew-extensions</a></li><li><a href="https://github.com/nicoverbruggen/phpmon">https://github.com/nicoverbruggen/phpmon</a></li><li><a href="https://github.com/phpbrew/phpbrew">https://github.com/phpbrew/phpbrew</a></li></ul><h2 id="Real-Client-IP"><a href="#Real-Client-IP" class="headerlink" title="Real Client IP"></a>Real Client IP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PHP7+</span></span><br><span class="line"><span class="variable">$clientIP</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>]</span><br><span class="line">    ?? <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_CF_CONNECTING_IP&quot;</span>] <span class="comment"># when behind cloudflare</span></span><br><span class="line">    ?? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED&#x27;</span>]</span><br><span class="line">    ?? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]</span><br><span class="line">    ?? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_FORWARDED&#x27;</span>]</span><br><span class="line">    ?? <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_FORWARDED_FOR&#x27;</span>]</span><br><span class="line">    ?? <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br><span class="line">    ?? <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="动态实例化类"><a href="#动态实例化类" class="headerlink" title="动态实例化类"></a>动态实例化类</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Test1&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="variable">$class1</span> = <span class="string">&quot;Test1&quot;</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="variable">$class1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="variable">$class2</span> = <span class="string">&quot;Test2&quot;</span>;</span><br><span class="line"><span class="comment">// 建立类的反射</span></span><br><span class="line"><span class="variable">$class2</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$class2</span>);</span><br><span class="line"><span class="comment">// 相当于实例化类</span></span><br><span class="line"><span class="variable">$instance</span> = <span class="variable">$class2</span>-&gt;<span class="title function_ invoke__">newInstance</span>();</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Illegal mix of collations</title>
      <link href="/2020/04/14/mysql-illegal-mix-of-collations/"/>
      <url>/2020/04/14/mysql-illegal-mix-of-collations/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Illegal mix <span class="keyword">of</span> collations (utf8mb4_general_ci,IMPLICIT) <span class="keyword">and</span> (utf8mb4_unicode_ci,IMPLICIT) <span class="keyword">for</span> operation</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>utf8mb4_unicode_ci</code> 和 <code>utf8_general_ci</code> 列不能混合查询</p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法 1"></a>解决方法 1</h2><p>统一字段 varchar 的编码集，我推荐使用 <code>utf8mb4_unicode_ci</code>。</p><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法 2"></a>解决方法 2</h2><p>在查询 SQL 中需要转化的字段后面加 <code>COLLATE utf8mb4_unicode_ci</code>.</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>准确性：</p><ul><li>utf8mb4_unicode_ci 是基于标准的 Unicode 来排序和比较，能够在各种语言之间精确排序。</li><li>utf8mb4_general_ci 没有实现 Unicode 排序规则，在遇到某些特殊语言或者字符集，排序结果可能不一致。</li></ul><p>性能：</p><ul><li>utf8mb4_unicode_ci 在特殊情况下，Unicode 排序规则为了能够处理特殊字符的情况，实现了略微复杂的排序算法。但是在绝大多数情况下发，不会发生此类复杂比较。相比选择哪一 collation，使用者更应该关心字符集与排序规则在 db 里需要统一。</li><li>utf8mb4_general_ci 在比较和排序的时候更快。</li></ul><h2 id="utf8mb4"><a href="#utf8mb4" class="headerlink" title="utf8mb4"></a>utf8mb4</h2><p>mb4 是 most bytes 4 的意思，专门用来兼容四字节的 unicode。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/wqbin/p/11852376.html">Illegal mix of collations | 少年阿斌</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGINX 前后端分离配置</title>
      <link href="/2020/03/17/nginx-front-back-end-config/"/>
      <url>/2020/03/17/nginx-front-back-end-config/</url>
      
        <content type="html"><![CDATA[<p>前后端分离的开发已是主流，本文主要是记录前后端分离项目的 NGINX 配置。</p><span id="more"></span><ul><li>前端 Vue web 入口 <code>host.test</code></li><li>后端 PHP Yii service 入口 <code>host.test/api</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name host.test;</span><br><span class="line">  root /data/project/web/dist/;</span><br><span class="line">  index index.html index.php;</span><br><span class="line"></span><br><span class="line">  location ^~/api &#123;</span><br><span class="line">    root           /data/project/service/web/;</span><br><span class="line"></span><br><span class="line">    access_log     logs/service-access.log;</span><br><span class="line">    error_log      logs/service-error.log;</span><br><span class="line"></span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    include        fastcgi.conf;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME   /data/project/service/web/index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_NAME       /api/index.php;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /index.html &#123;</span><br><span class="line">    add_header Cache-Control &quot;no-cache, no-store&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ^~ / &#123;</span><br><span class="line">    alias /data/project/web/dist/;</span><br><span class="line">    access_log logs/web-access.log;</span><br><span class="line">    error_log logs/web-error.log;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载均衡场景"><a href="#负载均衡场景" class="headerlink" title="负载均衡场景"></a>负载均衡场景</h2><ul><li>前端 Vue web 入口 <code>host.test</code></li><li>后端 PHP Yii service 入口 <code>host.test/api</code> 代理到 <code>api.host.test</code></li></ul><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name host.test;</span><br><span class="line">  root /data/project/web/dist/;</span><br><span class="line"></span><br><span class="line">  access_log logs/web-access.log;</span><br><span class="line">  error_log logs/web-error.log;</span><br><span class="line"></span><br><span class="line">  location /index.html &#123;</span><br><span class="line">    add_header Cache-Control &quot;no-cache, no-store&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    try_files $uri $uri/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ^~/api/ &#123;</span><br><span class="line">    proxy_set_header Host             api.host.test;</span><br><span class="line">    proxy_set_header X-Real-IP        $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-NginX-Proxy    true;</span><br><span class="line">    proxy_pass http://api.host.test/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SERVICE"><a href="#SERVICE" class="headerlink" title="SERVICE"></a>SERVICE</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name api.host.test;</span><br><span class="line">  root /data/project/service/web/;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    access_log logs/service-access.log;</span><br><span class="line">    error_log logs/service-error.log;</span><br><span class="line"></span><br><span class="line">    index index.php index.html;</span><br><span class="line">    try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass    127.0.0.1:10071;</span><br><span class="line"></span><br><span class="line">    fastcgi_index   index.php;</span><br><span class="line">    include         fastcgi_params;</span><br><span class="line">    fastcgi_param   SCRIPT_FILENAME   $document_root$fastcgi_script_name;</span><br><span class="line">    fastcgi_param   SERVER_NAME       $http_host;</span><br><span class="line">    fastcgi_ignore_client_abort       on;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NGINX-配置转发"><a href="#NGINX-配置转发" class="headerlink" title="NGINX 配置转发"></a>NGINX 配置转发</h2><p>location 进行的是模糊匹配。</p><ul><li>当结尾没有 <code>/</code> 时，<code>location /abc/def</code> 可以匹配 <code>/abc/defghi</code> 请求，也可以匹配 <code>/abc/def/ghi</code> 等。</li><li>当结尾有 <code>/</code> 时，<code>location /abc/def/</code> 不能匹配 <code>/abc/defghi</code> 请求，只能匹配 <code>/abc/def/anything</code> 这样的请求。</li></ul><p>下面四种情况分别用 <code>http://192.168.1.4/proxy/test.html</code> 进行访问：</p><p>第一种：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:81/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被代理到 <code>http://127.0.0.1:81/test.html</code>。</p><p>第二种（相对于第一种，最后少一个 <code>/</code>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:81;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被代理到 <code>http://127.0.0.1:81/proxy/test.html</code>。</p><p>第三种：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:81/ftlynx/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被代理到 <code>http://127.0.0.1:81/ftlynx/test.html</code>。</p><p>第四种（相对于第三种，最后少一个 <code>/</code>）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location  /proxy/ &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:81/ftlynx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被代理到 <code>http://127.0.0.1:81/ftlynxtest.html</code>。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PRCC2019 全套入门教程】笔记</title>
      <link href="/2020/03/13/prcc2019-getting-started-notes/"/>
      <url>/2020/03/13/prcc2019-getting-started-notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>u1s1 本教程质量一般，推荐看看 李兴兴 老师的教程。</p></blockquote><p>用视频记录生活越来越普及，年初旅行也拍了些素材，想着自己也当个 up 主。先来学学 PR。<a href="https://www.bilibili.com/video/av37550078">【PR】Premiere Pro CC 2019 全套入门教程 | bilibili</a> 是我在 B 站看的第一套教学视频，坦白说内容不多，有不少重复的东西，但是这样适合完全零基础的同学。</p><span id="more"></span><p>课代表来收我的课后作业：<a href="https://www.bilibili.com/video/bv17E41157Pz">【交作业】PR CC 2019 全套入门教程 课后作业 | 菲菲与帆</a> 。</p><p>我的一条 VLOG：<a href="https://www.bilibili.com/video/BV1K7411o73B">【VLOG】#01 新年之旅 成都 第一日 | 菲菲与帆</a> 欢迎来一键三连。</p><iframe src="//player.bilibili.com/player.html?aid=97184760&bvid=BV1K7411o73B&cid=166268624&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="480px" height="270px"> </iframe><h2 id="01-基础流程"><a href="#01-基础流程" class="headerlink" title="01-基础流程"></a>01-基础流程</h2><p>1、窗口乱了后：【窗口-工作区-编辑&amp;重置为保存的布局】<code>alt + shift + 0</code><br>2、【文字工具】加字幕<br>3、修改字体：【窗口-基础图形】选择编辑<br>4、【剃刀】剪切多余素材<br>5、本素材图片来自 <a href="http://unsample.net/">http://unsample.net/</a></p><h2 id="02-转场效果"><a href="#02-转场效果" class="headerlink" title="02-转场效果"></a>02-转场效果</h2><p>1、选择素材点击左键拖拽到【左下窗口】 右下的文件夹可以快速新建文件夹，方便素材分类<br>2、时序新建时，选择 HDV 720<br>3、<code>ctrl + d</code> 添加转场效果<br>4、【左下窗口】（项目窗口）选择【效果】视频过渡，可以切换效果<br>5、点击时序上的过渡，【左上窗口】选择【效果控件】，可以编辑转场效果的持续时间、对齐等</p><h2 id="03-amp-04-视频转场特效-amp-音频特效"><a href="#03-amp-04-视频转场特效-amp-音频特效" class="headerlink" title="03&amp;04-视频转场特效&amp;音频特效"></a>03&amp;04-视频转场特效&amp;音频特效</h2><p>1、【左上窗口】选择【效果控件】，可以编辑视频效果、过渡效果<br>2、视频效果，可以点击秒表的图标添加关键帧<br>3、新建时查看、修改【暂存盘】位置<br>4、【编辑-首选项-时间轴】可以修改：静止图片默认持续时间等，<br>已经导入的素材无效<br>5、【时序窗口】计时器可以点击编辑，输入 500 会跳到第 5 秒的位置<br>6、音频过渡，结尾声音淡出</p><h2 id="05-amp-06-视频剪辑-amp-音画对应"><a href="#05-amp-06-视频剪辑-amp-音画对应" class="headerlink" title="05&amp;06-视频剪辑&amp;音画对应"></a>05&amp;06-视频剪辑&amp;音画对应</h2><p>1、【左上窗口】点击 <code>i</code> 标记入点，点击 <code>o</code> 标记出点<br>2、【左上窗口】窗口右下角的 + 是按钮编辑器<br>3、【左上窗口】标记完成后可以点击 插入 或者 覆盖<br>4、【节目窗口】点击 <code>m</code> 可以标记<br>5、【节目窗口】窗口右下角的 +，添加转到下一个标记<br>6、转到下一个标记配合在时序上的标，踩点视频</p><h2 id="07-amp-08-简单动画-amp-素材嵌套"><a href="#07-amp-08-简单动画-amp-素材嵌套" class="headerlink" title="07&amp;08-简单动画&amp;素材嵌套"></a>07&amp;08-简单动画&amp;素材嵌套</h2><p>1、【左上窗口】效果控件，可以修改素材位置、缩放<br>2、【左上窗口】效果控件，点击小秒表可以添加关键帧动画<br>3、导出素材前可以修改静止图片默认持续时间<br>4、创建多个时序，再创建一个 master 时序，作为主时序<br>5、时序拖入时序时，注意点击前面的 <code>V1</code> <code>A1</code>，否则可能只有视频或音频<br>6、【时序窗口】时序取消链接，可以删除音频轨<br>7、按 <code>alt</code> 键拖拽可以快速复制</p><h2 id="09-amp-10-amp-11-自定义转场-amp-视频效果-amp-变形和扭曲"><a href="#09-amp-10-amp-11-自定义转场-amp-视频效果-amp-变形和扭曲" class="headerlink" title="09&amp;10&amp;11-自定义转场&amp;视频效果&amp;变形和扭曲"></a>09&amp;10&amp;11-自定义转场&amp;视频效果&amp;变形和扭曲</h2><p>1、使用 PS 制作灰度图，新建 颜色模式 灰度，图片要和视频尺寸一致<br>2、在线图片编辑 <code>https://www.uupoop.com/</code><br>3、图片使用 <code>tiff</code> 格式，原因不懂<br>4、视频过渡 擦除 渐变擦除，然后可以选择自己制作的图片<br>5、从【效果】可以选择后向上拖入【效果控件】<br>6、<code>fx</code> 可以开启或关闭效果，还有 清除、复制、粘贴<br>7、【项目窗口】新建 调整图层，可以给视频加一个整体的效果<br>8、要善于使用标记定位<br>9、视频效果：变形、扭曲</p><h2 id="12-模板的下载和使用"><a href="#12-模板的下载和使用" class="headerlink" title="12-模板的下载和使用"></a>12-模板的下载和使用</h2><p>1、.mogrt 模板<br>2、导入方法 1：【图形】安装动态图形模板<br>3、导入方法 2：【窗口】基础图形，游览，右下角加号<br>4、导入方法 3：将模板文件复制到<br>Mac：<code>username/Library/Application Support/Adobe/Common/motion Graphics Template/</code><br>Win：<code>root://Users/Username/AppData/Roaming/Adobe/Common/Motion Graphics Templates</code><br>5、【基础图形】编辑，可以修改模板内容<br>6、按 <code>enter</code> 键，可以渲染视频</p><h2 id="13-标准模板的使用"><a href="#13-标准模板的使用" class="headerlink" title="13-标准模板的使用"></a>13-标准模板的使用</h2><p>1、<code>.prproj</code> 模板<br>2、【视图】显示标尺、显示参考线，方便对齐</p><h2 id="14-amp-15-倒计数器及色彩调节-amp-传统与图形字幕"><a href="#14-amp-15-倒计数器及色彩调节-amp-传统与图形字幕" class="headerlink" title="14&amp;15-倒计数器及色彩调节&amp;传统与图形字幕"></a>14&amp;15-倒计数器及色彩调节&amp;传统与图形字幕</h2><p>1、【项目窗口】新建 通用倒计时片头，就是到 2 就没了<br>2、【向前选择轨道工具】<code>ctrl + a</code><br>3、视频效果 扭曲 球面化<br>4、视频效果 扭曲 偏移<br>5、视频效果 杂色与颗粒 杂色<br>6、【文件】新建 字幕 开放式字幕</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> pr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP FTP 间歇性无法上传文件</title>
      <link href="/2020/02/27/php-ftp-intermittently-unable-upload/"/>
      <url>/2020/02/27/php-ftp-intermittently-unable-upload/</url>
      
        <content type="html"><![CDATA[<p>2020-04-23 后记：疑似是前置的负载均衡服务器有问题，改为直接使用真实 IP 后问题消失。</p><hr><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Warning:  ftp_put(): php_connect_nonb() failed: Operation now <span class="keyword">in</span> progress (115) <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><span id="more"></span><p>环境 <code>PHP 5.6.40</code>。在开发过程中遇到了一个很诡异的情况，在使用 FTP 函数上传文件时，会间歇性无法上传文件。找了几圈有说是 PHP bug、有说是防火墙，都不解决问题。</p><p>最后找到了一篇 <a href="https://stackoverflow.com/questions/42439316/why-is-my-php-script-intermittently-unable-to-upload-a-file-via-ftp">Why is my PHP script intermittently unable to upload a file via FTP? | stackoverflow</a> 解了大急。（当搜索结果没有找到答案时，可以考虑换几个相近的词再试试）</p><p>解决方法：进行循环调用尝试。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尝试 5 次</span></span><br><span class="line"><span class="variable">$uploaded</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$tries</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="variable">$uploaded</span> &amp;&amp; <span class="variable">$tries</span> &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    ++<span class="variable">$tries</span>;</span><br><span class="line">    <span class="variable">$conn</span> = <span class="title function_ invoke__">ftp_ssl_connect</span>(<span class="variable">$host</span>, <span class="variable">$port</span>, <span class="number">10</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;FTP服务器连接失败&#x27;</span>);</span><br><span class="line">    <span class="comment">//登陆（通过用户名或者匿名登陆）</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">ftp_login</span>(<span class="variable">$conn</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$result</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">ftp_close</span>(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;ftp_login 失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">ftp_set_option</span>(<span class="variable">$conn</span>, FTP_USEPASVADDRESS, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// turn passive mode on</span></span><br><span class="line">    <span class="title function_ invoke__">ftp_pasv</span>(<span class="variable">$conn</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$success</span> = <span class="title function_ invoke__">ftp_put</span>(<span class="variable">$conn</span>, <span class="variable">$remoteFile</span>, <span class="variable">$localFile</span>, FTP_BINARY);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$success</span>) &#123;</span><br><span class="line">        <span class="variable">$uploaded</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="string">&quot;ftp upload: <span class="subst">$success</span>, <span class="subst">$remoteFile</span>, <span class="subst">$localFile</span>&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="string">&quot;ftp upload failed, tries: <span class="subst">$tries</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">ftp_close</span>(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环 try 第二次就成功了，不知为啥。<a href="https://qiita.com/skawata/items/96895fe4eb5e6bbbf92c">PHP の FTP(S)通信で php_connect_nonb() failed: Operation now in progress (115) | qiita</a> 这篇文章有分析，读后还是不太清楚，望有缘人来指导。</p><blockquote><p>どうやら Operation now in progress (115)は EINPROGRESS から来ているらしい。常に非同期で connect するため最初の connect で EINPROGRESS が帰るのは正常だが、asynchronous&#x3D;true の場合その後同期処理のために poll で接続完了を待つ。だが poll はエラーが起きても errno を更新しないため、接続に失敗したとき errno&#x3D;EINPROGRESS の状態で返ってしまっているように見える。</p></blockquote><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾 2019</title>
      <link href="/2019/12/31/review-2019/"/>
      <url>/2019/12/31/review-2019/</url>
      
        <content type="html"><![CDATA[<p><a href="https://y.qq.com/n/ryqq/songDetail/235474091">新裤子 · 夏日终曲</a></p><p>2019 年的第一天从三亚开始，在 <em>第一市场海鲜市场</em> 买了海味，然后直接到旁边的 <em>林姐香味海鲜</em> 加工，迟到了超级好吃的香辣蟹。飞回北京就是滑雪团建，年后双双得到了最佳合作奖，感谢我们每周的火锅，让大家多了些感情。</p><p>– EOF –</p><p>年后买了烤箱烹饪技术再次升级，烤鸡翅、披萨、蛋挞甚至烤鱼，都已不在话下。受 shilei 推荐也喜欢玩德州扑克。看 B 站 UP 主自驾游，疯狂迷恋上了房车一段时间，还去看了一次房山的房车展（够远的），应该会结下不解之缘。</p><p>3 月 29 日公司 7 周年，第一次庆祝公司周年，吃蛋糕前大家合了张影。这张照片我挺感动的，说不好具体的原因，可能是因为大家的笑容吧。清明小假在奥森玩了个露营，是真的有点冷。涛爷来北京面试，转头就成了科大博士，给劲儿。</p><p>4 月中的一个双休日和爸妈南下，和比比定了亲 🎉🎉🎉。</p><p>5 月乐队的夏天，是今年开过最好的综艺，刺猬、新裤子很棒。</p><p>2019 年过去了，我很怀念它。</p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lonicera Framework</title>
      <link href="/2019/12/19/lonicera-framework/"/>
      <url>/2019/12/19/lonicera-framework/</url>
      
        <content type="html"><![CDATA[<p>项目代码：<a href="https://github.com/imzyf/lonicera">imzyf&#x2F;lonicera | GitHub</a></p><blockquote><p>【PHP 核心技术与最佳实践】第二版 第 6 章 读书笔记</p></blockquote><p>Lonicera Framework - Every French soldier carries a marshal’s baton in his knapsack.</p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC 模式的目的是实现一种动态的程序设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。</p><h2 id="Lonicera-0-1"><a href="#Lonicera-0-1" class="headerlink" title="Lonicera 0.1"></a>Lonicera 0.1</h2><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><p>index.php 单一入口模式。</p><p>启动 PHP 内置 Web 服务器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -S localhost:7070</span><br></pre></td></tr></table></figure><h3 id="路由器层"><a href="#路由器层" class="headerlink" title="路由器层"></a>路由器层</h3><p>更偏向于使用 PATH_INFO 方式来访问。</p><p>从传统 URL 参数模式的访问地址进行解析，提取里面的 group、controller、action、param 4 个参数，随后交给 bootstrap 进行 dispatch 处理。</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>用 PDO 来实现连接数据库。</p><ul><li>ORM Object Relational Mapping 对象与数据库的映射叫作对象关系映射</li><li>PO Persistent Object 把一个数据库中的表的一行记录对应的对象称为持久对象</li><li>BO Business Object 业务对象 把业务逻辑封装为一个对象</li><li>VO Value Object 值对象 界面显示的数据对象</li><li>DTO Data Transfer Object 用在热呵呵需要数据传输的地方</li><li>DAO Data Access Object 指代 Active Record 模式中的数据对象</li></ul><p>传统的 ORM 模式提倡数据对象和负责持久化的代码的分开，但是这并没有坚持数据操作的工作量。还有一种 ORM 模式叫作 Active Record。在 Active Record 中，模型层集成了 ORM 的功能，他们及代表实体，包含因为业务逻辑，又是数据对象，并负责把自己存储到数据库中。</p><p>Active Record 模式中的数据对象不再是 PO 对象，而是 DAO。</p><p>一系列的数据库操作组合起来，称之为 Service。Service 向下负责与数据库打交道，向上负责接收页面传递的参数以及数据的传输。理论上应该对 DAO 进项抽象到一个 Service 中。</p><h3 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h3><p>PHP MVC 中的显示层开始朝着轻量化、API 化发展了。</p><p>增强一个类通常途径：</p><ol><li>使用 <code>__call</code> <code>__set</code> <code>__get</code> 等魔术方法</li><li>使用反射</li><li>使用 <code>trait</code></li><li>使用继承和组合</li></ol><h3 id="初步改进"><a href="#初步改进" class="headerlink" title="初步改进"></a>初步改进</h3><p><code>spl_autoload_register</code> 统一加载文件。</p><h2 id="Lonicera-0-2"><a href="#Lonicera-0-2" class="headerlink" title="Lonicera 0.2"></a>Lonicera 0.2</h2><h3 id="引入异常机制"><a href="#引入异常机制" class="headerlink" title="引入异常机制"></a>引入异常机制</h3><p>同时设置 <code>set_error_handler</code> 和 <code>set_exception_handler</code>。PHP 同时存在错误和异常两个互不包含的概念。</p><h3 id="拦截器与插件"><a href="#拦截器与插件" class="headerlink" title="拦截器与插件"></a>拦截器与插件</h3><p><code>dispatch</code> 中处理。使用正则匹配、<code>call_user_func</code>。</p><h3 id="Request-增强与安全防御"><a href="#Request-增强与安全防御" class="headerlink" title="Request 增强与安全防御"></a>Request 增强与安全防御</h3><p>包装 <code>$_REQUEST</code>。</p><h2 id="Lonicera-0-3"><a href="#Lonicera-0-3" class="headerlink" title="Lonicera 0.3"></a>Lonicera 0.3</h2><h3 id="Composer-类加载机制"><a href="#Composer-类加载机制" class="headerlink" title="Composer 类加载机制"></a>Composer 类加载机制</h3><p><code>PSR-4</code>。</p><h3 id="Model-增强"><a href="#Model-增强" class="headerlink" title="Model 增强"></a>Model 增强</h3><p><code>illuminata/database</code>。</p><h3 id="控制反转与依赖注入"><a href="#控制反转与依赖注入" class="headerlink" title="控制反转与依赖注入"></a>控制反转与依赖注入</h3><p><code>Inversion of Control</code> <code>IoC</code>，<code>Dependency Injection</code> <code>DI</code>。</p><ul><li>谁控制谁？IoC 容器控制了对象。</li><li>控制什么？主要控制了外部资源获取（不只是对象创建，还包括比如文件等）。</li></ul><p>传统应用程序是：由我们自己在对象中主动控制去直接获取依赖对象，而反转则是：由容器来帮忙创建及注入依赖对象。由于是容器帮我们查找及注入依赖对象，对象只是被动接受依赖对象，所以是反转。</p><ul><li>哪些方面反转了？依赖对象的获取被反转了。</li></ul><p>在我们使用 UserOrder 对象的时候，不再需要手动去创建 User 对象和 Order 对象了，而是直接问 IoC 容器去要 UserOrder 对象，IoC 容器会负责查找 UserOrder 的依赖并替我们创建 User 对象和 Order 对象，并管理它们。也就是说和我们打交道的是 IoC 容器。</p><p>依赖注入，是组件之间依赖关系由容器在运行期决定形象来说，即由容器动态地将某个依赖关系注入到组件之中。依赖注入的目的并非是为软件系统带来更多功能，而是为了提高组件重用的效率，并为系统搭建一个灵活、可扩展的平台。</p><p>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><ul><li>谁依赖于谁？当然是应用程序依赖于 IoC 容器。</li><li>为什么需要依赖？应用程序需要 IoC 容器来提供对象需要的外部资源。</li><li>谁注入谁？IoC 容器注入应用程序某个对象，应用程序依赖的对象。</li><li>注入了什么？注入某个对象所需要的外部资源(包括对象、资源、常量数据)。</li></ul><p>IoC 和 DI 是两个相辅相成的概念，IoC 的实现是使用了 DI，而 DI 的目的是为了实现 IoC。实际上，它们是同一个概念的不同角度描述。</p><p>为什么要这么做，这么做有什么意义呢？依赖注入帮我们降低了创建对象的成本，使得对象之间松耦合。</p><p><code>composer</code> 通过 <code>composer.json</code> 来管理第三方依赖，从这个角度讲，<code>composer</code> 就是一个 IoC 容器。</p><p><code>PSR-11</code> <code>Psr\Contanier\ContainerInterface</code>。</p><h2 id="DB-SQL"><a href="#DB-SQL" class="headerlink" title="DB SQL"></a>DB SQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 文本文件到 Mac 中文乱码</title>
      <link href="/2019/12/09/windows-text-file-to-mac-chinese-messy-code/"/>
      <url>/2019/12/09/windows-text-file-to-mac-chinese-messy-code/</url>
      
        <content type="html"><![CDATA[<p>文本文件从 Windows 系统复制到 Mac 系统中文发生乱码，原因肯定是编码问题。</p><span id="more"></span><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p><a href="https://zh.wikipedia.org/wiki/Iconv">iconv | wikipedia</a> 它的作用是在多种国际编码格式之间进行文本内码的转换。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iconv [OPTION...] [-f ENCODING] [-t ENCODING] [INPUTFILE...]</span><br><span class="line"></span><br><span class="line">iconv -f GB18030 -t utf-8 &lt;infile.txt&gt; outfile.txt</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://super2bai.github.io/codec/w2m.html">文本文件从 Windows 拷贝到 Mac 乱码 | super2bai</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git log 统计分析</title>
      <link href="/2019/12/03/analyze-git-log/"/>
      <url>/2019/12/03/analyze-git-log/</url>
      
        <content type="html"><![CDATA[<h2 id="统计个人增删行数"><a href="#统计个人增删行数" class="headerlink" title="统计个人增删行数"></a>统计个人增删行数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;zhaoyifan&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span> -</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">added lines: 82813, removed lines: 53707, total lines: 29106</span><br></pre></td></tr></table></figure><h2 id="统计每个人增删行数"><a href="#统计每个人增删行数" class="headerlink" title="统计每个人增删行数"></a>统计每个人增删行数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --shortstat | grep -E <span class="string">&quot;(Author: )(\s*(\w+))&#123;2&#125;|fil(e|es) changed&quot;</span> | awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"> if($1 ~ /Author/) &#123;</span></span><br><span class="line"><span class="string">  author = $2&quot; &quot;$3</span></span><br><span class="line"><span class="string"> &#125; else &#123;</span></span><br><span class="line"><span class="string">  files[author]+=$1</span></span><br><span class="line"><span class="string">  inserted[author]+=$4</span></span><br><span class="line"><span class="string">  deleted[author]+=$6</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END &#123; for (key in files) &#123; print &quot;Author: &quot; key &quot;\n\tfiles changed: &quot;, files[key], &quot;\n\tlines inserted: &quot;, inserted[key], &quot;\n\tlines deleted: &quot;, deleted[key] &#125; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="统计每个人提交次数"><a href="#统计每个人提交次数" class="headerlink" title="统计每个人提交次数"></a>统计每个人提交次数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git shortlog -sn --no-merges</span><br></pre></td></tr></table></figure><h2 id="忽略某些路径的更改"><a href="#忽略某些路径的更改" class="headerlink" title="忽略某些路径的更改"></a>忽略某些路径的更改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -- . <span class="string">&quot;:(exclude)sub&quot;</span></span><br><span class="line">git <span class="built_in">log</span> -- . <span class="string">&quot;:!sub&quot;</span></span><br></pre></td></tr></table></figure><h2 id="cloc"><a href="#cloc" class="headerlink" title="cloc"></a>cloc</h2><p><a href="https://github.com/AlDanial/cloc">AlDanial&#x2F;cloc - cloc counts blank lines, comment lines, and physical lines of source code in many programming languages.</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cloc <span class="built_in">source</span>/</span><br><span class="line"></span><br><span class="line">     186 text files.</span><br><span class="line">     186 unique files.</span><br><span class="line">       3 files ignored.</span><br><span class="line"></span><br><span class="line">github.com/AlDanial/cloc v 1.84  T=0.16 s (1112.3 files/s, 138678.8 lines/s)</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Markdown                       183           6028              0          16788</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">SUM:                           183           6028              0          16788</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="Git-Fame"><a href="#Git-Fame" class="headerlink" title="Git Fame"></a>Git Fame</h2><p><a href="http://oleander.io/git-fame-rb/">Git Fame - A command-line tool that helps you summarize and pretty-print git collaborators based on contributions</a></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">gem install git_fame</span><br><span class="line">cd /path/to/gitdir &amp;&amp; git fame</span><br><span class="line">Total number of files: 2,053</span><br><span class="line">Total number of lines: 63,132</span><br><span class="line">Total number of commits: 4,330</span><br><span class="line"></span><br><span class="line">+------------------------+--------+---------+-------+--------------------+</span><br><span class="line">| name                   | loc    | commits | files | percent            |</span><br><span class="line">+------------------------+--------+---------+-------+--------------------+</span><br><span class="line">| Johan Sørensen         | 22,272 | 1,814   | 414   | 35.3 / 41.9 / 20.2 |</span><br><span class="line">| Marius Mathiesen       | 10,387 | 502     | 229   | 16.5 / 11.6 / 11.2 |</span><br><span class="line">| Jesper Josefsson       | 9,689  | 519     | 191   | 15.3 / 12.0 / 9.3  |</span><br><span class="line">| Ole Martin Kristiansen | 6,632  | 24      | 60    | 10.5 / 0.6 / 2.9   |</span><br><span class="line">| Linus Oleander         | 5,769  | 705     | 277   | 9.1 / 16.3 / 13.5  |</span><br><span class="line">| Fabio Akita            | 2,122  | 24      | 60    | 3.4 / 0.6 / 2.9    |</span><br><span class="line">| August Lilleaas        | 1,572  | 123     | 63    | 2.5 / 2.8 / 3.1    |</span><br><span class="line">| David A. Cuadrado      | 731    | 111     | 35    | 1.2 / 2.6 / 1.7    |</span><br><span class="line">| Jonas Ängeslevä        | 705    | 148     | 51    | 1.1 / 3.4 / 2.5    |</span><br><span class="line">| Diego Algorta          | 650    | 6       | 5     | 1.0 / 0.1 / 0.2    |</span><br><span class="line">| Arash Rouhani          | 629    | 95      | 31    | 1.0 / 2.2 / 1.5    |</span><br><span class="line">| Sofia Larsson          | 595    | 70      | 77    | 0.9 / 1.6 / 3.8    |</span><br><span class="line">| Tor Arne Vestbø        | 527    | 51      | 97    | 0.8 / 1.2 / 4.7    |</span><br><span class="line">| spontus                | 339    | 18      | 42    | 0.5 / 0.4 / 2.0    |</span><br><span class="line">| Pontus                 | 225    | 49      | 34    | 0.4 / 1.1 / 1.7    |</span><br><span class="line">+------------------------+--------+---------+-------+--------------------+</span><br></pre></td></tr></table></figure><h2 id="让-git-log-的输出漂亮简洁"><a href="#让-git-log-的输出漂亮简洁" class="headerlink" title="让 git log 的输出漂亮简洁"></a>让 git log 的输出漂亮简洁</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://gist.github.com/johanmeiring/3002458">https://gist.github.com/johanmeiring/3002458</a></p></blockquote><p>在 <code>~/.gitconfig</code> 看到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    lg = <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset&#x27;</span> --abbrev-commit</span><br></pre></td></tr></table></figure><p>这其中的占位符的解释：</p><ul><li>%Cred：将颜色设置为红色</li><li>%Creset：重置颜色</li><li>%C(yellow)：将颜色设置为黄色</li><li>%h：缩略的提交哈希值</li><li>%d：ref names（不知道该怎么解释 😆）</li><li>%s：提交时的 message</li><li>%cr：相对的提交时间。可以换成%ci，展示的是年月日时分秒。</li><li>%an：提交人的 name</li><li>%ae：提交人的邮箱</li></ul><p>更多占位符，可以参考官方文档：<a href="https://git-scm.com/docs/pretty-formats">https://git-scm.com/docs/pretty-formats</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://gist.github.com/ezamelczyk/78b9c0dd095f8706a3f6a41e8eae0afd">Git count lines by author | gist ezamelczyk</a></li><li><a href="https://stackoverflow.com/questions/5685007/making-git-log-ignore-changes-for-certain-paths">Making ‘git log’ ignore changes for certain paths | stackoverflow</a></li><li><a href="https://www.letianbiji.com/git/git-log.html">让 git log 的输出漂亮简洁 | letianbiji</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 批量修改历史 commit 中 user.email</title>
      <link href="/2019/12/02/git-modify-history-commont-user-email/"/>
      <url>/2019/12/02/git-modify-history-commont-user-email/</url>
      
        <content type="html"><![CDATA[<p>注意：<strong>此操作会修改 Git 历史记录</strong>，正式工作环境不允许。</p><span id="more"></span><p>查询都有什么：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">&#x27;%aN %aE&#x27;</span> | <span class="built_in">sort</span> -u</span><br></pre></td></tr></table></figure><p>注：一个特殊情况如果 email 没被设置过 OLD_EMAIL 可以填 <code>user.name</code>。</p><ul><li>OLD_EMAIL 原来的邮箱</li><li>CORRECT_NAME 更正的名字</li><li>CORRECT_EMAIL 更正的邮箱</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch -f --env-filter <span class="string">&#x27;</span></span><br><span class="line"><span class="string">OLD_EMAIL=&quot;old@qq.com&quot;</span></span><br><span class="line"><span class="string">CORRECT_NAME=&quot;MyName&quot;</span></span><br><span class="line"><span class="string">CORRECT_EMAIL=&quot;new@gmail.com&quot;</span></span><br><span class="line"><span class="string">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">&#x27;</span> --tag-name-filter <span class="built_in">cat</span> -- --branches --tags</span><br></pre></td></tr></table></figure><p>因为修改了 Git 历史所有要使用强制推送：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --f --tags</span><br></pre></td></tr></table></figure><p>GitLab 有 master 分支保护的策略：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remote: GitLab: You are not allowed to force push code to a protected branch on this project.</span><br></pre></td></tr></table></figure><p>在 GitLab 中：Project(项目) -&gt; Setting -&gt; Repository 菜单下面的 Protected branches 把 master 的保护去掉就可以了。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://segmentfault.com/a/1190000008032330">Git 批量修改历史 commit 中的 user.name 和 user.email | segmentfault</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS yum 升级 git 版本</title>
      <link href="/2019/11/25/centos-upgrade-git-by-yum/"/>
      <url>/2019/11/25/centos-upgrade-git-by-yum/</url>
      
        <content type="html"><![CDATA[<p>先去官网看看 <a href="https://git-scm.com/download/linux">Download for Linux and Unix</a>:</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">RHEL and derivatives typically ship older versions of git. You can download a tarball and build from source, or use a 3rd-party repository such as the [IUS Community Project](https://ius.io/) to obtain a more recent version of git.</span><br></pre></td></tr></table></figure><p>RHEL 和衍生通常提供较老版本的 git。您可以下载 tarball 并从源代码构建，或者使用第三方存储库，如 <a href="https://ius.io/">IUS Community Project</a> 来获得最新版本的 git。</p><h2 id="使用-IUS"><a href="#使用-IUS" class="headerlink" title="使用 IUS"></a>使用 IUS</h2><p>RHEL&#x2F;CentOS 7</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install \</span><br><span class="line">https://repo.ius.io/ius-release-el7.rpm \</span><br><span class="line">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装新版 git：</p><p>ius 通常会在高版本的软件名后面 + u</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list git</span><br></pre></td></tr></table></figure><p>如果你已经装有低版本的 git，你需要先 remove（否则安装的时候会报错）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><p>安装 2.0 以上版本的 git</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install git2u</span><br></pre></td></tr></table></figure><h2 id="WANdisco"><a href="#WANdisco" class="headerlink" title="WANdisco"></a>WANdisco</h2><p>另一个源：<a href="http://docs.wandisco.com/git/binaries/">WANdisco Replication Binaries</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/yum.repos.d/wandisco-git.repo</span><br></pre></td></tr></table></figure><p>wandisco-git.repo</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[wandisco-git]</span><br><span class="line">name=Wandisco GIT Repository</span><br><span class="line">baseurl=http://opensource.wandisco.com/centos/7/git/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco</span><br></pre></td></tr></table></figure><p>Import the repository GPG keys with:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rpm --import http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove git</span><br><span class="line"></span><br><span class="line">sudo yum install git</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://linuxize.com/post/how-to-install-git-on-centos-7/">How To Install Git on CentOS 7 | linuxize</a></li><li><a href="https://stackoverflow.com/questions/21820715/how-to-install-latest-version-of-git-on-centos-7-x-6-x">How to install latest version of git on CentOS 7.x&#x2F;6.x | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRLF will be replaced by LF</title>
      <link href="/2019/11/22/crlf-will-be-replaced-by-lf/"/>
      <url>/2019/11/22/crlf-will-be-replaced-by-lf/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">warning: CRLF will be replaced by LF <span class="keyword">in</span> X.</span><br></pre></td></tr></table></figure><ul><li>CRLF：windows 环境下的换行符</li><li>LF：linux 环境下的换行符</li></ul><p>这个错误的意思，就是文件中存在两种环境的换行符，git 会自动替换 CRLF 为 LF ，所以提示警告。</p><span id="more"></span><p>首先推荐扩展阅读：<a href="https://help.github.com/cn/github/using-git/configuring-git-to-handle-line-endings">配置 Git 处理行结束符 | GitHub</a></p><p>我项目中是配置了 <code>.gitattributes</code> 的：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># Set the default behavior, in case people don&#x27;t have core.autocrlf set.</span><br><span class="line">* text=auto</span><br><span class="line"></span><br><span class="line"># Explicitly declare text files you want to always be normalized and converted</span><br><span class="line"># to native line endings on checkout.</span><br><span class="line">*.c text</span><br><span class="line">*.h text</span><br><span class="line"></span><br><span class="line"># Declare files that will always have CRLF line endings on checkout.</span><br><span class="line">*.sln text eol=crlf</span><br><span class="line"></span><br><span class="line"># Denote all files that are truly binary and should not be modified.</span><br><span class="line">*.png binary</span><br><span class="line">*.jpg binary</span><br></pre></td></tr></table></figure><h2 id="gitattributes"><a href="#gitattributes" class="headerlink" title=".gitattributes"></a>.gitattributes</h2><p>公式：<code>要匹配的文件模式 属性1 属性2 ...</code>。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">* text=auto</span><br></pre></td></tr></table></figure><p>对任何文件，设置 text&#x3D;auto，表示文件的行尾自动转换。如果是文本文件，则在文件入 Git 库时，行尾自动转换为 LF。如果已经在入 Git 库中的文件的行尾为 CRLF，则该文件在入 Git 库时，不再转换为 LF。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">*.txt text</span><br></pre></td></tr></table></figure><p>对于 txt 文件，标记为文本文件，并进行行尾规范化。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">*.jpg -text</span><br><span class="line"></span><br><span class="line">*.jpg binary</span><br></pre></td></tr></table></figure><p>对于 jpg 文件，标记为非文本文件，不进行任何的行尾转换。<code>*.jpg -text</code> 可能是旧版本的写法。</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">*.vcproj text eol=crlf</span><br></pre></td></tr></table></figure><p>对于 vcproj 文件，标记为文本文件，在文件入 Git 库时进行规范化，即行尾为 LF。但是在检出到工作目录时，行尾自动转换为 CRLF。</p><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5"></a>示例 5</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">*.sh text eol=lf</span><br></pre></td></tr></table></figure><p>对于 sh 文件，标记为文本文件，在文件入 Git 库时进行规范化，即行尾为 LF。在检出到工作目录时，行尾也不会转换为 CRLF（即保持 LF）。</p><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例 6"></a>示例 6</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">*.py eol=lf</span><br></pre></td></tr></table></figure><p>对于 py 文件，只针对工作目录中的文件，行尾为 LF。</p><h2 id="还是有问题"><a href="#还是有问题" class="headerlink" title="还是有问题"></a>还是有问题</h2><p>在项目中已经添加 <code>.gitattributes</code> 文件，但是还是出现了报错，这时要检查 git 的版本。（CentOS 自带的 git 版本较低）</p><blockquote><p>可以参考：<a href="https://zyf.im/2019/11/25/centos-upgrade-git-by-yum/">CentOS yum 升级 git 版本</a></p></blockquote><p>后来还查到了一个方法，<code>.gitattributes</code>：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">* -crlf</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.csdn.net/taiyangdao/article/details/78484623">Git 的 gitattributes 文件详解 | csdn</a></li><li><a href="https://git-scm.com/docs/gitattributes">gitattributes - Defining attributes per path | git-scm</a></li><li><a href="https://www.rtuin.nl/2013/02/how-to-make-git-ignore-different-line-endings/">How to make Git ignore different line endings | rtuin</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Code Snippet</title>
      <link href="/2019/08/08/vue-code-snippet/"/>
      <url>/2019/08/08/vue-code-snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="Style-Guide"><a href="#Style-Guide" class="headerlink" title="Style Guide"></a>Style Guide</h2><p><a href="https://cn.vuejs.org/v2/style-guide/">https://cn.vuejs.org/v2/style-guide/</a></p><span id="more"></span><h2 id="重置-data-的数据为初始状态"><a href="#重置-data-的数据为初始状态" class="headerlink" title="重置 data 的数据为初始状态"></a>重置 data 的数据为初始状态</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property">$data</span>, <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>());</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>().<span class="property">form</span>, &#123; <span class="attr">type</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="修改-ElementUI-默认样式"><a href="#修改-ElementUI-默认样式" class="headerlink" title="修改 ElementUI 默认样式"></a>修改 ElementUI 默认样式</h2><blockquote><p><a href="https://juejin.cn/post/7011016159545786376">vue 中令人头疼的 element-ui 组件默认 css 样式修改 | juejin</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-class&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.my-class__expand-column</span> <span class="selector-class">.cell</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.my-class</span> <span class="selector-class">.el-table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="watch-对象的属性"><a href="#watch-对象的属性" class="headerlink" title="watch 对象的属性"></a>watch 对象的属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">   <span class="attr">msg</span>: &#123;</span><br><span class="line">      <span class="attr">channel</span>: <span class="string">&quot;音乐&quot;</span>,</span><br><span class="line">      <span class="attr">style</span>: <span class="string">&quot;活泼&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">   <span class="title function_">a</span>(<span class="params">newval, oldVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new: %s, old: %s&quot;</span>, newval, oldVal);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">   <span class="attr">msg</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 深度监听</span></span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听对象内的某一具体属性，可以通过 <code>computed</code> 做中间层来实现：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">   <span class="title function_">channel</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="property">channel</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">   <span class="title function_">channel</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new: %s, old: %s&#x27;</span>, newval, oldVal)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断-data-中的对象是否为空"><a href="#判断-data-中的对象是否为空" class="headerlink" title="判断 data 中的对象是否为空"></a>判断 data 中的对象是否为空</h2><p>1、利用 <code>jQuery</code> 的 <code>isEmptyObject</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">isEmptyObject</span>(data.<span class="property">list</span>);</span><br></pre></td></tr></table></figure><p>实现源码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">isEmptyObject</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> name;</span><br><span class="line">   <span class="keyword">for</span> (name <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、获取到对象中的属性名，存到一个数组中，通过判断数组的 <code>length</code> 来判断此对象是否为空：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(data);</span><br><span class="line"><span class="title function_">alert</span>(arr.<span class="property">length</span> == <span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>ES6：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data.<span class="property">list</span>);</span><br><span class="line"><span class="title function_">alert</span>(arr.<span class="property">length</span> == <span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>3、转化为 <code>json</code> 字符串，再判断该字符串是否为 <code>&#123;&#125;</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) == <span class="string">&quot;&#123;&#125;&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="关闭-webpack-dev-server-自动刷新"><a href="#关闭-webpack-dev-server-自动刷新" class="headerlink" title="关闭 webpack-dev-server 自动刷新"></a>关闭 webpack-dev-server 自动刷新</h2><p>文件保存后页面刷新，刷的眼晕。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">inline</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">liveReload</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释掉 <code>plugins</code> 中的相关插件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">   <span class="comment">// new webpack.HotModuleReplacementPlugin()</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><blockquote><p>必须有 webpack.HotModuleReplacementPlugin 才能完全启用 HMR。如果 webpack 或 webpack-dev-server 是通过 –hot 选项启动的，那么这个插件会被自动添加，所以你可能不需要把它添加到 webpack.config.js 中。</p></blockquote><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>在 Vue 生命周期的 <code>created()</code> 钩子函数进行的 DOM 操作一定要放在 <code>Vue.nextTick()</code> 的回调函数中。</p><p>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的 DOM 结构的时候，这个操作都应该放进 <code>Vue.nextTick()</code> 的回调函数中。</p><blockquote><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 <code>watcher</code> 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环 “tick” 中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和 <code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p></blockquote><h2 id="键盘监听事件"><a href="#键盘监听事件" class="headerlink" title="键盘监听事件"></a>键盘监听事件</h2><blockquote><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">按键修饰符 | vue</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;KeyUpEsc&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6">将原生事件绑定到组件 | vue</a></p></blockquote><p>使用 element 组件库的 el-input 标签，绑定 delete 键：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">keyup.delete.native</span>=<span class="string">&quot;KeyUpDelete&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么这次绑定事件多一个 <code>.native</code> 修饰符，这个可能是因为 element-ui 封装了个 div 在 input 标签外面，把原来的事件隐藏了，所以如果不加 <code>.native</code> 的话，按键不会生效。</p><p>上面两种实现效果是当 input 标签获取到 <em>焦点</em> 的时候，才能监听到键盘，下面这种是全局监听 enter 键，是把监听事件绑定到 document 上（登录页面常用）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> key = <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span>;</span><br><span class="line">      <span class="keyword">if</span> (key == <span class="number">13</span>) &#123;</span><br><span class="line">            _this.<span class="title function_">submit</span>();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="键盘回车后页面被刷新"><a href="#键盘回车后页面被刷新" class="headerlink" title="键盘回车后页面被刷新"></a>键盘回车后页面被刷新</h2><p>form 回车后执行查询方法，但是却重新刷新了页面，并且路由多了一个问号，<code>http://localhost:3009/?#/admin</code>。</p><p>解决方案：<code>el-from</code> 加上 <code>@submit.native.prevent</code>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> @<span class="attr">submit.native.prevent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;handleInputConfirm(obj)&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleInputConfirm</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ... 提交内容</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原因：当一个 <code>form</code> 元素中只有一个输入框时，在该输入框中按下回车应提交该表单。如果希望阻止这一默认行为，可以在标签上添加 <code>@submit.native.prevent</code>。</p><blockquote><p><a href="https://www.cnblogs.com/hibiscus-ben/p/10861062.html">vue 键盘回车事件导致页面刷新的问题，路由多了一个问号 | cnblogs</a></p></blockquote><p>解决方案二：为表单元素增加属性 <code>onSubmit=&quot;return false&quot;</code>。</p><blockquote><p><a href="https://weiku.co/article/297/">Vue element-ui 键盘回车事件表单自动提交造成页面刷新问题</a></p></blockquote><h2 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h2><p><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6">.sync 修饰符 | vue</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">history-dialog</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:historys</span>=<span class="string">&quot;historyTable&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:dialogVisible.sync</span>=<span class="string">&quot;dialogHistoryTableVisible&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="title function_">onClose</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:dialogVisible&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/penghuwan/p/7473375.html">【Vue】Vue 中的父子组件通讯以及使用 sync 同步父子组件数据 | penghuwan</a></li></ul><h2 id="优化图片加载失败"><a href="#优化图片加载失败" class="headerlink" title="优化图片加载失败"></a>优化图片加载失败</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.picture&quot;</span> @<span class="attr">error.once</span>=<span class="string">&quot;handleImgError($event)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleImgError (e) &#123;</span><br><span class="line">  e.<span class="property">currentTarget</span>.<span class="property">src</span> = <span class="string">&quot;http://www.ianbiangou.cn/index/ICON2.png&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">form</span> = &#123;&#125;; <span class="comment">// 不要用这种：this.form = &#x27;&#x27;;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.csdn.net/wangqing84411433/article/details/79582888">jQuery.isEmptyObject() 函数详解 | csdn</a></li><li><a href="https://juejin.im/post/5a6fdb846fb9a01cc0268618">简单理解 Vue 中的 nextTick | juejin</a></li><li><a href="https://www.jianshu.com/p/f2172afaf9bf">Vue 中键盘监听事件（解决 element 监听键盘不生效）| jianshu</a></li><li><a href="https://www.cnblogs.com/zhuzhenwei918/p/6891368.html">图片加载失败优化处理 | cnblogs</a></li><li><a href="https://stackoverflow.com/questions/41797704/how-to-disable-webpack-dev-server-auto-reload">How to disable webpack dev server auto reload? | stackoverflow</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> code-snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npx 入门使用</title>
      <link href="/2019/07/17/npx-getting-started/"/>
      <url>/2019/07/17/npx-getting-started/</url>
      
        <content type="html"><![CDATA[<p>今天在使用的 <a href="https://gulpjs.com/">Gulp</a> 时看到首页的一段命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">npx -p <span class="built_in">touch</span> nodetouch gulpfile.js</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/npx">npx</a> 是个啥？决定一探究竟。</p><span id="more"></span><h2 id="调用项目安装的模块"><a href="#调用项目安装的模块" class="headerlink" title="调用项目安装的模块"></a>调用项目安装的模块</h2><p><code>npx</code> 是 npm 的自带模块，可以直接使用，手动安装为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npx</span><br></pre></td></tr></table></figure><p><code>npx</code> - execute npm package binaries. 它解决的问题是：更方便的从本地 <code>node_modules/.bin</code> 或中央缓存中执行命令。</p><p>比如项目安装了 <code>gulp</code> 需要执行命令时需要：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/.bin/gulp -v</span><br></pre></td></tr></table></figure><p>如果使用 <code>npx</code> 只需要：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx gulp -v</span><br></pre></td></tr></table></figure><p><code>npx</code> 的原理很简单，就是运行的时候，会到 <code>node_modules/.bin</code> 路径和环境变量 <code>$PATH</code> 里面，检查命令是否存在。由于 <code>npx</code> 会检查环境变量 <code>$PATH</code>，所以系统命令也可以调用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等同于 ls</span></span><br><span class="line">npx <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>注意，<code>Bash</code> 内置的命令不在 <code>$PATH</code> 里面，所以不能用。比如，<code>cd</code> 是 <code>Bash</code> 命令，因此就不能用 <code>npx cd</code>。</p><h2 id="避免全局安装模块"><a href="#避免全局安装模块" class="headerlink" title="避免全局安装模块"></a>避免全局安装模块</h2><p><code>create-react-app</code> 这个模块是全局安装，<code>npx</code> 可以运行它，而且不进行全局安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-react-app</span><br></pre></td></tr></table></figure><p>上面代码运行时，<code>npx</code> 将 <code>create-react-app</code> 下载到一个临时目录，使用以后再删除。以后再次执行上面的命令，会重新下载 <code>create-react-app</code>。</p><p>注意，只要 <code>npx</code> 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装 <code>http-server</code> 模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx http-server</span><br></pre></td></tr></table></figure><h2 id="no-install-和-ignore-existing-参数"><a href="#no-install-和-ignore-existing-参数" class="headerlink" title="--no-install 和 --ignore-existing 参数"></a><code>--no-install</code> 和 <code>--ignore-existing</code> 参数</h2><p>如果想让 <code>npx</code> 强制使用本地模块，不下载远程模块，可以使用 <code>--no-install</code> 参数。如果本地不存在该模块，就会报错。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx --no-install http-server</span><br></pre></td></tr></table></figure><p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用 <code>--ignore-existing</code> 参数。</p><h2 id="使用不同版本的-Node"><a href="#使用不同版本的-Node" class="headerlink" title="使用不同版本的 Node"></a>使用不同版本的 Node</h2><p>可以指定某个版本的 <code>Node</code> 运行脚本，某些场景下，这个方法用来切换 <code>Node</code> 版本，要比 <code>nvm</code> 那样的版本管理器方便一些。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx node@0.12.8 -v</span><br><span class="line">v0.12.8</span><br></pre></td></tr></table></figure><h2 id="p-参数"><a href="#p-参数" class="headerlink" title="-p 参数"></a><code>-p</code> 参数</h2><p><code>-p</code> 参数用于指定 <code>npx</code> 所要安装的模块，所以上一节的命令可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx -p node@0.12.8 node -v</span><br><span class="line">v0.12.8</span><br></pre></td></tr></table></figure><p>上面命令先指定安装 <code>node@0.12.8</code> ，然后再执行 <code>node -v</code> 命令。</p><p>所以开头时的疑问 <code>npx -p touch nodetouch gulpfile.js</code> 也就解答了，就是先安装 <code>touch</code> 在执行 <code>nodetouch gulpfile.js</code>。</p><h2 id="执行-GitHub-源码"><a href="#执行-GitHub-源码" class="headerlink" title="执行 GitHub 源码"></a>执行 GitHub 源码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行 Gist 代码</span></span><br><span class="line">npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行仓库代码</span></span><br><span class="line">npx github:piuccio/cowsay hellos</span><br></pre></td></tr></table></figure><p>注意，远程代码必须是一个模块，即必须包含 <code>package.json</code> 和入口脚本。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/02/npx.html">npx 使用教程 - 阮一峰</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> node-js </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 使用经验</title>
      <link href="/2019/06/11/vscode-using-experience/"/>
      <url>/2019/06/11/vscode-using-experience/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑-settings-json"><a href="#编辑-settings-json" class="headerlink" title="编辑 settings.json"></a>编辑 settings.json</h2><p><code>command + ,</code> 右上角点击 <code>打开设置</code>。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过整体放大窗口比例</span></span><br><span class="line"><span class="attr">&quot;window.zoomLevel&quot;</span><span class="punctuation">:</span> <span class="number">1.1</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 字体</span></span><br><span class="line"><span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 软换行</span></span><br><span class="line"><span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="显示空格和-tab-符号"><a href="#显示空格和-tab-符号" class="headerlink" title="显示空格和 tab 符号"></a>显示空格和 tab 符号</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Editor: Render Whitespace</span><br><span class="line">控制编辑器在空白字符上显示符号的方式。</span><br><span class="line">all</span><br></pre></td></tr></table></figure><h2 id="Settings-同步"><a href="#Settings-同步" class="headerlink" title="Settings 同步"></a>Settings 同步</h2><p>只需从左下角的设置齿轮启用内置同步。</p><h2 id="扩展推荐"><a href="#扩展推荐" class="headerlink" title="扩展推荐"></a>扩展推荐</h2><ul><li>Community Material Theme</li><li>EditerConfig For VS Code</li><li>ESLint</li><li>Git History</li><li>GitLens — Git supercharged</li><li>markdownlint</li><li>Material Icon Theme</li><li>Material Theme</li><li>Prettier - Code formatter</li><li>Terminal</li><li>Vetur</li></ul><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 修改提交时间</title>
      <link href="/2019/06/10/git-modify-commit-date/"/>
      <url>/2019/06/10/git-modify-commit-date/</url>
      
        <content type="html"><![CDATA[<p>指定本次提交时间：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;fix...&quot;</span> --<span class="built_in">date</span>=`<span class="built_in">date</span> -R`</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;fix...&quot;</span> --<span class="built_in">date</span>=<span class="string">&quot;<span class="subst">$(date -R)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;fix...&quot;</span> --<span class="built_in">date</span>=<span class="string">&quot;Tue, 11 Jun 2019 17:50:50 +0800&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>修改上次提交时间：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend --<span class="built_in">date</span>=`<span class="built_in">date</span> -R`</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 提交 message 规范</title>
      <link href="/2019/06/04/git-commit-message-style-guide/"/>
      <url>/2019/06/04/git-commit-message-style-guide/</url>
      
        <content type="html"><![CDATA[<p>commit message 应该清晰明了，说明本次提交的目的。基本公式：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><p>完整公式：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>用于说明 commit 的类别，只允许使用下面 7 个标识。</p><ul><li>feat：新功能（feature）</li><li>fix：修补 bug</li><li>docs：文档（documentation）</li><li>style：格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><h2 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h2><p>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h2 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h2><p>是 commit 目的的简短描述，不超过 50 个字符。</p><ol><li>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes</li><li>第一个字母小写</li><li>结尾不加句号 <code>.</code></li></ol><h2 id="cli-工具"><a href="#cli-工具" class="headerlink" title="cli 工具"></a>cli 工具</h2><h3 id="commitizen-cli"><a href="#commitizen-cli" class="headerlink" title="commitizen cli"></a>commitizen cli</h3><p><a href="https://github.com/commitizen/cz-cli">commitizen&#x2F;cz-cli</a> 使用它提供的 <code>git cz</code> 命令替代我们的 <code>git commit</code> 命令，帮助我们生成符合规范的 commit message。</p><p>除此之外，我们还需要为 <code>commitizen</code> 指定一个 <code>Adapter</code> 比如：<a href="https://github.com/commitizen/cz-conventional-changelog">commitizen&#x2F;cz-conventional-changelog</a>（一个符合 Angular 团队规范的 preset）使得 <code>commitizen</code> 按照我们指定的规范帮助我们生成 commit message。</p><p>全局安装（首选）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27;</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure><p>项目级安装（首选）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D commitizen cz-conventional-changelog</span><br></pre></td></tr></table></figure><p><code>package.json</code> 中配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script&quot;</span>: &#123;</span><br><span class="line">   ...,</span><br><span class="line">   <span class="string">&quot;commit&quot;</span>: <span class="string">&quot;git-cz&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;node_modules/cz-conventional-changelog&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果全局安装过 <code>commitizen</code>，那么在对应的项目中执行 <code>git cz</code> or <code>npm run commit</code> 都可以。</p><h3 id="自定义规范"><a href="#自定义规范" class="headerlink" title="自定义规范"></a>自定义规范</h3><p>也许 Angular 的那套规范我们不习惯，那么可以通过指定 Adapter <a href="https://github.com/leonardoanalista/cz-customizable">leonardoanalista&#x2F;cz-customizable</a> 指定一套符合自己团队的规范。</p><h3 id="校验-message"><a href="#校验-message" class="headerlink" title="校验 message"></a>校验 message</h3><p>可以通过 <a href="https://github.com/conventional-changelog/commitlint">conventional-changelog&#x2F;commitlint</a> 校验 commit message。同时可以配合使用 <a href="https://github.com/typicode/husky">typicode&#x2F;husky</a> 🐶 Git hooks made easy。</p><h3 id="生成-CHANGELOG"><a href="#生成-CHANGELOG" class="headerlink" title="生成 CHANGELOG"></a>生成 CHANGELOG</h3><p><a href="https://github.com/conventional-changelog/standard-version">conventional-changelog&#x2F;standard-version</a> 🏆 自动化版本和更新日志生成。</p><p>还看到一个有意思的库 <a href="https://github.com/semantic-release/semantic-release">📦🚀 semantic-release</a> 待研究。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://juejin.im/entry/5b429be75188251ac85830ff">你可能会忽略的 Git 提交规范 - juejin</a></li><li><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4">优雅的提交你的 Git Commit Message - juejin</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南 - ruanyifeng</a></li><li><a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#">AngularJS Git Commit Message Conventions - google docs</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最左前缀原理与相关优化</title>
      <link href="/2019/05/25/the-left-prefix-index-rule/"/>
      <url>/2019/05/25/the-left-prefix-index-rule/</url>
      
        <content type="html"><![CDATA[<p>MySQL 中的索引可以以一定顺序引用多个列，这种索引叫做联合索引，一般的，一个联合索引是一个有序元组 <code>&lt;a1, a2, …, an&gt;</code>，其中各个元素均为数据表的一列。另外，单列索引可以看成联合索引元素数为 1 的特例。</p><p>我们在 <a href="https://dev.mysql.com/doc/employee/en/employees-installation.html">Employees Sample Database</a> 中实验，MySQL 版本 5.7。</p><span id="more"></span><p>以 employees.titles 为例，查看其索引：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> employees.titles;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>  <span class="operator">|</span> Non_unique <span class="operator">|</span> Key_name <span class="operator">|</span> Seq_in_index <span class="operator">|</span> Column_name <span class="operator">|</span> <span class="keyword">Collation</span> <span class="operator">|</span> <span class="keyword">Cardinality</span> <span class="operator">|</span> Sub_part <span class="operator">|</span> Packed <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Index_type <span class="operator">|</span> Comment <span class="operator">|</span> Index_comment <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> titles <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> emp_no      <span class="operator">|</span> A         <span class="operator">|</span>      <span class="number">301292</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> titles <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span>            <span class="number">2</span> <span class="operator">|</span> title       <span class="operator">|</span> A         <span class="operator">|</span>      <span class="number">442605</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> titles <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span>            <span class="number">3</span> <span class="operator">|</span> from_date   <span class="operator">|</span> A         <span class="operator">|</span>      <span class="number">442605</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br></pre></td></tr></table></figure><h2 id="全列匹配"><a href="#全列匹配" class="headerlink" title="全列匹配"></a>全列匹配</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp_no <span class="operator">=</span> <span class="string">&#x27;10009&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> title <span class="operator">=</span> <span class="string">&#x27;Senior Engineer&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> from_date <span class="operator">=</span> <span class="string">&#x27;1995-02-18&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>               <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">159</span>     <span class="operator">|</span> const,const,const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+-------------------+------+----------+-------+</span></span><br></pre></td></tr></table></figure><p>当按照索引中所有列进行精确匹配（这里精确匹配指 <code>=</code> 或 <code>IN</code> 匹配）时，索引可以被用到。</p><p>这里有一点需要注意，理论上索引对顺序是敏感的，但是由于 MySQL 的 <strong>查询优化器会自动调整 where 子句的条件顺序</strong> 以使用适合的索引，例如我们将 <code>where</code> 中的条件顺序颠倒：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">from_date <span class="operator">=</span> <span class="string">&#x27;1995-02-18&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> emp_no <span class="keyword">IN</span> ( <span class="string">&#x27;10009&#x27;</span> )</span><br><span class="line"><span class="keyword">AND</span> title <span class="operator">=</span> <span class="string">&#x27;Senior Engineer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>               <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+-------------------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">159</span>     <span class="operator">|</span> const,const,const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+-------------------+------+----------+-------+</span></span><br></pre></td></tr></table></figure><p>和上面是一样的。</p><h2 id="最左前缀匹配"><a href="#最左前缀匹配" class="headerlink" title="最左前缀匹配"></a>最左前缀匹配</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp_no <span class="operator">=</span> <span class="string">&#x27;10009&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------+</span></span><br></pre></td></tr></table></figure><p>当查询条件精确匹配索引的 <strong>左边连续一个或几个列</strong> 时，如 <code>&lt;emp_no&gt;</code> 或 <code>&lt;emp_no, title&gt;</code>，所以可以被用到，但是只能用到一部分，即条件所组成的最左前缀。</p><p>上面的查询从分析结果看用到了 <code>PRIMARY</code> 索引，但是 <code>key_len</code> 为 4，说明只用到了索引的第一列前缀。</p><h2 id="中间某个条件未提供"><a href="#中间某个条件未提供" class="headerlink" title="中间某个条件未提供"></a>中间某个条件未提供</h2><p>查询条件用到了索引中列的精确匹配，但是中间某个条件未提供。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">WHERE</span> emp_no<span class="operator">=</span><span class="string">&#x27;10009&#x27;</span> <span class="keyword">AND</span> from_date<span class="operator">=</span><span class="string">&#x27;1995-02-18&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>    <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>此时索引使用情况和情况二相同，因为 <code>title</code> 未提供，所以查询只用到了索引的第一列，而后面的 <code>from_date</code> 虽然也在索引中，但是由于 <code>title</code> 不存在而无法和左前缀连接，因此需要对结果进行扫描过滤 <code>from_date</code>（这里由于 <code>emp_no</code> 唯一，所以不存在扫描）。</p><p>如果想让 <code>from_date</code> 也使用索引而不是 <code>where</code> 过滤，可以增加一个 <em>辅助索引</em> <code>&lt;emp_no, from_date&gt;</code>，此时上面的查询会使用这个索引。</p><p>除此之外，还可以使用一种称之为 <strong>隔离列</strong> 的优化方法，将 <code>emp_no</code> 与 <code>from_date</code> 之间的 <em>坑</em> 填上。</p><p>首先我们看下 <code>title</code> 有几种不同的值：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(title) <span class="keyword">FROM</span> employees.titles;</span><br></pre></td></tr></table></figure><p>只有 7 种。在这种成为 <em>坑</em> 的列值比较少的情况下，可以考虑用 <code>IN</code> 来填补这个 <em>坑</em> 从而形成最左前缀：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles</span><br><span class="line"><span class="keyword">WHERE</span> emp_no<span class="operator">=</span><span class="string">&#x27;10009&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> title <span class="keyword">IN</span> (<span class="string">&#x27;Senior Engineer&#x27;</span>, <span class="string">&#x27;Staff&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>, <span class="string">&#x27;Senior Staff&#x27;</span>, <span class="string">&#x27;Assistant Engineer&#x27;</span>, <span class="string">&#x27;Technique Leader&#x27;</span>, <span class="string">&#x27;Manager&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> from_date<span class="operator">=</span><span class="string">&#x27;1995-02-18&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">159</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>这次 <code>key_len</code> 为 <code>159</code>，说明索引被用全了，但是从 <code>type</code> 和 <code>rows</code> 看出 <code>IN</code> 实际上执行了一个 <code>range</code> 查询，这里检查了 7 个 key。看下两种查询的性能比较：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> profiling <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> FROM...  <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> FROM... <span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">SHOW</span> PROFILES;</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+---------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00083950</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> ..<span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.00063700</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> ..<span class="operator">|</span></span><br></pre></td></tr></table></figure><p>“填坑” 后性能提升了一点。如果经过 <code>emp_no</code> 筛选后余下很多数据，则后者性能优势会更加明显。当然，如果 <code>title</code> 的值很多，用填坑就不合适了，必须建立辅助索引。（笔者：多次测试后发现是有快有慢，可能是数据的原因，效果并不明显）</p><h2 id="查询条件没有指定索引第一列"><a href="#查询条件没有指定索引第一列" class="headerlink" title="查询条件没有指定索引第一列"></a>查询条件没有指定索引第一列</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">WHERE</span> from_date<span class="operator">=</span><span class="string">&#x27;1995-02-18&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">442605</span> <span class="operator">|</span>    <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>由于不是最左前缀，索引这样的查询显然用不到索引。</p><h2 id="匹配某列的前缀字符串"><a href="#匹配某列的前缀字符串" class="headerlink" title="匹配某列的前缀字符串"></a>匹配某列的前缀字符串</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">WHERE</span> emp_no<span class="operator">=</span><span class="number">10009</span> <span class="keyword">AND</span> title <span class="keyword">LIKE</span> <span class="string">&#x27;Senior%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">156</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>此时可以用到索引，如果通配符 <code>%</code> 不出现在开头，则可以用到索引，但根据具体情况不同可能只会用其中一个前缀。</p><h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">WHERE</span> emp_no <span class="operator">&lt;</span> <span class="string">&#x27;10010&#x27;</span> <span class="keyword">and</span> title <span class="operator">=</span> <span class="string">&#x27;Senior Engineer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>    <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>范围列可以用到索引（必须是最左前缀），但是范围列后面的列无法用到索引。同时，索引最多用于一个范围列，因此如果查询条件中有两个范围列则无法全用到索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles</span><br><span class="line"><span class="keyword">WHERE</span> emp_no <span class="operator">&lt;</span> <span class="string">&#x27;10010&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> title <span class="operator">=</span> <span class="string">&#x27;Senior Engineer&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> from_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;1986-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;1986-12-31&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>     <span class="number">1.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>可以看到索引对第二个范围索引无能为力。这里特别要说明 MySQL 一个有意思的地方，那就是仅用 explain 可能无法区分 范围索引 和 多值匹配，因为在 <code>type</code> 中这两者都显示为 <code>range</code>。</p><p>同时，用了 <code>between</code> 并不意味着就是范围查询，例如下面的查询：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles</span><br><span class="line"><span class="keyword">WHERE</span> emp_no <span class="keyword">BETWEEN</span> <span class="string">&#x27;10001&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;10010&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> title<span class="operator">=</span><span class="string">&#x27;Senior Engineer&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> from_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;1986-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;1986-12-31&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">159</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>     <span class="number">1.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>看起来是用了两个范围查询，但作用于 <code>emp_no</code> 上的 <code>BETWEEN</code> 实际上相当于 <code>IN</code>，也就是说 <code>emp_no</code> 实际是多值精确匹配。可以看到这个查询用到了索引全部三个列。因此在 MySQL 中要谨慎地区分多值匹配和范围匹配，否则会对 MySQL 的行为产生困惑。</p><p>还有个值得注意的事情：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">where</span> emp_no <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">AND</span> emp_no <span class="operator">&lt;</span> <span class="number">10011</span> <span class="keyword">AND</span> title<span class="operator">=</span><span class="string">&#x27;Senior Engineer&#x27;</span> <span class="keyword">AND</span> from_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;1986-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;1986-12-31&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>     <span class="number">1.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">where</span> emp_no <span class="operator">&gt;=</span> <span class="number">10001</span> <span class="keyword">and</span> emp_no <span class="operator">&lt;=</span> <span class="number">10010</span> <span class="keyword">AND</span> title<span class="operator">=</span><span class="string">&#x27;Senior Engineer&#x27;</span> <span class="keyword">AND</span> from_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;1986-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;1986-12-31&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">159</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">15</span> <span class="operator">|</span>     <span class="number">1.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>疑问：<code>=</code> 影响 范围索引 还是 多值匹配？</p></blockquote><h2 id="查询条件中含有函数或表达式"><a href="#查询条件中含有函数或表达式" class="headerlink" title="查询条件中含有函数或表达式"></a>查询条件中含有函数或表达式</h2><p>很不幸，如果查询条件中含有函数或表达式，则 MySQL 不会为这列使用索引（虽然某些在数学意义上可以使用）。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">WHERE</span> emp_no<span class="operator">=</span><span class="string">&#x27;10009&#x27;</span> <span class="keyword">AND</span> <span class="keyword">left</span>(title, <span class="number">6</span>)<span class="operator">=</span><span class="string">&#x27;Senior&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>虽然这个查询和情况五中功能相同，但是由于使用了函数 left，则无法为 title 列应用索引，而情况五中用 LIKE 则可以。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees.titles <span class="keyword">WHERE</span> emp_no <span class="operator">-</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>  <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> titles <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">442605</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------+------------+------+---------------+------+---------+------+--------+----------+-------------+</span></span><br></pre></td></tr></table></figure><p>显然这个查询等价于查询 <code>emp_no</code> 为 <code>10001</code> 的函数，但是由于查询条件是一个表达式，MySQL 无法为其使用索引。看来 MySQL 还没有智能到自动优化常量表达式的程度，因此在写查询语句时尽量避免表达式出现在查询中，而是先手工私下代数运算，转换为无表达式的查询语句。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL 索引背后的数据结构及算法原理</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/show-profile.html">13.7.5.30 SHOW PROFILE Syntax</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2019/05/23/merge-sort/"/>
      <url>/2019/05/23/merge-sort/</url>
      
        <content type="html"><![CDATA[<p>归并排序（英语：Merge sort，或 mergesort），是创建在归并操作上的一种有效的排序算法，效率为 <code>O(nlogn)</code>。1945 年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</p><span id="more"></span><p><img src="https://user-images.githubusercontent.com/9289792/58546744-9751a300-8238-11e9-84d1-0d33d5eaacee.gif" alt="merge-sort"></p><p>采用分治法：</p><ul><li>分割：递归地把当前序列平均分割成两半。</li><li>集成：在保持元素顺序的同时将上一步得到的子序列集成到一起（归并）。</li></ul><p>归并操作（merge），也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params"><span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$len</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$len</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125; <span class="comment">// 递归结束条件, 到达这步的时候, 数组就只剩下一个元素了, 也就是分离了数组</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$mid</span> = <span class="variable">$len</span> / <span class="number">2</span>;</span><br><span class="line">    <span class="variable">$left</span> = <span class="title function_ invoke__">array_slice</span>(<span class="variable">$arr</span>, <span class="number">0</span>, <span class="variable">$mid</span>); <span class="comment">// 拆分数组0-mid这部分给左边left</span></span><br><span class="line">    <span class="variable">$right</span> = <span class="title function_ invoke__">array_slice</span>(<span class="variable">$arr</span>, <span class="variable">$mid</span>); <span class="comment">// 拆分数组mid-末尾这部分给右边right</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="title function_ invoke__">mergeSort</span>(<span class="variable">$left</span>); <span class="comment">// 左边拆分完后开始递归合并往上走</span></span><br><span class="line">    <span class="variable">$right</span> = <span class="title function_ invoke__">mergeSort</span>(<span class="variable">$right</span>); <span class="comment">// 右边拆分完毕开始递归往上走</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$arr</span> = <span class="title function_ invoke__">merge</span>(<span class="variable">$left</span>, <span class="variable">$right</span>); <span class="comment">// 合并两个数组,继续递归</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// merge函数将指定的两个有序数组(arrA, arr)合并并且排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"><span class="variable">$arrA</span>, <span class="variable">$arrB</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$arrC</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$arrA</span>) &amp;&amp; <span class="title function_ invoke__">count</span>(<span class="variable">$arrB</span>)) &#123;</span><br><span class="line">        <span class="comment">// 这里不断的判断哪个值小, 就将小的值给到arrC, 但是到最后肯定要剩下几个值,</span></span><br><span class="line">        <span class="comment">// 不是剩下arrA里面的就是剩下arrB里面的而且这几个有序的值, 肯定比arrC里面所有的值都大所以使用</span></span><br><span class="line">        <span class="variable">$arrC</span>[] = <span class="variable">$arrA</span>[<span class="number">0</span>] &lt; <span class="variable">$arrB</span>[<span class="number">0</span>] ? <span class="title function_ invoke__">array_shift</span>(<span class="variable">$arrA</span>) : <span class="title function_ invoke__">array_shift</span>(<span class="variable">$arrB</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_merge</span>(<span class="variable">$arrC</span>, <span class="variable">$arrA</span>, <span class="variable">$arrB</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$startTime</span> = <span class="title function_ invoke__">microtime</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="title function_ invoke__">shuffle</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;before sort: &#x27;</span>, <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$arr</span>), <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$sortArr</span> = <span class="title function_ invoke__">mergeSort</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;after sort: &#x27;</span>, <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$sortArr</span>), <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;use time: &#x27;</span>, <span class="title function_ invoke__">microtime</span>(<span class="number">1</span>) - <span class="variable">$startTime</span>, <span class="string">&quot;s\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>假设被排序的数列中有 N 个数。遍历一趟的时间复杂度是 <code>O(N)</code>，需要遍历多少次呢？</p><p>归并排序的形式就是一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据 <strong>完全二叉树</strong> 的可以得出它的时间复杂度是 <code>O(N*lgN)</code>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://shockerli.net/post/merge-sort-implement-by-php/">PHP 算法 —— 归并排序</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My MacBook</title>
      <link href="/2019/05/20/my-macbook/"/>
      <url>/2019/05/20/my-macbook/</url>
      
        <content type="html"><![CDATA[<p>个人 MacBook 食用说明。推荐自动化环境配置脚本项目 <a href="https://github.com/imzyf/dotfiles">imzyf&#x2F;dotfiles</a>。</p><span id="more"></span><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>使用 <code>brew cask</code> 安装软件，非常方便。</p><p>安装 <a href="https://brew.sh/">brew</a>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找软件</span></span><br><span class="line">brew info --cask iterm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">brew install --cask iterm2</span><br></pre></td></tr></table></figure><blockquote><p>设置安装源允许任何 <code>sudo spctl --master-disable</code></p></blockquote><h2 id="软件清单"><a href="#软件清单" class="headerlink" title="软件清单"></a>软件清单</h2><h3 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h3><ul><li>iTerm 2</li><li>Alfred 3</li><li>Google Chrome</li><li>Visual Studio Code</li><li><a href="https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public">ClashX Pro</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask iterm2 alfred google-chrome visual-studio-code</span><br></pre></td></tr></table></figure><h3 id="AppStore-"><a href="#AppStore-" class="headerlink" title="AppStore "></a>AppStore </h3><ul><li>QQ 音乐 -  - ✨✨✨✨✨ TME 雄起</li><li>Xnip - 可以滚动截图 - </li><li>The Unarchiver - </li><li>微信 - </li><li>企业微信 - </li><li>QQ - </li><li>iHosts - 管理 Host - </li><li>网易有道词典 - </li><li>印象笔记 - </li><li><del>Kindle - </del></li></ul><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul><li>Itsycal - 日历扩展 - ✨✨✨</li><li>Proxifier - 可用作代理 - 💰</li><li>fliqlo - 时钟屏保 - 可以配合 <code>触发角</code> 使用 - ✨✨✨</li><li>QuicklookStephen - qlstephen QuickLook plugin - ✨✨✨</li><li>typora - Markdown 编辑器 - 导出 PDF 的样式出色 - ✨✨✨</li><li><a href="https://lhc70000.github.io/iina/">IINA</a> - The modern video player - ✨✨✨</li><li><a href="https://www.cockos.com/licecap/">LICEcap</a> - GIF 录屏 - ✨✨✨</li><li>腾讯会议 - ✨✨✨</li><li>百度云 - baidunetdisk</li><li>PopClip</li><li>Pap.er - 桌面壁纸</li><li>CleanMyMac X</li><li>Logitech Options</li><li><del>Mounty - read&#x2F;write mount of NTFS drives</del></li><li><del>Launchpad Manager Yosemite - 清理 Launchpad 图标</del></li><li><del><a href="https://github.com/dteoh/SlowQuitApps">SlowQuitApps</a> - 延迟 <code>⌘ + q</code></del></li><li><del>Cyberduck - FTP</del></li><li><del>ShellCraft - SSH - 💰</del></li><li><del><a href="https://panic.com/transmit/">Transmit 5</a></del></li><li><del>Shimo - 全局代理，命令行和开发软件内依然可以翻墙，支持 PPTP</del></li><li><del><a href="https://www.rescuetime.com/">RescueTime</a> - 时间统计</del></li><li><del>TeamViewer</del></li><li><del>MWeb</del> 真不熟</li><li><del><a href="http://pilotmoon.com/scrollreverser/">Scroll Reverser</a> - 翻转设备滚动方向</del> 鼠标自然方向真香</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask go2shell itsycal fliqlo typora paper qlstephen baidunetdisk</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask licecap</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap iina/homebrew-mpv-iina</span><br><span class="line">brew install mpv-iina</span><br></pre></td></tr></table></figure><h3 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h3><ul><li><a href="https://www.jetbrains.com/">JetBrains Developer Tools</a> 全家桶 - ✨✨✨</li><li><a href="https://www.docker.com/">Docker</a> - ✨✨✨</li><li>Navicat Premium - ✨✨✨ - 💰</li><li><a href="https://www.sourcetreeapp.com/">Sourcetree</a> - ✨✨✨</li><li>Postman - API 管理 - ✨✨✨</li><li><a href="http://zipzapmac.com/go2shell">Go2Shell</a> - 在当前 Finder 路径打开命令行 - ✨✨✨</li><li>SecureCRT - SSH 管理 - ✨✨✨ - 💰</li><li><a href="https://filezilla-project.org/">FileZilla</a> - FTP &#x2F; SFTP - ✨✨✨</li><li><a href="https://dbeaver.io/">DBeaver</a> - Universal Database Tool - ✨✨</li><li>draw.io - 画图 - ✨✨</li><li>Dash - ✨ - 💰</li><li>Chromium</li><li>cosborwser - 腾讯云 COS 客户端</li><li><del>Firefox</del></li><li><del>Kodo Browser - 七牛对象存储客户端</del></li><li><del>Sublime Text</del> 还是 VSCode 香</li><li><del>Paw - API 管理</del> Postman 够用了</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask docker sourcetree postman chromium</span><br></pre></td></tr></table></figure><h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><ul><li>Axure RP</li><li>MindNode</li><li>StarUML</li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li>Sip - 拾色</li><li>PixeStyle</li><li>ImageOptim</li><li><del>Zeplin</del></li></ul><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><ul><li>zsh</li><li>oh-my-zsh</li><li>autojump</li><li>fish</li><li><a href="https://github.com/andreafrancia/trash-cli">andreafrancia&#x2F;trash-cli</a></li><li><a href="https://github.com/FeeiCN/dict">FeeiCN&#x2F;dict</a></li><li><a href="https://github.com/xzhih/one-key-hidpi">one-key-hidpi)</a></li><li><a href="https://github.com/ksky521/nodeppt">ksky521&#x2F;nodeppt</a> Markdown PPT</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><h3 id="iOS-开发"><a href="#iOS-开发" class="headerlink" title="iOS 开发"></a>iOS 开发</h3><blockquote><p>已不写 iOS 很多年。</p></blockquote><ul><li>OpenSim - 快速打开模拟器应用文件夹 - ✨✨✨</li><li>Reveal - UI 调试 - ✨✨✨ - 💰</li><li>Charles - ✨✨✨ - 💰</li><li>Flipper</li><li>Realm Studio</li><li>Wireshark</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask opensim reveal charles</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><a href="https://support.apple.com/zh-cn/HT201236">Mac 键盘快捷键</a></li><li><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans">Chrome 键盘快捷键</a></li><li><a href="http://blog.csdn.net/qq_32457355/article/details/75043812">iTerm2 快捷键</a></li></ul><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>截屏：</p><ul><li>全屏 <code>command + shift + 3</code></li><li>指定区域 <code>command + shift + 4</code></li><li>当前窗口 <code>command + shift+ 4 + 空格</code></li></ul><p>Finder：</p><ul><li>前往文件夹 <code>command + shift + g</code></li><li>显示简介 <code>command + i</code></li><li>新建文件夹 <code>command + n</code></li><li>搜索 <code>command + f</code></li><li>删除 <code>command + delete</code>（在回收站中此方法为恢复文件，并不是从回收站删除）</li><li>清空回收站 <code>command + shift + delete</code>（全局可用）</li></ul><p>切换：</p><ul><li>所有应用之间切换 <code>command + tab</code></li><li>部分应用内切换 tab <code>command + option + ←/→</code>（通常为浏览器）或者 <code>command + ←/→</code></li><li>触摸板<ul><li>三指左右滑动，切换屏幕</li><li>上滑，出现目前运行的窗口</li></ul></li></ul><p>前进&#x2F;后退：</p><ul><li>浏览器中 <code>command + ←</code> <code>command + ←</code>（这就解释了为什么浏览器不用这个切换 tab）</li><li>触摸板<ul><li>两指左滑</li><li>两指右滑</li></ul></li></ul><p>浏览器:</p><ul><li>放大缩小 <code>command + +</code> <code>command + -</code></li><li>刷新 <code>command+r</code> 强制刷新：<code>command+shift+r</code></li><li>进入开发者模式 <code>command+option+i</code></li><li>打开上次关闭页面 <code>command+shift+t</code></li></ul><p>系统通用：</p><ul><li>隐藏窗口 <code>command+h</code></li><li>最小化窗口 <code>command+m</code></li><li>新建窗口 <code>command+n</code></li><li>新建 tab <code>command+t</code></li><li>另存为 <code>command+shift+S</code></li><li>关闭 tab <code>command+w</code></li><li>退出窗口 <code>command + q</code></li><li>复制粘贴 <code>command + c</code> <code>command + v</code></li></ul><p>其他：</p><ul><li>单词跳跃 <code>option + ←</code> <code>option + →</code></li><li>到开头 <code>command + ←</code> 到结尾 <code>command + →</code>，有的时候 <code>command</code> 不行换成 <code>fn</code></li></ul><h2 id="手势"><a href="#手势" class="headerlink" title="手势"></a>手势</h2><p>可以在 <code>系统偏好设置 -&gt; 触控板</code> 中了解。</p><h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h2><h3 id="触发角"><a href="#触发角" class="headerlink" title="触发角"></a>触发角</h3><p><code>系统偏好设置 -&gt; 桌面与屏幕保护程序 -&gt; 屏幕保护程序 -&gt; 触发角</code></p><h3 id="Night-Shift"><a href="#Night-Shift" class="headerlink" title="Night Shift"></a>Night Shift</h3><p><code>系统偏好设置 -&gt; 显示器 -&gt; Night Shift</code></p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 中 composer 加载流程</title>
      <link href="/2019/04/28/composer-autoload-in-laravel/"/>
      <url>/2019/04/28/composer-autoload-in-laravel/</url>
      
        <content type="html"><![CDATA[<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul><li>Laravel 5.8</li></ul><p>文章以 Laravel 学习。入口文件 <code>public/index.php</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Register The Auto Loader</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/../vendor/autoload.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>autoload.php</code> 不负责具体功能逻辑，只做了两件事：初始化自动加载类、注册自动加载类。</p><p><code>autoload_real.php</code> 中的类名为 <code>ComposerAutoloaderInit...</code> 这可能是为防止与用户自定义类名跟这个类重复冲突，加上了哈希值。</p><p>其实还有一个做法我们更加熟悉，是定义一个命名空间。这里为什么不定义一个命名空间呢？一种理解：命名空间一般都是为了复用，而这个类只需要运行一次即可，以后也不会用得到，用哈希值更加合适。</p><span id="more"></span><h2 id="autoload-real-php"><a href="#autoload-real-php" class="headerlink" title="autoload_real.php"></a>autoload_real.php</h2><p><code>autoload.php</code> 主要调用了 <code>getLoader()</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 单例模式，自动加载类只能有一个 1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="built_in">self</span>::<span class="variable">$loader</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$loader</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得自动加载核心类对象 2</span></span><br><span class="line">    <span class="title function_ invoke__">spl_autoload_register</span>(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInit76e88f0b305cd64c7c84b90b278c31db&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">self</span>::<span class="variable">$loader</span> = <span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Composer\Autoload\ClassLoader</span>();</span><br><span class="line">    <span class="title function_ invoke__">spl_autoload_unregister</span>(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInit76e88f0b305cd64c7c84b90b278c31db&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化自动加载核心类对象 3</span></span><br><span class="line">    <span class="variable">$useStaticLoader</span> = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !<span class="title function_ invoke__">defined</span>(<span class="string">&#x27;HHVM_VERSION&#x27;</span>) &amp;&amp; (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;zend_loader_file_encoded&#x27;</span>) || !<span class="title function_ invoke__">zend_loader_file_encoded</span>());</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$useStaticLoader</span>) &#123;</span><br><span class="line">        <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_static.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="title class_">\Composer\Autoload\ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::<span class="title function_ invoke__">getInitializer</span>(<span class="variable">$loader</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_namespaces.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_psr4.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;<span class="title function_ invoke__">setPsr4</span>(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$classMap</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_classmap.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$classMap</span>) &#123;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;<span class="title function_ invoke__">addClassMap</span>(<span class="variable">$classMap</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册自动加载核心类对象 4</span></span><br><span class="line">    <span class="variable">$loader</span>-&gt;<span class="title function_ invoke__">register</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动加载全局函数 5</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$useStaticLoader</span>) &#123;</span><br><span class="line">        <span class="variable">$includeFiles</span> = <span class="title class_">Composer\Autoload\ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::<span class="variable">$files</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$includeFiles</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_files.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$includeFiles</span> <span class="keyword">as</span> <span class="variable">$fileIdentifier</span> =&gt; <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">composerRequire76e88f0b305cd64c7c84b90b278c31db</span>(<span class="variable">$fileIdentifier</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$loader</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式 1"></a>单例模式 1</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> !== <span class="built_in">self</span>::<span class="variable">$loader</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$loader</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造-ClassLoader-核心类-2"><a href="#构造-ClassLoader-核心类-2" class="headerlink" title="构造 ClassLoader 核心类 2"></a>构造 ClassLoader 核心类 2</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInit76e88f0b305cd64c7c84b90b278c31db&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">self</span>::<span class="variable">$loader</span> = <span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Composer\Autoload\ClassLoader</span>();</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_unregister</span>(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInit76e88f0b305cd64c7c84b90b278c31db&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;Composer\Autoload\ClassLoader&#x27;</span> === <span class="variable">$class</span>) &#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/ClassLoader.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>composer</code> 先向 <code>PHP</code> 自动加载机制注册了一个函数，这个函数 <code>require</code> 了 <code>ClassLoader</code> 文件。成功 <code>new</code> 出该文件中核心类 <code>ClassLoader()</code> 后，又销毁了该函数。</p><p>为什么不直接 <code>require</code>？原因是：怕有的用户也定义了个 <code>\Composer\Autoload\ClassLoader</code> 命名空间，导致自动加载错误文件。</p><p>那为什么不跟引导类一样用个哈希值呢？原因是：这个类是可以复用的，框架允许用户使用这个类。</p><h2 id="初始化核心类对象-3"><a href="#初始化核心类对象-3" class="headerlink" title="初始化核心类对象 3"></a>初始化核心类对象 3</h2><p>对自动加载类的初始化，主要是给自动加载核心类初始化顶级命名空间映射。初始化的方法有两种：</p><ol><li>使用 <code>autoload_static</code> 进行静态初始化</li><li>调用核心类接口初始化</li></ol><h3 id="autoload-static-静态初始化"><a href="#autoload-static-静态初始化" class="headerlink" title="autoload_static 静态初始化"></a>autoload_static 静态初始化</h3><p>静态初始化只支持 <code>PHP 5.6</code> 以上版本、不支持 <code>HHVM</code> 虚拟机、不存在 <code>Zend-encoded file</code>。</p><p><code>autoload_static.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// autoload_static.php @generated by Composer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Composer</span>\<span class="title class_">Autoload</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash 防止冲突</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$files</span> = <span class="keyword">array</span> (...);</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixLengthsPsr4</span> = <span class="keyword">array</span> (...);</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixDirsPsr4</span> = <span class="keyword">array</span> (...);</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$fallbackDirsPsr4</span> = <span class="keyword">array</span> (...);</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixesPsr0</span> = <span class="keyword">array</span> (...);</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$classMap</span> = <span class="keyword">array</span> <span class="keyword">array</span> (...);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInitializer</span>(<span class="params">ClassLoader <span class="variable">$loader</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">\Closure</span>::<span class="title function_ invoke__">bind</span>(function () <span class="keyword">use</span> ($<span class="title">loader</span>) &#123;</span><br><span class="line">            $<span class="title">loader</span>-&gt;<span class="title">prefixLengthsPsr4</span> = <span class="title">ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::$<span class="title">prefixLengthsPsr4</span>;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;prefixDirsPsr4 = <span class="title class_">ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::<span class="variable">$prefixDirsPsr4</span>;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;fallbackDirsPsr4 = <span class="title class_">ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::<span class="variable">$fallbackDirsPsr4</span>;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;prefixesPsr0 = <span class="title class_">ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::<span class="variable">$prefixesPsr0</span>;</span><br><span class="line">            <span class="variable">$loader</span>-&gt;classMap = <span class="title class_">ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::<span class="variable">$classMap</span>;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="literal">null</span>, <span class="title class_">ClassLoader</span>::<span class="variable language_">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个静态初始化类的核心就是 <code>getInitializer()</code> 函数，它将自己类中的顶级命名空间映射给了 ClassLoader 类。</p><p>值得注意的是这个函数返回的是一个匿名函数，为什么呢？原因就是 <code>ClassLoader</code> 中的 <code>prefixLengthsPsr4</code> 、<code>prefixDirsPsr4</code> 等等方法都是 <code>private</code> 的。普通的函数没办法给类的 <code>private</code> 成员变量赋值。利用匿名函数的绑定功能就可以将把匿名函数转为 <code>ClassLoader</code> 类的成员函数。</p><p>关于匿名函数的 <a href="http://www.cnblogs.com/yjf512/p/4421289.html">绑定功能</a>。</p><p>接下来就是 顶级命名空间 初始化的关键了。</p><h4 id="classMap"><a href="#classMap" class="headerlink" title="classMap"></a>classMap</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$classMap</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;App\\Api\\Middleware\\DeviceRecord&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../..&#x27;</span> . <span class="string">&#x27;/app/Api/Middleware/DeviceRecord.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;App\\Api\\Middleware\\HeaderCheck&#x27;</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../..&#x27;</span> . <span class="string">&#x27;/app/Api/Middleware/HeaderCheck.php&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>直接命名空间全名与目录的映射，没有顶级命名空间。简单粗暴，也导致这个数组相当的大。</p><h4 id="PSR0-顶级命名空间映射"><a href="#PSR0-顶级命名空间映射" class="headerlink" title="PSR0 顶级命名空间映射"></a>PSR0 顶级命名空间映射</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixesPsr0</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="string">&#x27;Prophecy\\&#x27;</span> =&gt;</span><br><span class="line">        <span class="keyword">array</span> (</span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/phpspec/prophecy/src&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;Parsedown&#x27;</span> =&gt;</span><br><span class="line">        <span class="keyword">array</span> (</span><br><span class="line">            <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/erusev/parsedown&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>为了快速找到顶级命名空间，这里使用命名空间第一个字母作为前缀索引。这个映射的用法比较明显，假如我们有 <code>Parsedown/example</code> 这样的命名空间，首先通过首字母 <code>P</code>，找到：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;P&#x27;</span> =&gt; <span class="keyword">array</span> (...)</span><br></pre></td></tr></table></figure><p>这个数组，然后就会遍历这个数组来和 <code>Parsedown/example</code> 比较，发现第一个 <code>Prophecy</code> 不符合，第二个 <code>Parsedown</code> 符合，然后得到了映射目录（映射目录可能不止一个）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/erusev/parsedown&#x27;</span>,</span><br></pre></td></tr></table></figure><p>接着遍历这个数组，尝试 <code>__DIR__ . &#39;/..&#39; . &#39;/erusev/parsedown/Parsedown/example.php&#39;</code> 是否存在，如果不存在接着遍历数组（这个例子数组只有一个元素），如果数组遍历完都没有，就会加载失败。</p><h4 id="PSR4-标准顶级命名空间映射"><a href="#PSR4-标准顶级命名空间映射" class="headerlink" title="PSR4 标准顶级命名空间映射"></a>PSR4 标准顶级命名空间映射</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixLengthsPsr4</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="string">&#x27;phpDocumentor\\Reflection\\&#x27;</span> =&gt; <span class="number">25</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="string">&#x27;Zend\\Diactoros\\&#x27;</span> =&gt; <span class="number">15</span>,</span><br><span class="line">    ),</span><br><span class="line">    ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$prefixDirsPsr4</span> = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">&#x27;phpDocumentor\\Reflection\\&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/phpdocumentor/reflection-common/src&#x27;</span>,</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/phpdocumentor/reflection-docblock/src&#x27;</span>,</span><br><span class="line">        <span class="number">2</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/phpdocumentor/type-resolver/src&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;Zend\\Diactoros\\&#x27;</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/zendframework/zend-diactoros/src&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>PSR4</code> 标准 <code>顶级命名空间</code> 映射用了两个数组，第一个和 <code>PSR0</code> 一样用命名空间第一个字母作为前缀索引，然后是 <code>顶级命名空间</code>，但是最终并不是文件路径，而是 <code>顶级命名空间</code> 的长度。为什么呢？因为 <code>PSR4</code> 的文件目录更加灵活，更加简洁。</p><p><code>PSR0</code> 中 <code>顶级命名空间</code> 目录 <strong>直接加</strong> 到命名空间前面就可以得到路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                        ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class="line">Parsedown/example =&gt; __DIR__ . &#x27;/..&#x27; . &#x27;/erusev/parsedown/Parsedown/example.php</span><br><span class="line">                                                         ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br></pre></td></tr></table></figure><p>而 <code>PSR4</code> 却是用顶级命名空间目录 <strong>替换</strong> 顶级命名空间，所以获得顶级命名空间的 <strong>长度</strong> 很重要：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                        ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class="line">Parsedown/example =&gt; __DIR__ . &#x27;/..&#x27; . &#x27;/erusev/parsedown/example.php</span><br><span class="line">                                                ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br></pre></td></tr></table></figure><p>举例：假如我们找 <code>Symfony\\Polyfill\\Mbstring\\example</code> 这个类，和 <code>PSR0</code> 一样通过前缀索引和字符串匹配我们得到了:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;Symfony\\Polyfill\\Mbstring\\&#x27; =&gt; 26,</span><br></pre></td></tr></table></figure><p>这条记录，键是顶级命名空间，值是命名空间的长度。拿到顶级命名空间后去 <code>$prefixDirsPsr4</code> 获取它的映射目录数组（注意映射目录可能不止一条）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Symfony\\Polyfill\\Mbstring\\&#x27;</span> =&gt;</span><br><span class="line"><span class="keyword">array</span> (</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">&#x27;/..&#x27;</span> . <span class="string">&#x27;/symfony/polyfill-mbstring&#x27;</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>将 <code>Symfony\\Polyfill\\Mbstring\\example</code> 前 26 个字母替换为 <code>__DIR__ . &#39;/..&#39; . &#39;/symfony/polyfill-mbstring</code> 也就是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__DIR__ . &#x27;/..&#x27; . &#x27;/symfony/polyfill-mbstring/example.php</span><br></pre></td></tr></table></figure><p>先验证磁盘上这个文件是否存在，如果不存在接着遍历。如果遍历后没有找到，则加载失败。</p><p>自动加载核心类 <code>ClassLoader</code> 的静态初始化完成！</p><blockquote><p>其实还有 <code>$fallbackDirsPsr4</code>，暂未研究</p></blockquote><h3 id="调用接口初始化"><a href="#调用接口初始化" class="headerlink" title="调用接口初始化"></a>调用接口初始化</h3><p>如果 <code>PHP</code> 版本低于 <code>5.6</code> 或者使用 <code>HHVM</code> 虚拟机环境或者存在 <code>zend_loader_file_encoded</code>，那么就要使用核心类的接口进行初始化。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PSR0 取出命名空间的第一个字母作为索引，一个索引对应多个顶级命名空间，一个顶级命名空间对应多个目录路径，具体形式可以查看上面的 autoload_static 的 $prefixesPsr0。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果没有顶级命名空间，就只存储一个路径名，以便在后面尝试加载。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_namespaces.php&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">    <span class="variable">$loader</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PSR4 如果没有顶级命名空间，就直接保存目录。</span></span><br><span class="line"><span class="comment">如果有命名空间的话，要保证顶级命名空间最后是 \，然后分别保存</span></span><br><span class="line"><span class="comment">( 前缀 -&gt; 顶级命名空间，顶级命名空间 -&gt; 顶级命名空间长度 )</span></span><br><span class="line"><span class="comment">( 顶级命名空间 -&gt; 目录 )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这两个映射数组。具体形式可以查看上面我们讲的 autoload_static 的 prefixLengthsPsr4、$prefixDirsPsr4 。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$map</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_psr4.php&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$map</span> <span class="keyword">as</span> <span class="variable">$namespace</span> =&gt; <span class="variable">$path</span>) &#123;</span><br><span class="line">    <span class="variable">$loader</span>-&gt;<span class="title function_ invoke__">setPsr4</span>(<span class="variable">$namespace</span>, <span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">整个命名空间与目录之间的映射</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$classMap</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_classmap.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$classMap</span>) &#123;</span><br><span class="line">    <span class="variable">$loader</span>-&gt;<span class="title function_ invoke__">addClassMap</span>(<span class="variable">$classMap</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册核心类对象-4"><a href="#注册核心类对象-4" class="headerlink" title="注册核心类对象 4"></a>注册核心类对象 4</h2><p>Composer 自动加载功能的启动与初始化，经过启动与初始化，自动加载核心类对象已经获得了顶级命名空间与相应目录的映射，换句话说，如果有命名空间 <code>App\Console\Kernel</code>，我们已经知道了 <code>App\</code> 对应的目录，接下来我们就要解决下面的就是 <code>\Console\Kernel</code> 这一段。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers this instance as an autoloader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool $prepend Whether to prepend the autoloader or not</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$prepend</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">spl_autoload_register</span>(<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="string">&#x27;loadClass&#x27;</span>), <span class="literal">true</span>, <span class="variable">$prepend</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一行代码实现自动加载。核心在 <code>ClassLoader</code> 的 <code>loadClass()</code> 函数上，这个函数负责按照 <code>PSR</code> 标准将顶层命名空间以下的内容转为对应的目录，也就是上面所说的将 <code>App\Console\Kernel</code> 中 <code>Console\Kernel</code> 这一段转为目录。</p><h2 id="自动加载全局函数-5"><a href="#自动加载全局函数-5" class="headerlink" title="自动加载全局函数 5"></a>自动加载全局函数 5</h2><p><code>Composer</code> 不止可以自动加载命名空间，还可以加载全局函数。就是把全局函数写到特定的文件里面去，在程序运行前挨个 <code>require</code> 就行了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$useStaticLoader</span>) &#123;</span><br><span class="line">    <span class="comment">// 静态初始化</span></span><br><span class="line">    <span class="variable">$includeFiles</span> = <span class="title class_">Composer\Autoload\ComposerStaticInit76e88f0b305cd64c7c84b90b278c31db</span>::<span class="variable">$files</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 普通初始化</span></span><br><span class="line">    <span class="variable">$includeFiles</span> = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/autoload_files.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$includeFiles</span> <span class="keyword">as</span> <span class="variable">$fileIdentifier</span> =&gt; <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">composerRequire76e88f0b305cd64c7c84b90b278c31db</span>(<span class="variable">$fileIdentifier</span>, <span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">composerRequire76e88f0b305cd64c7c84b90b278c31db</span>(<span class="params"><span class="variable">$fileIdentifier</span>, <span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;__composer_autoload_files&#x27;</span>][<span class="variable">$fileIdentifier</span>])) &#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$GLOBALS</span>[<span class="string">&#x27;__composer_autoload_files&#x27;</span>][<span class="variable">$fileIdentifier</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h3><p>为什么不直接 <code>require</code> <code>$includeFiles</code> 里面的每个文件名，而要用类外面的函数 <code>composerRequire...</code> ？</p><ul><li>避免和用户定义函数冲突</li><li>防止有人在全局函数所在的文件写 <code>$this</code> 或者 <code>self</code></li></ul><p>假如 <code>$includeFiles</code> 有个 <code>app/helper.php</code> 文件，这个 <code>helper.php</code> 文件的函数外有一行代码： <code>$this-&gt;foo()</code>，如果引导类在 <code>getLoader()</code> 函数直接 <code>require($file)</code>，那么引导类就会运行这句代码，调用自己的 <code>foo()</code> 函数，这显然是错的。</p><p>事实上 <code>helper.php</code> 就不应该出现 <code>$this</code> 或 <code>self</code> 这样的代码，这样写一般都是用户写错了的，一旦这样的事情发生：</p><ul><li>第一种情况：引导类恰好有 <code>foo()</code> 函数，那么就会莫名其妙执行了引导类的 <code>foo()</code>。</li><li>第二种情况：引导类没有 <code>foo()</code> 函数，但是却甩出来引导类没有 <code>foo()</code> 方法这样的错误提示，用户不知道自己哪里错了。把 <code>require</code> 语句放到 <strong>引导类的外面</strong>，遇到 <code>$this</code> 或者 <code>self</code> ，程序就会告诉用户根本没有类， <code>$this</code> 或 <code>self</code> 无效，错误信息更加明朗。</li></ul><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h3><p>为什么要用 <code>hash</code> 作为 <code>$fileIdentifier</code>？</p><p>这个变量是用来控制全局函数只被 <code>require</code> 一次的，那为什么不用 <code>require_once</code> 呢？事实上 <code>require_once</code> 比 <code>require</code> 效率低很多，使用全局变量 <code>$GLOBALS</code> 这样控制加载会更快。猜测另一个原因应该是 <code>require_once</code> 对相对路径的支持并不理想，所以 <code>composer</code> 尽量少用 <code>require_once</code>。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><code>ClassLoader</code> 将 <code>loadClass()</code> 函数注册到 <code>PHP SPL</code> 中的 <code>spl_autoload_register()</code> 里面去。这样，每当 PHP 遇到一个不认识的命名空间的时候，PHP 会自动调用注册到 <code>spl_autoload_register()</code> 里面的函数堆栈，运行其中的每个函数，直到找到命名空间对应的文件。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Loads the given class or interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string    $class The name of the class</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> bool|null True if loaded, null otherwise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findFile</span>(<span class="variable">$class</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">includeFile</span>(<span class="variable">$file</span>); <span class="comment">// include $file; Prevents access to $this/self from included files.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds the path to the file where the class is defined.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $class The name of the class</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> string|false The path if found, false otherwise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findFile</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// class map lookup</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;classMap[<span class="variable">$class</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;classMap[<span class="variable">$class</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// classMapAuthoritative 关闭搜索未在类映射中注册的类的 prefix and fallback directories。- 不清楚干啥的 暂没研究</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;classMapAuthoritative || <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;missingClasses[<span class="variable">$class</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果启用扩展名，则使用 APCu 前缀来缓存已找到/未找到的类。 - 不清楚干啥的 暂没研究</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="variable language_">$this</span>-&gt;apcuPrefix) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="title function_ invoke__">apcu_fetch</span>(<span class="variable">$this</span>-&gt;apcuPrefix.<span class="variable">$class</span>, <span class="variable">$hit</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$hit</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findFileWithExtension</span>(<span class="variable">$class</span>, <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search for Hack files if we are running on HHVM</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$file</span> &amp;&amp; <span class="title function_ invoke__">defined</span>(<span class="string">&#x27;HHVM_VERSION&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findFileWithExtension</span>(<span class="variable">$class</span>, <span class="string">&#x27;.hh&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="variable language_">$this</span>-&gt;apcuPrefix) &#123;</span><br><span class="line">        <span class="title function_ invoke__">apcu_add</span>(<span class="variable">$this</span>-&gt;apcuPrefix.<span class="variable">$class</span>, <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="comment">// Remember that this class does not exist.</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;missingClasses[<span class="variable">$class</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadClass()</code> 主要调用 <code>findFile()</code> 函数。<code>findFile()</code> 在解析命名空间的时候主要分为两部分：</p><ul><li><code>classMap</code> 直接看命名空间是否在映射数组</li><li><code>findFileWithExtension()</code> 包含了 <code>PSR0</code>、<code>PSR4</code></li></ul><p>如果我们在代码中写 <code>&#39;phpDocumentor\Reflection\example</code>，PHP 会通过 SPL 调用 <code>loadClass</code> -&gt; <code>findFile</code> -&gt; <code>findFileWithExtension</code>。</p><ul><li>首先默认用 <code>.php</code> 后缀名调用 <code>findFileWithExtension</code> 函数里，利用 <code>PSR4</code> 标准尝试解析目录文件，如果文件不存在则继续用 <code>PSR0</code> 标准解析</li><li>如果解析出来的目录文件仍然不存在，但是环境是 <code>HHVM</code> 虚拟机，继续用后缀名 <code>.hh</code> 再次调用 <code>findFileWithExtension</code> 函数，如果不存在，说明此命名空间无法加载，放到 <code>classMap</code> 中设为 <code>false</code>，以便以后更快地加载</li></ul><h3 id="PSR4"><a href="#PSR4" class="headerlink" title="PSR4"></a>PSR4</h3><p>对于 <code>phpDocumentor\Reflection\example</code>，当尝试利用 <code>PSR4</code> 标准映射目录时，步骤如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $class: phpDocumentor\Reflection\example</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PSR-4 lookup</span></span><br><span class="line"><span class="variable">$logicalPathPsr4</span> = <span class="title function_ invoke__">strtr</span>(<span class="variable">$class</span>, <span class="string">&#x27;\\&#x27;</span>, DIRECTORY_SEPARATOR) . <span class="variable">$ext</span>;</span><br><span class="line"><span class="comment">// $logicalPathPsr4: phpDocumentor/Reflection/example.php(hh)`</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$first</span> = <span class="variable">$class</span>[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// $first: p</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;prefixLengthsPsr4[<span class="variable">$first</span>])) &#123;</span><br><span class="line">    <span class="comment">/* &#x27;p&#x27; =&gt;</span></span><br><span class="line"><span class="comment">    array (</span></span><br><span class="line"><span class="comment">        &#x27;phpDocumentor\\Reflection\\&#x27; =&gt; 25,</span></span><br><span class="line"><span class="comment">    ),</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable">$subPath</span> = <span class="variable">$class</span>;</span><br><span class="line">    <span class="comment">// $subPath: phpDocumentor\Reflection\example</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">false</span> !== <span class="variable">$lastPos</span> = <span class="title function_ invoke__">strrpos</span>(<span class="variable">$subPath</span>, <span class="string">&#x27;\\&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// $lastPos 13</span></span><br><span class="line">        <span class="variable">$subPath</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$subPath</span>, <span class="number">0</span>, <span class="variable">$lastPos</span>);</span><br><span class="line">        <span class="variable">$search</span> = <span class="variable">$subPath</span>.<span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;prefixDirsPsr4[<span class="variable">$search</span>])) &#123;</span><br><span class="line">            <span class="comment">// search phpDocumentor\\Reflection\\</span></span><br><span class="line">            <span class="comment">// $lastPos 25</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* &#x27;phpDocumentor\\Reflection\\&#x27; =&gt;</span></span><br><span class="line"><span class="comment">                array (</span></span><br><span class="line"><span class="comment">                    0 =&gt; __DIR__ . &#x27;/..&#x27; . &#x27;/phpdocumentor/reflection-common/src&#x27;,</span></span><br><span class="line"><span class="comment">                    1 =&gt; __DIR__ . &#x27;/..&#x27; . &#x27;/phpdocumentor/reflection-docblock/src&#x27;,</span></span><br><span class="line"><span class="comment">                    2 =&gt; __DIR__ . &#x27;/..&#x27; . &#x27;/phpdocumentor/type-resolver/src&#x27;,</span></span><br><span class="line"><span class="comment">                ),</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="variable">$pathEnd</span> = DIRECTORY_SEPARATOR . <span class="title function_ invoke__">substr</span>(<span class="variable">$logicalPathPsr4</span>, <span class="variable">$lastPos</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// $pathEnd /example.php(hh)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;prefixDirsPsr4[<span class="variable">$search</span>] <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">                <span class="comment">// 遍历 3 个</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span> = <span class="variable">$dir</span> . <span class="variable">$pathEnd</span>)) &#123;</span><br><span class="line">                    <span class="comment">// $file __DIR__ . &#x27;/..&#x27; . /phpdocumentor/type-resolver/src/example.php(hh)`</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PSR0"><a href="#PSR0" class="headerlink" title="PSR0"></a>PSR0</h3><p>如果 <code>PSR4</code> 标准加载失败，则要进行 <code>PSR0</code> 标准加载。对于 <code>phpDocumentor\Reflection\example</code>，当尝试利用 <code>PSR0</code> 标准映射目录时，步骤如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $class: phpDocumentor\Reflection\example</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PSR-0 lookup</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$pos</span> = <span class="title function_ invoke__">strrpos</span>(<span class="variable">$class</span>, <span class="string">&#x27;\\&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// namespaced class name</span></span><br><span class="line">    <span class="variable">$logicalPathPsr0</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$logicalPathPsr4</span>, <span class="number">0</span>, <span class="variable">$pos</span> + <span class="number">1</span>)</span><br><span class="line">        . <span class="title function_ invoke__">strtr</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$logicalPathPsr4</span>, <span class="variable">$pos</span> + <span class="number">1</span>), <span class="string">&#x27;_&#x27;</span>, DIRECTORY_SEPARATOR);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// PEAR-like class name</span></span><br><span class="line">    <span class="variable">$logicalPathPsr0</span> = <span class="title function_ invoke__">strtr</span>(<span class="variable">$class</span>, <span class="string">&#x27;_&#x27;</span>, DIRECTORY_SEPARATOR) . <span class="variable">$ext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $logicalPathPsr0: phpDocumentor/Reflection/example.php(hh)`</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;prefixesPsr0[<span class="variable">$first</span>])) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;prefixesPsr0[<span class="variable">$first</span>] <span class="keyword">as</span> <span class="variable">$prefix</span> =&gt; <span class="variable">$dirs</span>) &#123;</span><br><span class="line">        <span class="comment">/* &#x27;P&#x27; =&gt;</span></span><br><span class="line"><span class="comment">        array (</span></span><br><span class="line"><span class="comment">            &#x27;Prophecy\\&#x27; =&gt;</span></span><br><span class="line"><span class="comment">            array (</span></span><br><span class="line"><span class="comment">                0 =&gt; __DIR__ . &#x27;/..&#x27; . &#x27;/phpspec/prophecy/src&#x27;,</span></span><br><span class="line"><span class="comment">            ),</span></span><br><span class="line"><span class="comment">            &#x27;Parsedown&#x27; =&gt;</span></span><br><span class="line"><span class="comment">            array (</span></span><br><span class="line"><span class="comment">                0 =&gt; __DIR__ . &#x27;/..&#x27; . &#x27;/erusev/parsedown&#x27;,</span></span><br><span class="line"><span class="comment">            ),</span></span><br><span class="line"><span class="comment">        ), */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === <span class="title function_ invoke__">strpos</span>(<span class="variable">$class</span>, <span class="variable">$prefix</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$dirs</span> <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span> = <span class="variable">$dir</span> . DIRECTORY_SEPARATOR . <span class="variable">$logicalPathPsr0</span>)) &#123;</span><br><span class="line">                    <span class="comment">// $file __DIR__ . &#x27;/..&#x27; . &#x27;/phpspec/prophecy/src&#x27; . phpDocumentor/Reflection/example.php(hh)</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>个人一些疑问：</p><h3 id="防止用户自定义与-ClassLoader-命名空间冲突"><a href="#防止用户自定义与-ClassLoader-命名空间冲突" class="headerlink" title="防止用户自定义与 ClassLoader 命名空间冲突"></a>防止用户自定义与 ClassLoader 命名空间冲突</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInit76e88f0b305cd64c7c84b90b278c31db&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">self</span>::<span class="variable">$loader</span> = <span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Composer\Autoload\ClassLoader</span>();</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_unregister</span>(<span class="keyword">array</span>(<span class="string">&#x27;ComposerAutoloaderInit76e88f0b305cd64c7c84b90b278c31db&#x27;</span>, <span class="string">&#x27;loadClassLoader&#x27;</span>));</span><br></pre></td></tr></table></figure><p>为什么这样可以解决：与用户也定义了个 <code>\Composer\Autoload\ClassLoader</code> 命名空间，导致自动加载错误文件。</p><p>与第四个参数 <code>$prepend</code> <code>true</code> 有关吗？</p><h3 id="composer-StaticLoader-有什么优势"><a href="#composer-StaticLoader-有什么优势" class="headerlink" title="composer StaticLoader 有什么优势"></a>composer StaticLoader 有什么优势</h3><p><code>composer</code> 在加载类和加载全局方法时，都有两种方式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$useStaticLoader = PHP_VERSION_ID &gt;= 50600 &amp;&amp; !defined(&#x27;HHVM_VERSION&#x27;) &amp;&amp; (!function_exists(&#x27;zend_loader_file_encoded&#x27;) || !zend_loader_file_encoded());</span><br></pre></td></tr></table></figure><p>以 <code>$useStaticLoader</code> 的值进行选择，为什么一定分两种，静态方法是有什么优势吗？</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/LeoYang90/laravel-source-analysis/blob/master/PHP%20Composer%E2%80%94%E2%80%94%20%E5%88%9D%E5%A7%8B%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">PHP Composer - 初始化源码分析</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 请小心判断 strpos</title>
      <link href="/2019/04/10/php-strpos-warning/"/>
      <url>/2019/04/10/php-strpos-warning/</url>
      
        <content type="html"><![CDATA[<p>有开始写世界上最后的语言 PHP 了（狗头保命）。一个很简单的字符串是否包含判断就掉坑了。</p><p>方法签名：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">strpos</span> ( <span class="keyword">string</span> <span class="variable">$haystack</span> , <span class="keyword">mixed</span> <span class="variable">$needle</span> [, <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span> ] ) : <span class="keyword">int</span></span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mystring</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable">$findme</span>   = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$mystring</span>, <span class="variable">$findme</span>)) &#123;</span><br><span class="line">   <span class="title function_ invoke__">dump</span>(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这时是不会输出 <code>yes</code>，因为 <code>strpos($mystring, $findme)</code> 返回的是 <code>0</code>。就想官方文档说的：</p><blockquote><p>Warning 此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。应使用 &#x3D;&#x3D;&#x3D; 运算符来测试此函数的返回值。</p></blockquote><p>正解：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$mystring</span>, <span class="variable">$findme</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">   <span class="title function_ invoke__">dump</span>(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次问题是网上一搜，找到 <code>strpos</code> 后看到 <code>如果没找到 needle，将返回 FALSE</code> 就没多想就用了。语言间的差异还有注意。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.php.net/manual/zh/function.strpos.php">php.net - strpos</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 中使用 jQuery $(this) 的问题</title>
      <link href="/2019/04/10/es6-jquery-this-arrow-function/"/>
      <url>/2019/04/10/es6-jquery-this-arrow-function/</url>
      
        <content type="html"><![CDATA[<p>在老项目中开始改用 <code>laravel-mix</code> <code>ES6</code> 逐渐过渡。摸索中遇到在与 <code>jQuery</code> 一同使用时 <code>箭头函数</code> 中 <code>$(this)</code> 的含义发生了变化。</p><p>遇到这个问题主要是没有搞清楚 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.js-bottom-btn&#x27;</span>).<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = $(<span class="variable language_">this</span>).<span class="title function_">date</span>(<span class="string">&#x27;flag&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>转换为了：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.js-bottom-btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = $(_this).<span class="title function_">date</span>(<span class="string">&#x27;flag&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>_this</code> is undefined</p><p>根据 <a href="https://api.jquery.com/click/">jQuery click 文档</a> 可以修改为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.js-bottom-btn&#x27;</span>).<span class="title function_">click</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = $(event.<span class="property">currentTarget</span>).<span class="title function_">date</span>(<span class="string">&#x27;flag&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>类似的问题：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;jquery-selector&quot;</span>).<span class="title function_">each</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">click</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要改为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;jquery-selector&quot;</span>).<span class="title function_">each</span>(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">  $(element).<span class="title function_">click</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/27670401/using-jquery-this-with-es6-arrow-functions-lexical-this-binding">Using jQuery $(this) with ES6 Arrow Functions (lexical this binding)</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找数组中轴索引</title>
      <link href="/2019/03/06/find-pivot-index/"/>
      <url>/2019/03/06/find-pivot-index/</url>
      
        <content type="html"><![CDATA[<p>将 pivot 索引定义为：左边的数字之和等于索引右边的数字之和。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Input</span>:</span><br><span class="line">nums <span class="operator">=</span> [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="type">Output</span>: <span class="number">3</span></span><br><span class="line"><span class="type">Explanation</span>:</span><br><span class="line"><span class="number">1</span> <span class="operator">+</span> <span class="number">7</span> <span class="operator">+</span> <span class="number">3</span> <span class="operator">=</span> <span class="number">5</span> <span class="operator">+</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="type">Input</span>:</span><br><span class="line">nums <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="type">Output</span>: <span class="operator">-</span><span class="number">1</span></span><br><span class="line"><span class="type">Explanation</span>:</span><br><span class="line"><span class="type">There</span> <span class="keyword">is</span> no index that satisfies the conditions <span class="keyword">in</span> the problem statement.</span><br></pre></td></tr></table></figure><span id="more"></span><p>Note:</p><ul><li>The length of <code>nums</code> will be in the range <code>[0, 10000]</code>.</li><li>Each element <code>nums[i]</code> will be an integer in the range <code>[-1000, 1000]</code>.</li></ul><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ul><li>动态规划</li><li>数组的和 - 中轴数 &#x3D; 中轴数左边数组的和 * 2</li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">findPivot</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// 数组和</span></span><br><span class="line">    <span class="keyword">let</span> sum <span class="operator">=</span> array.reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line">    <span class="comment">// 左侧数组和</span></span><br><span class="line">    <span class="keyword">var</span> leftSum <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> array.enumerated() &#123;</span><br><span class="line">        <span class="keyword">if</span> sum <span class="operator">-</span> value <span class="operator">==</span> leftSum <span class="operator">*</span> <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        &#125;</span><br><span class="line">        leftSum <span class="operator">+=</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">search(array) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://my.oschina.net/liyurong/blog/1608204">找到数组中左右两边的和相等的 pivot 的下标 Find Pivot Index</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>m 进制转 n 进制</title>
      <link href="/2019/03/02/convert-m-number-to-n-number/"/>
      <url>/2019/03/02/convert-m-number-to-n-number/</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>m 进制 -&gt; 十进制 -&gt; n 进制</li><li>利用柯里化生成函数（炫技 🐶）</li></ul><span id="more"></span><h2 id="m-进制-gt-十进制"><a href="#m-进制-gt-十进制" class="headerlink" title="m 进制 -&gt; 十进制"></a>m 进制 -&gt; 十进制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// carry 范围值: 2-36</span><br><span class="line">// origin 范围值: 0-9 [ascii 48-58], A-Z [65-90], a-z [97-122]</span><br><span class="line">func carryToDecimalism(_ carry: Int) -&gt; (_ origin: String) -&gt; Int &#123;</span><br><span class="line">    return &#123; origin in</span><br><span class="line">        // 得到字符串对应的 ascii 码</span><br><span class="line">        let asciis = origin.uppercased().unicodeScalars.map &#123; Int($0.value) &#125;</span><br><span class="line">        // 累加每一位</span><br><span class="line">        let result = asciis.reversed().enumerated().map &#123; (index, ascii) -&gt; Int in</span><br><span class="line">            var standard: Int</span><br><span class="line">            if 65 &lt;= ascii &amp;&amp; ascii &lt;= 90 &#123;</span><br><span class="line">                standard = ascii - 65 + 10</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                standard = ascii - 48</span><br><span class="line">            &#125;</span><br><span class="line">            return standard * Int(pow(Double(carry), Double(index)))</span><br><span class="line">        &#125;.reduce(0, +)</span><br><span class="line">        return result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let 十六进制转十进制 = carryToDecimalism(16)</span><br><span class="line">print(十六进制转十进制(&quot;1a&quot;)) // 26</span><br><span class="line"></span><br><span class="line">let 二进制转十进制 = carryToDecimalism(2)</span><br><span class="line">print(二进制转十进制(&quot;110&quot;)) // 6</span><br></pre></td></tr></table></figure><h2 id="十进制-gt-n-进制"><a href="#十进制-gt-n-进制" class="headerlink" title="十进制 -&gt; n 进制"></a>十进制 -&gt; n 进制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func decimalismToCarry(_ carry: Int) -&gt; (_ origin: Int) -&gt; String &#123;</span><br><span class="line">    return &#123; origin in</span><br><span class="line">        var result = [Int]()</span><br><span class="line">        var remain = origin</span><br><span class="line">        while remain &gt; 0 &#123;</span><br><span class="line">            result.append(remain % carry)</span><br><span class="line">            remain /= carry</span><br><span class="line">        &#125;</span><br><span class="line">        if carry &lt;= 10 &#123;</span><br><span class="line">            return result.reversed().map(String.init).joined()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return result.reversed().map &#123; i -&gt; String in</span><br><span class="line">                return i &lt; 10 ? String(i) : String(UnicodeScalar(i + 55)!)</span><br><span class="line">            &#125;.joined()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let 十进制转二进制 = decimalismToCarry(2)</span><br><span class="line">print(十进制转二进制(26)) // &quot;11010&quot;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://ascii.911cha.com/">ASCII 码对照表</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超长阶乘的计算</title>
      <link href="/2019/03/01/extra-long-factorials/"/>
      <url>/2019/03/01/extra-long-factorials/</url>
      
        <content type="html"><![CDATA[<p>打印 <code>n!</code> 的结果（1 &lt;&#x3D; n &lt;&#x3D; 100）。注意：当 <code>n &gt; 20</code> 时 64 位的 <code>Int</code> 将无法直接存储结果。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>将大数字用 <strong>数组</strong> 形式表示。比如 987 使用 [9,8,7] 代替。</li><li>每一位乘以 n，再进行进位操作，得到新数组。</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let nums = [9, 8, 7]</span><br><span class="line">let tmpNums = nums.map &#123; $0 * 2 &#125; // [18, 16, 14]</span><br><span class="line"></span><br><span class="line">// 遍历 tmpNums 每一个数字，进行进制操作</span><br><span class="line"></span><br><span class="line">[18, 16, 14] -&gt; [18, 17, 4] -&gt; [19, 7, 4] -&gt; [1, 9, 7, 4]</span><br><span class="line"></span><br><span class="line">print(tmpNums.map(String.init).joined()) // 1974</span><br></pre></td></tr></table></figure><h2 id="解答项目"><a href="#解答项目" class="headerlink" title="解答项目"></a>解答项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func extraLongFactorials(n: Int) -&gt; Void &#123;</span><br><span class="line">    guard n &gt; 0 else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 结果数组</span><br><span class="line">    var result: [Int] = [1]</span><br><span class="line">    for index in 1...n &#123;</span><br><span class="line">        // 数组翻转 从低位开始每一位乘以本次的数字</span><br><span class="line">        let tmpNums = result.reversed().map &#123; $0 * index &#125;</span><br><span class="line">        // 进位数</span><br><span class="line">        var carryNum = 0</span><br><span class="line">        // 重置结果</span><br><span class="line">        result = []</span><br><span class="line">        tmpNums.forEach &#123;</span><br><span class="line">            // 每一位加上上一位的进的数</span><br><span class="line">            let tmpNum = $0 + carryNum</span><br><span class="line">            // 向下一位进制的数</span><br><span class="line">            carryNum = tmpNum / 10</span><br><span class="line">            // 本位实际剩下的数 插入结果</span><br><span class="line">            result.append(tmpNum % 10)</span><br><span class="line">        &#125;</span><br><span class="line">        // 处理剩余进位数 进位数是可能大于 100</span><br><span class="line">        while carryNum &gt; 0 &#123;</span><br><span class="line">            // 逐渐插入进制</span><br><span class="line">            result.append(carryNum % 10)</span><br><span class="line">            carryNum /= 10</span><br><span class="line">        &#125;</span><br><span class="line">        // 翻转回数组</span><br><span class="line">        result = result.reversed()</span><br><span class="line">    &#125;</span><br><span class="line">    // 连接字符串</span><br><span class="line">    print(result.map(String.init).joined())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.hackerrank.com/challenges/extra-long-factorials/problem">Extra Long Factorials | HackerRank</a></li><li><a href="https://stackoverflow.com/questions/43830151/swift-3-calculate-factorial-number-result-becomes-too-high">Swift 3 calculate factorial number. Result becomes too high?</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastlane 入门使用</title>
      <link href="/2019/02/28/fastlane-getting-started/"/>
      <url>/2019/02/28/fastlane-getting-started/</url>
      
        <content type="html"><![CDATA[<img src="https://images.unsplash.com/37/QAdTsSj8TOOWzlyLn3Rg_14248396556_aefcd9a926_o.jpg?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=640&q=80" /><p>这次以 <a href="https://fastlane.tools/">fastlane</a> 为例，尝试项目中有什么事情可以被自动完成。</p><p>fastlane 是 Ruby scripts 的集合，安装方法不多说了见 <a href="https://docs.fastlane.tools/">官网文档</a>。</p><p>fastlane 中有但不限于以下工具集：</p><ul><li><a href="https://docs.fastlane.tools/actions/produce/">produce</a> 同时在 Apple Developer Portal 和 App Store Connect 中创建新的 iOS apps。</li><li><a href="https://docs.fastlane.tools/actions/cert/">cert</a> 自动创建和维护 iOS 签名证书。</li><li><a href="https://docs.fastlane.tools/actions/sigh/">sigh</a> 创建，更新，下载和修复配置文件。</li><li><a href="https://docs.fastlane.tools/actions/snapshot/">snapshot</a> 自动在每台设备上获取 iOS 应用的本地化屏幕截图。</li><li><a href="https://docs.fastlane.tools/actions/frameit/">frameit</a> 将您的屏幕截图放入正确的设备框架中。</li><li><a href="https://docs.fastlane.tools/actions/gym/">gym</a> 构建和打包您的 iOS apps。</li><li><a href="https://docs.fastlane.tools/actions/deliver/">deliver</a> 将截图，元数据和您的应用上传到 App Store。</li><li><a href="https://docs.fastlane.tools/actions/pem/">pem</a> 自动生成并更新推送通知配置文件。</li><li><a href="https://github.com/fastlane/fastlane/tree/master/spaceship">spaceship</a> 一个 Ruby 库能够访问苹果开发者中心和应用商店连接 api。</li><li><a href="https://docs.fastlane.tools/actions/pilot/">pilot</a> 自动化 TestFlight 部署并管理测试用户。</li><li><a href="https://github.com/fastlane/boarding">boarding</a> 邀请 beta 测试人员。</li><li><a href="https://docs.fastlane.tools/actions/match/">match</a> 使用 Git 同步整个团队的证书和配置文件。</li><li><a href="https://docs.fastlane.tools/actions/scan/">scan</a> 运行 app 测试。</li></ul><span id="more"></span><blockquote><p>实验环境：Xcode 10.1、Swift 4.2、fastlane 2.116.1、$99 开发者账户</p></blockquote><h2 id="项目添加-fastlane"><a href="#项目添加-fastlane" class="headerlink" title="项目添加 fastlane"></a>项目添加 fastlane</h2><p>在项目根目录下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure><p>在出现 <code>What would you like to use fastlane for?</code> 是选择 <code>4 Manual setup</code>，在根据提示回车确认。</p><p>之后项目文件中将新增：</p><ul><li><code>Gemfile</code> 这个文件包含了 fastlane gem 的依赖</li><li><code>fastlane</code> 这个文件夹包含<ul><li><code>Appfile</code> 存储 app identifier，Apple ID 以及 fastlane 设置 app 所需的任何其他标识信息</li><li><code>Fastfile</code> 管理 lanes 创建的可被调用的 actions</li></ul></li></ul><h2 id="创建-App"><a href="#创建-App" class="headerlink" title="创建 App"></a>创建 App</h2><p>打开 <code>Fastfile</code> 将里面所有内容替换为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default_platform(:ios)</span><br><span class="line"></span><br><span class="line">platform :ios do</span><br><span class="line"># 1 lane 的描述</span><br><span class="line">  desc &quot;Create app on Apple Developer and App Store Connect sites&quot;</span><br><span class="line"># 2 create_app 是这个 lane 的名字</span><br><span class="line">  lane :create_app do</span><br><span class="line"># 3 使用 produce action 将 app 添加到 Developer Portal 和 App Store Connect</span><br><span class="line">​    produce</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>打开 <code>Appfile</code> 将 <code>apple_id</code> 前的 # 移除，将 <code>[[APPLE_ID]]</code> 替换为真实 Apple ID，这样 fastlane 将不会反复提示你输入。</p><p>如果 App Store Connect 和 Apple Developer Portal 可以将 <code>apple_id</code> 替换为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apple_dev_portal_id(&quot;[[APPLE_DEVELOPER_ACCOUNT_USERNAME]]&quot;)</span><br><span class="line">itunes_connect_id(&quot;[[APP_STORE_CONNECT_ACCOUNT_USERNAME]]&quot;)</span><br></pre></td></tr></table></figure><p>打开命令行在项目目录输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastlane create_app</span><br></pre></td></tr></table></figure><p>根据提示输入密码，之后将提示你输入 bundle ID，以反 host 格式创建 ID，之后是 App name 最长 30 个字符。</p><p>完成后登陆 Apple Developer Center 和 App Store Connect，app 在二者已经都被创建了。</p><p>再次打开 Appfile 将 <code>app_identifier</code> 填写刚才创建的 bundle ID。</p><h2 id="生成交付文件"><a href="#生成交付文件" class="headerlink" title="生成交付文件"></a>生成交付文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bundle exec fastlane deliver</span><br></pre></td></tr></table></figure><p>根据提醒暂不使用 Swift 代替 Ruby，因为 <code>fastlane.swift</code> 现在为 beta。</p><p>完成后 fastlane 文件夹中新增：</p><ul><li><code>metadata</code> 这个文件夹存放了 app 大部分的 metadata 元数据</li><li><code>Deliverfile</code> 保存这剩余小部分的元数据</li><li><code>screenshots</code> 将保存 app 截图</li></ul><img src="https://tva1.sinaimg.cn/large/006tKfTcly1g0lz3u80l5j31eb0e6q8a.jpg" alt="fastlane-getting-started-metadata"/><p><code>metadata</code> 文件夹中文件内容就是提交给 App Store Connect，多语言 app 可以手动创建对应的语言文件夹。</p><p>更多 <code>deliver</code> 参数见 <a href="https://docs.fastlane.tools/actions/deliver/#more-options">这里</a></p><h2 id="自动截图"><a href="#自动截图" class="headerlink" title="自动截图"></a>自动截图</h2><p>多种设备和多语言 app 的截图是繁杂的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastlane snapshot init</span><br></pre></td></tr></table></figure><p>fastlane 文件夹中新增：<code>Snapfile</code>，将里面的所有内容替换为一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 - 想截图的设备列表</span><br><span class="line"></span><br><span class="line">devices([</span><br><span class="line">  &quot;iPhone 8 Plus&quot;,</span><br><span class="line">  &quot;iPhone SE&quot;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"># 2 - 支持的语言列表</span><br><span class="line"></span><br><span class="line">languages([</span><br><span class="line">  &#x27;en-US&#x27;,</span><br><span class="line">  &#x27;fr-FR&#x27;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"># 3 - 包含 UI Tests 的 scheme 名字</span><br><span class="line"></span><br><span class="line">scheme(&quot;mZone Poker UITests&quot;)</span><br><span class="line"></span><br><span class="line"># 4 - 截图存储位置</span><br><span class="line"></span><br><span class="line">output_directory &quot;./fastlane/screenshots&quot;</span><br><span class="line"></span><br><span class="line"># 5 - 是否清理之前的截图</span><br><span class="line"></span><br><span class="line">clear_previous_screenshots(true)</span><br></pre></td></tr></table></figure><p>保存关闭，然后命令中执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastlane snapshot init</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/006tKfTcly1g0m3olslyhj30vq0ft44l.jpg" alt="fastlane-getting-started-screenshots" style="width: 600px; display: block; margin: auto;" /><h3 id="创建-Test-Target"><a href="#创建-Test-Target" class="headerlink" title="创建 Test Target"></a>创建 Test Target</h3><p>在 Xcode 选择 File -&gt; New -&gt; Target 选择 iOS UI Testing Bundle 点击 Next。</p><img src="https://tva1.sinaimg.cn/large/006tKfTcly1g0m6hxg0dej30m80g0781.jpg" alt="fastlane-getting-started-screenshots" style="width: 600px; display: block; margin: auto;" /><p>Product Name 输入上面 <code>scheme</code> 填写的名字 MZone Poker UITests 点击 Finish。</p><p>之后将 fastlane 文件夹中的 SnapshotHelper.swift 拖到 mZone Poker UITests 中。</p><p>之后将 mZone_Poker_UITests.swift 中的 setUp() 和 tearDown() 移除，替换 testExample()：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1 设置截屏和启动 app</span><br><span class="line">let app = XCUIApplication()</span><br><span class="line">setupSnapshot(app)</span><br><span class="line">app.launch()</span><br><span class="line">// 2 点击 Chip Count 输入框（在 Storyboard 中的 accessibility identifier 设置 &quot;chip count&quot;）然后输入 10</span><br><span class="line">let chipCountTextField = app.textFields[&quot;chip count&quot;]</span><br><span class="line">chipCountTextField.tap()</span><br><span class="line">chipCountTextField.typeText(&quot;10&quot;)</span><br><span class="line">// 3 点击 Big Blind 输入框 然后输入 100</span><br><span class="line">let bigBlindTextField = app.textFields[&quot;big blind&quot;]</span><br><span class="line">bigBlindTextField.tap()</span><br><span class="line">bigBlindTextField.typeText(&quot;100&quot;)</span><br><span class="line">// 4 截图</span><br><span class="line">snapshot(&quot;01UserEntries&quot;)</span><br><span class="line">// 5 点击 what should i do 再进行截图</span><br><span class="line">app.buttons[&quot;what should i do&quot;].tap()</span><br><span class="line">snapshot(&quot;02Suggestion&quot;)</span><br></pre></td></tr></table></figure><p>之后创建 mZone Poker UITests scheme，点击 run stop 右边的按钮选择 <code>Manage Schemes...</code></p><img src="https://tva1.sinaimg.cn/large/006tKfTcly1g0m88o46ovj30m80ccdit.jpg" alt="fastlane-getting-started-create-test-target" style="width: 600px; display: block; margin: auto;" /><p>选择 <code>Edit Schemes...</code> 勾选 <code>Test</code> 和 <code>Run</code></p><img src="https://tva1.sinaimg.cn/large/006tKfTcly1g0m8eq3o8uj30m80c0di3.jpg" alt="fastlane-getting-started-create-test-target" style="width: 600px; display: block; margin: auto;" /><p>打开 Fastfile 添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc &quot;Take screenshots&quot;</span><br><span class="line">lane :screenshot do</span><br><span class="line">  snapshot</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>命令行执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bundle exec fastlane screenshot</span><br></pre></td></tr></table></figure><p>完成后将自动打开：</p><img src="https://tva1.sinaimg.cn/large/006tKfTcly1g0m8gy5vl9j30df0dwgpb.jpg" alt="fastlane-getting-started-create-test-target" style="width: 600px; display: block; margin: auto;" /><h2 id="创建-IPA-文件"><a href="#创建-IPA-文件" class="headerlink" title="创建 IPA 文件"></a>创建 IPA 文件</h2><p>首先要确保已经 <code>target</code> 设置 <code>bundle identifier</code> 和 <code>signing identity</code>。</p><p>命令行执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastlane gym init</span><br></pre></td></tr></table></figure><p>打开 <code>Gymfile</code> 替换为以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 指定 scheme</span><br><span class="line">scheme(&quot;mZone Poker&quot;)</span><br><span class="line"># 2 指定存放 .ipa 文件夹</span><br><span class="line">output_directory(&quot;./fastlane/builds&quot;)</span><br><span class="line"># 3 从构建中排除 bitcode。Bitcode 允许 Apple 优化你的 app，但是现在排除它以提高构建速度。</span><br><span class="line">include_bitcode(false)</span><br><span class="line"># 4 从构建中排除符号。包含符号允许 Apple 访问应用程序的调试信息，但是现在排除它以提高构建速度。</span><br><span class="line">include_symbols(false)</span><br><span class="line"># 5 允许 Xcode 使用自动配置。</span><br><span class="line">export_xcargs(&quot;-allowProvisioningUpdates&quot;)</span><br></pre></td></tr></table></figure><p>打开 <code>Fastfile</code> 添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc &quot;Create ipa&quot;</span><br><span class="line">lane :build do</span><br><span class="line">  # 1 允许 Xcode 自动配置</span><br><span class="line">  enable_automatic_code_signing</span><br><span class="line">  # 2 构建号自增（App Store Connect 要求构建号不能重复）</span><br><span class="line">  increment_build_number</span><br><span class="line">  # 3 创建签名的 .ipa 文件</span><br><span class="line">  gym</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>保存后命令行执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bundle exec fastlane build</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/006tKfTcly1g0m8ua4im3j30xy0ceaca.jpg" alt="fastlane-getting-started-create-test-target" style="width: 600px; display: block; margin: auto;" /><h2 id="上传到-App-Store-Connect"><a href="#上传到-App-Store-Connect" class="headerlink" title="上传到 App Store Connect"></a>上传到 App Store Connect</h2><p>使用 <code>deliver</code> 将截图、元数据、.ipa 文件上传到 App Store Connect。</p><p>替换 <code>Deliverfile</code> 内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1 价格为 0 则是免费应用</span><br><span class="line">price_tier(0)</span><br><span class="line"># 2 回答 Apple 在手动提交审核时会向您呈现的问题</span><br><span class="line">submission_information(&#123;</span><br><span class="line">    export_compliance_encryption_updated: false,</span><br><span class="line">    export_compliance_uses_encryption: false,</span><br><span class="line">    content_rights_contains_third_party_content: false,</span><br><span class="line">    add_id_info_uses_idfa: false</span><br><span class="line">&#125;)</span><br><span class="line"># 3 提供应用评级配置位置</span><br><span class="line">app_rating_config_path(&quot;./fastlane/metadata/app_store_rating_config.json&quot;)</span><br><span class="line"># 4 提供.ipa文件位置</span><br><span class="line">ipa(&quot;./fastlane/builds/mZone Poker.ipa”)</span><br><span class="line"># 5 将s ubmit_for_review 设置为 true 以自动提交应用以供审核</span><br><span class="line">submit_for_review(true)</span><br><span class="line"># 6 必须在应用审核接受后手动发布应用</span><br><span class="line">automatic_release(false)</span><br></pre></td></tr></table></figure><p>在 <code>Fastfile</code> 中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc &quot;Upload to App Store&quot;</span><br><span class="line">lane :upload do</span><br><span class="line">  deliver</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>然后命令行执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bundle exec fastlane upload</span><br></pre></td></tr></table></figure><p>完成后，登录 App Store Connect。屏幕截图，元数据和构建应该在那里，等待审查。</p><h2 id="将命令放在一起"><a href="#将命令放在一起" class="headerlink" title="将命令放在一起"></a>将命令放在一起</h2><p>打开 <code>Fastfile</code> 添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc &quot;Create app, take screenshots, build and upload to App Store&quot;</span><br><span class="line">lane :do_everything do</span><br><span class="line">  create_app</span><br><span class="line">  screenshot</span><br><span class="line">  build</span><br><span class="line">  upload</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>在 <code>Deliverfile</code> 添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">force(true)</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bundle exec fastlane do_everything</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.raywenderlich.com/233168-fastlane-tutorial-getting-started">fastlane Tutorial: Getting Started</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Swifter - Swift 开发者必备 Tips】笔记</title>
      <link href="/2019/02/15/swifter-tips-reading-notes/"/>
      <url>/2019/02/15/swifter-tips-reading-notes/</url>
      
        <content type="html"><![CDATA[<p>再读王巍的【Swifter - Swift 开发者必备 Tips】，看看有什么新收获。</p><h2 id="柯里化（Currying）"><a href="#柯里化（Currying）" class="headerlink" title="柯里化（Currying）"></a>柯里化（Currying）</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96]">柯里化</a> 是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术，这个词自己是第一次见到。</p><p>自己的理解就是：把接受多个参数的函数变换为，先接受一个参数，然后返回一个函数，这个函数再接受其他参数。</p><p>两个细节：</p><ul><li>只有一个参数，并且这个参数是该函数的第一个参数。必须按照参数的定义顺序来调用柯里化函数。</li><li>柯里化函数的函数体只会执行一次，只会在调用完最后一个参数的时候执行柯里化函数体。</li></ul><span id="more"></span><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 一个数加 x 的函数</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">addTo</span>(<span class="keyword">_</span> <span class="params">adder</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; adder <span class="operator">+</span> <span class="variable">$0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// +2</span></span><br><span class="line"><span class="keyword">let</span> addTwo <span class="operator">=</span> addTo(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> addTwo(<span class="number">6</span>) <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// +10</span></span><br><span class="line"><span class="keyword">let</span> addTen <span class="operator">=</span> addTo(<span class="number">10</span>)</span><br><span class="line">addTen(<span class="number">6</span>) <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><p>柯里化是一种量产相似方法的好办法，可以通过柯里化一个方法模板来避免写出很多重复代码，也方便了今后维护。</p><p>书中还提到了一个封装 <a href="https://oleb.net/blog/2014/07/swift-instance-methods-curried-functions/?utm_campaign=iOS_Dev_Weekly_Issue_157&utm_medium=email&utm_source=iOS%252BDev%252BWeekly">Selector</a> 的例子，但是没懂，欢迎指教。</p><p>Reference:</p><ul><li><a href="https://www.jianshu.com/p/5b27fec8c616">Swift 函数柯里化介绍及使用场景</a></li></ul><h2 id="将-protocol-的方法声明为-mutating"><a href="#将-protocol-的方法声明为-mutating" class="headerlink" title="将 protocol 的方法声明为 mutating"></a>将 protocol 的方法声明为 mutating</h2><p><code>protocol</code> 不仅可以被 <code>class</code> 类型实现，也适用于 <code>struct</code> 和 <code>enum</code>。因为这个原因就要考虑定义的方法是否应该使用 <code>mutating</code> 来修饰。在 <code>protocl</code> 中使用 <code>mutating</code> 修饰的方法，对于 <code>class</code> 的实现是完全透明的。</p><h2 id="多元组（Tuple）"><a href="#多元组（Tuple）" class="headerlink" title="多元组（Tuple）"></a>多元组（Tuple）</h2><p>python 中有见过类似。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 交互数据</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">swapMe</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">a</span>: <span class="keyword">inout</span> <span class="type">T</span>, <span class="keyword">_</span> <span class="params">b</span>: <span class="keyword">inout</span> <span class="type">T</span>) &#123;</span><br><span class="line">    (a, b) <span class="operator">=</span> (b, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="operator">=</span> <span class="number">20</span></span><br><span class="line">swapMe(<span class="operator">&amp;</span>a, <span class="operator">&amp;</span>b) <span class="comment">// a: 20  b: 10</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 可读的返回值</span></span><br><span class="line"><span class="keyword">let</span> rect <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line"><span class="keyword">let</span> (slice, remainder) <span class="operator">=</span> rect.divided(atDistance: <span class="number">20</span>, from: .minYEdge)</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice &#123;x 0 y 0 w 100 h 20&#125;</span></span><br><span class="line"><span class="comment">// remainder &#123;x 0 y 20 w 100 h 80&#125;</span></span><br></pre></td></tr></table></figure><h2 id="autoclosure-和"><a href="#autoclosure-和" class="headerlink" title="@autoclosure 和 ??"></a><code>@autoclosure</code> 和 <code>??</code></h2><p><code>@autoclosure</code> 做的事情就是把一句表达式自动的封装成一个闭包（closure）。这样有时候在语法上看起来就会非常漂亮。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">logIfTrue</span>(<span class="keyword">_</span> <span class="params">predicate</span>: <span class="keyword">@autoclosure</span> () -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> predicate() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logIfTrue(<span class="number">2</span> <span class="operator">&gt;</span> <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 而不是 logIfTrue &#123; 2 &gt; 1 &#125;</span></span><br></pre></td></tr></table></figure><p>Swift 把 <code>2 &gt; 1</code> 这个表达式自动转换为 <code>() -&gt; Bool</code>。</p><p>Swift 中 <code>??</code> 定义为：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">??&lt;</span><span class="type">T</span><span class="operator">&gt;</span>(optional: <span class="type">T</span>?, defaultValue: <span class="keyword">@autoclosure</span> () -&gt; <span class="type">T</span>?) -&gt; <span class="type">T</span>?</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">??&lt;</span><span class="type">T</span><span class="operator">&gt;</span>(optional: <span class="type">T</span>?, defaultValue: <span class="keyword">@autoclosure</span> () -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 猜测 ?? 的实现</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">??&lt;</span><span class="type">T</span><span class="operator">&gt;</span>(optional: <span class="type">T</span>?, defaultValue: <span class="keyword">@autoclosure</span>() -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">optional</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> .some(<span class="keyword">let</span> value):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> defaultValue()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>@autoclosure</code> 来修饰默认值看起来有些画蛇添足，但是如果默认值是通过一系列复杂计算得到话，在 optional 不为 <code>nil</code> 的情况下就会造成浪费。<code>@autoclosure</code> 将计算推迟到 <code>optional</code> 为 <code>nil</code>。</p><h2 id="escaping"><a href="#escaping" class="headerlink" title="@escaping"></a><code>@escaping</code></h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">doWork</span>(<span class="params">block</span>: () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    block()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doWork &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;work&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里默认了一个隐藏假设：参数中 <code>block</code> 的内容会在 <code>doWork</code> 发会之前就完成了，也就是说，对于 <code>block</code> 的调用是同步行为。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">doWorkAsync</span>(<span class="params">block</span>: <span class="keyword">@escaping</span> () -&gt; ()) &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        block()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@escaping</code> 表明这个闭包是会 <strong>逃逸</strong> 出该方法。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> foo <span class="operator">=</span> <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method1</span>() &#123;</span><br><span class="line">        doWork &#123;</span><br><span class="line">            <span class="built_in">print</span>(foo)</span><br><span class="line">        &#125;</span><br><span class="line">        foo <span class="operator">=</span> <span class="string">&quot;method1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;</span><br><span class="line">        doWorkAsync &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">self</span>.foo)</span><br><span class="line">        &#125;</span><br><span class="line">        foo <span class="operator">=</span> <span class="string">&quot;method2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method3</span>() &#123;</span><br><span class="line">        foo <span class="operator">=</span> <span class="string">&quot;method4&quot;</span></span><br><span class="line">        doWorkAsync &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">self</span><span class="operator">?</span>.foo <span class="operator">??</span> <span class="string">&quot;nil&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        foo <span class="operator">=</span> <span class="string">&quot;method3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">S</span>().method1()  <span class="comment">// foo - 同步</span></span><br><span class="line"><span class="type">S</span>().method2()  <span class="comment">// method2 - 强引用造成？</span></span><br><span class="line"><span class="type">S</span>().method3()  <span class="comment">// nil - 已经释放</span></span><br></pre></td></tr></table></figure><h2 id="Optional-Chaining"><a href="#Optional-Chaining" class="headerlink" title="Optional Chaining"></a>Optional Chaining</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> playClosure <span class="operator">=</span> &#123; (child: <span class="type">Child</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    child.pet<span class="operator">?</span>.toy<span class="operator">?</span>.play()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>Void</code> 是不合理的，因为真正的结果是一个 <code>Optional</code> 的结果，所有应该为 <code>Void?</code>。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> playClosure <span class="operator">=</span> &#123; (child: <span class="type">Child</span>) -&gt; <span class="type">Void</span>? <span class="keyword">in</span></span><br><span class="line">    child.pet<span class="operator">?</span>.toy<span class="operator">?</span>.play()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断方法是否调用成功：</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> result <span class="operator">=</span> playClosure &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;happy&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;can&#x27;t play&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PromiseKit 入门使用</title>
      <link href="/2019/01/19/promisekit-getting-started/"/>
      <url>/2019/01/19/promisekit-getting-started/</url>
      
        <content type="html"><![CDATA[<img src="https://images.unsplash.com/photo-1579208570378-8c970854bc23?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=640&q=80" /><p>在 GitHub Trending 中总是看到 <a href="https://github.com/mxcl/PromiseKit">mxcl&#x2F;PromiseKit</a> 它是主要解决的是 “回调地狱” 的问题，决定尝试用一下。</p><blockquote><p>环境：Swift 4.2、PromiseKit 6</p></blockquote><h2 id="then-and-done"><a href="#then-and-done" class="headerlink" title="then and done"></a>then and done</h2><p>下面是一个典型的 promise 链式（chain）调用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    login()</span><br><span class="line">&#125;.then &#123; creds in</span><br><span class="line">    fetch(avatar: creds.user)</span><br><span class="line">&#125;.done &#123; image in</span><br><span class="line">    self.imageView = image</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>如果这段代码使用完成回调（<code>completion handler</code>）实现，他将是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">login &#123; creds, error in</span><br><span class="line">    if let creds = creds &#123;</span><br><span class="line">        fetch(avatar: creds.user) &#123; image, error in</span><br><span class="line">            if let image = image &#123;</span><br><span class="line">                self.imageView = image</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>then</code> 是完成回调的另一种方式，但是它更丰富。在处级阶段的理解，它更具有可读性。上面的 promise chain 更容易阅读和理解：一个异步操作接着另一个，一行接一行。它与程序代码非常接近，因为我们很容易得到 Swift 的当前状态。</p><p><code>done</code> 与 <code>then</code> 基本是一样的，但是它将不再返回 promise。它是典型的在末尾 “success” 部分的 chain。在上面的例子 <code>done</code> 中，我们接收到了最终的图片并使用它设置了 UI。</p><p>让我们对比一下两个 <code>login</code> 的方法签名：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Promise:</span><br><span class="line">func login() -&gt; Promise&lt;Creds&gt;</span><br><span class="line"></span><br><span class="line">// Compared with:</span><br><span class="line">func login(completion: (Creds?, Error?) -&gt; Void)</span><br><span class="line">                    // 可选型，两者都是可选</span><br></pre></td></tr></table></figure><p>区别在于 promise，方法返回 promises 而不是的接受和运行回调。每一个处理器（handler）都会返回一个 promise。Promise 对象们定义 <code>then</code> 方法，该方法在继续链式调用之前等待 promise 的完成。chains 在程序上解决，一次一个 promise。</p><p>Promise 代表未来异步方法的输入值。它有一个表示它包装的对象类型的类型。例如，在上面的例子里，<code>login</code> 的返回 Promise 值代表一个 Creds 的一个实例。</p><p>可以注意到这与 completion pattern 的不同，promises chain 似乎忽略错误。并不是这样，实际上：promise chain 使错误处理更容易访问（accessible），并使错误更难被忽略。</p><h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><p>有了 promises，错误在 promise chain 上级联（cascade along），确保你的应用的健壮（robust）和清晰的代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    login()</span><br><span class="line">&#125;.then &#123; creds in</span><br><span class="line">    fetch(avatar: creds.user)</span><br><span class="line">&#125;.done &#123; image in</span><br><span class="line">    self.imageView = image</span><br><span class="line">&#125;.catch &#123;</span><br><span class="line">    // 整个 chain 上的错误都到了这里</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你忘记了 catch 这个 chain，Swift 会发出警告</p></blockquote><p>每个 promise 都是一个表示单个（individual）异步任务的对象。如果任务失败，它的 promise 将成为 <code>rejected</code>。产生 <code>rejected</code> promises 将跳过后面所有的 <code>then</code>，而是将执行 <code>catch</code>。（严格上说是执行后续所有的 <code>catch</code> 处理）</p><p>这与 completion handler 对比：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func handle(error: Error) &#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">login &#123; creds, error in</span><br><span class="line">    guard let creds = creds else &#123; return handle(error: error!) &#125;</span><br><span class="line">    fetch(avatar: creds.user) &#123; image, error in</span><br><span class="line">        guard let image = image else &#123; return handle(error: error!) &#125;</span><br><span class="line">        self.imageView.image = image</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>guard</code> 和合并错误对处理有所保证，但是 promise chain 更具有可读性。</p><h2 id="ensure"><a href="#ensure" class="headerlink" title="ensure"></a>ensure</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    UIApplication.shared.isNetworkActivityIndicatorVisible = true</span><br><span class="line">    return login()</span><br><span class="line">&#125;.then &#123;</span><br><span class="line">    fetch(avatar: $0.user)</span><br><span class="line">&#125;.done &#123;</span><br><span class="line">    self.imageView = $0</span><br><span class="line">&#125;.ensure &#123;</span><br><span class="line">    UIApplication.shared.isNetworkActivityIndicatorVisible = false</span><br><span class="line">&#125;.catch &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论在 chain 哪里结束，成功或者失败，<code>ensure</code> 终将被执行。也可以使用 <code>finally</code> 来完成相同的事情，区别是没有返回值。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">spinner(visible: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">firstly &#123;</span><br><span class="line">    foo()</span><br><span class="line">&#125;.done &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;.catch &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;.finally &#123;</span><br><span class="line">    <span class="keyword">self</span>.spinner(visible: <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><p>多个异步操作同时处理时可能又难又慢。例如当 <code>操作1</code> 和 <code>操作2</code> 都完成时再返回结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 串行操作</span><br><span class="line">operation1 &#123; result1 in</span><br><span class="line">    operation2 &#123; result2 in</span><br><span class="line">        finish(result1, result2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 并行操作</span><br><span class="line">var result1: ...!</span><br><span class="line">var result2: ...!</span><br><span class="line">let group = DispatchGroup()</span><br><span class="line">group.enter()</span><br><span class="line">group.enter()</span><br><span class="line">operation1 &#123;</span><br><span class="line">    result1 = $0</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line">operation2 &#123;</span><br><span class="line">    result2 = $0</span><br><span class="line">    group.leave()</span><br><span class="line">&#125;</span><br><span class="line">group.notify(queue: .main) &#123;</span><br><span class="line">    finish(result1, result2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使人 Promises 将变得容易很多：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    when(fulfilled: operation1(), operation2())</span><br><span class="line">&#125;.done &#123; result1, result2 in</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>when</code> 等待所有的完成再返回 promises 结果。</p><h2 id="PromiseKit-扩展"><a href="#PromiseKit-扩展" class="headerlink" title="PromiseKit 扩展"></a>PromiseKit 扩展</h2><p>PromiseKit 提过了一些 Apple API 的扩展，例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    CLLocationManager.promise()</span><br><span class="line">&#125;.then &#123; location in</span><br><span class="line">    CLGeocoder.reverseGeocode(location)</span><br><span class="line">&#125;.done &#123; placemarks in</span><br><span class="line">    self.placemark.text = &quot;\(placemarks.first)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时需要指定 subspaces：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &quot;PromiseKit&quot;</span><br><span class="line">pod &quot;PromiseKit/CoreLocation&quot;</span><br><span class="line">pod &quot;PromiseKit/MapKit&quot;</span><br></pre></td></tr></table></figure><p>更多的扩展可以查询 <a href="https://github.com/PromiseKit">PromiseKit organization</a>，甚至扩展了 <a href="https://github.com/PromiseKit/Alamofire-">Alamofire</a> 这样的公共库。</p><h2 id="制作-Promises"><a href="#制作-Promises" class="headerlink" title="制作 Promises"></a>制作 Promises</h2><p>有时你的 chains 仍然需要以自己开始，或许你使用的三方库没有提供 promises 或者自己写了异步系统，没关系，他们非常容易添加 promises。如果你查看了 PromiseKit 的标准扩展，可以看到使用了下面相同的描述：</p><p>已有代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func fetch(completion: (String?, Error?) -&gt; Void)</span><br></pre></td></tr></table></figure><p>转换：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func fetch() -&gt; Promise&lt;String&gt; &#123;</span><br><span class="line">    return Promise &#123; fetch(completion: $0.resolve) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更具有可读性的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func fetch() -&gt; Promise&lt;String&gt; &#123;</span><br><span class="line">    return Promise &#123; seal in</span><br><span class="line">        fetch &#123; result, error in</span><br><span class="line">            seal.resolve(result, error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise 初始化程序提供的 <code>seal</code> 对象定义了很多处理 <code>garden-variety</code> 完成回调的方法。</p><blockquote><p>PromiseKit 设置尝试以 <code>Promise(fetch)</code> 进行处理，但是完成通过编译器的消歧义。</p></blockquote><h2 id="Guarantee"><a href="#Guarantee" class="headerlink" title="Guarantee"></a>Guarantee<T></h2><p>从 PromiseKit 5 开始，提供了 Guarantee 以做补充，目的是完善 Swift 强的的异常处理。</p><p><code>Guarantee</code> 永远不会失败，所以不能被 <code>rejected</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    after(seconds: 0.1)</span><br><span class="line">&#125;.done &#123;</span><br><span class="line">    // 这里不要加 catch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Guarantee</code> 的语法相较更简单：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func fetch() -&gt; Promise&lt;String&gt; &#123;</span><br><span class="line">    return Guarantee &#123; seal in</span><br><span class="line">        fetch &#123; result in</span><br><span class="line">            seal(result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 减少为</span><br><span class="line"></span><br><span class="line">func fetch() -&gt; Promise&lt;String&gt; &#123;</span><br><span class="line">    return Guarantee(resolver: fetch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map-compactMap-等"><a href="#map-compactMap-等" class="headerlink" title="map compactMap 等"></a>map compactMap 等</h2><ul><li><code>then</code> 要求返回另一个 promise</li><li><code>map</code> 要求返回一个 object 或 value 类型</li><li><code>compactMap</code> 要求返回一个 可选型，如过返回 <code>nil</code>，chain 将失败并报错 <code>PMKError.compactMap</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    URLSession.shared.dataTask(.promise, with: rq)</span><br><span class="line">&#125;.compactMap &#123;</span><br><span class="line">    try JSONSerialization.jsonObject($0.data) as? [String]</span><br><span class="line">&#125;.done &#123; arrayOfStrings in</span><br><span class="line">    // ...</span><br><span class="line">&#125;.catch &#123; error in</span><br><span class="line">    // Foundation.JSONError if JSON was badly formed</span><br><span class="line">    // PMKError.compactMap if JSON was of different type</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外还有：<code>thenMap</code> <code>compactMapValues</code> <code>firstValue</code> etc</p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p><code>get</code> 会得到 <code>done</code> 中相同值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    foo()</span><br><span class="line">&#125;.get &#123; foo in</span><br><span class="line">    // ...</span><br><span class="line">&#125;.done &#123; foo in</span><br><span class="line">    // same foo!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h2><p>为 debug 提供 <code>tap</code>，与 <code>get</code> 类似但是可以得到 <code>Result&lt;T&gt;</code> 这样就可以检查 chain 上的值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    foo()</span><br><span class="line">&#125;.tap &#123;</span><br><span class="line">    print($0)</span><br><span class="line">&#125;.done &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;.catch &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="firstly"><a href="#firstly" class="headerlink" title="firstly"></a>firstly</h3><p>上面例子中的 <code>firstly</code> 是语法糖，非必须但是可以让 chains 更有可读性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firstly &#123;</span><br><span class="line">    login()</span><br><span class="line">&#125;.then &#123; creds in</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 也可以</span><br><span class="line">login().then &#123; creds in</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：<code>login()</code> 返回了一个 <code>Promise</code>，同时所有的 <code>Promise</code> 有一个 <code>then</code> 方法。<code>firstly</code> 返回一个 <code>Promise</code>，同样 <code>then</code> 也返回一个 <code>Promise</code>。</p><h3 id="when-变种"><a href="#when-变种" class="headerlink" title="when 变种"></a>when 变种</h3><ul><li><code>when(fulfilled:)</code> 在所有异步操作执行完后才执行回调，一个失败 chain 将 rejects。It’s important to note that all promises in the when continue. Promises have no control over the tasks they represent. Promises are just wrappers around tasks.</li><li><code>when(resolved:)</code> 使一个或多个组件承诺失败也会等待。此变体 <code>when</code> 生成的值是 <code>Result&lt;T&gt;</code> 的数组，所有要保证相同的泛型。</li><li><code>race</code> 只要有一个异步操作执行完毕，就立刻执行 <code>then</code> 回调。其它没有执行完毕的异步操作仍然会继续执行，而不是停止。</li></ul><h3 id="Swift-闭包接口"><a href="#Swift-闭包接口" class="headerlink" title="Swift 闭包接口"></a>Swift 闭包接口</h3><p>Swift 有自动推断返回值和单行返回。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo.then &#123;</span><br><span class="line">    bar($0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// is the same as:</span><br><span class="line"></span><br><span class="line">foo.then &#123; baz -&gt; Promise&lt;String&gt; in</span><br><span class="line">    return bar(baz)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样有好有坏，具体可以查询 <a href="https://github.com/mxcl/PromiseKit/blob/master/Documentation/Troubleshooting.md">Troubleshooting</a></p><h2 id="更多阅读"><a href="#更多阅读" class="headerlink" title="更多阅读"></a>更多阅读</h2><ul><li>强力建议阅读 <a href="https://mxcl.dev/PromiseKit/reference/v6/Classes/Promise.html">API Reference</a></li><li>在 Xcode 使用 optinon-click 阅读 PromiseKit 代码</li><li>在网上有一些 PMK &lt; 5 的文章，里面的 API 有些不同要注意</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/mxcl/PromiseKit/blob/master/Documentation/GettingStarted.md">Getting Started</a></li><li><a href="https://www.hangge.com/blog/cache/detail_2231.html">Swift - 异步编程库 PromiseKit 使用详解 1（安装配置、基本用法）</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾 2018</title>
      <link href="/2018/12/31/review-2018/"/>
      <url>/2018/12/31/review-2018/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=476618833&auto=0&height=32"></iframe><p>重新翻阅的自己工作邮件的发件箱，回顾一年工作。新年伊始自己还是在开发 P 项目的 iOS App，开始写 Q&amp;A 功能。一些不算太难的 tableView 布局的需求，对我来说，都是头大的问题。</p><p>这段时期招聘时的面试，竟成为我学习 App 开发的一扇小窗。</p><p>年前收到了奖金还是挺开心的。leader 新年寄语：</p><ul><li>要发声，要当主力</li><li>当有好的想法时，要学会说服别人</li><li>要有耐心，Yifan 需要时间的沉淀</li></ul><p>前两点意思差不多，这段时间思想上困扰我的是：自己对自己的定位是一个初级工程师，认为会的东西、经验不多，见识少，我尊重比我年长的工程师的想法与观点，也相信他们是经过长远思考过的。这个思维设定，我觉得没有什么问题。但是也许有人忽略了 <strong>责任</strong>，对方案负责，对项目负责。开发方案一再重建性修改，接口结构没有规范。</p><p>2017 的总结说胜利属于伏地魔，本想苟着发育，这时发现：苟是苟不住的，这个世界 <strong>需要英雄</strong> carry。</p><p>后来我感觉应该将公司看做一个舞台，舞台上有灯光、音效就要利用，展示自己、锻炼自己，即使是出糗，那就整理整理再来一次，who care? 成长是最重要的。</p><p>Course 模块是前工程师用 Objective-C 写的，离职后一直没有再维护，过年期间自己重构了所有 Objective-C 的代码，项目完全转为了一个纯 Swift 项目。使用 Realm 作为数据本地化方案，选择的原因也很朴素，GitHub 哪个星多我就优先选用什么。</p><p>后来参考 <a href="https://github.com/6ag">Jack Feng - 6ag</a> 的几个 Swift 开源项目，新创建了 P 项目的工具 App，也对主项目结构做了重新的整理，在这里再次特别感谢。</p><p>西安运营部的成立，加多了 C 项目的后台需求，难以都顾及项目两头。使用 laravel-admin 搭建新后台，也开始使用 Docker 部署项目，感觉从此离不开 Docker 了，像极了遇到 Git 时的感觉。</p><p>C 项目主站的前端是在服务端渲染，非常传统的模式，多个工程师转手也是十分混乱。参考了 <a href="https://baijunyao.com/">白俊遥</a> 工程的博客、laravel 项目，修改了项目结构，添加了 gulp 工具制定了工作流，虽然没有实现前后端的完全分离，但终究是向现代化前端走出了一步。</p><p>转眼就到了年中调薪，公司不含糊，薪水涨到了我满意的值。这对我很关键，调整的不单单是我的薪水，也调整了我的心态。因为当时我认为没有强的工程师、甚至归我负责，却拿着比我还高的薪水。现在总算是有了一个平衡。</p><p>不断向 C 项目投入更多的资源，项目 <strong>指标</strong> 的要求越来越多。比如：优化了项目、优化了查询，到底优化了多少，怎么量化？这些在之前一直不被重视，改好了就都算叫优化了。项目中出现的问题错误，都要查找真实具体的原因，而不是说一个可能的什么原因，就当解答的了。我一开始也很难适应这些，但心里是认同的。</p><p>C 项目数据源重新整理，终于摸到了一次算法的边。“你觉的算法没用，是因为你不会。” 数据标记、正确率、召回率、特征词提取、文本相似度、词条打分、背包算法…… 一段最让人回忆的开发经历，与业务开发完全不同的模式。</p><p>C 项目衍生出新项目 G，我一个人做，一次实践 Laravel 框架的机会。</p><p>再次和 Z 哥合作了一个 App 项目，私活做的真是的太累了，极不推荐。其实这段时期工作上并没有在做 iOS，因为这个项目没让自己 iOS 的技能凉下来，为后面回归 iOS 项目保持了状态。</p><p>参加了年度的 Swift 大会，在群里简单了很多大佬、看过博客的工程师，没想到他们都很乐意加微信。也发现他们相互都认识，这就是圈子吧。</p><p>2018 是世界杯年，我不懂球就是看个热闹，最开心的是公司有活动基金，我拉着不少新同事们吃喝了不少。冬季后发展成了和同事的每周的火锅，真挺快乐的。</p><p>买了心心念的 Switch 叫的闪送，上午下单一会后，就像收外卖一样收了机子。荒野之息是好玩，呃… 男主竟然叫林克不是塞尔达，你敢想？</p><p>因为 MSI 的胜利开始关注 RNG LPL。这年 LPL 后面的比赛我基本都看了，中午还会看 dys 的直播实况。洲际赛 RW 救世主真是精彩，“当没人相信你的时候，你自己相信了自己，并且赢得了胜利，这便是成为英雄的道路。” 登峰造極 2018 我们是冠军。</p><p>永利*暴雷崩盘，损失不少，派出所报案。家里，多年的期房要发钥匙了，感恩父母。一次团建向比比求婚成功。</p><p>这年最后一天是在三亚，吃到了棒棒的早晨，去了蜈支洲岛，感受了乘风破浪，遇到了一个有趣的东北司机，参加了酒店的晚会，看了喝酒赢到的电影。</p><p>2018 Happy Ending.</p><blockquote><p>做了一个梦 我们 iG 拿冠军了 啊哈哈哈…<br>我说是不是假的 确实是个梦吧，<br>但是就是当时虽然在做 但是特别开心。<br>所以我们尽量就是自己努力一下，<br>然后每个人发挥好一点的话，<br>我觉得真的有可能 也可以拿冠军的。</p></blockquote><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二分查找 Binary Search</title>
      <link href="/2018/12/10/binary-search/"/>
      <url>/2018/12/10/binary-search/</url>
      
        <content type="html"><![CDATA[<p>快速从一个数组中查找一个元素。</p><h2 id="Linear-Search-线性查找"><a href="#Linear-Search-线性查找" class="headerlink" title="Linear Search 线性查找"></a>Linear Search 线性查找</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func linearSearch&lt;T: Equatable&gt;(_ a: [T], _ key: T) -&gt; Int? &#123;</span><br><span class="line">    for i in 0 ..&lt; a.count &#123;</span><br><span class="line">        if a[i] == key &#123;</span><br><span class="line">            return i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性查找在最坏情况：遍历了整个数组，但没有找到合适的元素。平均要遍历一半的元素性能为 <code>O(n)</code>，而二分查找的效率为 <code>O(log n)</code>，也就是说一个有 <code>1,000,000</code> 元素的数组只需要 <code>20</code> 步就可以找到想要的元素 <code>log_2(1,000,000) = 19.9</code>。</p><span id="more"></span><p>但是二分查找要求数组必须是排好序。</p><p>二分查找步骤：</p><ol><li>将数组分为两半。</li><li>判断想要找的元素是在左边数组还是右边，这也是数组需要排好顺序的原因。</li><li>如果要的元素在左边，就将左边的数组分成更小的两部分，并判断要的元素在哪部分。</li><li>重复步骤直到找到想要的元素。如果数组不能进一步查分，就说明要找的元素不在数组中。</li></ol><p>divide-and-conquer</p><h2 id="The-code"><a href="#The-code" class="headerlink" title="The code"></a>The code</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func binarySearch&lt;T: Comparable&gt;(_ a: [T], key: T, range: Range&lt;Int&gt;) -&gt; Int? &#123;</span><br><span class="line">    if range.lowerBound &gt;= range.upperBound &#123;</span><br><span class="line">        // If we get here, then the search key is not present in the array.</span><br><span class="line">        return nil</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Calculate where to split the array.</span><br><span class="line">        let midIndex = range.lowerBound + (range.upperBound - range.lowerBound) / 2</span><br><span class="line"></span><br><span class="line">        // Is the search key in the left half?</span><br><span class="line">        if a[midIndex] &gt; key &#123;</span><br><span class="line">            return binarySearch(a, key: key, range: range.lowerBound ..&lt; midIndex)</span><br><span class="line"></span><br><span class="line">        // Is the search key in the right half?</span><br><span class="line">        // 这里 + 1 的原因是排除 midIndex 中间值</span><br><span class="line">        &#125; else if a[midIndex] &lt; key &#123;</span><br><span class="line">            return binarySearch(a, key: key, range: midIndex + 1 ..&lt; range.upperBound)</span><br><span class="line"></span><br><span class="line">        // If we get here, then we&#x27;ve found the search key!</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return midIndex</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 19 numbers</span><br><span class="line">let numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]</span><br><span class="line"></span><br><span class="line">// 0 ..&lt; numbers.count 覆盖所有范围</span><br><span class="line">binarySearch(numbers, key: 43, range: 0 ..&lt; numbers.count)  // gives 13</span><br></pre></td></tr></table></figure><p>二分查找是将数组分为两个，但是我们不需要正真的创建两个新数组。取而代之，我们使用 Swift <code>Range</code> 对象跟踪这些拆分。左闭右开。upperBound 总是比最后一个元素的索引多一。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">midIndex = (lowerBound + upperBound) / 2</span><br></pre></td></tr></table></figure><p>如果这样写将存在一个 bug，就是当这两值非常大时，将存在一个越界的问题。</p><h2 id="Iterative-vs-recursive-迭代-vs-递归"><a href="#Iterative-vs-recursive-迭代-vs-递归" class="headerlink" title="Iterative vs recursive 迭代 vs 递归"></a>Iterative vs recursive 迭代 vs 递归</h2><p>二分查找本质是递归。</p><p>使用迭代的方式实现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func binarySearch(_ a: [Int], key: Int) -&gt; Int? &#123;</span><br><span class="line">    var lowerBound = 0</span><br><span class="line">    var upperBound = a.count</span><br><span class="line">    while lowerBound &lt; upperBound &#123;</span><br><span class="line">        // 这行僵硬了 没有必要的</span><br><span class="line">        var range = lowerBound ..&lt; upperBound</span><br><span class="line">        let midIndex = range.lowerBound + (range.upperBound - range.lowerBound) / 2</span><br><span class="line">        let midValue = a[midIndex]</span><br><span class="line">        if key &lt; midValue &#123;</span><br><span class="line">            upperBound = midIndex</span><br><span class="line">        &#125; else if key &gt; midValue &#123;</span><br><span class="line">            lowerBound = midIndex + 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return midIndex</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h2><p>查找前数组一定要先排序吗？这取决于排序花费的时间，有时候：数组排序加二分查找比线性搜索还要慢。二分查找的优势在于一次排序后多次查找。</p><p>文章代码：<a href="https://github.com/imzyf/data-structure-and-algorithm/tree/master/004-Binary%20Search">GitHub - imzyf&#x2F;data-structure-and-algorithm&#x2F;004-Binary Search&#x2F;</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/raywenderlich/swift-algorithm-club/tree/master/Binary%20Search">raywenderlich&#x2F;swift-algorithm-club&#x2F;Binary Search</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序 Insertion Sort</title>
      <link href="/2018/11/24/insertion-sort/"/>
      <url>/2018/11/24/insertion-sort/</url>
      
        <content type="html"><![CDATA[<p>将一个数组从高到低或者从低到高排序。</p><p>插入排序算法的工作原理：</p><ol><li>将若干数字放在一个数组里，数组是乱序的。</li><li>从数组中挑选一个数字，它是哪个并不重要，但是为了方便我们挑选数组头部的这个。</li><li>将这个数字插入到一个新的数组里。</li><li>从乱序数组里挑选下一个数字也将它放到新数组里。这个数字要么在第一个数字前或者后，所以这个两个数字是被排序的。</li><li>再次重从乱序数组里挑选下一个数字也将它放到新数组里，并将数字放在正确的位置。</li><li>一直如此进行直到乱序数组中没有数字。这时也将等到一个排序好的新数组。</li></ol><span id="more"></span><p>自己的一个实现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let array = [2, 1, 3, 8, 3, 5, 4]</span><br><span class="line"></span><br><span class="line">var newArray = [Int]()</span><br><span class="line">for (k, v) in array.enumerated() &#123;</span><br><span class="line">    for (nK, nV) in newArray.enumerated() &#123;</span><br><span class="line">        // 本次的数 小于 存在的数的第一个(nv)</span><br><span class="line">        if v &lt; nV &#123;</span><br><span class="line">            newArray.insert(v, at: nK)</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 没有插入成功 放在末尾</span><br><span class="line">    if newArray.count &lt; k + 1 &#123;</span><br><span class="line">        newArray.append(v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="In-place-sort"><a href="#In-place-sort" class="headerlink" title="In-place sort"></a>In-place sort</h2><p>上面的排序需要两个数组，一个原始的，一个排好顺序的。但是我们也可以 <em>就地排序</em> 无需创建一个额外的数组。我们只需要跟踪记录原始数组中哪里部分排好顺序了，哪一部分还没有排序。</p><p>举例：<code>[ 8, 3, 5, 4, 6 ]</code> 使用 <code>|</code> 分割是否排好顺序的部分。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 开始时 | 在最前</span><br><span class="line">[| 8, 3, 5, 4, 6 ]</span><br><span class="line"></span><br><span class="line">// 开始向左移动，左侧只有个 8 无论什么顺序都是正确的，右侧是未排序的部分</span><br><span class="line">[ 8 | 3, 5, 4, 6 ]</span><br><span class="line"></span><br><span class="line">// 依次进行 将未排序的头部元素放在已排部分的正确位置</span><br><span class="line">[ 3, 8 | 5, 4, 6 ]</span><br><span class="line">[ 3, 5, 8 | 4, 6 ]</span><br><span class="line">[ 3, 4, 5, 8 | 6 ]</span><br><span class="line">[ 3, 4, 5, 6, 8 |]</span><br></pre></td></tr></table></figure><p>每次 <code>|</code> 移动，都对左侧进行排序，未排序的部分逐渐减少，排序部分增加。直到未排序部分为零。</p><h2 id="How-to-insert"><a href="#How-to-insert" class="headerlink" title="How to insert"></a>How to insert</h2><p>将未排序的头部元素放在已排部分的正确位置，如何这到这点的？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 从此状态开始。下个说的 4，我们需要将 4 插入到 [ 3, 5, 8 ] 这个已经排好的数组里</span><br><span class="line">[ 3, 5, 8 | 4, 6 ]</span><br><span class="line"></span><br><span class="line">// 移动 |，这时我们注意 8 这个元素</span><br><span class="line">[ 3, 5, 8, 4 | 6 ]</span><br><span class="line">        ^</span><br><span class="line"></span><br><span class="line">// 8 大于 4，所有 8 应该在 4 的右边，8 与 4 进行位置调换</span><br><span class="line">[ 3, 5, 4, 8 | 6 ]</span><br><span class="line">        &lt;--&gt;</span><br><span class="line">      swapped</span><br><span class="line"></span><br><span class="line">// 将 4 与现在的前面的元素 5 进行比较，5 大于 4，所以 5 与 4 进行位置调换</span><br><span class="line">[ 3, 4, 5, 8 | 6 ]</span><br><span class="line">     &lt;--&gt;</span><br><span class="line">    swapped</span><br><span class="line"></span><br><span class="line">// 3 小于 4 这个数，所以我们完成了对 4 的排序，这时从头到 |，是排好顺序的</span><br><span class="line">[ 3, 4, 5, 8 | 6 ]</span><br></pre></td></tr></table></figure><p>这就是对插入排序算法的内循环的描述。</p><h2 id="The-code"><a href="#The-code" class="headerlink" title="The code"></a>The code</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func insertionSort(_ array: [Int]) -&gt; [Int] &#123;</span><br><span class="line">    // 1</span><br><span class="line">    var a = array</span><br><span class="line">    // 2</span><br><span class="line">    for x in 1..&lt;a.count &#123;</span><br><span class="line">        var y = x</span><br><span class="line">        // 3</span><br><span class="line">        while y &gt; 0 &amp;&amp; a[y] &lt; a[y - 1] &#123;</span><br><span class="line">            a.swapAt(y - 1, y)</span><br><span class="line">            y -= 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将 <code>array</code> 复制一个副本。因为我们无法直接修改参数中的 <code>array</code>，就想 Swift 自身的 <code>sort()</code>，<code>insertionSort()</code> 将返回一个排序顺序的副本数组。</li><li>两个循环在方法中。外层循环遍历轮到排序的元素，也就是从待排数组中挑选出头部的元素。<code>x</code> 索引为排好顺序的结尾索引同时也是待排数组的开头。记住，如何时间从开头到 <code>x</code> 永远都是排好顺序的，从 <code>x</code> 到最后的元素都是未排序的。</li><li>内层循环查询 x 索引位置的元素。这个元素可能小于之前排序顺序数组中的每一个元素。内层循环从后倒序遍历每一个已排序的元素，每次发现这个元素之前的元素比它大，则交互位置。当内层循环完成时，数组从开头到 x 将又是已排序的。</li></ol><p>tip：外层循环从索引 1 开始，而不是 0。将第一个元素从堆移动到排序部分实际上并没有改变任何东西，所以我们不妨跳过它。</p><h2 id="No-more-swaps"><a href="#No-more-swaps" class="headerlink" title="No more swaps"></a>No more swaps</h2><p>上面的插入排序可以正常的工作了。我们还可以通过移除调用 swap() 让程序更快一些。</p><p>我们可以将所有需要换位置的元素向右移动一个位置，然后将新数字复制到正确的位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ 3, 5, 8, 4 | 6 ]   remember 4</span><br><span class="line">           *</span><br><span class="line"></span><br><span class="line">[ 3, 5, 8, 8 | 6 ]   shift 8 to the right</span><br><span class="line">        ---&gt;</span><br><span class="line"></span><br><span class="line">[ 3, 5, 5, 8 | 6 ]   shift 5 to the right</span><br><span class="line">     ---&gt;</span><br><span class="line"></span><br><span class="line">[ 3, 4, 5, 8 | 6 ]   copy 4 into place</span><br><span class="line">     *</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func insertionSort(_ array: [Int]) -&gt; [Int] &#123;</span><br><span class="line">    var a = array</span><br><span class="line">    for x in 1..&lt;a.count &#123;</span><br><span class="line">        var y = x</span><br><span class="line">        let temp = a[y]</span><br><span class="line">        // tip</span><br><span class="line">        while y &gt; 0 &amp;&amp; temp &lt; a[y - 1] &#123;</span><br><span class="line">            // 1</span><br><span class="line">            a[y] = a[y - 1]</span><br><span class="line">            y -= 1</span><br><span class="line">        &#125;</span><br><span class="line">        // 2</span><br><span class="line">        a[y] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    return a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>原本需要换位置的元素右移一个位置。</li><li>当内层结束时，<code>y</code> 的索引位置就是新元素的排序后的位置，将元素放在此。</li></ol><p>tip：这里我自己写成了 <code>while y &gt; 0 &amp;&amp; a[y] &lt; a[y - 1]</code> 这是不对的，因为我要找的是 <strong>原本</strong> 的 <code>a[y]</code> 的位置，但是循环一次后 <code>a[y]</code> 将发生变化。</p><h2 id="Making-it-generic"><a href="#Making-it-generic" class="headerlink" title="Making it generic"></a>Making it generic</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func insertionSort&lt;T&gt;(_ array: [T], _ isOrderedBefore: (T, T) -&gt; Bool) -&gt; [T] &#123;</span><br><span class="line">    var a = array</span><br><span class="line">    for x in 1..&lt;a.count &#123;</span><br><span class="line">        var y = x</span><br><span class="line">        let temp = a[y]</span><br><span class="line">        while y &gt; 0, isOrderedBefore(temp, a[y - 1])  &#123;</span><br><span class="line">            a[y] = a[y - 1]</span><br><span class="line">            y -= 1</span><br><span class="line">        &#125;</span><br><span class="line">        a[y] = temp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过闭包来执行大小比较。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let numbers = [ 10, -1, 3, 9, 2, 27, 8, 5, 1, 3, 0, 26 ]</span><br><span class="line">insertionSort(numbers, &lt;)</span><br><span class="line"></span><br><span class="line">let objects = [ obj1, obj2, obj3, ... ]</span><br><span class="line">insertionSort(objects) &#123; $0.priority &lt; $1.priority &#125;</span><br></pre></td></tr></table></figure><p>插入排序是一种稳定 <code>stable</code> 的排序。当排序后具有相同排序键的元素保持相同的相对顺序时，排序是稳定的。这对于诸如数字或字符串之类的简单值并不重要，但在排序更复杂的对象时这很重要。在上面的示例中，如果两个对象具有相同的优先级，则无论其他属性的值如何，这两个对象都不会被交换。</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>最差的插入排序是 <code>O(n^2)</code> 因为俩个相近的循环嵌套。其他排序算法（如快速排序和合并排序）具有 <code>O(n log n)</code> 性能，在大输入时速度更快。</p><p>插入排序实际上对于排序小数组非常快。某些标准库具有排序功能，当分区大小为 <code>10</code> 或更小时，可以从快速排序切换到插入排序。</p><p>将 <code>insertSort()</code> 与 Swift 的内置 <code>sort()</code> 进行比较。在大约 <code>100</code> 元素左右的阵列上，速度差异很小。但是，随着输入变大，<code>O(n^2)</code> 快速开始执行比 <code>O(n log n)</code> 差很多，并且插入排序无法跟上。</p><p>文章代码：<a href="https://github.com/imzyf/data-structure-and-algorithm/tree/master/003-Insertion%20Sort">GitHub - imzyf&#x2F;data-structure-and-algorithm&#x2F;003-Insertion Sort&#x2F;</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/raywenderlich/swift-algorithm-club/tree/master/Insertion%20Sort">raywenderlich&#x2F;swift-algorithm-club&#x2F;Insertion Sort</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列 Queue Data Structure</title>
      <link href="/2018/11/22/queue-data-structure/"/>
      <url>/2018/11/22/queue-data-structure/</url>
      
        <content type="html"><![CDATA[<p>实现一个 <code>队列</code>，包括 <code>enqueue</code>、<code>dequeue</code>、<code>peek</code>。</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p><code>队列</code> 核心也是 array，A queue gives you a FIFO or first-in, first-out order. 队列是：先进先出的。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">Queue</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> array <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="enqueue"><a href="#enqueue" class="headerlink" title="enqueue"></a>enqueue</h2><p>进队，在数组尾部追加元素。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">enqueue</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    array.append(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h2><p>出队，将首位的元素移除。因为首位元素移除后，其他元素依次向前移动，所以是 O(n)。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// 使用数组自身的方法，而不是 array.count &gt; 0</span></span><br><span class="line">    <span class="keyword">return</span> array.isEmpty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">dequeue</span>() -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="comment">// 使用定义的变量</span></span><br><span class="line">    <span class="keyword">if</span> isEmpty &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h2><p>查看队首元素。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// peek() 改为更有语义话的只读变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> front: <span class="type">T</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> array.first</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化出队"><a href="#优化出队" class="headerlink" title="优化出队"></a>优化出队</h2><p>在出队后不移动元素而是移动 <code>起始索引</code>，就像动的收银台而不是排队的人。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 优化 队列 的出队</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">OptimizedQueue</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 这里改为了可选型，为了可以清理无效的元素</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> array <span class="operator">=</span> [<span class="type">T</span>?]()</span><br><span class="line">    <span class="comment">/// 起始索引</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> head <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> count: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 减去 起始索引 前面的数量</span></span><br><span class="line">        <span class="keyword">return</span> array.count <span class="operator">-</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="comment">// 根据实际数量判断</span></span><br><span class="line">        <span class="keyword">return</span> count <span class="operator">==</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保持不变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">enqueue</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">T</span>) &#123;</span><br><span class="line">        array.append(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">dequeue</span>() -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> head <span class="operator">&lt;</span> array.count,</span><br><span class="line">            <span class="keyword">let</span> element <span class="operator">=</span> array[head] <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 置空当前位置元素</span></span><br><span class="line">        array[head] <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="comment">// 前移起始索引</span></span><br><span class="line">        head <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 空索引的占用比例</span></span><br><span class="line">        <span class="keyword">let</span> percentage <span class="operator">=</span> <span class="type">Double</span>(head)<span class="operator">/</span><span class="type">Double</span>(array.count)</span><br><span class="line">        <span class="comment">// 50 0.25 都是魔法数字，主要是为了控制数组修剪的频率，可以自行调整</span></span><br><span class="line">        <span class="keyword">if</span> array.count <span class="operator">&gt;</span> <span class="number">50</span> <span class="operator">&amp;&amp;</span> percentage <span class="operator">&gt;</span> <span class="number">0.25</span> &#123;</span><br><span class="line">            <span class="comment">// 将起始空元素删除</span></span><br><span class="line">            array.removeFirst(head)</span><br><span class="line">            <span class="comment">// 重置 起始索引</span></span><br><span class="line">            head <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> element</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> front: <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据 起始索引进行 返回</span></span><br><span class="line">            <span class="keyword">return</span> array[head]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文章代码：<a href="https://github.com/imzyf/data-structure-and-algorithm/tree/master/002-Queue">GitHub - imzyf&#x2F;data-structure-and-algorithm&#x2F;002-Queue&#x2F;</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/raywenderlich/swift-algorithm-club/tree/master/Queue">raywenderlich&#x2F;swift-algorithm-club&#x2F;Queue</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈 Stack Data Structure</title>
      <link href="/2018/11/22/stack-data-structure/"/>
      <url>/2018/11/22/stack-data-structure/</url>
      
        <content type="html"><![CDATA[<p>加入 <a href="https://github.com/raywenderlich/swift-algorithm-club">Swift Algorithm Club</a> &#x2F;‘ælgə’rɪðəm&#x2F;，回炉重新学习数据结构与算法。</p><p>自己创建的项目：<a href="https://github.com/imzyf/data-structure-and-algorithm">GitHub - imzyf&#x2F;data-structure-and-algorithm</a>。</p><p>实现一个 <code>栈</code> &#x2F;stæk&#x2F;，包含 <code>push</code> <code>peek</code> <code>pop</code> 与 <code>Generics</code> 泛型。</p><span id="more"></span><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p><code>栈</code> 非常像一个数组，它包括少量的方法。</p><ul><li>push 添加一个新元素到栈顶</li><li>pop 从栈顶移除一个元素</li><li>peek 查看栈顶的一个元素但是不 pop</li></ul><p>A stack gives you a LIFO or last-in first-out order. 栈是后进先出，队列是先进先出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public struct Stack&lt;Element&gt; &#123;</span><br><span class="line">    fileprivate var array: [Element] = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p><code>push</code> 是在数组的尾部添加元素是以 <code>O(1)</code>，如果是在数组最前添加是 <code>O(n)</code> 这是昂贵的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public mutating func push(_ element: Element) &#123;</span><br><span class="line">  array.append(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为使用的 <code>struct</code>，修改属性值的方法要加 <code>mutating</code>。</p><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>想从一个空栈中弹出最后一个元素将返回 <code>nil</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public mutating func pop(_ element: Element) &#123;</span><br><span class="line">    return array.popLast()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h2><p>与 <code>pop</code> 有点像，但是并没有移除栈顶的元素。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// peek 改为更加语义化的 top 只读变量</span><br><span class="line">public var top: T? &#123;</span><br><span class="line">    return array.last</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>两个其他的常用属性，栈是否为空，栈中元素的个数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public var isEmpty: Bool &#123;</span><br><span class="line">  return array.isEmpty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public var count: Int &#123;</span><br><span class="line">  return array.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.raywenderlich.com/800-swift-algorithm-club-swift-stack-data-structure">Swift Algorithm Club: Swift Stack Data Structure</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Too many symbol files</title>
      <link href="/2018/10/30/correct-too-many-symbol-files-issues/"/>
      <url>/2018/10/30/correct-too-many-symbol-files-issues/</url>
      
        <content type="html"><![CDATA[<p>在上传 App 到 App Store 后收到邮件，有 issues <strong>Too many symbol files</strong>。在之前看到 _Your delivery was successful_，此 issues 不影响发布，所以一直搁置了。</p><p>今天决定彻底处理下。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>先说 <code>*.symbols</code> 这文件是干嘛的，我现在（2018-10）对此的理解：</p><ul><li>symbols 为符号表文件</li><li>符号表是内存地址与函数名、文件名、行号的映射表 <code>&lt;起始地址&gt; &lt;结束地址&gt; &lt;函数&gt; [&lt;文件名:行号&gt;]</code></li></ul><p>为什么要配置符号表？</p><p>为了能快速并准确地定位用户 App 发生 <strong>Crash 的代码位置</strong>，使用符号表对 App 发生 Crash 的程序 <em>堆栈</em> 进行 <em>解析</em> 和 _还原_。</p><p><img src="https://user-images.githubusercontent.com/9289792/80204521-9ea54a80-865b-11ea-9420-7d8a2d32e910.jpg" alt="006tNbRwly1fwq98vcjeoj30i00383yh"></p><h2 id="项目情况"><a href="#项目情况" class="headerlink" title="项目情况"></a>项目情况</h2><p>再说下项目情况，因为数字都是用了的是 Int，为防止 32 位设备发生越界情况（理由好像有点扯），所以项目端设置了设备限制 <code>arm64</code>，也就是 5s 之前的设备不可以安装。</p><p>因为使用了三方库，但是三方库是支持 32 位设备的，所以生成了冗余的 symbols 文件。</p><p>查询 symbols 文件的生成情况：Xcode Window -&gt; Organizer 选择有问题的 archive，右击选择 Show in finder，命令行进入 *.app 中的 dSYMs 文件夹，执行 <code>dwarfdump --uuid *</code> 可以查询到是否生成了多余的文件。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在 <code>Podfile</code> 中：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line">  installer.pods_project.targets.each do |target|</span><br><span class="line">    target.build_configurations.each do |config|</span><br><span class="line">      config.build_settings[&#x27;ENABLE_BITCODE&#x27;] = &#x27;NO&#x27;</span><br><span class="line">      config.build_settings[&#x27;ARCHS&#x27;] = &#x27;arm64&#x27;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>在 <code>info.plist</code> 中：</p><figure class="highlight plist"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UIRequiredDeviceCapabilities<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>arm64<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 build Settings 搜索 <code>valid architecture</code> 中，填写 <code>arm64</code></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/25755240/too-many-symbol-files-after-successfully-submitting-my-apps">“Too many symbol files” after successfully submitting my apps</a></li><li><a href="https://stackoverflow.com/questions/34313049/too-many-symbol-files-warnning-when-submitting-app">“Too many symbol files” warnning when submitting app</a></li><li><a href="https://www.jianshu.com/p/3511ec38ca20">App 提交 iTunes Connect,”二进制无效”问题解决方案。</a></li><li><a href="https://bugly.qq.com/docs/user-guide/symbol-configuration-ios/?v=20180709165613#_2">Bugly iOS 符号表配置</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 MySQL 中选择合适的日期类型</title>
      <link href="/2018/05/25/select-the-appropriate-date-type-in-mysql/"/>
      <url>/2018/05/25/select-the-appropriate-date-type-in-mysql/</url>
      
        <content type="html"><![CDATA[<p>如何在 MySQL 中选择合适的日期类型困扰了很久，<code>varchar</code>、<code>int</code>、<code>timestamp</code>、<code>datetime</code> 都有尝试过，近来有所感悟，做此总结。</p><p>注：此总结考虑了 PHP 和 Laravel 框架的特点。</p><h2 id="使用-varchar"><a href="#使用-varchar" class="headerlink" title="使用 varchar"></a>使用 varchar</h2><p><code>varchar</code> 存储日期时间的格式完全可以自己控制，<code>月/日/年</code> 还是 <code>年-月-日</code> 需求怎么说就怎么存，读取后展示是也不用在格式化。同时伏笔也就此埋下：日期时间格式没强制约束，总有一天字段里出现了与众不同的格式；要是日期时间会 <em>变化</em> 或作为 <em>查询条件</em> 或要进行 <em>排序</em> 时就又是一坑，还是要格式化标准格式再处理。可以说 <code>varchar</code> 应该是最差的选择了。</p><span id="more"></span><h2 id="使用-int-与-timestamp"><a href="#使用-int-与-timestamp" class="headerlink" title="使用 int 与 timestamp"></a>使用 int 与 timestamp</h2><p>PHP <code>time()</code> 可以直接获取当前时间戳秒数，数据库字段要也是 <code>int</code> 一存就完事了，不会有格式问题，谁用什么样转什么样。但是在数据库工具中查看此字段时显示不够直观，范围时会不方便，这些在使用 <code>timestamp</code> 是会得到解决。</p><p>timestamp 是我一直迷惑的一个类型。我写了几个例子做测试：</p><ol><li>将 Laravel 项目设置为 <code>CST</code> 中国标准时间，MySQL 时区设置为 <code>UTC</code>，使用 <code>now()</code> 获取当前日期时间，比如：<code>2018-5-25 11:00:00</code> 存入 <code>timestamp</code> 类型的字段中，使用数据库工具查看字段结果为仍然为 <code>2018-5-25 11:00:00</code>。</li><li>继续上面的操作，项目中使用查询语句查询刚才的记录，结果显示为 <code>2018-5-25 11:00:00</code>，将项目时区从 <code>CST</code> 改为 <code>UTC</code> 后再次查询的结果仍然为 <code>2018-5-25 11:00:00</code> 没有变化。</li><li>继续上面的操作，将数据库的时区改为 <code>+8:00</code>，数据库工具、项目查询后的结果为 <code>2018-5-25 19:00:00</code> 发生了变化，修改项目为 <code>CST</code> 查询结果是 <code>2018-5-25 19:00:00</code> 和刚才一样也变化了。</li></ol><p>这个测试说明了：</p><ul><li>项目的时区影响的是 PHP 的时区，影响的是 <code>now()</code> 产生的日期时间。</li><li>一个日期时间从项目存入数据库时，这个日期时间的时区是数据库设置的时区，和项目无关了。传入什么样子数据库存什么样子，更换了参照系，但是没有转换日期时间。</li><li>从数据库中读一个时间戳日期时间，这个是时间戳日期时间受到数据库的时区影响，和项目的时区无关。</li></ul><p>我现在认识的结论：</p><ul><li>因为数据库时区不可能轻易改变，所以依靠数据库转换时区不可能。</li><li>没看出来时间戳对于处理时区对 <code>datatime</code> 有什么过人之处，若有就是时间戳将时间标准设置在了 <code>UTC</code>，占 4 字节更小些。</li><li>数据库时区和项目时区不一致可能会坑，如果一直不一致同时各个项目也一直错下去，没不会有察觉。</li><li>对应国际化项目，是不是应该将数据库和项目还有服务器都设置为 <code>UTC</code>？谁使用谁根据用户的时区进行处理。</li></ul><h2 id="使用-timestamp-与-datetime"><a href="#使用-timestamp-与-datetime" class="headerlink" title="使用 timestamp 与 datetime"></a>使用 timestamp 与 datetime</h2><p><code>datetime</code> 字段类型存储的时间不会随时间库时区发生变化，占 8 个字节，可存储 <code>1000-01-01 00:00:00</code> 到 <code>9999-12-31 23:59:59</code>。而时间戳只能存储 <code>1970</code> 年到 <code>2038</code> 年多，<code>2038</code> 还有 20 年怎么感觉马上就到了。</p><p><code>datetime</code> 个人推荐的存储时间的格式。</p><h2 id="时区处理常见问题"><a href="#时区处理常见问题" class="headerlink" title="时区处理常见问题"></a>时区处理常见问题</h2><p>北京用户在北京时间 <code>2018-05-27 10:00:00</code> 发布一个文章。</p><p>如果在前端发布日期时间为 <code>2018-05-27 10:00:00</code>，在北京用户看来是没问题的，但是在美国的用户看来是奇怪的，因为美国没有到 <code>2018-05-27 10:00:00</code> 他们甚至还在 26 日。</p><p>这时 <code>1 min ago</code> 这种展示形式就解决了这个问题，<code>ago</code> 是一种绝对的方式，在一个月之后再显示完整的日期时间，此时世界各地肯定已经度过了这个要展示日期时间，无论在哪国用户显示 <code>2018-05-27 10:00:00</code> 都不会奇怪了。</p><p>同时也要注意，我们将各个时区都设置为 <code>UTC</code> 后，<code>ago</code> 的时间很好计算，但是在一个月之后日前时间完全显示，美国用户看北京用户的发布日期时间也应该是在中国看来的 <code>2018-05-27 10:00:00</code>，此发布日期不应该以美国用户为标准。这个问题的解决方法还在考虑，日期时间是存储多个字段来区分用于显示或比较，还是自行转换处理，需要实践测试。</p><h2 id="MySQL-查看、修改时区"><a href="#MySQL-查看、修改时区" class="headerlink" title="MySQL 查看、修改时区"></a>MySQL 查看、修改时区</h2><h3 id="查看时区"><a href="#查看时区" class="headerlink" title="查看时区"></a>查看时区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; select now();   # 或 select curtime();</span><br><span class="line"></span><br><span class="line">&gt; show variables like &quot;%time_zone%&quot;; # SELECT @@global.time_zone, @@session.time_zone;</span><br><span class="line">+------------------+--------+</span><br><span class="line">| Variable_name    | Value  |</span><br><span class="line">+------------------+--------+</span><br><span class="line">| system_time_zone | CST    |</span><br><span class="line">| time_zone        | SYSTEM |</span><br><span class="line">+------------------+--------+</span><br><span class="line"></span><br><span class="line"># time_zone 说明 mysql 使用 system 的时区，system_time_zone 说明 system 使用 CST 时区</span><br></pre></td></tr></table></figure><h3 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; set global time_zone = &#x27;+8:00&#x27;;  # 修改 mysql 全局时区为北京时间，即我们所在的东8区</span><br><span class="line">&gt; set time_zone = &#x27;+8:00&#x27;;  # 修改当前会话时区 SET time_zone = &#x27;Asia/Shanghai&#x27;</span><br><span class="line">&gt; flush privileges;  # 立即生效</span><br></pre></td></tr></table></figure><p>通过修改 <code>my.cnf</code> 配置文件来修改时区</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vim /etc/my.cnf</span><br><span class="line"># 在[mysqld]区域中加上</span><br><span class="line">default-time-zone=&#x27;+8:00&#x27;</span><br><span class="line"></span><br><span class="line"># /etc/init.d/mysqld restart  # 重启 mysql 使新时区生效</span><br></pre></td></tr></table></figure><h2 id="最后的总结"><a href="#最后的总结" class="headerlink" title="最后的总结"></a>最后的总结</h2><p>全球化的项目应当考虑：</p><ul><li>项目、数据库、服务器都建议设置为 <code>UTC</code></li><li>要考虑时分秒的字段用 <code>datetime</code> 类型，不用考虑时分秒的字段用 <code>date</code></li><li><code>created_at</code> 和 <code>updated_at</code> 字段，考虑 <code>Laravel</code> 框架的特点使用 <code>timestamp</code></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://coolnull.com/4091.html">mysql 修改时区的几种方法</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGINX 禁止 IP 访问</title>
      <link href="/2018/05/20/nginx-ip-forbidden/"/>
      <url>/2018/05/20/nginx-ip-forbidden/</url>
      
        <content type="html"><![CDATA[<p>禁止 IP 访问，其他域名跳转到 <code>www.xxx.com</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 55.66.77.88;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.xxx.com xxx.com;</span><br><span class="line"></span><br><span class="line">    return 301 https://www.xxx.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line"></span><br><span class="line">    #...</span><br><span class="line"></span><br><span class="line">    if ($host = 55.66.77.88) &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($host != &#x27;www.xxx.com&#x27;)&#123;</span><br><span class="line">        rewrite ^/(.*)$ https://www.xxx.com/$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Laravel 教程 - Web 开发实战入门】读书笔记</title>
      <link href="/2018/05/09/laravel-essential-training-reading-notes/"/>
      <url>/2018/05/09/laravel-essential-training-reading-notes/</url>
      
        <content type="html"><![CDATA[<p><a href="https://laravel-china.org/courses?rf=10678">Laravel 教程 - Web 开发实战入门</a> 读书笔记。</p><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><h3 id="Laravel-与-PHP"><a href="#Laravel-与-PHP" class="headerlink" title="Laravel 与 PHP"></a>Laravel 与 PHP</h3><p><code>Ruby on Rails</code> 有以下原则：</p><ul><li>强调与注重敏捷开发；</li><li>约定高于配置（Convention over configuration）；</li><li>DRY（Don’t repeat yourself）不要重复自己，提倡代码重用；</li><li>重视「编码愉悦性」。</li></ul><h3 id="如何正确阅读本书"><a href="#如何正确阅读本书" class="headerlink" title="如何正确阅读本书"></a>如何正确阅读本书</h3><p>随后你会有很多机会来学习它们。现在最重要的是保持『训练』的连贯性。</p><p>编程是技能，不是知识，技能只有在不断刻意练习下才会有进步。</p><span id="more"></span><h2 id="开发环境布置"><a href="#开发环境布置" class="headerlink" title="开发环境布置"></a>开发环境布置</h2><h3 id="第一个应用"><a href="#第一个应用" class="headerlink" title="第一个应用"></a>第一个应用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project laravel/laravel Laravel --prefer-dist <span class="string">&quot;5.5.*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h3><p>设置 push 的默认模式为 simple</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global push.default simple</span><br></pre></td></tr></table></figure><h3 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h3><p>注册 Heroku 后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 SSH Key 到 Heroku 上</span></span><br><span class="line">heroku keys:add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件来告诉 Heroku 应当使用什么命令来启动 Web 服务器</span></span><br><span class="line"><span class="built_in">echo</span> web: vendor/bin/heroku-php-apache2 public/ &gt; Procfile</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;Procfile for Heroku&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新应用</span></span><br><span class="line">heroku create</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应用名称进行更改，保证未被其它人占用</span></span><br><span class="line">heroku rename imzyf-laravel-essential</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明应用是用 PHP 写的</span></span><br><span class="line">heroku buildpacks:<span class="built_in">set</span> heroku/php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 APP key</span></span><br><span class="line">php artisan key:generate</span><br><span class="line">heroku config:<span class="built_in">set</span> APP_KEY=<span class="built_in">base64</span>:wuWj8Kicza6I9YxgWczviNVcueVN2RroqiUILreyNmA=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署上线</span></span><br><span class="line">git push heroku master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速打开线上应用</span></span><br><span class="line">heroku open</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出生产环境上的日志</span></span><br><span class="line">heroku logs</span><br></pre></td></tr></table></figure><h2 id="构建页面"><a href="#构建页面" class="headerlink" title="构建页面"></a>构建页面</h2><h3 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h3><p>生成静态页面控制器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan make:controller StaticPagesController</span><br></pre></td></tr></table></figure><h2 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h2><h3 id="样式美化"><a href="#样式美化" class="headerlink" title="样式美化"></a>样式美化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级 yarn</span></span><br><span class="line">brew  upgrade yarn</span><br><span class="line"></span><br><span class="line">yarn install --no-bin-links</span><br><span class="line">yarn add cross-env</span><br></pre></td></tr></table></figure><p>每次检测到 <code>.scss</code> 文件发生更改时，自动将其编译为 <code>.css</code> 文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run watch-poll</span><br></pre></td></tr></table></figure><h3 id="Laravel-前端工作流"><a href="#Laravel-前端工作流" class="headerlink" title="Laravel 前端工作流"></a>Laravel 前端工作流</h3><p>Laravel Mix 一款前端任务自动化管理工具。Mix 提供了简洁流畅的 API，让你能够为你的 Laravel 应用定义 Webpack 编译任务。</p><p><code>_header.blade.php</code> 为局部视图增加前缀下划线是『约定俗成』的做法。</p><h3 id="布局中的链接"><a href="#布局中的链接" class="headerlink" title="布局中的链接"></a>布局中的链接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;/help&quot;</span>&gt;帮助&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">// 可以改写为</span><br><span class="line"></span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">&quot;&#123;&#123; route(&#x27;help&#x27;) &#125;&#125;&quot;</span>&gt;帮助&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>路由中修改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">&#x27;/help&#x27;</span>, <span class="string">&#x27;StaticPagesController@help&#x27;</span>)-&gt;name(<span class="string">&#x27;help&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>route(&#39;help&#39;)</code> 将被渲染为 <code>http://sample.test/help</code>。</p><h2 id="用户模型"><a href="#用户模型" class="headerlink" title="用户模型"></a>用户模型</h2><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><ul><li>当我们运行迁移时，<code>up</code> 方法会被调用</li><li>当我们回滚迁移时，<code>down</code> 方法会被调用</li></ul><h3 id="查看数据库表"><a href="#查看数据库表" class="headerlink" title="查看数据库表"></a>查看数据库表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line">php artisan migrate:rollback</span><br></pre></td></tr></table></figure><h3 id="模型文件"><a href="#模型文件" class="headerlink" title="模型文件"></a>模型文件</h3><p>创建模型命令指定命名空间，同时顺便创建数据库迁移使用 <code>--migration</code> 或 <code>-m</code> 选项</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan make:model Models/Article -m</span><br></pre></td></tr></table></figure><p>『约定优于配置』（convention over configuration），也称作按约定编程，这是一种软件设计范式，旨在减少软件开发人员需做决定的数量，获得简单的好处，而又不失灵活性。如果所用工具的约定与你的期待相符，便可省去配置；反之，你可以配置来达到你所期待的方式。</p><h3 id="创建用户对象"><a href="#创建用户对象" class="headerlink" title="创建用户对象"></a>创建用户对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan tinker</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; App\Models\User::create([&#x27;name&#x27;=&gt; &#x27;Aufree&#x27;, &#x27;email&#x27;=&gt;&#x27;aufree@yousails.com&#x27;,&#x27;password&#x27;=&gt;bcrypt(&#x27;password&#x27;)])</span><br></pre></td></tr></table></figure><h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><h3 id="显示用户的信息"><a href="#显示用户的信息" class="headerlink" title="显示用户的信息"></a>显示用户的信息</h3><p>Laravel 遵从 RESTful 架构的设计原则，将数据看做一个资源，由 URI 来指定资源。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;UsersController&#x27;</span>);</span><br><span class="line"></span><br><span class="line">上面代码将等同于：</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/users&#x27;</span>, <span class="string">&#x27;UsersController@index&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;users.index&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/users/&#123;user&#125;&#x27;</span>, <span class="string">&#x27;UsersController@show&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;users.show&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/users/create&#x27;</span>, <span class="string">&#x27;UsersController@create&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;users.create&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/users&#x27;</span>, <span class="string">&#x27;UsersController@store&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;users.store&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/users/&#123;user&#125;/edit&#x27;</span>, <span class="string">&#x27;UsersController@edit&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;users.edit&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">patch</span>(<span class="string">&#x27;/users/&#123;user&#125;&#x27;</span>, <span class="string">&#x27;UsersController@update&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;users.update&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">delete</span>(<span class="string">&#x27;/users/&#123;user&#125;&#x27;</span>, <span class="string">&#x27;UsersController@destroy&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;users.destroy&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="注册表单"><a href="#注册表单" class="headerlink" title="注册表单"></a>注册表单</h3><p>全局辅助函数 old 来帮助我们在 Blade 模板中显示旧输入数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; old(&#x27;name&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="用户数据验证"><a href="#用户数据验证" class="headerlink" title="用户数据验证"></a>用户数据验证</h3><p>为了安全考虑，会让我们提供一个 token（令牌）来防止我们的应用受到 CSRF（跨站请求伪造）的攻击。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; csrf_field() &#125;&#125;</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;fhcxqT67dNowMoWsAHGGPJOAWJn8x5R5ctSwZrAq&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="注册失败错误消息"><a href="#注册失败错误消息" class="headerlink" title="注册失败错误消息"></a>注册失败错误消息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require &quot;overtrue/laravel-lang:~3.0&quot;</span><br></pre></td></tr></table></figure><p><code>config/app.php</code> 修改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;locale&#x27; =&gt; &#x27;zh-CN&#x27;,</span><br></pre></td></tr></table></figure><h3 id="注册成功"><a href="#注册成功" class="headerlink" title="注册成功"></a>注册成功</h3><p>临时保存用户数据的方法 - 会话（Session），并附带支持多种会话后端驱动，可通过统一的 API 进行使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session()-&gt;flash(&#x27;success&#x27;, &#x27;欢迎，您将在这里开启一段新的旅程~&#x27;);</span><br><span class="line"></span><br><span class="line">session()-&gt;get(&#x27;success&#x27;)</span><br></pre></td></tr></table></figure><h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><p><code>Auth::check()</code> 方法用于判断当前用户是否已登录，已登录返回 true，未登录返回 false。</p><h3 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h3><p><code>Auth::attempt()</code> 方法可接收两个参数，第一个参数为需要进行用户身份认证的数组，第二个参数为是否为用户开启『记住我』功能的布尔值。</p><h2 id="用户-CRUD"><a href="#用户-CRUD" class="headerlink" title="用户 CRUD"></a>用户 CRUD</h2><h3 id="更新用户"><a href="#更新用户" class="headerlink" title="更新用户"></a>更新用户</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; route(&#x27;users.update&#x27;, $user-&gt;id )&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 将转为：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://sample.test/users/1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h3><p>在 Laravel 中可以使用 授权策略 (Policy) 来对用户的操作权限进行验证，在用户未经授权进行操作时将返回 403 禁止访问的异常。</p><p><code>redirect()</code> 实例提供了一个 intended 方法，该方法可将页面重定向到上一次请求尝试访问的页面上，并接收一个默认跳转地址参数，当上一次请求记录为空时，跳转到默认地址上。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>()-&gt;<span class="title function_ invoke__">intended</span>(<span class="title function_ invoke__">route</span>(<span class="string">&#x27;users.show&#x27;</span>, [<span class="title class_">Auth</span>::<span class="title function_ invoke__">user</span>()]));</span><br></pre></td></tr></table></figure><h3 id="列出所有用户"><a href="#列出所有用户" class="headerlink" title="列出所有用户"></a>列出所有用户</h3><p>假数据的生成分为两个阶段：</p><ol><li>对要生成假数据的模型指定字段进行赋值 - 『模型工厂』</li><li>批量生成假数据模型 - 『数据填充』</li></ol><p>数据库的重置和填充操作：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan migrate:refresh --seed</span><br></pre></td></tr></table></figure><h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><h3 id="账户激活"><a href="#账户激活" class="headerlink" title="账户激活"></a>账户激活</h3><ol><li>用户注册成功后，自动生成激活令牌</li><li>将激活令牌以链接的形式附带在注册邮件里面，并将邮件发送到用户的注册邮箱上</li><li>用户点击注册链接跳到指定路由，路由收到激活令牌参数后映射给相关控制器动作处理</li><li>控制器拿到激活令牌并进行验证，验证通过后对该用户进行激活，并将其激活状态设置为已激活</li><li>用户激活成功，自动登录</li></ol><p>使用 log 邮件驱动的方式来调试邮件发送功能，这么做的好处是邮件并不会真正被发送出去，而是会出现在 <code>storage/logs/laravel.log</code> 文件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAIL_DRIVER=log</span><br></pre></td></tr></table></figure><h3 id="在生产环境中发送邮件"><a href="#在生产环境中发送邮件" class="headerlink" title="在生产环境中发送邮件"></a>在生产环境中发送邮件</h3><p>QQ 邮箱的账号设置里开启 <code>POP3</code> 和 <code>SMTP</code> 服务。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=smtp.qq.com</span><br><span class="line">MAIL_PORT=25</span><br><span class="line">MAIL_USERNAME=xxxxxxxxxxxxxx@qq.com</span><br><span class="line">MAIL_PASSWORD=xxxxxxxxx // 密码是我们第一步拿到的授权码</span><br><span class="line">MAIL_ENCRYPTION=tls</span><br><span class="line">MAIL_FROM_ADDRESS=xxxxxxxxxxxxxx@qq.com</span><br><span class="line">MAIL_FROM_NAME=SampleApp</span><br></pre></td></tr></table></figure><h2 id="微博-CRUD"><a href="#微博-CRUD" class="headerlink" title="微博 CRUD"></a>微博 CRUD</h2><h3 id="显示微博"><a href="#显示微博" class="headerlink" title="显示微博"></a>显示微博</h3><p><code>diffForHumans()</code> 该方法的作用是将日期进行友好化处理：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="variable">$created_at</span>-&gt;diffForHumans()</span><br><span class="line">=&gt; <span class="string">&quot;17 years ago&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Modern PHP】读书笔记</title>
      <link href="/2018/05/08/modern-php-reading-notes/"/>
      <url>/2018/05/08/modern-php-reading-notes/</url>
      
        <content type="html"><![CDATA[<p>又回到 PHP Web 开发，使用 Laravel 框架，重读《Modern PHP》。</p><span id="more"></span><blockquote><p>PHP 正在重生。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>声明命名空间：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Oreilly</span>\<span class="title class_">ModernPHP</span>;</span><br></pre></td></tr></table></figure><p>导入和别名：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Response</span> <span class="keyword">as</span> <span class="title">Res</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span> = <span class="keyword">new</span> <span class="title class_">Res</span>(<span class="string">&#x27;Oops&#x27;</span>, <span class="number">400</span>);</span><br><span class="line"><span class="variable">$r</span>-&gt;<span class="title function_ invoke__">send</span>();</span><br></pre></td></tr></table></figure><p>PHP 5.6 开始可以导入函数和常量：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">func</span> <span class="title">Namespace</span>\<span class="title">functionName</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">constant</span> <span class="title">Namespace</span>\<span class="title">CONST_NAME</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">functionName</span>();</span><br><span class="line"><span class="keyword">echo</span> CONST_NAME;</span><br></pre></td></tr></table></figure><h3 id="使用接口"><a href="#使用接口" class="headerlink" title="使用接口"></a>使用接口</h3><p>接口是两个 PHP 对象之间的契约，其目的不是让一个对象依赖另一个对象的身份，而是依赖另一个对象的能力。</p><p>使用接口编写更加灵活，能委托别人实现细节。</p><h3 id="性状-trait"><a href="#性状-trait" class="headerlink" title="性状 trait"></a>性状 trait</h3><p>性状是类的部分实现，可以混入一个或者多个现有的 PHP 类中。性状有两个作用：表明类可以做什么（像是接口）；提供模块化实现（像是类）。</p><p>如果想让两个无关的 PHP 类具有类似的行为，应该怎么呢？性状就是为了解决这种问题而诞生的。性状能把模块化的实现方式注入多个无关的类中。而且性状还能促进代码的重用。</p><p>这与创建一个接口，两个无关的类实现这个接口的优势在于：不用写相同的实现代码，符合 DRY 原则。</p><p>PHP 解释器在编译时会把性状复制粘贴到类的定义体中，但是不会处理这个操作引入的不兼容问题。如果性状假定类中有特定的属性和方法（在性状中没有定义），要确保相应的类中有对应的属性和方法。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>Generator 是 PHP 5.5.0 引入的功能。生成器是简单的迭代器，仅此而已。</p><p>PHP 生成器不要求类实现 Iterator 接口，从而减轻了类的负担。生成器会根据需求计算并产生要迭代的值。这对应该的性能有重大影响。假如标准的 PHP 迭代器经常在内存中执行迭代操作，这要预先计算出数据集，性能低；此时我们可以使用生成器，即时计算并产出后续值，不占用宝贵的内存资源。</p><p>PHP 生成器不能满足所有迭代操作的需求，因为如果不查询，生成器永远不知道下一个要迭代的值是什么，在生成器中无法后退和快进。生成器还是一次性，无法多次迭代同一个生成器。不过，如果需要，可以重建或克隆生成器。</p><p>PHP 生成器是 PHP 函数，只不过要在函数中一次或者多次使用 yield 关键字。生成器从不返回值，值产出值。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;value1&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;value2&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;value3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">myGenerator</span>()  <span class="keyword">as</span> <span class="variable">$yieldedValue</span>) &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$yieldedValue</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br></pre></td></tr></table></figure><p>使用生成器处理 CSV：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRows</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$handle</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file</span>, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$handle</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$handle</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$handle</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">getRows</span>(<span class="string">&#x27;data.csv&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">   <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>理论上讲，闭包和匿名函数是不同的概念。不过，PHP 将其视作相同的概念。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$closure</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;Hello %s&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$closure</span>(<span class="string">&quot;Josh&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们之所以能调用 $closure 变量，是因为这个变量的值是一个闭包，而且闭包对象实现了 <code>__invoke()</code> 魔术方法。只要变量名后有()，PHP 就会查找并调用 <code>__invoke()</code> 方法。</p><p>PHP 闭包常被当做函数和方法的回调使用。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$numbersPlusOne</span> = <span class="title function_ invoke__">array_map</span>(function (<span class="variable">$number</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$number</span> + <span class="number">1</span>;</span><br><span class="line">&#125;, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$numbersPlusOne</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2,3,4]</span></span><br></pre></td></tr></table></figure><p>在有闭包之前，只能单独创建具名函数，然后使用名称引用那个函数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$numbersPlusOne</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;incrementNumber&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 如果只需要使用一次回调，没必要单独定义。把闭包当成回调使用，写出的代码更整洁、更清晰。</span></span><br></pre></td></tr></table></figure><p>使用 use 关键字附加闭包状态：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enclosePerson</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$doCommand</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%s, %s&#x27;</span>, <span class="variable">$name</span>, <span class="variable">$doCommand</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把字符串 Clay 封装到闭包里</span></span><br><span class="line"><span class="variable">$clay</span> = <span class="title function_ invoke__">enclosePerson</span>(<span class="string">&#x27;Clay&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入参数，调用闭包</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$clay</span>(<span class="string">&#x27;get me sweet tea!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;Clay, get me sweet tea!&quot;</span></span><br></pre></td></tr></table></figure><p>具名函数 enclosePerson() 有个名为 $name 的参数，这个函数返回一个闭包对象，而且这个闭包封装了 $name 参数。即便返回的闭包对象跳出了 enclosePerson() 函数的作用域，它也会记住 $name 参数的值，因为 $name 变量仍在闭包中。</p><p>PHP 闭包是对象。闭包对象的默认状态没什么用，不过有一个 <code>__invoke()</code> 魔术方法和 <code>bindTo()</code> 方法。</p><h3 id="Zend-OPcache"><a href="#Zend-OPcache" class="headerlink" title="Zend OPcache"></a>Zend OPcache</h3><p>字节码缓存能存储预先编译好的 PHP 字节码。这意味着，请求 PHP 脚本时，PHP 解释器不用每次都读取、解析和编译 PHP 代码。</p><h3 id="内置的-HTTP-服务器"><a href="#内置的-HTTP-服务器" class="headerlink" title="内置的 HTTP 服务器"></a>内置的 HTTP 服务器</h3><p>启动这个服务器：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -S localhost:<span class="number">4000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 PHP Web 服务器监听所有接口</span></span><br><span class="line">php -S <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">4000</span></span><br></pre></td></tr></table></figure><h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><h3 id="PSR-是什么"><a href="#PSR-是什么" class="headerlink" title="PSR 是什么"></a>PSR 是什么</h3><p>PHP Standards Recommendation.</p><ul><li>PSR-1 基本的代码风格</li><li>PSR-2 严格的代码风格</li><li>PSR-3 日志记录器接口</li><li>PSR-4 自动加载</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="查找组件"><a href="#查找组件" class="headerlink" title="查找组件"></a>查找组件</h3><ul><li><a href="https://github.com/ziadoz/awesome-php#text-editors-and-ides">Awesome PHP</a></li><li><a href="https://packagist.org/">Packagist</a></li></ul><h2 id="良好实践"><a href="#良好实践" class="headerlink" title="良好实践"></a>良好实践</h2><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><p>流式数据的种类各异，每种类型需要独特的协议，以便读写数据。称这些协议为流封装协议。</p><ol><li>开始通信</li><li>读取数据</li><li>写入数据</li><li>结束通信</li></ol><p>指定协议和目标的方法是使用流标识符：</p><p><code>&lt;scheme&gt;://&lt;target&gt;</code></p><p>使用 HTTP 流封装协议创建了一个与 Flickr API 通信的 PHP 流：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$json</span> = <span class="title function_ invoke__">file_get_contents</span>(</span><br><span class="line">    <span class="string">&#x27;http://api.flickr.com/services/feeds/photos_public.gne?format=json&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>不要误以为这是普通的网页 URL，file_get_contents() 函数的字符串参数其实是一个流标识符。http 协议会让 PHP 使用 HTTP 流封装协议。在这个参数中，http 之后是流的目标。很多 PHP 开发者不知道普通的 URL 其实是 PHP 流封装协议标识的伪装。</p><p>我们使用 file_get_contents() fopen() fwrite() 和 fclose() 函数读写文件系统。因为 PHP 默认使用的流封装协议是 file:&#x2F;&#x2F;，使用我们很少认为这些函数使用的是 PHP 流。</p><p>隐式使用 file:&#x2F;&#x2F; 流封装协议：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$handle</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;/etc/hosts&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$handle</span>) !== ture) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$handle</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br></pre></td></tr></table></figure><p>显示使用 file:&#x2F;&#x2F; 流封装协议：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="variable">$handle</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;file://etc/hosts&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们通常会省略 file:&#x2F;&#x2F; 封装协议，这是 PHP 使用的默认值。</p><p>编写命令行脚本的 PHP 开发者会感激 php:&#x2F;&#x2F; 流封装协议。这个流封装协议的作用是与 PHP 脚本的标准输入、标准输出和标准错误文件描描述符通信。</p><p>php:&#x2F;&#x2F;stdin 只读 PHP 流，其中的数据来自标准输入。例如，接收命令行传入脚本的信息。</p><p>php:&#x2F;&#x2F;stdout 把数据写入当前的缓冲区。这个流只能写，无法读或寻址。</p><p>php:&#x2F;&#x2F;memory 从系统内存中读取数据，或者把数据写入系统内存。缺点是，可用内存是有限的。使用 php:&#x2F;&#x2F;temp 流更安全。</p><p>php:&#x2F;&#x2F;temp 和 php:&#x2F;&#x2F;memory 类似，不过没有可以内存时，PHP 会把数据写入临时文件。</p><h3 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h3><p>提到了 <a href="https://github.com/Seldaek/monolog">Monolog</a> 记录日志。</p><h2 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h2><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p><em>一共能分配给 PHP 多少内存？</em></p><p>Linode 2GB 的 sever 留 512MB 给 PHP。</p><p><em>单个 PHP 进程平均消耗多少内存？</em></p><p>使用 top 命令查看。一般 PHP 进程消耗 5 ~ 20MB 内存。</p><p><em>能负担的起多少个 PHP-FPM 进程？</em></p><p>假设 PHP 分配了 512MB 内存，每个 PHP 平均消耗 15MB 内存，从而确定能负担的起 34 个进程。</p><p>压力测试工具：</p><ul><li><a href="https://httpd.apache.org/docs/2.4/programs/ab.html">ab - Apache HTTP server benchmarking tool</a></li><li><a href="https://www.joedog.org/siege-home/">Siege</a></li></ul><h3 id="Zend-OPcache-1"><a href="#Zend-OPcache-1" class="headerlink" title="Zend OPcache"></a>Zend OPcache</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.memory_consumption = <span class="number">64</span></span><br><span class="line"><span class="comment"># 为操作码缓存分配的内存量（单位 MB）。</span></span><br><span class="line"></span><br><span class="line">opcache.interned_strings_buffer = <span class="number">16</span></span><br><span class="line"><span class="comment"># 用来存储驻留字符串的内存量（单位 MB，默认 4MB）。</span></span><br><span class="line"></span><br><span class="line">opcache.max_accelerated_file = <span class="number">4000</span></span><br><span class="line"><span class="comment"># 操作码缓存中最多能存储多少个 PHP 脚本。这个值一定比 PHP 应用中的文件数量大。</span></span><br><span class="line"></span><br><span class="line">opcache.validate_timestamps = <span class="number">1</span></span><br><span class="line"><span class="comment"># 为 1 时，一段时间后 PHP 会检查 PHP 脚本的内容是否变化。检查的时间间隔由 revalidate_freq 指定。</span></span><br><span class="line"><span class="comment"># 开发环境设为 1，在生成环境中为 0。</span></span><br><span class="line"></span><br><span class="line">opcache.revalidate_freq = <span class="number">0</span></span><br><span class="line"><span class="comment"># 设置多久检查一次 PHP 脚本的内容是否有变化。</span></span><br><span class="line"></span><br><span class="line">opcache.fast_shutdown = <span class="number">1</span></span><br><span class="line"><span class="comment"># 这么设置能让操作码使用更快的停机步骤，把对象析构和内存释放交给 Zend Engine 的内存管理器完成。</span></span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_uploads = <span class="number">1</span></span><br><span class="line">upload_max_filesize = <span class="number">10</span>M</span><br><span class="line">max_file_uploads = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>如果需要上传非常大的文件，还要调整 nginx 虚拟主机配置中的 client_max_body_size 设置。</p><h3 id="会话处理"><a href="#会话处理" class="headerlink" title="会话处理"></a>会话处理</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session.save_handler = <span class="string">&#x27;memcached&#x27;</span></span><br><span class="line">session.save_path = <span class="string">&#x27;127.0.0.2:11211&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="缓冲输出"><a href="#缓冲输出" class="headerlink" title="缓冲输出"></a>缓冲输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">output_buffering = <span class="number">4096</span></span><br><span class="line">implicit_flush = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>确保使用的值是 4（32 位系统）或者 8（64 位系统）的倍数。</p><h3 id="真实路径缓存"><a href="#真实路径缓存" class="headerlink" title="真实路径缓存"></a>真实路径缓存</h3><p>realpath cache，PHP 会缓存应用使用的文件路径，这样每次包含或者导入文件时就无需不断搜索包含路径了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">realpath_cache_size = <span class="number">64</span>k</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>提到了 <a href="http://capistranorb.com/">Capistrano</a> 待研究。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>PHPUnit</li><li>Xdebug</li><li>使用 Travis CI 持续测试</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>XHProf 较新的 PHP 应用分析器</li><li>XHGUI</li><li>New Relic</li><li>Blackfire</li></ul><h2 id="HHVM-和-Hack"><a href="#HHVM-和-Hack" class="headerlink" title="HHVM 和 Hack"></a>HHVM 和 Hack</h2><p>Hip-Hop Virtual Machine.</p><p>Hack 是一门建立在 PHP 之上的编程语音，引入了静态类型，新的数据结构和额外的接口，同时还能向后兼容现有的动态类型 PHP 代码。</p><p>动态类型和静态类型，二者之间的区别在于何时检查 PHP 类型。动态类型在运行时检查类型，而静态类型在编译时检查类型。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhpStorm 使用经验</title>
      <link href="/2018/05/05/phpstorm-using-experience/"/>
      <url>/2018/05/05/phpstorm-using-experience/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章基本适用于 <a href="https://www.jetbrains.com/">Jetbrains 全家桶</a>。</p></blockquote><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>自己主要使用下面两个插件，安装并启用：</p><ul><li>Material Theme UI</li><li>Atom Material Icons</li></ul><span id="more"></span><p>还有个 <code>One Dark theme</code> 但是 <code>Material Theme UI</code> 已经包含这个主题。</p><p>配置：</p><p><code>Preferences &gt; Appearance &amp; Behavior &gt; Appearance</code> 下，右侧配置：<code>Theme: Darcula</code>，勾选 <code>User custom font: .AppleSystemUIFont</code> <code>Size: 18</code>。</p><p><code>Preferences &gt; Editor &gt; Font</code> 下，右侧配置：<code>Font: Menlo</code> <code>Size: 18</code> <code>Line spacing: 1.2</code>。</p><p><code>Preferences &gt; Editor &gt; Color Scheme</code> 下，右侧配置：<code>Seheme: Atom One Dark(Material)</code> 点击右侧的三个点 <code>Duplicate</code> 复制一份。</p><p><code>Preferences &gt; Editor &gt; Color Scheme &gt; General</code> 下，右侧配置：</p><ul><li>Editor &gt; Gutter background，右侧 <code>Background: 292929</code>（设置行号背景色）</li><li>Editor &gt; Vertical Scrollar &gt; Thumb 与 Thumb while scrolling，右侧 <code>Background: 305599C0</code>（设置垂直滑块色）</li><li>Editor &gt; Text &gt; Default text，右侧 <code>Background: 292929</code>（设置面板背景色）</li></ul><h2 id="优秀插件推荐"><a href="#优秀插件推荐" class="headerlink" title="优秀插件推荐"></a>优秀插件推荐</h2><ul><li>PHP Annotation</li><li>Php Inspections ​(EA Ultimate)</li><li>String Manipulation</li></ul><p>框架支持：</p><ul><li>Laravel</li><li>Swoole IDE Helper</li><li>Symfony Support</li><li>Yii2 Support</li></ul><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="围绕选择输入"><a href="#围绕选择输入" class="headerlink" title="围绕选择输入"></a>围绕选择输入</h3><p>设置选择了一个词后，再按单引号或双引号，将选中的单词用引号括起来。</p><p><code>Preferences</code> 中搜索 <code>Surround Selection on typing quote or brace</code> 将其勾选（<code>Editor &gt; General &gt; Smart Keys</code> 下）。</p><h3 id="关闭文档提示"><a href="#关闭文档提示" class="headerlink" title="关闭文档提示"></a>关闭文档提示</h3><p>鼠标放在方法上会出现文档提示，想关闭。</p><p><code>Preferences</code> 中搜索 <code>Show quick documentation on mouse move</code> 取消勾选（<code>Editor &gt; Code Editing</code> 下）。</p><h3 id="使用-PHP-CS-Fixer"><a href="#使用-PHP-CS-Fixer" class="headerlink" title="使用 PHP-CS-Fixer"></a>使用 PHP-CS-Fixer</h3><blockquote><p><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">The PHP Coding Standards Fixer</a> (PHP CS Fixer) tool fixes your code to follow standards.</p></blockquote><p>工作环境：MacBook。</p><p>打开 PhpStorm <code>Preferences &gt; Tools &gt; External Tools</code> 添加：</p><p><img src="https://user-images.githubusercontent.com/9289792/88664953-715fb100-d110-11ea-970e-9dcb72945ebb.png" alt="180416-use-php-cs-fixer-in-phpstorm-001"></p><ul><li>Program: <code>/usr/local/bin/php-cs-fixer</code></li><li>Arguments: <code>--verbose fix &quot;$FileDir$/$FileName$&quot; --dry-run --rules=@PSR1,@PSR2,@Symfony</code>（Note that previous verions of PHP-CS-Fixer used –levels instead of –rules. 未找到）</li><li>Working directory: <code>$ProjectFileDir$</code></li><li>我取消勾选了 <code>Open console for tool output</code>，可以不输出日志信息</li></ul><p>为了方便使用，保存文件时就可以格式化，设置快捷键 <code>Preferences &gt; Keymap &gt; Macros</code>：</p><p><img src="https://user-images.githubusercontent.com/9289792/88665170-c996b300-d110-11ea-8acf-62dad3694f2d.png" alt="180416-use-php-cs-fixer-in-phpstorm-002"></p><p>设置 php-cs-fix 单独的快捷键 <code>Preferences &gt; Keymap &gt; External Tools</code>：</p><p><img src="https://user-images.githubusercontent.com/9289792/80202900-e5de0c00-8658-11ea-826f-b4d058fa2209.png" alt="180416-use-php-cs-fixer-in-phpstorm-003"></p><h3 id="关闭不常用的插件"><a href="#关闭不常用的插件" class="headerlink" title="关闭不常用的插件"></a>关闭不常用的插件</h3><p><code>Preferences &gt; Plugins &gt; Installed</code> 向下滚动，<code>Bundled</code> 中有不少预装但不常用的可以禁掉。</p><h2 id="遇到过的一些问题"><a href="#遇到过的一些问题" class="headerlink" title="遇到过的一些问题"></a>遇到过的一些问题</h2><h3 id="文件类型错误"><a href="#文件类型错误" class="headerlink" title="文件类型错误"></a>文件类型错误</h3><p>一个文件被新建后，明明扩展名没有错，但是却没有语法高亮，删除文件后也不解决问题。</p><p>解决办法：<code>Editor &gt; File Types</code> 找 <code>Text</code> 将里面涉及的文件删除掉。</p><ul><li><a href="https://segmentfault.com/q/1010000004495692">phpstorm 文件类型错误</a></li></ul><h3 id="Undefined-function-XXX"><a href="#Undefined-function-XXX" class="headerlink" title="Undefined function XXX"></a>Undefined function XXX</h3><p>出现 PHP 的原生方法未定义的警告。</p><p>解决方法：<code>File &gt; Invalidate Caches / Restart</code></p><h3 id="Typo-In-word-XXX"><a href="#Typo-In-word-XXX" class="headerlink" title="Typo: In word XXX"></a>Typo: In word XXX</h3><p>提示单词拼写错误，但是其中没有问题，比如全拼的名字。</p><p>解决方法：option + enter -&gt; Save to dictionary</p><ul><li><a href="https://www.jetbrains.com/help/phpstorm/spellchecking.html">Spellchecking | jetbrains</a></li></ul><h3 id="warning-Multiple-definitions-exists-for-class"><a href="#warning-Multiple-definitions-exists-for-class" class="headerlink" title="warning: Multiple definitions exists for class"></a>warning: Multiple definitions exists for class</h3><p>I resolved this by going to <code>Preferences-&gt; Languages &amp; Frameworks-&gt; PHP</code>; and then under <code>Include path</code>, remove the conflicting path. (In my case a package reference in the vendor directory to a package I was developing inside my Laravel project)</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://laravel-china.org/articles/4172/create-beautiful-phpstorm-interface">打造漂亮的 PhpStorm 界面</a></li><li><a href="http://www.pilishen.com/posts/phpstorm-tips-and-tricks">大牛们的 PHPstorm 使用技巧和建议</a></li><li><a href="https://gist.github.com/nienkedekker/3ddb9ece42233698c0e3f3e42cf1ff34">Use PHP-CS-Fixer in PHPStorm</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> phpstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Let&#39;s Encrypt 通配符证书</title>
      <link href="/2018/04/26/lets-encrypt-wildcard-certificates/"/>
      <url>/2018/04/26/lets-encrypt-wildcard-certificates/</url>
      
        <content type="html"><![CDATA[<p>一直在使用 <a href="https://letsencrypt.org/">Let’s Encrypt</a> 的免费 SSL 证书，但是一直没做笔记。今天看到 Let’s Encrypt 支持了通配符证书（Wildcard Certificates），也就是说二级子域名和主域名可以共用一个证书。</p><span id="more"></span><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载证书申请客户端</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/certbot/certbot</span><br><span class="line"><span class="built_in">cd</span> /opt/certbot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意通配符并不包含主域名，所以要配置两个</span></span><br><span class="line">./certbot-auto certonly -d *.zyf.im -d zyf.im --manual --preferred-challenges dns --server <span class="string">&quot;https://acme-v02.api.letsencrypt.org/directory&quot;</span></span><br></pre></td></tr></table></figure><p><code>-preferred-challenges dns</code> 使用 DNS 方式校验域名所有权，所以会遇到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Please deploy a DNS TXT record under the name</span><br><span class="line">_acme-challenge.zyf.im with the following value:</span><br><span class="line"></span><br><span class="line">YZ2unEViXH8nYZ2unEViIbW52LhIEViIbW52Lh</span><br><span class="line"></span><br><span class="line">Before continuing, verify the record is deployed.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Press Enter to Continue</span><br></pre></td></tr></table></figure><p>要在域名服务商那里将 <code>_acme-challenge.zyf.im</code> 配置 DNS TXT 记录，从而校验域名所有权。</p><p>使用 <code>host -t txt _acme-challenge.zyf.im</code> 验证记录是否已经生效，如果看到对应的值，按 Enter 继续。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> - Congratulations!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>生成的证书会放置在 <code>/etc/letsencrypt/live/</code>，可以使用 openssl 验证一下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> /etc/letsencrypt/live/zyf.im/cert.pem -noout -text | grep zyf.im</span><br><span class="line"></span><br><span class="line">Subject: CN=zyf.im</span><br><span class="line">        DNS:*.zyf.im DNS:zyf.im</span><br></pre></td></tr></table></figure><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name zyf.im design.zyf.im;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line"></span><br><span class="line">    server_name design.zyf.im;</span><br><span class="line">    root /project/imzyf;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    ssl_certificate  /etc/letsencrypt/live/zyf.im/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/zyf.im/privkey.pem;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line"></span><br><span class="line">    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits</span><br><span class="line">    ssl_dhparam /etc/nginx/ssl/dhparam.pem;:q!</span><br><span class="line"></span><br><span class="line">    # intermediate configuration. tweak to your needs.</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers &#x27;...&#x27;;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)</span><br><span class="line">    add_header Strict-Transport-Security max-age=15768000;</span><br><span class="line"></span><br><span class="line">    # OCSP Stapling ---</span><br><span class="line">    # fetch OCSP records from URL in ssl_certificate and cache them</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="证书续期"><a href="#证书续期" class="headerlink" title="证书续期"></a>证书续期</h2><p>证书的有效期只有三个月，所以要利用 <code>crontab</code> 定时续期：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 2 * * 1 /opt/certbot/certbot-auto renew &gt;&gt; /var/log/le-renew.log 2&gt;&amp;1</span><br><span class="line">35 2 * * 1 /etc/init.d/nginx reload</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.laisky.com/p/letsencrypt/">配置使用免费的通配符证书 | laisky</a></li><li><a href="https://www.freehao123.com/quanzhan-https-ssl/">我是如何将网站全站启用 Https 的？| freehao123</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker UFW 失效</title>
      <link href="/2018/04/24/docker-ufw-not-work/"/>
      <url>/2018/04/24/docker-ufw-not-work/</url>
      
        <content type="html"><![CDATA[<p>今日遇到 Docker 中的项目绕过了宿主机 UFW 的配置，可以被任意 IP 访问，甚是奇怪。查找资料发现：</p><p>如果你在 Linux 使用 Docker，很可能你的系统防火墙降级为 Uncomplicated Firewall (UFW)。如果是这样的话，你有一点可能不知道，Docker 和 UFW 的组合带来了一些安全问题。为什么呢？因为 Docker 实际上绕过了 UFW 并直接修改了 iptables，所以一个容器可以绑定一个端口。这就意味着，所有你设置的 UFW 规则都将在 Docker 容器中失效。</p><p>如何修复：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/default/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the following line:</span></span><br><span class="line"></span><br><span class="line">DOCKER_OPTS=<span class="string">&quot;--iptables=false&quot;</span></span><br></pre></td></tr></table></figure><p>Restart the docker daemon:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">docker/etc/init.d/docker restart</span><br></pre></td></tr></table></figure><blockquote><p>When a problem arises, it only takes a bit of digging to discover the solution was already there, waiting for you to make it so. Don’t let this issue with Docker stop you from using this incredible technology.</p></blockquote><p>相关阅读：</p><ul><li><a href="/2016/10/10/manage-iptables-using-ufw-in-ubuntu/">Ubuntu 下使用 UFW 管理防火墙服务 | Yifans_Z</a></li><li><a href="https://github.com/moby/moby/issues/4737">docker and ufw serious problems | moby</a></li><li><a href="https://www.binss.me/blog/docker-pass-through-system-firewall/">无视系统防火墙的 docker | binss</a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.techrepublic.com/article/how-to-fix-the-docker-and-ufw-security-flaw/">How to fix the Docker and UFW security flaw | techrepublic</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文文案排版规范</title>
      <link href="/2018/04/08/chinese-copywriting-style-guide/"/>
      <url>/2018/04/08/chinese-copywriting-style-guide/</url>
      
        <content type="html"><![CDATA[<p>2019-12-04 更新：参考文档 <a href="https://github.com/ruanyf/document-style-guide">ruanyf&#x2F;document-style-guide | github</a></p><p>2019-05-09 更新：参考文档</p><ul><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">sparanoid&#x2F;chinese-copywriting-guidelines</a></li><li><a href="https://ant.design/docs/spec/copywriting">Ant Design Copywriting</a></li></ul><hr><blockquote><p>原文见于：Coding 开放平台，因为原始链接失效了，所以进行转载发布。</p></blockquote><p>本文旨在帮助提升大家的文案排版素养，形成良好的排版习惯。</p><span id="more"></span><ol><li><p>名词<br>1.1. 专有名词使用正确的大小写<br>1.2. 错误及不正式的缩写</p></li><li><p>空格<br>2.1. 中英文混排时需要增加空格以提高可读性<br>2.2. 中文和数字混排时需要增加空格以提高可读性<br>2.3. 数字与单位混排时时需要增加空格以提高可读性<br>2.4. 锚文本链接前后需要增加空格以提高可读性</p></li><li><p>标点<br>3.1. 不重复使用标点符号<br>3.2. 尽量避免使用感叹号</p></li><li><p>全角和半角<br>4.1. 中文使用全角中文标点<br>4.2. 数字使用半角字符<br>4.3. 完整的英文整句、特殊名词使用半角标点<br>4.4. 横排文稿使用弯引号</p></li></ol><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>CODING 是国内专业的一站式云端软件服务平台，旗下有两大产品：云端软件开发协作平台 —— Coding.net ，基于云技术的软件外包服务平台 —— 码市。</p><p>“Coding” 狭义上指代 Coding.net (云端软件开发协作平台)，广义上指代 Coding.net 和码市构成的一站式云端软件服务平台。</p><p>正式用法：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">CODING 旗下的产品有：Coding.net，码市。</span><br></pre></td></tr></table></figure><p>非正式用法：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Coding 旗下的产品有：Coding, 码市。</span><br></pre></td></tr></table></figure><p>错误用法：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">coding 旗下的产品有：coding, 码市。</span><br></pre></td></tr></table></figure><h3 id="错误及不正式的缩写"><a href="#错误及不正式的缩写" class="headerlink" title="错误及不正式的缩写"></a>错误及不正式的缩写</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">我们需要熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">我们需要熟悉 Js、H5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</span><br></pre></td></tr></table></figure><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>“有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。”——vinta&#x2F;paranoid-auto-spacing</p><h3 id="中英文混排时需要增加空格以提高可读性"><a href="#中英文混排时需要增加空格以提高可读性" class="headerlink" title="中英文混排时需要增加空格以提高可读性"></a>中英文混排时需要增加空格以提高可读性</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">在使用 Coding 之前需要注册 Coding。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">在使用Coding之前需要注册Coding。</span><br><span class="line"></span><br><span class="line">在使用 Coding之前需要注册 Coding。</span><br></pre></td></tr></table></figure><p>例外：“豆瓣 FM”等产品名词，按照官方所定义的格式书写。</p><h3 id="中文和数字混排时需要增加空格以提高可读性"><a href="#中文和数字混排时需要增加空格以提高可读性" class="headerlink" title="中文和数字混排时需要增加空格以提高可读性"></a>中文和数字混排时需要增加空格以提高可读性</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Coding 目前有 30 万注册开发者。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Coding 目前有30万注册开发者。</span><br><span class="line"></span><br><span class="line">Coding 目前有 30万注册开发者。</span><br></pre></td></tr></table></figure><h3 id="数字与单位混排时时需要增加空格以提高可读性"><a href="#数字与单位混排时时需要增加空格以提高可读性" class="headerlink" title="数字与单位混排时时需要增加空格以提高可读性"></a>数字与单位混排时时需要增加空格以提高可读性</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Coding 用户 clone 代码时的速度可达到 10 Mbps。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Coding 用户 clone 代码时的速度可达到 10Mbps。</span><br><span class="line"></span><br><span class="line">Coding 用户 clone 代码时的速度可达到10 Mbps。</span><br></pre></td></tr></table></figure><p>例外：<code>°（度）</code> <code>／</code> <code>%</code> 与数字之间不需要增加空格：</p><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">新 MacBook Pro 有 15% 的 CPU 性能提升。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">新 MacBook Pro 有 15 % 的 CPU 性能提升。</span><br></pre></td></tr></table></figure><h3 id="锚文本链接前后需要增加空格以提高可读性"><a href="#锚文本链接前后需要增加空格以提高可读性" class="headerlink" title="锚文本链接前后需要增加空格以提高可读性"></a>锚文本链接前后需要增加空格以提高可读性</h3><p>正确示例：</p><p><a href="https://mart.coding.net/">码市</a> 为不同的行业领域解决了软件开发的需求。</p><p>错误示例：</p><p><a href="https://mart.coding.net/">码市</a>为不同的行业领域解决了软件开发的需求。</p><h2 id="标点"><a href="#标点" class="headerlink" title="标点"></a>标点</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">码市已完成 3000 万元的交易额！</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">码市已完成 3000 万元的交易额！！！</span><br></pre></td></tr></table></figure><h3 id="尽量避免使用感叹号"><a href="#尽量避免使用感叹号" class="headerlink" title="尽量避免使用感叹号"></a>尽量避免使用感叹号</h3><p>推荐示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">码市已完成 3000 万元的交易额。</span><br></pre></td></tr></table></figure><p>不推荐示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">码市已完成 3000 万元的交易额！</span><br></pre></td></tr></table></figure><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><h3 id="中文使用全角中文标点"><a href="#中文使用全角中文标点" class="headerlink" title="中文使用全角中文标点"></a>中文使用全角中文标点</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">新建一个 Coding 帐户（如果您还没有）：请访问 Coding.net，点击注册按钮（右上角），并按屏幕上显示的说明操作。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">新建一个 Coding 帐户 (如果您还没有):请访问 Coding.net,点击注册按钮（右上角）,并按屏幕上显示的说明操作.</span><br></pre></td></tr></table></figure><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">码市已完成 3000 万元的交易额。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">码市已完成 ３０００ 万元的交易额。</span><br></pre></td></tr></table></figure><h3 id="完整的英文整句、特殊名词使用半角标点"><a href="#完整的英文整句、特殊名词使用半角标点" class="headerlink" title="完整的英文整句、特殊名词使用半角标点"></a>完整的英文整句、特殊名词使用半角标点</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">《Hackers &amp; Painters: Big Ideas from the Computer Age》这本书很好看。</span><br><span class="line"></span><br><span class="line">“Do things that Don’t Scale” 显然已成为创业公司的口头禅。</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">《Hackers＆Painters：Big Ideas from the Computer Age》这本书很好看。</span><br><span class="line"></span><br><span class="line">“Do things that Don＇t Scale” 显然已成为创业公司的口头禅。</span><br></pre></td></tr></table></figure><h3 id="横排文稿使用弯引号"><a href="#横排文稿使用弯引号" class="headerlink" title="横排文稿使用弯引号"></a>横排文稿使用弯引号</h3><p>正确示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">CODING CEO 说：“CODING 的愿景是 ‘Coding Anytime Anywhere’。”</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">CODING CEO 说：「CODING 的愿景是 『Coding Anytime Anywhere』。」</span><br></pre></td></tr></table></figure><p>注意：<a href="http://www.moe.gov.cn/ewebeditor/uploadfile/2015/01/13/20150113091548267.pdf">《中华人民共和国国家标准标点符号用法》</a> 指出该标准适用于汉语书面语（包括汉语与外语混合排版的汉语部分），在大陆简体中文和繁体中文均属于汉语文字，横排文稿均使用弯引号，而竖排文稿改用双引号 “﹄” “﹃” 和单引号 “﹂” “﹁”。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从各个小标题可以看出：“以提高可读性” 是排版的第一要义。抱着这个思路去编写文档，这些规范就不难理解了。</p><p>这种规定到空格级别的格式有意义吗？在我看来这种对文档排版的苛求体现了个人行事风格，如果团队有此要求，就更应该严格遵守。</p><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift 初始化</title>
      <link href="/2018/03/31/swift-init/"/>
      <url>/2018/03/31/swift-init/</url>
      
        <content type="html"><![CDATA[<p>因为自己是直接从 Swift 进入的 iOS 开发，Swift 与 Objective-C 初始化的对比就不多提了。感觉上 Swift 初始化的方式像 Java，自己也只这样套着 Java 去理解，但也发现了不相同的地方。</p><h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Blog</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> param: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有条错误 <code>error: property &#39;self.param&#39; not initialized at implicitly generated super.init call</code> 说明：<code>param</code> 参数没有在隐式生成 <code>super.init</code> 调用之前完成初始化。</p><p>Swift 中并不是不调用 <code>super.init</code> 而是为了方便开发者由编译器完成了这一步，但是要求调用 <code>super.init</code> 之前要完成成员变量的初始化。</p><span id="more"></span><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Blog</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> param: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        param <span class="operator">=</span> <span class="string">&quot;swift init&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于需要修改父类中成员变量值，我们需要在调用 <code>super.init</code> 之后再进行修改：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        name <span class="operator">=</span> <span class="string">&quot;cat&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>: <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> power: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        power <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        name <span class="operator">=</span> <span class="string">&quot;tiger&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift 中类的初始化顺序：</p><ol><li>初始化自己的成员变量，必须</li><li>调用父类初始化方法，如无需第三步，则这一步也可省略</li><li>修改父类成员变量，可选</li></ol><p>补充说明：</p><ul><li><code>let</code> 声明的常量是可以在初始化方法中进行赋值，Swift 中的 init 方法只会被调用一次，这与 Objective-C 不同</li><li>即使成员变量是可选类型，如：<code>let power: Int?</code> 仍然是需要进行初始化的，<code>var power: Int?</code> 则可以不用</li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>例子 1：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> param: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123; <span class="comment">// error 1</span></span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>() <span class="comment">// error 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// error 3</span></span><br></pre></td></tr></table></figure><p>将父类从 <code>NSObject</code> 修改为 <code>UIView</code>，竟然收到 3 条错误：</p><ol><li>initializer does not override a <strong>designated</strong> initializer from its superclass</li><li>must call a designated initializer of the superclass ‘UIView’</li><li><strong>‘required’</strong> initializer ‘init(coder:)’ must be provided by subclass of ‘UIView’</li></ol><p>例子 2：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">param</span>: <span class="type">Int</span>, <span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame) <span class="comment">// error</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>error：</p><ul><li><strong>convenience</strong> initializer for ‘CustomView’ must delegate (with ‘self.init’) rather than chaining to a superclass</li></ul><p>上面俩个例子出现了 3 个关键字：<code>designated</code>、<code>convenience</code> 和 <code>required</code>。</p><h3 id="designated"><a href="#designated" class="headerlink" title="designated"></a>designated</h3><p>Swift 定义了两种类初始化器类型，用来保证所有成员属性能够获得一个初始化值。即 designated initializers [i’niʃəlaizə] 和 convenience initializers。</p><blockquote><p>Designated initializers are the primary initializers for a class. A designated initializer fully initializes all properties introduced by that class and calls an appropriate superclass initializer to continue the initialization process up the superclass chain.</p></blockquote><ol><li>primary initializers：designated initializers 是一个类的主初始化器，理论上来说是一个类初始化的必经之路。（不同的初始化路径可能调用不同的 designated initializers）</li><li>fully initializes all properties：必须在 designated initializers 中完成所有成员属性的初始化</li><li>calls an appropriate superclass initializer：需要调用合适的父类初始化器完成初始化，不能随意调用</li></ol><p>_在 Swift 中 designated initializers 的写法和一般的初始化方法无异_，Sample 1 中，我们试图去 override init，可以理解为我们就是在 override 一个 designated initializers，然后我们收到了错误 Initializer does not override a designated initializer from its superclass，可见我们并没有找到合适的 designated initializers，我们进入父类 UIView，可以看到下面两个初始化方法：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>)</span><br></pre></td></tr></table></figure><p>原来，这两个类才是父类的 designated initializers，那我们改改试试：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> param: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123; <span class="comment">// error 1 fixed</span></span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame) <span class="comment">// error 2 fixed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// error 3</span></span><br></pre></td></tr></table></figure><p>error 1 fixed 由此可见：我们去 override 一个不是 designated initializers 的初始化器时，是不满足定义中所说的 primary initializers，这就可能导致这个初始化器不被执行，成员变量没有初始化，这样创建的“半成品”实例可能存在一些不安全的情况。</p><p>第二条 fully initializes all properties，这点我们并没有犯错，因为我们已经初始化了 CustomView 类中引入的 param 变量。</p><p>第三条 calls an appropriate superclass initializer 很明显就对应了 error 2，我们 override init(frame:)，那我们就必须调用对应的父类初始化方法。</p><p>error 3 提示我们 init(coder:) 是一个 ‘required’ initializer，子类必须提供</p><h3 id="required"><a href="#required" class="headerlink" title="required"></a>required</h3><blockquote><p>Write the required modifier before the definition of a class initializer to indicate that every subclass of the class must implement that initializer.</p></blockquote><p>通过添加 required 关键字强制子类对某个初始化方法进行重写。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> param: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123; <span class="comment">// error 1 fixed</span></span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame) <span class="comment">// error 2 fixed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// error 3 fixed</span></span><br></pre></td></tr></table></figure><p>error 3 fixed 插入的这个方法很奇怪，方法体里直接写 <code>fatalError(&quot;init(coder:) has not been implemented&quot;)</code>，那岂不是走到这里就 crash 了？</p><p>designated initializers 是一个类的主初始化器，理论上来说是一个类初始化的必经之路（不同的初始化路径可能调用不同的 designated initializers），其实，这个 <code>init(coder:)</code> 与 <code>init(frame: frame)</code> 就是不同的初始化路径，当我们使用 xib 方式初始化一个 view 时，就会走到 init(coder:)。此时，如果我们没有真正实现这个方法，就会出现 fatal crash。</p><p>完整初始方案：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> param: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="convenience"><a href="#convenience" class="headerlink" title="convenience"></a>convenience</h3><blockquote><p>Convenience initializers are secondary, supporting initializers for a class. You can define a convenience initializer to call a designated initializer from the same class as the convenience initializer with some of the designated initializer’s parameters set to default values. You can also define a convenience initializer to create an instance of that class for a specific use case or input value type.</p></blockquote><p>convenience initializers 是对类初始化方法的补充，用于为类提供一些快捷的初始化方法，可以不创建这类方法，但如果创建了，就需要遵循原则：call a designated initializer from the same class，也就是说要调用该类自己的 <code>designated initializer</code>，那么我们应该 <code>override init(frame:)</code> ，然后修改为：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">param</span>: <span class="type">Int</span>, <span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(frame: frame) <span class="comment">// error fixed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对成员变量 <code>param</code> 赋值：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> param: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">param</span>: <span class="type">Int</span>, <span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> param <span class="comment">// error</span></span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame) <span class="comment">// error</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;init(coder:) has not been implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来个两个错误：</p><ul><li>Use of ‘self’ in property access ‘param’ before self.init initializes self</li><li>Property ‘self.param’ not initialized at super.init call</li></ul><p>第二个错误我们清楚，是需要在调用 super.init 之前初始化本类成员属性。</p><p>第一个错误其实，这是 Swift 编译器提供的安全检查，文档原文如下：</p><blockquote><p>A convenience initializer must delegate to another initializer before assigning a value to any property (including properties defined by the same class). If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer.</p></blockquote><p>原来 Swift 防止 convenience initializers 中赋值之后又被该类自己的 designated initializer 覆盖而做了检查。因此，正确的方式应该是调用该类的其他初始化方法之后再修改属性值，最终修改如下：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomView</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> param: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">param</span>: <span class="type">Int</span>, <span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> param <span class="comment">// error fixed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(<span class="params">frame</span>: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> <span class="number">0</span> <span class="comment">// error fixed</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.param <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>子类中初始化方法必须覆盖全部初始化路径，以保证对象完全初始化</li><li>子类中 <code>designated initializer</code> 必须调用父类中对应的 <code>designated initializer</code>，以保证父类也能完成初始化</li><li>子类中如果重写父类中 <code>convenience initializer</code> 所需要的全部 <code>init</code> 方法，就可以在子类中使用父类的 <code>convenience initializer</code> 了</li><li>子类如果没有定义任何 <code>designated initializer</code>，则默认继承所有父类的 <code>designated initializer</code> 及 <code>convenience initializer</code></li><li>子类中必须实现的 <code>designated initializer</code>，可以通过添加 <code>required</code> 关键字强制子类重写其实现，以保证依赖该方法的 <code>convenience initializer</code> 始终可以使用</li><li><code>convenience initializer</code> 必须调用自身类中的其他初始化方法，并在最终必须调用一个 <code>designated initializer</code></li><li>在构造器完成初始化之前, 不能调用任何实例方法，或读取任何实例属性的值，<code>self</code> 本身也不能被引用</li></ol><h2 id="可失败初始化器"><a href="#可失败初始化器" class="headerlink" title="可失败初始化器"></a>可失败初始化器</h2><p>可失败初始化器 <code>Failable Initializers</code> ，即可能返回 <code>nil</code> 的初始化方法。</p><blockquote><p>A failable initializer creates an <em>optional value</em> of the type it initializes. You write <em>return nil within a failable initializer</em> to indicate a point at which initialization failure can be triggered.</p></blockquote><p>就是将初始化返回值变成 optional value，并在不满足初始化条件的地方 return nil。通过调用处判断是否有值即可知道是否初始化成功。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> name.isEmpty &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CartItem</span>: <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> quantity: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">quantity</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> quantity <span class="operator">&lt;</span> <span class="number">1</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">self</span>.quantity <span class="operator">=</span> quantity</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CartItem 类的初始化方法先对传入参数 <code>quantity</code> 的值进行判断，小于 <code>1</code> 则为无效参数，然后 <code>return nil</code>（初始化失败），大于或等于 <code>1</code> 则继续调用父类 <code>Product</code> 的初始化方法，再次判断传入参数 <code>name</code>，为空则 <code>return nil</code>（初始化失败），否则继续初始化。</p><p>总的来说，可失败初始化器的设定，是在保证安全性的基础上提供了逻辑上更清晰的初始化方式。<code>Failable Initializers</code> 所有的结果都将是 <code>T?</code> 类型，通过 <code>Optional Binding</code> 方式，我们就能知道初始化是否成功，并安全地使用它们了。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://huizhao.win/2016/11/13/swift-init/">从 Swift 初始化说起</a></li><li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html">The Swift Programming Language (Swift 4.1) Initialization</a></li><li><a href="https://draveness.me/swift-zhong-init-de-shi-yong">Swift 类构造器的使用</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS Safe Area 我所知道的全部</title>
      <link href="/2018/03/29/ios-safe-area/"/>
      <url>/2018/03/29/ios-safe-area/</url>
      
        <content type="html"><![CDATA[<p>在 iOS 7 Apple 在 UIViewController 中引入了 <code>topLayoutGuide</code> 和 <code>bottomLayoutGuide</code> 属性来描述没有被覆盖(status bar, navigation bar, toolbar, tab bar, etc.)屏幕的区域。在 iOS 11 中，Apple 已经弃用了这些属性，并引入了 safe area。Apple 建议我们不要在 safe area 操作，在 iOS 11 中，当在 iOS App 中定位视图时，你必须使用新的 safe area API。</p><h2 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h2><p>在 iOS 11 UIViewController <code>topLayoutGuide</code> 和 <code>bottomLayoutGuide</code> 属性已经被替换成了新的 UIView 中的 safe area：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> safeAreaInsets: <span class="type">UIEdgeInsets</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> safeAreaLayoutGuide: <span class="type">UILayoutGuide</span> &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure><p><code>safeAreaInsets</code> 属性意味着屏幕可以覆盖从四个方向，而不仅仅是顶部和底部。当被 iPhone X 呈现时，我们就明白了为什么我们需要左右 insets。</p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1fptmugww5wj30zs0x0jw8.jpg" alt="ios-safe-area" width="400" /><p><em>iPhone 8 vs iPhone X safe area (portrait orientation)</em></p><span id="more"></span><img src="https://tva1.sinaimg.cn/large/006tNbRwly1fptmv9csg7j30z0152ae6.jpg" alt="ios-safe-area" width="400" /><p><em>iPhone 8 vs iPhone X safe area (landscape orientation)</em></p><p>iPhone X 在 portrait orientation 有 top 和 bottom 的 safe area，在 landscape orientation 有 left right 和 bottom。</p><p>让我们来看一个例子。在 ViewController 的 View 的顶部和底部添加了两个带有文本标签和固定高度的 custom subviews，并附加 attached 到视图的边缘 edges。</p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1fptnobrau6j30no14i13p.jpg" alt="ios-safe-area" width="300" /><p><em>Subviews are attached to the view’s edges</em></p><p>正如所看到的，subviews 内容与顶部的 notch 和底部的 home indicator 指示器重叠 overlapped。为了正确地定位 subviews，我们可以使用手动布局将它们附加到 safe area：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">topSubview.frame.origin.x <span class="operator">=</span> view.safeAreaInsets.left</span><br><span class="line">topSubview.frame.origin.y <span class="operator">=</span> view.safeAreaInsets.top</span><br><span class="line">topSubview.frame.size.width <span class="operator">=</span> view.bounds.width <span class="operator">-</span> view.safeAreaInsets.left <span class="operator">-</span> view.safeAreaInsets.right</span><br><span class="line">topSubview.frame.size.height <span class="operator">=</span> <span class="number">300</span></span><br></pre></td></tr></table></figure><p>或者使用 Auto Layout：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">bottomSubview.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">bottomSubview.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">bottomSubview.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">bottomSubview.heightAnchor.constraint(equalToConstant: <span class="number">300</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/006tNbRwly1fptqg9si13j30no14iwq1.jpg" alt="ios-safe-area" width="300" /><p><em>Subviews are attached to the superview safe area</em></p><p>上面看起来好很多。此外可以在 subview subclass 添加 subviews content 到 safe area。</p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1fptquigdxjj30no14iqdh.jpg" alt="ios-safe-area" width="300" /><p><em>Subviews are attached to the view’s edges. Labels are attached to the superview safe area.</em></p><p>在 subviews 层次结构 hierarchy 的任何地方都可以将 view 添加到 safe area。</p><h2 id="UIViewController"><a href="#UIViewController" class="headerlink" title="UIViewController"></a>UIViewController</h2><p>在 iOS 11 UIViewController 有了一个新属性：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> additionalSafeAreaInsets: <span class="type">UIEdgeInsets</span></span><br></pre></td></tr></table></figure><p>当 view controller subviews 覆盖嵌入的 child view controller views 时，将使用它。例如，Apple 在 UINavigationController 和 UITabBarController 中使用额外的 additional safe area insets，当这些条是半透明的。</p><p><code>additionalSafeAreaInsets</code> 是对现有 safearea 的扩展附加。</p><p>当你改变 additional safe area insets 或者 safe area insets 被系统改变，UIView 和 UIViewController 中的方法将被调用：</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UIView</span></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">safeAreaInsetsDidChange</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//UIViewController</span></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">viewSafeAreaInsetsDidChange</span>()</span><br></pre></td></tr></table></figure><h3 id="Simulate-iPhone-X-safe-area"><a href="#Simulate-iPhone-X-safe-area" class="headerlink" title="Simulate iPhone X safe area"></a>Simulate iPhone X safe area</h3><p>Additional safe area insets 也可以用来测试你的 app 是如何支持 iPhone X，如果你不能在模拟器上测试你的 app，而且没有 iPhone X，那就很有用了。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//portrait orientation, status bar is shown</span></span><br><span class="line">additionalSafeAreaInsets.top <span class="operator">=</span> <span class="number">24.0</span></span><br><span class="line">additionalSafeAreaInsets.bottom <span class="operator">=</span> <span class="number">34.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//portrait orientation, status bar is hidden</span></span><br><span class="line">additionalSafeAreaInsets.top <span class="operator">=</span> <span class="number">44.0</span></span><br><span class="line">additionalSafeAreaInsets.bottom <span class="operator">=</span> <span class="number">34.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//landscape orientation</span></span><br><span class="line">additionalSafeAreaInsets.left <span class="operator">=</span> <span class="number">44.0</span></span><br><span class="line">additionalSafeAreaInsets.bottom <span class="operator">=</span> <span class="number">21.0</span></span><br><span class="line">additionalSafeAreaInsets.right <span class="operator">=</span> <span class="number">44.0</span></span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/006tNc79ly1fpw2l9aa64j31kw0z0q9t.jpg" alt="ios-safe-area" width="400" /><h2 id="UIScrollView"><a href="#UIScrollView" class="headerlink" title="UIScrollView"></a>UIScrollView</h2><blockquote><p>待续</p></blockquote><h2 id="Refereneces"><a href="#Refereneces" class="headerlink" title="Refereneces"></a>Refereneces</h2><ul><li><a href="https://medium.com/rosberryapps/ios-safe-area-ca10e919526f">iOS Safe Area</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UITableViewCell 自适应 UITextView 高度</title>
      <link href="/2018/03/27/self-sizing-uitextview-in-a-uitableviewcell/"/>
      <url>/2018/03/27/self-sizing-uitextview-in-a-uitableviewcell/</url>
      
        <content type="html"><![CDATA[<p>使用 Auto Layout 让 UITableViewCell 自适应 UITextView 高度，效果演示：</p><img src="https://user-images.githubusercontent.com/9289792/37953137-931860e0-31d4-11e8-8809-c871b09f9519.gif" alt="Self-sizing UITextView in cell" width="200" /><p><a href="https://github.com/imzyf/99-projects-of-swift/tree/master/029-tableviewcell-self-adaption">99-projects-of-swift&#x2F;029-tableviewcell-self-adaption</a></p><span id="more"></span><h2 id="预备步骤"><a href="#预备步骤" class="headerlink" title="预备步骤"></a>预备步骤</h2><ol><li>给 textView 上下左右建立相对于 cell 的约束</li><li>取消 textView 的 <code>Scrolling Enabled</code></li><li>设置 tableView 估算高度 <code>tableView.estimatedRowHeight = 70</code></li><li>设置 <code>textView.delegate = self</code></li></ol><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p>如果在 <code>textViewDidChange(textView:)</code> 调用 <code>tableView.reloadData()</code> 会造成 textView 失去焦点，键盘隐藏。</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func textViewDidChange(textView: UITextView) &#123;</span><br><span class="line">    tableView.beginUpdates()</span><br><span class="line">    tableView.endUpdates()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里带来了一个问题，当 textView 长度超过一屏或者过长时，在输入时 tableView 会跳动滚动 jumping and stuttering。</p><p>更好的解决方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func textViewDidChange(textView: UITextView) &#123;</span><br><span class="line">    let currentOffset = tableView.contentOffset</span><br><span class="line">    UIView.setAnimationsEnabled(false)</span><br><span class="line">    tableView.beginUpdates()</span><br><span class="line">    tableView.endUpdates()</span><br><span class="line">    UIView.setAnimationsEnabled(true)</span><br><span class="line">    tableView.setContentOffset(currentOffset, animated: false)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁用动画和重建表视图的内容偏移修正抖动。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://candycode.io/self-sizing-uitextview-in-a-uitableview-using-auto-layout-like-reminders-app/">Self-sizing UITextView in a UITableView using Auto Layout - like Reminders.app</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【译】iOS 单元测试和 UI 测试入门教程</title>
      <link href="/2018/03/15/ios-unit-testing-and-ui-testing-tutorial/"/>
      <url>/2018/03/15/ios-unit-testing-and-ui-testing-tutorial/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://www.raywenderlich.com/150073/ios-unit-testing-and-ui-testing-tutorial">iOS Unit Testing and UI Testing Tutorial - Ray Wenderlich</a></p></blockquote><p>编写测试并不迷人 (glamorous)，但是既然测试能让你闪闪发光 (sparkling) 的应用程序变成 (from turning into) 一堆乱七八糟的垃圾，那么说明测试是必要的。如果你正在阅读 iOS 单元测试和 UI 测试入门教程，那么你已经知道 <em>应该</em> 为代码和 UI 编写测试，但是你不知道如何在 Xcode 中进行测试。</p><span id="more"></span><p>也行你已经有一个 “可以运行” 的 app 但是没有为它编写任何测试，并且当你想拓展 app 时，你能够测试任何的改变。也许你已经编写了一些测试，但是不确定他们是否是 <em>正确</em> 的测试。或者你现在正在开发你的 app，想在你离开的时候进行测试。</p><p>这篇入门教程将告诉你如何使用 Xcode 的测试导航栏去测试一个 app 模块和异步方法 (asynchronous methods)，如何模拟交互 fake interactions 或者系统对象通过 subs and mocks，如何测试 UI 和性能 performance，和如何使用代码覆盖率工具 code coverage tool。在此过程中 Along the way，您将会学到一些用于测试忍者 testing ninjas 的词汇 vocabulary，在本教程的最后，你将使用依赖注入对您的系统进行测试 you’ll be injecting dependencies into your System Under Test (SUT) with aplomb!。</p><h2 id="测试，测试"><a href="#测试，测试" class="headerlink" title="测试，测试"></a>测试，测试</h2><h3 id="测试什么"><a href="#测试什么" class="headerlink" title="测试什么"></a>测试什么</h3><p>在编写任何测试之前，一个开始时非常重要的基础是：你需要测试什么？如果你的目标是拓展一个已经存在的 app，你首先应该为 <strong>任何你计划改变的组件</strong> 编写测试。</p><p>更普遍的讲，测试应该覆盖：</p><ul><li>核心功能 Core functionality：模型、类和方法，和与他们相互作用的控制器</li><li>最常见的 UI 工作流</li><li>边界条件 Boundary conditions</li><li>Bug 修复</li></ul><h3 id="第一件事-FIRST：测试的最佳实践"><a href="#第一件事-FIRST：测试的最佳实践" class="headerlink" title="第一件事 FIRST：测试的最佳实践"></a>第一件事 FIRST：测试的最佳实践</h3><p>FIRST 首字母缩写词描述了有效单元测试的一套简明标准。这些条件是：</p><ul><li>Fast：运行测试应该快速，这样人们就不会介意运行它们了。</li><li>Independent&#x2F;Isolated：测试不应该对彼此进行设置或拆解 setup or teardown。</li><li>Repeatable：每次运行测试时，都应该得到相同的结果。外部数据提供者和并发问题可能导致间歇性故障。</li><li>Self-validating：测试应完全自动化；输出应该是“通过”或“失败”，而不是程序员对日志文件的解释。</li><li>Timely：理想情况下，测试应该在编写生产代码之前编写。</li></ul><p>遵循 FIRST 原则，你的测试将保持清晰和有帮助，而不是为你的 app 设置障碍。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>下载，解压，打开，检查 <a href="https://koenig-media.raywenderlich.com/uploads/2016/12/Starters.zip">初始项目</a> BullsEye 和 HalfTunes。</p><p>BullsEye 是一个基于 <a href="https://www.raywenderlich.com/store/ios-apprentice">iOS Apprentice</a> 的示例 app。已经将游戏逻辑提取到一个 BullsEyeGame 类中，并添加了另一种游戏风格。</p><p>在右下角，有一个分段控制，让用户选择游戏风格：Slide，移动滑块尽可能接近目标值，或者 Type，来猜测滑块的位置。控件的操作还将用户的游戏样式选择存储为用户默认值。</p><p>HalfTunes 是 <a href="https://www.raywenderlich.com/110458/nsurlsession-tutorial-getting-started">NSURLSession Tutorial</a> 中的示例 app，更新至 Swift 3。 用户可以通过 iTunes API 查询歌曲，然后下载并播放歌曲片段。</p><p>让我们开始测试！</p><h2 id="Xcode-中的单元测试"><a href="#Xcode-中的单元测试" class="headerlink" title="Xcode 中的单元测试"></a>Xcode 中的单元测试</h2><h3 id="创建一个-Unit-Test-Target"><a href="#创建一个-Unit-Test-Target" class="headerlink" title="创建一个 Unit Test Target"></a>创建一个 Unit Test Target</h3><p>Xcode Test Navigator 提供了使用测试的最简单的方法；你将使用它创建 test targets 和在 app 运行测试。</p><p>打开 BullsEye 项目然后敲击 Command + 6 打开 test navigator。</p><p>点击右下角的 + 按钮，然后从菜单中选择 New Unit Test Target…</p><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/TestNavigator1.png"></p><p>接受默认的名字 BullsEyeTests。当 test navigator 中出现 test bundle，点击打开。如果 BullsEyeTests 没有自动出现，通过单击其他 navigators 中的一个来解决问题 trouble-shoot by，然后返回到 test navigator。</p><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/TestNavigator2.png"></p><p>模板导入了 XCTest 并定义了 XCTestCase 的一个 BullsEyeTests 子类，还有 setup() tearDown() 和 testExample()。</p><p>有三种方法运行 test class：</p><ol><li>Product\Test or Command-U. 将运行所有的 test classes</li><li>在 test navigator 中点击 arrow 按钮</li><li>在边沿点击菱形按钮</li></ol><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/TestNavigator3.png"></p><p>您还可以通过单击菱形按钮来运行单个测试方法，无论是在 test navigator 中还是在 gutter 中。</p><p>当所有的 tests 成功后，菱形按钮就会变绿并显示出检查的痕迹。单击 testPerformanceExample() 末尾的灰色菱形，打开性能结果：</p><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/TestNavigator4.png"></p><p>你不需要 testPerformanceExample()，所以删除它。</p><h3 id="使用-XCTAssert-测试-Models"><a href="#使用-XCTAssert-测试-Models" class="headerlink" title="使用 XCTAssert 测试 Models"></a>使用 XCTAssert 测试 Models</h3><p>首先，将使用 XCTAssert 去测试 BullsEye model 中的一个核心方法：BullsEyeGame 对象是否正确计算一个回合的分数。</p><p>在 BullsEyeTests.swift 添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@testable import BullsEye</span><br></pre></td></tr></table></figure><p>这使得 unit tests 可以访问 BullsEye 中的类和方法。</p><p>在 BullsEyeTests 顶部添加属性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var gameUnderTest: BullsEyeGame!</span><br></pre></td></tr></table></figure><p>在 setup() 创建一个新 BullsEyeGame 对象，在 super 之后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gameUnderTest = BullsEyeGame()</span><br><span class="line">gameUnderTest.startNewGame()</span><br></pre></td></tr></table></figure><p>这将在类级别创建一个 SUT (System Under Test) object，因此这个 test class 中的所有测试都可以访问 SUT 对象的属性和方法。</p><p>在这里你也可以调用 startNewGame，它将创建一个 targetValue。许多测试将使用 targetValue，来测试游戏是否正确地计算了分数。</p><p>不要忘记释放你的 SUT object 在 tearDown()，在你调用 super 之前</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gameUnderTest = nil</span><br></pre></td></tr></table></figure><blockquote><p>Note: It’s good practice to create the SUT in setup() and release it in tearDown(), to ensure every test starts with a clean slate. For more discussion, check out Jon Reid’s post on the subject.</p></blockquote><p>现在你已经准别写你的第一个 test！</p><p>用一些代码替换 testExample()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// XCTAssert to test model</span><br><span class="line">func testScoreIsComputed() &#123;</span><br><span class="line">  // 1. given</span><br><span class="line">  let guess = gameUnderTest.targetValue + 5</span><br><span class="line"></span><br><span class="line">  // 2. when</span><br><span class="line">  _ = gameUnderTest.check(guess: guess)</span><br><span class="line"></span><br><span class="line">  // 3. then</span><br><span class="line">  XCTAssertEqual(gameUnderTest.scoreRound, 95, &quot;Score computed from guess is wrong&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个 test 方法总是以 test 开头，接下来是对它测试的描述。</p><p>将测试格式化为 given when then 是很好的做法：</p><ol><li>在 given 部分，设置需要的值：在此例你创建一个 guess 值，所以你可以指定它与 targetValue 有多大的不同。</li><li>在 when 部分，执行正在测试的代码：调用 <code>gameUnderTest.check(_:)</code>。</li><li>在 then 部分，断言你所预期的结果（在本例，gameUnderTest.scoreRound is 100 – 5）如果测试失败，则会打印一条消息。</li></ol><blockquote><p>Note: To see a full list of XCTestAssertions, Command-click XCTAssertEqual in the code to open XCTestAssertions.h, or go to Apple’s Assertions Listed by Category.</p></blockquote><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/givenWhenThen.png" width="260px" /><blockquote><p>Note: The Given-When-Then structure of a test originated with Behavior Driven Development (BDD) as a client-friendly, low-jargon nomenclature. Alternative naming systems are Arrange-Act-Assert and Assemble-Activate-Assert.</p></blockquote><h3 id="Debugging-a-Test"><a href="#Debugging-a-Test" class="headerlink" title="Debugging a Test"></a>Debugging a Test</h3><p>在 BullsEyeGame 故意留下了 bug，所以现在你要练习找到它。为了找到 bug 将 testScoreIsComputed 改名为 testScoreIsComputedWhenGuessGTTarget。在这个 test 中，在 given 部分从 targetValue 减去 5</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func testScoreIsComputedWhenGuessLTTarget() &#123;</span><br><span class="line">  // 1. given</span><br><span class="line">  let guess = gameUnderTest.targetValue - 5</span><br><span class="line"></span><br><span class="line">  // 2. when</span><br><span class="line">  _ = gameUnderTest.check(guess: guess)</span><br><span class="line"></span><br><span class="line">  // 3. then</span><br><span class="line">  XCTAssertEqual(gameUnderTest.scoreRound, 95, &quot;Score computed from guess is wrong&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>guess 与 targetValue 之间仍然是 5，所以分数应该还是 95。在 breakpoint navigator 添加 Test Failure Breakpoint，这将在断言失败时停止测试运行。</p><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/AddTestFailureBreakpoint.png"></p><p>运行你的 test：当测试失败时它将停在 XCTAssertEqual 这行。检查 gameUnderTest 和 guess 在 debug console</p><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/TestFailure.png"></p><p>guess 是 trgetValue - 5 但是 scoreRound is 105 不是 95！</p><p>进一步研究，使用正常的调试过程：在 when 声明处和在 BullsEyeGame.swift 设置断点，在 <code>check(_:)</code> 中产生了差异。然后再次运行测试，并且 step-over let difference 检查 difference 的差异值：</p><p><img src="https://koenig-media.raywenderlich.com/uploads/2016/12/DebugConsole.png"></p><p>问题是 difference 是负的，所以得分是 100 – (-5)，使用 difference 绝对值来修复这里。</p><p>移除两个断点然后再次运行测试以确认它现在成功了。</p><blockquote><p>待续</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git 权威指南】读书笔记 - 协同模型</title>
      <link href="/2018/01/19/got-git-reading-notes-model/"/>
      <url>/2018/01/19/got-git-reading-notes-model/</url>
      
        <content type="html"><![CDATA[<p>主要内容：【Git 协同模型】</p><h2 id="经典-Git-协同模型"><a href="#经典-Git-协同模型" class="headerlink" title="经典 Git 协同模型"></a>经典 Git 协同模型</h2><h3 id="集中式协同模型"><a href="#集中式协同模型" class="headerlink" title="集中式协同模型"></a>集中式协同模型</h3><p>可以像集中式版本控制系统那样使用 Git，在一个大家都可以访问到的服务器上架设 Git 服务器，每个人从该服务器克隆代码，本地提交推送到服务器上。</p><h2 id="金字塔式协同模型"><a href="#金字塔式协同模型" class="headerlink" title="金字塔式协同模型"></a>金字塔式协同模型</h2><p>虽然理论上每个开发者的版本库都是平等的，但是会有一个公认的权威的版本库，这个版本库由一个或者多个核心开发者负责维护（具有推送的权限）。</p><p>开源社区逐渐发展出金字塔模型，而这也是必然之选。</p><span id="more"></span><h2 id="Topgit-协同模型"><a href="#Topgit-协同模型" class="headerlink" title="Topgit 协同模型"></a>Topgit 协同模型</h2><blockquote><p>笔者注：Topgit 是否已经过时？</p></blockquote><p><code>卖主分支 Vendor Branch</code> 是在版本库中专门创建一个和上游同步的分支，一旦有上游代码发布就捡入到卖主分支中。</p><h2 id="子模组协同模型"><a href="#子模组协同模型" class="headerlink" title="子模组协同模型"></a>子模组协同模型</h2><h3 id="创建子模组"><a href="#创建子模组" class="headerlink" title="创建子模组"></a>创建子模组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add /path/to/repos/libA.git lib/lib_a</span><br></pre></td></tr></table></figure><p><code>.gitmodules</code> 的内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> .gitmodules</span><br><span class="line">[submodule <span class="string">&quot;lib/lib_a&quot;</span>]</span><br><span class="line">        path = lib/lib_a</span><br><span class="line">        url = /path/to/repos/libA.git</span><br></pre></td></tr></table></figure><h3 id="克隆带子模组的版本库"><a href="#克隆带子模组的版本库" class="headerlink" title="克隆带子模组的版本库"></a>克隆带子模组的版本库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /path/to/repos/super.git /path/to/my/workspace/super-clone</span><br></pre></td></tr></table></figure><p>子模组的版本库并不会默认克隆，如果需要克隆出子模组型式引用的外部库，需要执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h3 id="在子模组中修改和子模组的更新"><a href="#在子模组中修改和子模组的更新" class="headerlink" title="在子模组中修改和子模组的更新"></a>在子模组中修改和子模组的更新</h3><p>修改更新的方式和普通仓库一样。如果修改了子模块，要先推送子模块的修改，再推送主仓库，以防止其他人克隆 super 版本库、更新模组时因为找不到该子模组版本库相应的提交而导致出错。</p><p>查看子模组状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule status</span><br></pre></td></tr></table></figure><h2 id="子树合并"><a href="#子树合并" class="headerlink" title="子树合并"></a>子树合并</h2><h3 id="引入外部版本库"><a href="#引入外部版本库" class="headerlink" title="引入外部版本库"></a>引入外部版本库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册外部版本库</span></span><br><span class="line">git remote add util /path/to/repos/util.git</span><br><span class="line"></span><br><span class="line">git fetch util</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 util/master 远程分支创建一个本地分支 util-branch</span></span><br><span class="line">git checkout -b util-branch util/master</span><br></pre></td></tr></table></figure><h3 id="子目录方式合并外部版本库"><a href="#子目录方式合并外部版本库" class="headerlink" title="子目录方式合并外部版本库"></a>子目录方式合并外部版本库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主分支，将分支 util-branch 读取到当前分支的一个子目录下</span></span><br><span class="line">git read-tree --prefix=lib util-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 lib 目录下的文件更新出来</span></span><br><span class="line">git checkout -- lib</span><br></pre></td></tr></table></figure><p>现在还不能忙着提交，因为如果现在进行提交就体现不出来两个分支的合并关系。需要使用 Git 底层的命令进行数据提交。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将暂存区的目录树保存下来</span></span><br><span class="line"></span><br><span class="line">git write-tree</span><br></pre></td></tr></table></figure><p>要手工创建一个合并提交，即新的提交要有两个父提交。这两个父提交分别是 master 分支和 util-branch 分支的最新提交。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;subtree merge&quot;</span> | \</span><br><span class="line">  git commit-tree 2153518409d218609af40babededec6e8ef51616 \</span><br><span class="line">  -p 911b1af2e0c95a2fc1306b8dea707064d5386c2e \</span><br><span class="line">  -p 12408a149bfa78a4c2d4011f884aa2adb04f0934</span><br><span class="line">62ae6cc3f9280418bdb0fcf6c1e678905b1fe690</span><br></pre></td></tr></table></figure><p>需要把当前的 master 分支重置到此提交 ID：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset 62ae6cc3f9280418bdb0fcf6c1e678905b1fe690</span><br></pre></td></tr></table></figure><p>操作繁琐，可使用下面 <code>subtree</code> 命令进行代替。</p><h3 id="利用子树合并跟踪上游改动"><a href="#利用子树合并跟踪上游改动" class="headerlink" title="利用子树合并跟踪上游改动"></a>利用子树合并跟踪上游改动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout util-branch</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git merge -Xsubtree=lib util-branch</span><br></pre></td></tr></table></figure><h2 id="Git-Subtree"><a href="#Git-Subtree" class="headerlink" title="Git Subtree"></a>Git Subtree</h2><h3 id="管理子项目"><a href="#管理子项目" class="headerlink" title="管理子项目"></a>管理子项目</h3><p>假设 <code>P1 项目</code>、<code>P2 项目</code> 共用 <code>S 项目</code></p><ul><li>关联 S 项目</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree add --prefix=&lt;S项目的相对路径&gt; &lt;S项目git地址&gt; &lt;分支&gt; --squash</span><br></pre></td></tr></table></figure><p><code>--squash</code> 意思是把 <code>subtree</code> 的改动合并成一次 <code>commit</code>，这样就不用拉取子项目完整的历史记录。<code>--prefix</code> 之后的 <code>=</code> 等号也可以用空格。</p><ul><li>更新代码</li></ul><p>P1、P2 项目里各种提交 commit，其中有些 commit 会涉及到 <code>S 目录</code> 的更改，但是没关系。</p><ul><li>提交更改到子项目</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree push --prefix=&lt;S项目的相对路径&gt; &lt;S项目git地址&gt; &lt;分支&gt;</span><br></pre></td></tr></table></figure><p>Git 会遍历 <code>步骤 2</code> 中所有的 <code>commit</code>，从中找出针对 <code>S 目录</code> 的更改，然后把这些更改记录提交到 <code>S 项目</code> 的 Git 服务器上，并保留 <code>步骤 2</code> 中的相关 <code>S 的提交</code> 记录到 <code>S仓库</code> 中。</p><ul><li>更新子目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree pull --prefix=&lt;S项目的相对路径&gt; &lt;S 项目 git 地址&gt; &lt;分支&gt; --squash</span><br></pre></td></tr></table></figure><h3 id="拆分已有项目"><a href="#拆分已有项目" class="headerlink" title="拆分已有项目"></a>拆分已有项目</h3><p>需要从现有项目中抽取公共模块单独进行 Git 管理，假设已有 <code>项目 P</code> 抽取 <code>项目 S</code>。</p><ul><li>提交日志分离</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree <span class="built_in">split</span> -P &lt;S项目的相对路径&gt; -b &lt;临时branch&gt;</span><br></pre></td></tr></table></figure><p>Git 会遍历所有的 commit，分离出与 S 项目的相对路径相关的 commit，并存入临时 branch 中。</p><ul><li>创建子 repo</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> &lt;S项目新路径&gt;</span><br><span class="line"><span class="built_in">cd</span> S项目新路径</span><br><span class="line">git init</span><br><span class="line">git pull &lt;P项目的路径&gt; &lt;临时branch&gt;</span><br><span class="line">git remote add origin &lt;S项目的git仓库&gt;</span><br><span class="line">git push origin -u master</span><br></pre></td></tr></table></figure><ul><li>清理数据</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> P项目的路径</span><br><span class="line">git <span class="built_in">rm</span> -rf &lt;S项目的相对路径&gt;</span><br><span class="line">git commit -m <span class="string">&#x27;移除相应模块&#x27;</span> <span class="comment"># 提交删除申请</span></span><br><span class="line">git branch -D &lt;临时branch&gt; <span class="comment"># 删除临时分支</span></span><br></pre></td></tr></table></figure><ul><li>添加 subtree</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree add --prefix=&lt;S项目的相对路径&gt; &lt;S项目git地址&gt; &lt;分支&gt; --squash</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>执行完第 2 步时，对应的目录已经剥离出来形成独立的项目了。第 3，4 步主要是把当前项目的对应的文件给删除，重新在 P 项目建立 Subtree。</p><p><em>tip:</em><br>推送到 GitHub Page：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git subtree push --prefix=dist origin gh-pages</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.worldhello.net/gotgit/04-git-model/">4. 协同模型 &amp;mdash; GotGit</a></li><li><a href="https://www.jianshu.com/p/3096069e9b72">Git Subtree 的使用</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git 权威指南】读书笔记 - 和声</title>
      <link href="/2018/01/17/got-git-reading-notes-harmony/"/>
      <url>/2018/01/17/got-git-reading-notes-harmony/</url>
      
        <content type="html"><![CDATA[<p>主要内容：【Git 协议与工作协同】、【冲突解决】、【Git 里程碑】、【Git 分支】、【远程版本库】、【补丁文件交互】</p><h2 id="Git-协议与工作协同"><a href="#Git-协议与工作协同" class="headerlink" title="Git 协议与工作协同"></a>Git 协议与工作协同</h2><h3 id="Git-支持的协议"><a href="#Git-支持的协议" class="headerlink" title="Git 支持的协议"></a>Git 支持的协议</h3><p>SSH、GIT、HTTP、HTTPS、FTP、FTPS、RSYNC 及前面已经看到的本地协议。</p><p>SSH 协议：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh://[user@]example.com[:port]/path/to/repo.git/</span><br><span class="line"></span><br><span class="line">[user@]example.com:path/to/repo.git/</span><br></pre></td></tr></table></figure><p>GIT 协议，最常用的只读协议：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git://example.com[:port]/path/to/repo.git/</span><br></pre></td></tr></table></figure><p>HTTP[S] 协议：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http[s]://example.com[:port]/path/to/repo.git/</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="强制非快进式推送"><a href="#强制非快进式推送" class="headerlink" title="强制非快进式推送"></a>强制非快进式推送</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure><p>强制推送，会强制刷新服务器中的版本。</p><h3 id="禁止非快进式推送"><a href="#禁止非快进式推送" class="headerlink" title="禁止非快进式推送"></a>禁止非快进式推送</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --git-dir=/path/to/repos/shared.git config receive.denyNonFastForwards true</span><br></pre></td></tr></table></figure><h2 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h2><h3 id="拉回操作中的合并"><a href="#拉回操作中的合并" class="headerlink" title="拉回操作中的合并"></a>拉回操作中的合并</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull = git fetch + git merge</span><br></pre></td></tr></table></figure><h3 id="合并策略"><a href="#合并策略" class="headerlink" title="合并策略"></a>合并策略</h3><blockquote><p><a href="https://git-scm.com/docs/git-merge#_merge_strategies">Merge Strategis</a></p></blockquote><p>Git 合并操作支持很多合并策略，默认会选择最适合的合并策略。例如，和一个分支进行合并时会选择 recursive 合并策略，当和两个或两个以上的其他分支进行合并时采用 octopus 合并策略。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge [-s &lt;strategy&gt;] [-X &lt;strategy-option&gt;] [&lt;commit&gt;...]</span><br></pre></td></tr></table></figure><p>This option forces conflicting hunks to be auto-resolved cleanly by favoring our version.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge -s recursive -X ours [&lt;commit&gt;...]</span><br></pre></td></tr></table></figure><p>Merge branch obsolete into the current branch, using ours merge strategy:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge -s ours obsolete</span><br></pre></td></tr></table></figure><h2 id="Git-里程碑"><a href="#Git-里程碑" class="headerlink" title="Git 里程碑"></a>Git 里程碑</h2><h3 id="显示里程碑"><a href="#显示里程碑" class="headerlink" title="显示里程碑"></a>显示里程碑</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>显示说明。<code>-n&lt;num&gt;</code> 显示最多 <code>&lt;num&gt;</code> 行里程碑的说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -n1</span><br></pre></td></tr></table></figure><p>使用统配：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -l v1.*</span><br></pre></td></tr></table></figure><p>查看提交对应的里程碑及其他引用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --oneline --decorate</span><br></pre></td></tr></table></figure><h3 id="创建里程碑"><a href="#创建里程碑" class="headerlink" title="创建里程碑"></a>创建里程碑</h3><p>当创建了里程碑 mytag 后，会在版本库的 .git&#x2F;refs&#x2F;tags 目录下创建一个新文件。实际上指向的是一个提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag mytag</span><br><span class="line"></span><br><span class="line">git cat-file -t mytag</span><br><span class="line">commit</span><br></pre></td></tr></table></figure><p>带说明的 tag 指向的不再是一个提交，而是一个 tag 对象：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -m &quot;My first annotated tag.&quot; mytag2</span><br><span class="line"></span><br><span class="line">git cat-file -t mytag2</span><br><span class="line">tag</span><br></pre></td></tr></table></figure><p>为里程碑对象添加 GnuPG 签名：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -s -m &quot;My first GPG-signed tag.&quot; mytag3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除里程碑"><a href="#删除里程碑" class="headerlink" title="删除里程碑"></a>删除里程碑</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -d mytag</span><br><span class="line">Deleted tag &#x27;mytag&#x27; (was 60a2f4f)</span><br></pre></td></tr></table></figure><h3 id="共享里程碑"><a href="#共享里程碑" class="headerlink" title="共享里程碑"></a>共享里程碑</h3><p>创建的里程碑，默认只在本地版本库中可见，不会因为对分支执行推送而将里程碑也推送到远程版本库。</p><p>将 mytag 里程碑共享到上游版本库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin mytag</span><br></pre></td></tr></table></figure><p>所有里程碑全部推送到远程版本库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin refs/tags/*</span><br></pre></td></tr></table></figure><ul><li>里程碑共享，必须显式的推送。</li><li>执行获取或拉回操作，自动从远程版本库获取新里程碑，并在本地版本库中创建。</li><li>如果本地已有同名的里程碑，默认不会从上游同步里程碑，即使两者里程碑的指向是不同的。</li></ul><h3 id="删除远程版本库的里程碑"><a href="#删除远程版本库的里程碑" class="headerlink" title="删除远程版本库的里程碑"></a>删除远程版本库的里程碑</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :mytag2</span><br></pre></td></tr></table></figure><h3 id="里程碑命名规范"><a href="#里程碑命名规范" class="headerlink" title="里程碑命名规范"></a>里程碑命名规范</h3><p><a href="https://semver.org/lang/zh-CN/">语义化版本 2.0.0</a></p><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ul><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ul><p>先行版本号及版本编译信息可以加到 <code>主版本号.次版本号.修订号</code> 的后面，作为延伸。</p><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>分支是代码管理的利器。如果没有有效的分支管理，代码管理就适应不了复杂的开发过程和项目的需要。</p><h3 id="分支命令概述"><a href="#分支命令概述" class="headerlink" title="分支命令概述"></a>分支命令概述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示</span><br><span class="line">1. git branch</span><br><span class="line"></span><br><span class="line"># 创建</span><br><span class="line">2. git branch &lt;branchname&gt;</span><br><span class="line">3. git branch &lt;branchname&gt; &lt;start-point&gt;</span><br><span class="line"></span><br><span class="line"># 删除，-d 在删除分支 &lt;branchname&gt; 时会检查所要删除的分支是否已经合并到其他分支中，否则拒绝删除。</span><br><span class="line">4. git branch -d &lt;branchname&gt;</span><br><span class="line">5. git branch -D &lt;branchname&gt;</span><br><span class="line"></span><br><span class="line"># 重命名，-m 如果版本库中已经存在名为 &lt;newbranch&gt; 的分支，拒绝执行重命名，而 7 会强制执行。</span><br><span class="line">6. git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;</span><br><span class="line">7. git branch -M &lt;oldbranch&gt; &lt;newbranch&gt;</span><br></pre></td></tr></table></figure><p>创建并切换到新分支：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;new_branch&gt; [&lt;start_point&gt;]</span><br></pre></td></tr></table></figure><h3 id="分支变基"><a href="#分支变基" class="headerlink" title="分支变基"></a>分支变基</h3><ul><li>master</li><li>dev（开发完成，领先 master）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先切换到 dev</span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line"># 变基操作</span><br><span class="line">git rebase master</span><br><span class="line"></span><br><span class="line"># 遇到冲突，解决冲突</span><br><span class="line"></span><br><span class="line"># 添加到暂存区</span><br><span class="line">git add -u</span><br><span class="line"></span><br><span class="line"># 继续变基</span><br><span class="line">git rebase --continue</span><br><span class="line"></span><br><span class="line"># 直接将 dev 推送到远程 master</span><br><span class="line">git push origin dev:master</span><br><span class="line"></span><br><span class="line"># 切换到 master</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"># 拉取最新代码</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># 删除 dev 分支</span><br><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h2 id="远程版本库"><a href="#远程版本库" class="headerlink" title="远程版本库"></a>远程版本库</h2><h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><p>查看远程分支：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><p>在向远程版本库执行获取操作时，不是把远程版本库的分支原封不动地复制到本地版本库的分支中，而是复制到另外的命名空间。</p><p>远程分支不是真正意义上的分支，是类似于里程碑一样的引用。如果针对远程分支执行检出命令，会看到大段的错误警告。</p><p>远程分支类似于里程碑，如果检出就会使得头指针 HEAD 处于分离头指针状态。实际上除了以 refs&#x2F;heads 为前缀的引用之外，如果检出任何其他引用，都将使工作区处于分离头指针状态。如果对远程分支进行修改就需要创建新的本地分支。</p><h3 id="分支追踪"><a href="#分支追踪" class="headerlink" title="分支追踪"></a>分支追踪</h3><p>为了能够在远程分支 <code>origin/hello-1.x</code> 上进行工作，需要基于该远程分支创建本地分支：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout hello-1.x</span><br></pre></td></tr></table></figure><p>从远程分支创建本地分支，自动建立了分支间的跟踪，而从一个本地分支创建另外一个本地分支则没有。</p><p>从 <code>hello-1.x</code> 分支中创建新的本地分支 <code>hello-jx</code>，并与远程建立联系。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b hello-jx hello-1.x</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat .git/config</span><br></pre></td></tr></table></figure><h3 id="远程版本库-1"><a href="#远程版本库-1" class="headerlink" title="远程版本库"></a>远程版本库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置</span><br><span class="line">git remote add new-remote file:///path/to/repos/hello-user1.git</span><br><span class="line"></span><br><span class="line"># 修改 url</span><br><span class="line">git remote set-url new-remote file:///path/to/repos/hello-user2.git</span><br><span class="line"></span><br><span class="line"># 单独修改 push 地址</span><br><span class="line">git remote set-url --push new-remote /path/to/repos/hello-user2.git</span><br><span class="line"></span><br><span class="line"># 修改 版本库名称</span><br><span class="line">git remote rename new-remote user2</span><br><span class="line"></span><br><span class="line"># 当注册了多个远程版本库并希望获取所有远程版本库的更新</span><br><span class="line">git remote update</span><br><span class="line"></span><br><span class="line"># 如果某个远程版本库不想在执行 git remote update 时获得更新</span><br><span class="line">git config remote.user2.skipDefaultUpdate true</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">git remote rm</span><br></pre></td></tr></table></figure><h3 id="PUSH-和-PULL-操作与远程版本库"><a href="#PUSH-和-PULL-操作与远程版本库" class="headerlink" title="PUSH 和 PULL 操作与远程版本库"></a>PUSH 和 PULL 操作与远程版本库</h3><p>在执行 <code>git pull</code> 操作的时候可以通过参数 <code>--rebase</code> 设置使用变基而非合并操作，将本地分支的改动变基到跟踪分支上。为了避免因为忘记使用 <code>--rebase</code> 参数导致分支的合并，可进行设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config branch.&lt;branchname&gt;.rebase true</span><br></pre></td></tr></table></figure><p>这样在遇到冲突（本地和远程分支出现偏离）的情况下，会采用变基操作，而不是默认的合并操作。</p><p>如果为本地版本库设置参数 <code>branch.autosetuprebase</code> ，值为 <code>true</code>，则在基于远程分支建立本地追踪分支时，会自动配置 <code>branch.&lt;branchname&gt;.rebase</code> 参数。</p><h3 id="分支和里程碑的安全性"><a href="#分支和里程碑的安全性" class="headerlink" title="分支和里程碑的安全性"></a>分支和里程碑的安全性</h3><ul><li><p>用 <code>reflog</code> 记录对分支的操作历史。默认创建的带工作区的版本库都会包含 <code>core.logallrefupdates</code> 为 <code>true</code> 的配置，这样在版本库中建立的每个分支都会创建对应的 <code>reflog</code>。但是创建的裸版本库默认不包含这个设置，也就不会为每个分支设置 <code>reflog</code>。可能因为分支误操作导致数据丢失，可以考虑为裸版本库添加此配置。</p></li><li><p>关闭非快进式提交。配置 <code>receive.denyNonFastForwards</code> 设置为 <code>true</code>，则禁止一切非快进式推送。更好的方法是通过架设基于 SSH 协议的 Git 服务器，配置强制提交的用户权限。</p></li><li><p>关闭分支删除功能。配置 <code>receive.denyDeletes</code> 设置为 <code>true</code>，则禁止删除分支。更好的方法是：配置分支删除的用户权限。</p></li></ul><h2 id="补丁文件交互"><a href="#补丁文件交互" class="headerlink" title="补丁文件交互"></a>补丁文件交互</h2><p>将最近三个提交转换为补丁文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git format-patch -s HEAD~3..HEAD</span><br></pre></td></tr></table></figure><p><code>-s</code> 会在导出的补丁文件中添加当前用户的签名。</p><p>应用补丁：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git am user1-mail-archive</span><br></pre></td></tr></table></figure><p><code>git apply</code> 可以应用一般格式的补丁文件，但是不能执行提交，也不能保持补丁中的作者信息。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.worldhello.net/gotgit/03-git-harmony">3. Git 和声 &amp;mdash; GotGit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R.swift 强类型引用资源文件</title>
      <link href="/2018/01/17/r-swift-getting-started/"/>
      <url>/2018/01/17/r-swift-getting-started/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/mac-cain13/R.swift">R.swift</a> 获取强类型、自动编译的图片、字体、segues 等资源。</p><p>以避免无法编译时检查 <code>字符串</code> 的形式引用资源所导致的错误。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> icon <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;settings-icon&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> font <span class="operator">=</span> <span class="type">UIFont</span>(name: <span class="string">&quot;San Francisco&quot;</span>, size: <span class="number">42</span>)</span><br><span class="line"><span class="keyword">let</span> color <span class="operator">=</span> <span class="type">UIColor</span>(named: <span class="string">&quot;indictator highlight&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> viewController <span class="operator">=</span> <span class="type">CustomViewController</span>(nibName: <span class="string">&quot;CustomView&quot;</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> string <span class="operator">=</span> <span class="type">String</span>(format: <span class="type">NSLocalizedString</span>(<span class="string">&quot;welcome.withName&quot;</span>, comment: <span class="string">&quot;&quot;</span>), locale: <span class="type">NSLocale</span>.current, <span class="string">&quot;Arthur Dent&quot;</span>)</span><br></pre></td></tr></table></figure><p>With R.swift</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> icon <span class="operator">=</span> <span class="type">R</span>.image.settingsIcon()</span><br><span class="line"><span class="keyword">let</span> font <span class="operator">=</span> <span class="type">R</span>.font.sanFrancisco(size: <span class="number">42</span>)</span><br><span class="line"><span class="keyword">let</span> color <span class="operator">=</span> <span class="type">R</span>.color.indicatorHighlight()</span><br><span class="line"><span class="keyword">let</span> viewController <span class="operator">=</span> <span class="type">CustomViewController</span>(nib: <span class="type">R</span>.nib.customView.name)</span><br><span class="line"><span class="keyword">let</span> string <span class="operator">=</span> <span class="type">R</span>.string.localizable.welcomeWithName(<span class="string">&quot;Arthur Dent&quot;</span>)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>其中 GitHub 上有的就不再累述了，主要注意：</p><ul><li>添加 <code>R.generated.swift</code> 不要勾选 <code>Copy items if needed</code>，软引用就好。</li><li>要在 <code>.gitignore</code> 添加 <code>*.generated.swift</code> 以避免不必要的冲突。</li></ul><p>添加新的资源文件后需要 <code>command + b</code> 编译下，才可以使用。</p><h2 id="clr-颜色文件的创建和使用"><a href="#clr-颜色文件的创建和使用" class="headerlink" title=".clr 颜色文件的创建和使用"></a>.clr 颜色文件的创建和使用</h2><p>使用 Xcode 创建 .clr 文件：</p><img src="https://user-images.githubusercontent.com/9289792/80204310-36566900-865b-11ea-864b-89a8e5cc8e75.jpg" alt="Create a Color Palette" width="300px" /><p>之后可以在其中添加颜色，选择颜色回车可以对颜色从新命名。</p><p>生成的 <code>.clr</code> 文件保存在 <code>~/library/Colors</code> 下，可以导入到项目后再通过 <code>R.color</code> 使用。</p><p>Tips 打开、关闭隐藏文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + .</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.natashatherobot.com/xcode-color-palette/">XCode Tip: Color Palette</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode 不知名的实用技巧</title>
      <link href="/2018/01/12/xcode-tips/"/>
      <url>/2018/01/12/xcode-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h2><h3 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h3><p><code>Search</code> 框可以很方便的检索到相关的设置项。</p><img src="https://user-images.githubusercontent.com/9289792/80204076-c811a680-865a-11ea-8c0b-5e3b70ae22bd.jpg" alt="xcode-unknown-tips-Search" width="960px" /><span id="more"></span><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p><code>⌘ 1</code> .. <code>⌘ 7</code> 可以切换窗口。</p><h3 id="Show-the-Symbol-navigator"><a href="#Show-the-Symbol-navigator" class="headerlink" title="Show the Symbol navigator"></a>Show the Symbol navigator</h3><p>在类不多时，可以方便看所有类的结构，类多时时使用下面的 filter 功能。</p><img src="https://user-images.githubusercontent.com/9289792/80204084-ca740080-865a-11ea-8fb0-e102827a3123.jpg" alt="xcode-unknown-tips-Show the Symbol navigator" width="260px" /><h3 id="Show-the-Breakpoint-navigator"><a href="#Show-the-Breakpoint-navigator" class="headerlink" title="Show the Breakpoint navigator"></a>Show the Breakpoint navigator</h3><p>点击右下角 <code>+</code> 选择 <code>Exception Breakpoint..</code>，可以在添加更明确的报错点，可以选择语言是 obj-c 还是 Swfit。</p><img src="https://user-images.githubusercontent.com/9289792/80204086-cb0c9700-865a-11ea-93b5-7fc0edd67daf.jpg" alt="xcode-unknown-tips-Show the Breakpoint navigator" width="260px" /><h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><p><code>⌘ ⌥ 1</code> .. <code>⌘ ⌥ 7</code> 可以切换窗口。</p><h3 id="Show-the-Code-Snippet-Library"><a href="#Show-the-Code-Snippet-Library" class="headerlink" title="Show the Code Snippet Library"></a>Show the Code Snippet Library</h3><p>代码片段模板，也可以将自己的写好的片段拖入。</p><img src="https://user-images.githubusercontent.com/9289792/80204090-cba52d80-865a-11ea-9d1f-d6f772fc7e1c.jpg" alt="xcode-unknown-tips-Show the Code Snippet Labrary" width="260px" /><h3 id="Show-the-Media-Library"><a href="#Show-the-Media-Library" class="headerlink" title="Show the Media Library"></a>Show the Media Library</h3><p>可以直接从中拖拽图片成 UIImageView 放入 xib 中。</p><h2 id="xib"><a href="#xib" class="headerlink" title="xib"></a>xib</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>按住 <code>option</code> 拖拽可以快速复制组件。</p><h2 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="option-⌥"><a href="#option-⌥" class="headerlink" title="option ⌥"></a>option ⌥</h3><ul><li>按住 <code>⌥</code> 并点击代码或方法时，可查看行内文档帮助。</li><li>按住 <code>⌥</code> 点击文件可以辅助编辑窗模式打开文件（多栏显示，可以用于 xib 与 code 绑定数据）。<em>好用</em></li><li>按住 <code>⌥ ⇧</code> 点击文件可以选择文件打开的窗口位置。</li></ul><h3 id="显示和隐藏栏"><a href="#显示和隐藏栏" class="headerlink" title="显示和隐藏栏"></a>显示和隐藏栏</h3><ul><li><code>⌘ ⇧ y</code> 显示&#x2F;隐藏调试区域。</li><li><code>⌘ ⌥ ⏎</code> 显示辅助编辑栏，Open the assistant editor</li><li><code>⌘ ⏎</code> 隐藏辅助编辑器栏。</li></ul><h3 id="组合键"><a href="#组合键" class="headerlink" title="组合键"></a>组合键</h3><blockquote><p>^ 为 control，⌥ 为 option</p></blockquote><ul><li><code>⌘ ⌥ &#123;</code> <code>⌘ ⌥ &#125;</code> 整行上下移动代码。</li><li>将光标放在方法名上任一位置，点开 <code>Eidt</code>，点击 <code>⌃ ⇧</code> 将看到 <code>Copy Qualified Symbol Name</code>，点击 <code>⌃ ⇧ ⌥</code> 将看到 <code>Copy Symbol Name</code>，eg <code>[UIColor colorWithRed:255/255.0f green:127/255.0f blue:80/255.0f alpha:1]</code> 将会被拷贝为 <code>+[UIColor colorWithRed:green:blue:alpha:]</code>。</li><li>自动缩进代码 <code>^ i</code> 或者全选 <code>⌘ a</code> 后 <code>^ i</code>。</li><li><code>⌘ ⇧ o</code> Open Quickly 查找文件，或者使用 <code>⌘ space</code>。</li></ul><h2 id="command-line"><a href="#command-line" class="headerlink" title="command line"></a>command line</h2><ul><li><code>Security find-identity -v</code> 显示出已经安装的有效身份。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://juejin.im/post/5a7198ac51882573505189c8">[译]每个 iOS 开发者都该知道的 17 个 Xcode 小技巧</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾 2017</title>
      <link href="/2017/12/31/review-2017/"/>
      <url>/2017/12/31/review-2017/</url>
      
        <content type="html"><![CDATA[<p>2017 关键词：Birds、离职、狼人杀、白洋淀、iOS、自如。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=423314746&auto=0&height=32"></iframe><h2 id="Birds"><a href="#Birds" class="headerlink" title="Birds"></a>Birds</h2><p>Birds 是自己编写时间最长的一个 Web 项目。项目接手、改版、重构、迭代、盈利，上半年每天工作都是面对它。</p><span id="more"></span><p>Birds 良好的表现与需求互相推动，这点很重要，假如有需求而项目没有成长，或项目成长没了需求，对工程来说都只能是纸上谈兵、无事可做。项目中的规范的重要性，无论是代码还是数据库，只要项目不是夭折终将显现，对于规范性我绝不会开倒车，做任何妥协，种种经历只说明：这里欠的东西总会还。如何应对需求的千变万化，小结几点：模块化、组件化思想，功能多可配置，功能可拔插，功能方法粒度要小；不要对程序肆意进行打补丁式的修改，减少对流程入侵；当某一处的逻辑增加时要及时重新修改、定义流程；对需求目的的正确理解更是能高效开发。</p><p>对前端重新认识的一年。现在的前端和大学时刚刚接触时，已经大不一样了。前端能做的事情越来越多，很多业务逻辑都在前端处理，服务端只需要提供接口，分工合作更容易。浅尝 React Vue Webpack 后，也许前端才是自己的归宿。</p><h2 id="离职"><a href="#离职" class="headerlink" title="离职"></a>离职</h2><p>离职的不是我。老人走，新人来，新人走。离职一词在我身边跟了一年都没有停下来。同事离职的原因很多，离开北京、公司发展、自我发展… 马云说离职的原因就两个：1. 钱没给够。2. 受了委屈。我起初是认同这一说法的，但是后来觉得 “人” 或者说 “人的思想” 或者说 “人性” 在其中影响作用非常的大。相同的事情不同的角度看，结果相去甚远，如果基本的理念不同，那事情基本是无法调和的。</p><p>对做的事情的认同感，对自我的定位与认识，对现实情况的冷静思考，这几点需要反复咀嚼。</p><p>分享一篇文章：<a href="http://stormzhang.com/2017/06/26/leave-if-no-experts/">公司没大牛带，需要离职么？</a>。对于刚入门的我们，这是一个很有代表性的问题。太多时候我们期待别人，忘了自己。公司有大牛，能跟着学是幸运，没有是常态。先接受了这个设定，会更容易找提高自己的方法。有没有大牛并不重要，我们是为了那个更好的自己。</p><h2 id="狼人杀"><a href="#狼人杀" class="headerlink" title="狼人杀"></a>狼人杀</h2><p>2017 火的游戏很多：狼人杀、守望先锋、王者荣耀、吃鸡。狼人杀这一杀，好像杀到了毕业前和同学舍友在一起臭 high 的日子。可说骚话、互相 diss、互相吹捧，真真假假其乐无穷。最赤鸡的是鱼炸出了个女盆友，各路同学亲上加亲，无法克说。</p><h2 id="白洋淀"><a href="#白洋淀" class="headerlink" title="白洋淀"></a>白洋淀</h2><blockquote><p>我想 你说<br>你不要在孤单 让我做你的伴</p></blockquote><p>白洋淀去过四次，那里的温泉过去两次，年中 Team Building 再喜加一，而这一次让这里有了美丽故事。喷泉、沙发，出现了对的人。</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>React Native 的一波尝试后，走上了移动开发的道。Swift 让上 iOS 车的门槛降低不少，Swift API 趋向稳定，可以说这是最好的时候。GitHub 应该是再也放不下了，外文的书籍、文档确实靠谱啊，推荐一个教程网站 <a href="https://www.raywenderlich.com/category/ios">iOS Tutorials - Ray Wenderlich</a> 真的零基础入门。</p><p>我相信：一个人语言的界限，就是他世界的边界。</p><h2 id="自如"><a href="#自如" class="headerlink" title="自如"></a>自如</h2><p>一场大火让无数人无家可归，年末换房也受牵连。被自如圈粉，其他中介的房子真的太 low 了。自如订房子居然也要抢，一波三折、失而复得。在没抢到房子时，真的想走，想离开这里了，很凄凉。最终是在公司对面住下了，过上了在家吃中饭晚饭的日子。</p><h2 id="2018-Happy-New-Year"><a href="#2018-Happy-New-Year" class="headerlink" title="2018 Happy New Year"></a>2018 Happy New Year</h2><p>2017 自己是幸运的，2018 猥琐发育，不要浪，胜利属于伏地魔。</p><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Git 权威指南】读书笔记 - 独奏 - Part 4</title>
      <link href="/2017/12/25/got-git-reading-notes-solo-part4/"/>
      <url>/2017/12/25/got-git-reading-notes-solo-part4/</url>
      
        <content type="html"><![CDATA[<p>主要内容：【历史穿梭】、【改变历史】、【Git 克隆】</p><h2 id="历史穿梭"><a href="#历史穿梭" class="headerlink" title="历史穿梭"></a>历史穿梭</h2><p>查看条件个数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rev-list HEAD | wc -l</span><br></pre></td></tr></table></figure><h3 id="版本表示法：git-rev-parse"><a href="#版本表示法：git-rev-parse" class="headerlink" title="版本表示法：git rev-parse"></a>版本表示法：git rev-parse</h3><p><code>git rev-parse</code> pick out and massage parameters for other git commands.</p><ul><li><code>--git-dir</code> 可以显示 Git 版本库的位置</li><li><code>--show-cdup</code> 当前工作区目录的深度</li><li><code>--parseopt</code> 可以用于被 Git 无关应用用于解析命令行参数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示分支，tag</span><br><span class="line">git rev-parse --symbolic --branches</span><br><span class="line"></span><br><span class="line">git rev-parse --symbolic --branches</span><br><span class="line"></span><br><span class="line"># 显示定义的所有引用</span><br><span class="line">git rev-parse --symbolic --glob=refs/*</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示多个表达式的 SHA1 哈希值：</span><br><span class="line"></span><br><span class="line">git rev-parse  master  refs/heads/master</span><br><span class="line">6652a0dce6a5067732c00ef0a220810a7230655e</span><br><span class="line">6652a0dce6a5067732c00ef0a220810a7230655e</span><br><span class="line"></span><br><span class="line">^后面的数字代表该提交的第几个父提交，~&lt;n&gt;就相当于连续&lt;n&gt;个符号^</span><br><span class="line"></span><br><span class="line">git rev-parse  A~3  A^^^</span><br><span class="line">e80aa7481beda65ae00e35afc4bc4b171f9b0ebf</span><br><span class="line">e80aa7481beda65ae00e35afc4bc4b171f9b0ebf</span><br><span class="line"></span><br><span class="line"># 暂存区里的文件和HEAD中的文件相同</span><br><span class="line"></span><br><span class="line">git rev-parse  :gitg.png  HEAD:gitg.png</span><br><span class="line">fc58966ccc1e5af24c2c9746196550241bc01c50</span><br><span class="line">fc58966ccc1e5af24c2c9746196550241bc01c50</span><br><span class="line"></span><br><span class="line"># 在提交日志中查找字串的方式显示提交</span><br><span class="line">git rev-parse :/&quot;Commit A&quot;</span><br><span class="line">81993234fc12a325d303eccea20f6fd629412712</span><br></pre></td></tr></table></figure><h3 id="版本范围表示法：git-rev-list"><a href="#版本范围表示法：git-rev-list" class="headerlink" title="版本范围表示法：git rev-list"></a>版本范围表示法：git rev-list</h3><p><code>git rev-list</code> 可以帮助研究 Git 的各种版本范围语法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 从开始到 tag：A 的所有历史提交</span><br><span class="line">git rev-list --oneline  A</span><br><span class="line"></span><br><span class="line"># 每个 tag 历史提交的并集</span><br><span class="line">git rev-list --oneline  D  F</span><br><span class="line"></span><br><span class="line"># ^ 排除这个版本及其历史版本</span><br><span class="line">git rev-list --oneline  ^G D</span><br><span class="line"></span><br><span class="line"># ^G D 等价于 G..D</span><br><span class="line">git rev-list --oneline  G..D</span><br><span class="line"></span><br><span class="line"># 含 ^ 的参数顺序不重要，..</span><br><span class="line"># ^B C 相当于 B..C</span><br><span class="line"># C ^B 相当于 B..C</span><br><span class="line"># C..B 相当于 ^C B</span><br></pre></td></tr></table></figure><h3 id="浏览日志：git"><a href="#浏览日志：git" class="headerlink" title="浏览日志：git"></a>浏览日志：git</h3><p><code>--graph</code> 参数调用 <code>git log</code> 可以显示字符界面的提交关系图。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global alias.glog &quot;log --graph&quot;</span><br></pre></td></tr></table></figure><ul><li><code>--oneline</code> 单行显示</li><li><code>-&lt;n&gt;</code> 显示最近的 <n> 条日志</li><li><code>-p</code> 显示变动</li><li><code>--stat</code> 显示变动摘要</li></ul><p>查看、分析某一个提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show D --stat</span><br><span class="line">tag D</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">git cat-file -p D^0</span><br></pre></td></tr></table></figure><h3 id="差异比较：git-diff"><a href="#差异比较：git-diff" class="headerlink" title="差异比较：git diff"></a>差异比较：git diff</h3><ul><li>比较里程碑 B 和里程碑 A，用命令：git diff B A</li><li>比较工作区和里程碑 A，用命令：git diff A</li><li>比较暂存区和里程碑 A，用命令：git diff -cached A</li><li>比较工作区和暂存区，用命令：git diff</li><li>比较暂存区和 HEAD，用命令：git diff -cached</li><li>比较工作区和 HEAD，用命令：git diff HEAD</li></ul><p>显示不同版本下的文件差异：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff &lt;commit1&gt; &lt;commit2&gt; -- &lt;paths&gt;</span><br></pre></td></tr></table></figure><p>非 Git 目录&#x2F;文件的差异比较，可在版本库之外使用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff &lt;path1&gt; &lt;path2&gt;</span><br></pre></td></tr></table></figure><ul><li><code>--word-diff</code> 差异逐 <em>词</em> 比较，而非缺省的逐 <em>行</em> 比较</li></ul><h3 id="文件追溯：git-blame"><a href="#文件追溯：git-blame" class="headerlink" title="文件追溯：git blame"></a>文件追溯：git blame</h3><p>逐行显示文件，在每一行的行首显示此行最早是在什么版本引入的，由谁引入。</p><p>只想查看某几行，使用 -L n,m 参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git blame -L 6,+5 README</span><br></pre></td></tr></table></figure><h3 id="二分查找：git-bisect"><a href="#二分查找：git-bisect" class="headerlink" title="二分查找：git bisect"></a>二分查找：git bisect</h3><p>定位问题代码。</p><h2 id="改变历史"><a href="#改变历史" class="headerlink" title="改变历史"></a>改变历史</h2><p>作为分布式版本控制系统，一旦版本库被多人共享，改变历史就可能是无法完成的任务。</p><h3 id="悔棋"><a href="#悔棋" class="headerlink" title="悔棋"></a>悔棋</h3><p><code>git commit –amend</code> 单步悔棋，修补式提交。</p><p>检出文件到前一版：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout HEAD^ -- src/hello.h</span><br></pre></td></tr></table></figure><h3 id="多步悔棋"><a href="#多步悔棋" class="headerlink" title="多步悔棋"></a>多步悔棋</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^^</span><br></pre></td></tr></table></figure><h3 id="回到未来"><a href="#回到未来" class="headerlink" title="回到未来"></a>回到未来</h3><p>拣选指令 <code>git cherry-pick</code> 从众多的提交中挑选出一个提交应用在当前的工作分支中。</p><p>该命令需要提供一个提交 ID 作为参数，操作过程相当于将该提交导出为补丁文件，然后在当前 HEAD 上重放形成无论内容还是提交说明都一致的提交。</p><p>操作例子：<code>A B C D E F</code> 6 次提交。</p><p>例子 1.1：出掉 <code>D</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将 HEAD 指针切换到 C</span><br><span class="line">git checkout C</span><br><span class="line"></span><br><span class="line"># 拣选将 E 提交在当前 HEAD 上</span><br><span class="line">git cherry-pick E</span><br><span class="line"></span><br><span class="line"># 拣选操作将 F 提交在当前 HEAD 上</span><br><span class="line">git cherry-pick master</span><br><span class="line"></span><br><span class="line"># 将 master 分支指向新的提交 ID（f677821）上</span><br><span class="line">git checkout master</span><br><span class="line">git reset --hard HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure><p>例子 1.2：D 融入 C：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout D</span><br><span class="line"></span><br><span class="line"># 将 C 和 D 融合</span><br><span class="line">git reset --soft HEAD^^</span><br><span class="line"></span><br><span class="line"># 提交说明重用C提交的提交说明</span><br><span class="line">git commit -C C</span><br><span class="line"></span><br><span class="line">git cherry-pick E</span><br><span class="line">git cherry-pick F</span><br></pre></td></tr></table></figure><p>git rebase 对提交执行变基操作，即可以实现将指定范围的提交“嫁接”到另外一个提交之上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --onto &lt;newbase&gt; &lt;since&gt; &lt;till&gt;</span><br></pre></td></tr></table></figure><p>变基操作的过程：</p><ol><li>首先执行 git checkout <till>，如果 till 不是一个分支，则变基操作是在 detached HEAD 分离头指针 状态的，当变基结束后，对 master 分支执行重置以实现把变基结果记录在分支中。</li><li>将<since>..<till>所标识的提交范围写到一个临时文件中。（<since>..<till>是指包括<till>的所有历史提交排除<since>以及<since>的历史提交后形成的版本范围）</li><li>当前分支强制重置（git reset –hard）到<newbase>。</li><li>从保存在临时文件中的提交列表中，一个一个将提交按照顺序重新提交到重置之后的分支上。</li><li>如果遇到提交已经在分支中包含，跳过该提交。</li><li>如果在提交过程遇到冲突，变基过程暂停。用户解决冲突后，执行 git rebase –continue 继续变基操作。或者执行 git rebase –skip 跳过此提交。或者执行 git rebase –abort 就此终止变基操作切换到变基前的分支上。</li></ol><p>例子 2.1：出掉 <code>D</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --onto C D F</span><br><span class="line"># or</span><br><span class="line">git rebase --onto C E^ F</span><br></pre></td></tr></table></figure><p>例子 2.2：D 融入 C：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout D</span><br><span class="line"></span><br><span class="line"># C和D融合</span><br><span class="line">git reset --soft HEAD^^</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># 复用 C 的提交信息</span><br><span class="line">git commit -C C</span><br><span class="line"></span><br><span class="line"># 记住这个提交 ID，可以用 tag 的方法</span><br><span class="line">git tag newbase</span><br><span class="line"></span><br><span class="line">git rebase --onto newbase E^ master</span><br></pre></td></tr></table></figure><p><code>-i</code> 交互式变基方法。</p><p>例子 3.1：出掉 <code>D</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i D^</span><br><span class="line"></span><br><span class="line"># d, drop = remove commit</span><br><span class="line"># 提交 D 标示修改为 d</span><br></pre></td></tr></table></figure><p>例子 3.2：D 融入 C：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase -i C^</span><br><span class="line"></span><br><span class="line"># 提交 D 标示修改为 s</span><br></pre></td></tr></table></figure><h3 id="丢弃历史"><a href="#丢弃历史" class="headerlink" title="丢弃历史"></a>丢弃历史</h3><p><strong>重点内容第一次 Get</strong></p><p>历史有的时候会成为负担。只保留最近的 100 次提交，抛弃之前的历史提交。那么应该如何操作呢？</p><p>例：清除 tag A 之前的提交历史：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看里程碑A指向的目录树</span><br><span class="line">git cat-file -p A^&#123;tree&#125;</span><br><span class="line"></span><br><span class="line"># 使用git commit-tree命令直接从该目录树创建提交</span><br><span class="line">echo &quot;Commit from tree of tag A.&quot; | git commit-tree A^&#123;tree&#125;</span><br><span class="line">8f7f94ba6a9d94ecc1c223aa4b311670599e1f86</span><br><span class="line"></span><br><span class="line"># 命令git commit-tree的输出是一个提交的SHA1哈希值。</span><br><span class="line"># 会发现这个提交没有历史提交，可以称之为孤儿提交。</span><br><span class="line">git log 8f7f94ba6a9d94ecc1c223aa4b311670599e1f86</span><br><span class="line"></span><br><span class="line"># 将master分支从里程碑到最新的提交全部迁移到刚刚生成的孤儿提交上。</span><br><span class="line">git rebase --onto 8f7f94ba6a9d94ecc1c223aa4b311670599e1f86 A master</span><br></pre></td></tr></table></figure><h3 id="反转提交"><a href="#反转提交" class="headerlink" title="反转提交"></a>反转提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure><h2 id="Git-克隆"><a href="#Git-克隆" class="headerlink" title="Git 克隆"></a>Git 克隆</h2><h3 id="鸡蛋不装在一个篮子里"><a href="#鸡蛋不装在一个篮子里" class="headerlink" title="鸡蛋不装在一个篮子里"></a>鸡蛋不装在一个篮子里</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. git clone &lt;repository&gt; &lt;directory&gt;</span><br><span class="line">2. git clone --bare   &lt;repository&gt; &lt;directory.git&gt;</span><br><span class="line">3. git clone --mirror &lt;repository&gt; &lt;directory.git&gt;</span><br></pre></td></tr></table></figure><p>一般约定俗成裸版本库的目录名以 <code>.git</code> 为后缀。</p><p>用法 3 区别于用法 2 之处在于用法 3 克隆出来的裸版本对上游版本库进行了注册，这样可以在裸版本库中使用 git fetch 命令和上游版本库进行持续同步。</p><h3 id="克隆生成裸版本库"><a href="#克隆生成裸版本库" class="headerlink" title="克隆生成裸版本库"></a>克隆生成裸版本库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --bare /path/to/my/workspace/demo /path/to/repos/demo.git</span><br></pre></td></tr></table></figure><p>demo.git 目录就是版本库目录，不含工作区。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --git-dir=/path/to/repos/demo.git config core.bare</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line"># 向其 push</span><br><span class="line">git push /path/to/repos/demo.git</span><br></pre></td></tr></table></figure><h3 id="创建生成裸版本库"><a href="#创建生成裸版本库" class="headerlink" title="创建生成裸版本库"></a>创建生成裸版本库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init --bare /path/to/repos/demo-init.git</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.worldhello.net/gotgit/02-git-solo/index.html">2. Git 独奏 &amp;mdash; GotGit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 招聘总结</title>
      <link href="/2017/11/25/ios-recruitment-summary/"/>
      <url>/2017/11/25/ios-recruitment-summary/</url>
      
        <content type="html"><![CDATA[<p>自己也做了一次面试官。简历看到了很多，内容总结如下：</p><h2 id="一些感受"><a href="#一些感受" class="headerlink" title="一些感受"></a>一些感受</h2><ul><li>一些基本的技能感觉不用写，不会吸引什么注意力。所以要精懂一些特别的技能，技术点。</li><li>一些 “与产品沟通” “安排工作”，我觉的也不用写，也没什么吸引力。</li><li>简历要体出自己擅长的地方，特别的地方，其他的一笔带过就可以。</li><li>简历上的字词的细节我比较在意，iOS &amp; IOS，Xcode &amp; XCode。</li><li>有 GitHub Blog 绝对的好评，但要有内容。</li><li>基础知识、业务能力、性格、气场。</li></ul><span id="more"></span><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li>Objective-C Swift</li><li>内存管理机制，MRC &amp; ARC</li><li>代理、通知、Block 回调机制 闭包</li><li>KVC，KVO 机制</li><li>CoreData FMBD 归档存储 SQLite NSUserDefaults</li><li>runtime 运行机制，runloop 运行机制</li><li>GCD NSOperation NSThread 多线程编程</li><li>Socket 通信</li><li>单例 观察者</li><li>MVVM</li><li>RESTful</li></ol><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><ol><li>瀑布流 抽屉</li><li>断点续传 媒体流 瀑布流</li><li>SSO 单点登陆</li></ol><h3 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h3><ol><li>Cocoapods</li><li>支付宝 高德 二维码扫描 友盟 极光推送 短信验证</li><li>微信 微博登陆 支付 in-app purchase</li><li>SDWebImage AFNetworking Alamofire SnapKit MBProgressHUD</li><li>IM 环信</li><li>Spring 动画</li><li>ICSDrawer 侧滑菜单</li><li>AVOS Cloud SDK</li><li>ZXing ZBar 二维码</li><li>XMPP</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>Axure</li><li>良好英文文档阅读能力</li></ol><h2 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h2><ol><li>模块封装</li><li>上架</li><li>迭代</li><li>沟通</li><li>整体框架</li><li>KVO 监听实现自定义下拉刷新</li><li>针对不同的网络状态 设置不同的缓存策略</li><li>各种 SDK 集成</li><li>HTML5 Native 相互调用</li></ol><h2 id="奇巧淫技"><a href="#奇巧淫技" class="headerlink" title="奇巧淫技"></a>奇巧淫技</h2><p>自己对 iOS 的理解还并不深，如何面试更有经验的人？</p><p>答：准备的问题可以自己并不太懂，只要问题靠谱，要做的就是多听。多听面试者的回答的状态，是含糊？是自信？是心虚？而且多听几位后也就大概其知道答案了。</p><h2 id="奇事"><a href="#奇事" class="headerlink" title="奇事"></a>奇事</h2><ul><li>因为有机试题所以不止一位怀疑这是个圈套，面试是为了做功能。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.sunnyxx.com/2015/07/04/ios-interview/">招聘一个靠谱的 iOS</a></li><li><a href="http://www.jianshu.com/p/7c7f4b4e4efe">卓同学的 Swift 面试题</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Photoshop 编辑 GIF</title>
      <link href="/2017/11/23/photoshop-edit-gif/"/>
      <url>/2017/11/23/photoshop-edit-gif/</url>
      
        <content type="html"><![CDATA[<h2 id="录制-GIF"><a href="#录制-GIF" class="headerlink" title="录制 GIF"></a>录制 GIF</h2><p>推荐使用 <a href="https://www.cockos.com/licecap/">LICEcap</a> 小巧好用。</p><h2 id="GIF-查看方法"><a href="#GIF-查看方法" class="headerlink" title="GIF 查看方法"></a>GIF 查看方法</h2><p>在 Mac 上双击 GIF 将是按帧查看一幅一幅的图片，按住 <code>空格</code> 可以动起来。也可以选择 GIF 图片直接点击空格预览。</p><span id="more"></span><h2 id="GIF-编辑"><a href="#GIF-编辑" class="headerlink" title="GIF 编辑"></a>GIF 编辑</h2><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>在 Mac 中可以直接使用 <code>预览</code> 对 GIF 进行删除帧的操作。但是发现再次保存的 GIF 只播放一次，不会循环播放。</p><h3 id="Photoshop"><a href="#Photoshop" class="headerlink" title="Photoshop"></a>Photoshop</h3><p>使用 Photoshop 打开 GIF，点击 <code>窗口 -&gt; 时间轴</code>，可在时间轴中对图片进行编辑。<code>文件 -&gt; 导出 -&gt; 存储为 Web 所用格式</code> 然后在 <code>循环选项</code> 选择 <code>永久</code>。</p><p>在这里也可以降低 <code>图像大小</code> 对图片进行压缩。</p><p>点击 <code>存储</code> 导出新的 GIF。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> photoshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 GitHub README.md 中图片加载失败</title>
      <link href="/2017/11/22/github-readme-content-length-exceeded/"/>
      <url>/2017/11/22/github-readme-content-length-exceeded/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在编写 GitHub 的 README.md 后，其中引用的网络图片无法正常显示，点击 <code>alt</code> 的文字提示：<code>Content length exceeded</code>。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>根据 <a href="https://help.github.com/articles/about-anonymized-image-urls/">About anonymized image URLs</a> 这篇文章：上传的图片 URL 将被修改，所以个人信息将不会被跟踪。GitHub 将使用 <a href="https://github.com/atmos/camo">开源项目 Camo</a>。Camo 将为每一个图片生成一个以 <code>https://camo.githubusercontent.com/</code> 匿名代理 URL 同时隐藏来自其他用户的浏览器详细信息和相关信息。</p><p>我引用的 GIF 图片有 <strong>7MB</strong> 多，那么图片大小的限制是多少？</p><p><a href="https://github.com/atmos/camo/blob/master/server.coffee#L18">camo - server.coffee#L18</a></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">content_length_limit = parseInt(process.env.CAMO_LENGTH_LIMIT || 5242880, 10)</span><br></pre></td></tr></table></figure><p>换算后大小正好是 <strong>5MB</strong>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://soyaine.cn/blog/2016/12/31/soyaine-daily-070">关于 GitHub 无法图片加载的问题</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Mac 使用代理连接 SSH</title>
      <link href="/2017/10/28/linux-or-mac-ssh-by-proxy/"/>
      <url>/2017/10/28/linux-or-mac-ssh-by-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -oProxyCommand=<span class="string">&quot;nc -x 127.0.0.1:1080 %h %p&quot;</span> ubuntu@111.111.1.1</span><br></pre></td></tr></table></figure><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -o <span class="string">&quot;ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p&quot;</span> ubuntu@111.111.1.1</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="SecoureCRT"><a href="#SecoureCRT" class="headerlink" title="SecoureCRT"></a>SecoureCRT</h2><p>Session Options - Connection - SSH2 - Firewall，创建、选择代理。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li><code>-o ProxyCommand</code>：SSH 命令选项，你可以理解成使用 “在 SSH 中使用代理”。</li><li><code>nc</code>：netcat 命令。</li><li><code>127.0.0.1:1080</code>：本地 Shadowsocks 的监听地址和监听端口。</li></ul><h2 id="命令行-HTTP-代理"><a href="#命令行-HTTP-代理" class="headerlink" title="命令行 HTTP 代理"></a>命令行 HTTP 代理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:1087;<span class="built_in">export</span> https_proxy=http://127.0.0.1:1087;</span><br></pre></td></tr></table></figure><h2 id="鉴别自己是否真的使用了代理来登陆服务器"><a href="#鉴别自己是否真的使用了代理来登陆服务器" class="headerlink" title="鉴别自己是否真的使用了代理来登陆服务器"></a>鉴别自己是否真的使用了代理来登陆服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># who</span></span><br><span class="line">root     pts/2        2017-05-13 18:13 (xxx.xxx.xxx.xxx)</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.goodspb.net/mac-os-%E4%BD%BF%E7%94%A8-shadowsock-%E6%9D%A5%E4%BB%A3%E7%90%86-ssh-%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/">Mac OS 使用 shadowsock 来代理 ssh 访问服务器</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacBook 使用小感</title>
      <link href="/2017/10/28/simple-macbook-report/"/>
      <url>/2017/10/28/simple-macbook-report/</url>
      
        <content type="html"><![CDATA[<p>现在自己的开发主力机是：2015 版的 MacBook Pro。对于工程师来讲，MacBook 绝对是用来提高生产力的，不是装杯的。如果条件允许十分推荐，反正我是回不来了。</p><span id="more"></span><h2 id="一些感受"><a href="#一些感受" class="headerlink" title="一些感受"></a>一些感受</h2><ul><li>购买型号选择：15 寸 i7 Pro 没的说，屏大看的很爽。</li><li>F1… 等键并有没有原来想象的那么重要，游览器刷新什么的都有代替的键。我感觉 F 系列的键默认为功能键挺好的。Filco 键盘开始吃灰。</li><li>续航时间是真的长，待机功耗很小，不用关机。扣上盖子装包带走，不拿充电线。</li><li>触控板真的好用。原来都是没鼠标时不得已才用触控板。(后来发现老司机们都爱触控板)</li><li>鼠标 - 滚动方向：自然，需要适应。</li><li>Chrome Tab 随便开。</li><li>很安静。</li><li>装包时边沿有些割手。</li></ul><h2 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h2><p><strong>2020-03-25 更新：</strong> <a href="/2019/05/20/my-macbook/">My MacBook | Yifans_Z</a>。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git checkout --theirs --ours 解决冲突文件</title>
      <link href="/2017/08/30/git-checkout-theirs-resolve-conflict/"/>
      <url>/2017/08/30/git-checkout-theirs-resolve-conflict/</url>
      
        <content type="html"><![CDATA[<p>在代码合并时遇到 <code>conflict</code> 是常有的事情，有些内容是自动生成的资源文件，手工处理起来很麻烦，某一文件如何全部以某一分支的内容为准？</p><p>使用 <code>checkout --theirs .</code> <code>checkout --ours .</code>。</p><span id="more"></span><h2 id="场景实例"><a href="#场景实例" class="headerlink" title="场景实例"></a>场景实例</h2><p>Engineer A、B 同时从 master checkout 自己的功能分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Engineer A</span></span><br><span class="line">git checkout -b feature-a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Engineer B</span></span><br><span class="line">git checkout -b feature-b</span><br></pre></td></tr></table></figure><p>Engineer A 开发比较快先进行了 push：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: feature-a&quot;</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge feature-a</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>Engineer B 再 push 前需要拉最新的 master，因为改到了同一行代码，出现代码冲突。</p><h3 id="merge-合并代码"><a href="#merge-合并代码" class="headerlink" title="merge 合并代码"></a>merge 合并代码</h3><p>使用 merge 命令导致的代码冲突。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git merge feature-a</span><br></pre></td></tr></table></figure><p>在处理冲突的过程中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以自己（Engineer B）的代码为准</span></span><br><span class="line">git checkout --ours .</span><br><span class="line">git checkout --ours file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以他人（Engineer A）的代码为准</span></span><br><span class="line">git checkout --theirs .</span><br></pre></td></tr></table></figure><h2 id="rebase-合并代码"><a href="#rebase-合并代码" class="headerlink" title="rebase 合并代码"></a>rebase 合并代码</h2><p>使用 rebase 命令导致的代码冲突。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge feature-a</span><br><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure><p>在处理冲突的过程中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以自己（Engineer B）的代码为准；与 merge 相反，可以理解为 rebase 时主干是他人的分支</span></span><br><span class="line">git checkout --theirs .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以他人（Engineer A）的代码为准；与 merge 相反，可以理解为 rebase 时主干是他人的分支</span></span><br><span class="line">git checkout --ours .</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://bitmingw.com/2017/02/16/git-merge-rebase-ours-and-theirs/">化解冲突：git merge 与 git rebase 中的 ours 和 theirs</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git 权威指南】读书笔记 - 独奏 - Part 3</title>
      <link href="/2017/08/03/got-git-reading-notes-solo-part3/"/>
      <url>/2017/08/03/got-git-reading-notes-solo-part3/</url>
      
        <content type="html"><![CDATA[<p>主要内容：【Git 基本操作】</p><h2 id="Git-基本操作"><a href="#Git-基本操作" class="headerlink" title="Git 基本操作"></a>Git 基本操作</h2><h3 id="先来合个影"><a href="#先来合个影" class="headerlink" title="先来合个影"></a>先来合个影</h3><p>在 Git 里，“留影”用的命令叫做 <code>tag</code>，更加专业的术语叫做“里程碑”（打 tag，或打标签）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -m <span class="string">&quot;Say bye-bye to all previous practice.&quot;</span> old_practice</span><br></pre></td></tr></table></figure><p>里程碑无非也是一个引用，通过记录提交 ID（或者创建 Tag 对象）来为当前版本库状态进行“留影”。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rev-parse refs/tags/old_practice</span><br><span class="line">41bd4e2cce0f8baa9bb4cdda62927b408c846cd6</span><br></pre></td></tr></table></figure><p><code>git describe</code> 显示当前版本库的最新提交的版本号。格式：<code>最近的 tag - 距离此 tag 的个数 - 该提交的 SHA1</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git describe</span><br><span class="line">old_practice</span><br><span class="line"></span><br><span class="line"><span class="comment"># .. commit something</span></span><br><span class="line"></span><br><span class="line">git describe</span><br><span class="line">old_practice-2-g8861c65</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><code>rm *.txt</code> 针对的是 <code>工作区</code>，对 <code>暂存区</code> 和 <code>版本库</code> 没有任何影响。</p><p><code>git rm detached-commit.txt hack-1.txt new-commit.txt welcome.txt</code> 删除动作加入了暂存区，commit 后在版本库罪行提交中删除了，在历史提交中尚在。</p><p>可以通过下面命令查看历史版本的文件列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git ls-files --with-tree=HEAD^</span><br><span class="line">detached-commit.txt</span><br><span class="line">new-commit.txt</span><br><span class="line">welcome.txt</span><br></pre></td></tr></table></figure><p>查看在历史版本中尚在的删除文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cat-file -p HEAD^:welcome.txt</span><br><span class="line">Hello.</span><br><span class="line">Nice to meet you.</span><br></pre></td></tr></table></figure><p><code>git add -u</code> 命令会对工作区中 <em>所有改动</em> 以及 <em>删除文件</em> 添加到暂存区。</p><h3 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git cat-file -p HEAD~1:welcome.txt &gt; welcome.txt</span><br></pre></td></tr></table></figure><p>然后加入暂存区，提交到版本库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;restore file: welcome.txt&quot;</span><br></pre></td></tr></table></figure><p>这是通过再次添加的方式恢复被删除的文件。</p><p><code>git add -A</code> 命令会对工作区中 <em>所有改动</em> 以及 <em>新增文件</em> 添加到暂存区。</p><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git mv welcome.txt README</span><br></pre></td></tr></table></figure><h3 id="交互界面"><a href="#交互界面" class="headerlink" title="交互界面"></a>交互界面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -i</span><br></pre></td></tr></table></figure><h3 id="文件忽略"><a href="#文件忽略" class="headerlink" title="文件忽略"></a>文件忽略</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; .gitignore &lt;&lt; EOF</span><br><span class="line">&gt; hello</span><br><span class="line">&gt; *.o</span><br><span class="line">&gt; *.h</span><br><span class="line">&gt; EOF</span><br></pre></td></tr></table></figure><p>查看被忽略的文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status --ignored -s</span><br></pre></td></tr></table></figure><p>将忽略的文件强制添加到仓库中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -f hello.h</span><br><span class="line">git commit -m &quot;add hello.h&quot;</span><br><span class="line">[master 48456ab] add hello.h</span><br><span class="line"> 1 files changed, 1 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 src/hello.h</span><br></pre></td></tr></table></figure><p><em>忽略只对未跟踪文件有效，对于已加入版本库的文件无效。</em> 将 <code>hello.h</code> 添加到版本库后，对 <code>hello.h</code> 的修改都会立刻被跟踪到。<code>.gitignore</code> 只是对未入库的文件起作用。</p><p><strong>本地独享式忽略文件</strong></p><p>.gitignore 设置的文件忽略是共享式的，是因为.gitignore 被添加到版本库后成为了版本库的一部分，文件忽略在他人的工作区中同样生效。</p><p>享式忽略有两种方式：</p><ul><li>在版本库.git 目录下的一个文件.git&#x2F;info&#x2F;exclude 来设置文件忽略。</li><li>通过 Git 的配置变量 core.excludesfile 指定的一个忽略文件，其设置的忽略对所有文件均有效。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.excludesfile /home/jiangxin/_gitignore</span><br><span class="line">git config core.excludesfile</span><br><span class="line">/home/jiangxin/_gitignore</span><br><span class="line"></span><br><span class="line">cat /home/jiangxin/_gitignore</span><br><span class="line">*~        # vim 临时文件</span><br><span class="line">*.pyc     # python 的编译文件</span><br><span class="line">.*.mmx    # 不是正则表达式哦，因为 FreeMind-MMX 的辅助文件以点开头</span><br></pre></td></tr></table></figure><p><strong>Git 忽略语法</strong></p><ul><li><code>#</code> 表示开始的行被忽略。</li><li>通配符。* 任意多字符，? 一个字符，[abc] 可选字符范围。</li><li><code>最后面是一个 /</code> 表示忽略的是整个目录，同名文件不忽略，否则同名的文件和目录都忽略。</li><li><code>最前面 !</code> 表示不忽略。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是注释行 —— 被忽略</span><br><span class="line">*.a       # 忽略所有以 .a 为扩展名的文件。</span><br><span class="line">!lib.a    # 但是 lib.a 文件或者目录不要忽略，即使前面设置了对 *.a 的忽略。</span><br><span class="line">/TODO     # 只忽略根目录下的 TODO 文件，子目录的 TODO 文件不忽略。</span><br><span class="line">build/    # 忽略所有 build/ 目录下的文件。</span><br><span class="line">doc/*.txt # 忽略文件如 doc/notes.txt，但是文件如 doc/server/arch.txt 不被忽略。</span><br></pre></td></tr></table></figure><h3 id="文件归档"><a href="#文件归档" class="headerlink" title="文件归档"></a>文件归档</h3><p>如果想压缩工作区文件归档，可能一不小心会把版本库（.git 目录）包含其中，甚至将工作区中的忽略文件、临时文件也包含其中。所以 Git 提供了一个归档命令 <code>git archive</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 基于最新提交建立归档文件latest.zip</span><br><span class="line">git archive -o latest.zip HEAD</span><br><span class="line"></span><br><span class="line"># 只将目录 src 和 doc 建立到归档 partial.tar 中</span><br><span class="line">git archive -o partial.tar  HEAD src doc</span><br><span class="line"></span><br><span class="line"># 基于里程碑v1.0建立归档，并且为归档中文件添加目录前缀1.0</span><br><span class="line">git archive --format=tar --prefix=1.0/ v1.0 | gzip &gt; foo-1.0.tar.gz</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.worldhello.net/gotgit/02-git-solo/index.html">2. Git 独奏 &amp;mdash; GotGit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 入门</title>
      <link href="/2017/07/20/imooc-react-getting-started-tutorial/"/>
      <url>/2017/07/20/imooc-react-getting-started-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="React-介绍"><a href="#React-介绍" class="headerlink" title="React 介绍"></a>React 介绍</h2><h3 id="初识-React"><a href="#初识-React" class="headerlink" title="初识 React"></a>初识 React</h3><ol><li>React 不是一个完整的 MVC、MVVM 框架，其只负责 View 层，MVC 已经不适用于某些场景的开发</li><li>React 跟 Web Components 不冲突</li><li>React 的特点就是“轻”，数据单向绑定，独立、小巧、快速、创新</li><li>组件化的开发思路，小组件构成大组件，高度可重用</li></ol><h3 id="React-应用场景"><a href="#React-应用场景" class="headerlink" title="React 应用场景"></a>React 应用场景</h3><ol><li>复杂场景下的高性能</li><li>重用组件库，组件组合</li><li>“懒”，少做无用功</li></ol><blockquote><p>你总是这样轻言放弃的话，无论过多久都只会原地踏步。 —— 多啦 a 梦</p></blockquote><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ol><li>JS CSS</li><li>Sass Compass</li><li>Yeoman Grunt Webpack</li><li>CommonJS NodeJS</li><li>Git GitHub</li></ol><h3 id="To-Be-A-Better-Engineer"><a href="#To-Be-A-Better-Engineer" class="headerlink" title="To Be A Better Engineer"></a>To Be A Better Engineer</h3><ol><li>无论知识有多新、项目有多难，只要来了什么姿势都要上</li><li>没人疼、没人爱，团队中没人可以帮上忙，要学会借助外力，视频、Google、开源项目</li><li>积极要求进步</li></ol><h2 id="React-的-JSX-与-Style"><a href="#React-的-JSX-与-Style" class="headerlink" title="React 的 JSX 与 Style"></a>React 的 JSX 与 Style</h2><p>官网：<a href="https://facebook.github.io/react/">React - A JavaScript library for building user interfaces</a></p><blockquote><p>罐头是 1810 发明出来的，可是开罐器呢，却在 1858 年才发明出来。有时就是这样，重要的东西可能迟来一步，但却一定会到。生活和爱情，都是如此。程序，当然也不例外。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@latest/dist/react.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@latest/dist/react-dom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6.15.0/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.fontcolor</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> <span class="title class_">Hello</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">render</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;fontcolor&quot;</span>&gt;</span>Hello &#123;this.props.name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加组件属性，有一个地方需要注意：<code>class</code> 属性需要写成 <code>className</code> ，<code>for</code> 属性需要写成 <code>htmlFor</code> ，这是因为 <code>class</code> 和 <code>for</code> 是 JavaScript 的保留字。然后，属性名都是驼峰命名法。</p><blockquote><p>正所谓粉末登场，远近起帆，风云更迭，嬉皮而黄，多少聚散于圆缺。</p></blockquote><h2 id="React-组件的生命周期和事件处理"><a href="#React-组件的生命周期和事件处理" class="headerlink" title="React 组件的生命周期和事件处理"></a>React 组件的生命周期和事件处理</h2><h3 id="React-Components-Lifecycle"><a href="#React-Components-Lifecycle" class="headerlink" title="React Components Lifecycle"></a>React Components Lifecycle</h3><p><a href="https://facebook.github.io/react/docs/state-and-lifecycle.html">State and Lifecycle - React</a></p><ol><li>Mounted：React Component 被 render 解析生成对应的 DOM 节点，并在插入浏览器的 DOM 结构的一个过程</li><li>Update：一个 mounted 的 React Component 被重新 render 的过程（只有影响了 DOM 结构时才会被改变）</li><li>Unmounted：一个 mounted 的 React Component 对应的 DOM 节点被从 DOM 结构中移除的过程</li></ol><p>每一个状态都封装了对应的 hook 函数。<code>will</code> and <code>did</code> hook.</p><h3 id="React-Event-Listener"><a href="#React-Event-Listener" class="headerlink" title="React Event Listener"></a>React Event Listener</h3><p><a href="https://facebook.github.io/react/docs/handling-events.html">Handling Events - React</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClickBtn</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The link was clicked.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ClickBtn</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>官方文档值得反复看。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.imooc.com/video/10427">React 入门课程介绍-慕课网</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git 权威指南】读书笔记 - 独奏 - Part 2</title>
      <link href="/2017/07/20/got-git-reading-notes-solo-part2/"/>
      <url>/2017/07/20/got-git-reading-notes-solo-part2/</url>
      
        <content type="html"><![CDATA[<p>主要内容：【Git 重置】、【Git 检出】、【恢复进度】</p><h2 id="Git-重置"><a href="#Git-重置" class="headerlink" title="Git 重置"></a>Git 重置</h2><h3 id="分支游标-master-的探秘"><a href="#分支游标-master-的探秘" class="headerlink" title="分支游标 master 的探秘"></a>分支游标 master 的探秘</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --oneline</span><br><span class="line">* e695606 <span class="built_in">which</span> version checked <span class="keyword">in</span>?</span><br><span class="line">* a0c641e <span class="built_in">who</span> does commit?</span><br><span class="line">* 9e8a761 initialized.</span><br></pre></td></tr></table></figure><p>引用 <code>refs/heads/master</code> 就好像是一个游标，在有新的提交发生的时候指向了新的提交。</p><p>Git 提供了 <code>git reset</code> 命令，可以将“游标”指向任意一个存在的提交 ID。注意下面的命令中使用了 <code>--hard</code> 参数，会破坏工作区未提交的改动，慎用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">HEAD is now at e695606 <span class="built_in">which</span> version checked <span class="keyword">in</span>?</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="用-reflog-挽救错误的重置"><a href="#用-reflog-挽救错误的重置" class="headerlink" title="用 reflog 挽救错误的重置"></a>用 reflog 挽救错误的重置</h3><p>通过 <code>.git/logs</code> 目录下日志文件记录了分支的变更。默认非裸版本库（带有工作区）都提供分支日志功能，这是因为带有工作区的版本库都有如下设置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.logallrefupdates</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>查看一下 <code>master</code> 分支的日志文件 <code>.git/logs/refs/heads/master</code> 中的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -5 .git/logs/refs/heads/master</span><br></pre></td></tr></table></figure><p>Git 提供了一个 <code>git reflog</code> 命令，对这个文件进行操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog show master | <span class="built_in">head</span> -5</span><br><span class="line">9e8a761 master@&#123;0&#125;: 9e8a761: updating HEAD</span><br><span class="line">e695606 master@&#123;1&#125;: HEAD^: updating HEAD</span><br><span class="line">4902dc3 master@&#123;2&#125;: commit: does master follow this new commit?</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>重置 master 为两次改变之前的值。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard master@&#123;2&#125;</span><br></pre></td></tr></table></figure><h3 id="深入了解-git-reset-命令"><a href="#深入了解-git-reset-命令" class="headerlink" title="深入了解 git reset 命令"></a>深入了解 git reset 命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset [-q] [&lt;commit&gt;] [--] &lt;paths&gt;...</span><br><span class="line">git reset [--soft | --mixed | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure><p>为了避免路径和引用（或者提交 ID）同名而冲突，可以在 <code>&lt;paths&gt;</code> 前用两个连续的短线（减号）作为分隔。</p><p><img src="https://user-images.githubusercontent.com/9289792/80202770-b5966d80-8658-11ea-92e4-c348b8f12313.png" alt="20-got-git-reading-notes-solo-git-reset"></p><ul><li><code>--hard</code> 会执行上图中的 1、2、3 全部的三个动作。</li></ul><ol><li>替换引用的指向。引用指向新的提交 ID。</li><li>替换暂存区。替换后，暂存区的内容和引用指向的目录树一致。</li><li>替换工作区。替换后，工作区的内容变得和暂存区一致，也和 HEAD 所指向的目录树内容相同。</li></ol><ul><li><code>--soft</code> 会执行上图中的操作 1。</li><li><code>--mixed</code>（缺省）会执行上图中的操作 1 和操作 2。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset</span><br><span class="line">git reset HEAD</span><br><span class="line"><span class="comment"># 仅用 HEAD 指向的目录树重置暂存区，工作区不会受到影响，相当于将之前用 git add 命令更新到暂存区的内容撤出暂存区。引用也未改变，因为引用重置到 HEAD 相当于没有重置。</span></span><br><span class="line"></span><br><span class="line">git reset -- filename</span><br><span class="line">git reset HEAD filename</span><br><span class="line"><span class="comment"># 仅将文件 filename 撤出暂存区，暂存区中其他文件不改变。相当于对命令 git add filename 的反向操作。</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD^</span><br><span class="line"><span class="comment"># 工作区和暂存区不改变，但是引用向前回退一次。当对最新提交的提交说明或者提交的更改不满意时，撤销最新的提交以便重新提交。git commit 的反向操作。</span></span><br><span class="line"><span class="comment"># 在之前曾经介绍过一个修补提交命令 git commit --amend，用于对最新的提交进行重新提交以修补错误的提交说明或者错误的提交文件。修补提交命令实际上相当于执行了下面两条命令。（注：文件 .git/COMMIT_EDITMSG 保存了上次的提交日志）</span></span><br><span class="line">git reset --soft HEAD^</span><br><span class="line">git commit -e -F .git/COMMIT_EDITMSG</span><br><span class="line"></span><br><span class="line">git reset HEAD^</span><br><span class="line"><span class="comment"># 工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"><span class="comment"># 彻底撤销最近的提交。引用回退到前一次，而且工作区和暂存区都会回退到上一次提交的状态。自上一次以来的提交全部丢失。</span></span><br></pre></td></tr></table></figure><h2 id="Git-检出"><a href="#Git-检出" class="headerlink" title="Git 检出"></a>Git 检出</h2><p>重置命令 <code>git reset</code> 的一个用途就是修改引用（如 master）的游标。如果 HEAD 要改变该如何改变呢？检出命令 <code>git checkout</code> 该命令的实质就是修改 HEAD 本身的指向，该命令不会影响分支“游标”（如 master）。</p><h3 id="HEAD-的重置即检出"><a href="#HEAD-的重置即检出" class="headerlink" title="HEAD 的重置即检出"></a>HEAD 的重置即检出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git co HEAD^</span><br><span class="line">Note: checking out <span class="string">&#x27;HEAD^&#x27;</span>.</span><br><span class="line"></span><br><span class="line">You are <span class="keyword">in</span> <span class="string">&#x27;detached HEAD&#x27;</span> state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make <span class="keyword">in</span> this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"><span class="comment"># 您现在处于 &#x27;分离头指针&#x27; 状态。您可以检查、测试和提交，而不影响任何分支。</span></span><br><span class="line"><span class="comment"># 通过执行另外的一个 checkout 检出指令会丢弃在此状态下的修改和提交。</span></span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line"><span class="keyword">do</span> so (now or later) by using -b with the checkout <span class="built_in">command</span> again. Example:</span><br><span class="line"><span class="comment"># 如果想保留在此状态下的修改和提交，使用 -b 参数调用 checkout 检出指令以</span></span><br><span class="line"><span class="comment"># 创建新的跟踪分支。如：</span></span><br><span class="line"></span><br><span class="line">  git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line">HEAD is now at 3175afd...</span><br></pre></td></tr></table></figure><p>什么叫做 <code>detached HEAD</code> “分离头指针”状态？查看一下此时 HEAD 的内容就明白了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat .git/HEAD</span><br><span class="line">3175afde9450a1dc40b09d05a012b45e967cb80f</span><br></pre></td></tr></table></figure><p>原来“分离头指针”状态指的就是 HEAD 头指针指向了一个具体的提交 ID，而不是一个引用（分支）。注意上面的 <code>reflog</code> 是 <code>HEAD</code> 头指针的变迁记录，而非 <code>master</code> 分支。</p><p>查看一下 HEAD 和 master 对应的提交 ID，会发现现在它们指向的不一样。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rev-parse HEAD master</span><br><span class="line">3175afde9450a1dc40b09d05a012b45e967cb80f</span><br><span class="line">bd08cb462d38b54b930cf1934b0c33f2e4592390</span><br></pre></td></tr></table></figure><p>在“分离头指针”模式仍然可以进行提交：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">HEAD detached at 3175afd</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>但是在 checkout 到其他分支时，刚才的提交会丢失，但是这个提交仍然在版本库中，由于这个提交没有被任何分支跟踪到，因此并不能保证这个提交会永久存在。</p><p>实际上当 reflog 中含有该提交的日志过期后，这个提交随时都会从版本库中彻底清除。</p><h3 id="挽救分离头指针"><a href="#挽救分离头指针" class="headerlink" title="挽救分离头指针"></a>挽救分离头指针</h3><p>在“分离头指针”模式下进行的测试提交除了使用提交 ID <code>acc2f69</code> 访问之外，不能通过 master 分支或其他引用访问到。使用合并操作 <code>git merge</code> 将提交 acc2f69 合并到 master 分支中来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge acc2f69</span><br><span class="line">Merge made by recursive.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="恢复进度"><a href="#恢复进度" class="headerlink" title="恢复进度"></a>恢复进度</h2><h3 id="继续暂存区未完成的实践"><a href="#继续暂存区未完成的实践" class="headerlink" title="继续暂存区未完成的实践"></a>继续暂存区未完成的实践</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存当前工作进度</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看保存的进度用命令</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最近保存的进度进行恢复</span></span><br><span class="line">git stash pop</span><br><span class="line">git stash pop [--index] [&lt;stash&gt;]</span><br><span class="line"><span class="comment"># --index 除了恢复工作区的文件外，还尝试恢复暂存区</span></span><br><span class="line"><span class="comment"># 从该 &lt;stash&gt; 中恢复</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]</span><br><span class="line">                [-u|--include-untracked] [-a|--all] [&lt;message&gt;]]</span><br></pre></td></tr></table></figure><ul><li><code>--patch</code> 会显示工作区和 HEAD 的差异，通过对差异文件的编辑决定在进度中最终要保存的工作区的内容，通过编辑差异文件可以在进度中排除无关内容。</li><li>使用 <code>-k</code> 或者 <code>--keep-index</code> 参数，在保存进度后不会将暂存区重置。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不删除恢复的进度之外，其余和 git stash pop 命令一样</span></span><br><span class="line">git stash apply [--index] [&lt;stash&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个存储的进度</span></span><br><span class="line">git stash drop [&lt;stash&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有存储的进度</span></span><br><span class="line">git stash clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于进度创建分支</span></span><br><span class="line">git stash branch &lt;branchname&gt; &lt;stash&gt;</span><br></pre></td></tr></table></figure><h3 id="探秘-git-stash"><a href="#探秘-git-stash" class="headerlink" title="探秘 git stash"></a>探秘 git stash</h3><p>在执行 <code>git stash</code> 命令时，Git 实际调用了一个脚本文件实现相关的功能。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --exec-path</span><br><span class="line">/usr/lib/git-core</span><br><span class="line"></span><br><span class="line">file /usr/lib/git-core/git-stash</span><br><span class="line">/usr/lib/git-core/git-stash: POSIX shell script text executable</span><br></pre></td></tr></table></figure><p>本地没有被版本控制系统跟踪的文件并不能保存进度。因此本地新文件需要执行添加 <code>add</code> 再执行 git stash 命令。</p><p>在用 <code>git stash</code> 命令保存进度时，提供说明更容易找到对应的进度文件。</p><p>每个进度的标识都是 <code>stash@&#123;&lt;n&gt;&#125;</code> 格式，像极了前面介绍的 <code>reflog</code> 的格式。<code>git stash</code> 的就是用到了前面介绍的引用和引用变更日志 <code>reflog</code> 来实现的。</p><p>用 git stash 保存进度，实际上会将进度保存在引用 refs&#x2F;stash 所指向的提交中。多次的进度保存，实际上相当于引用 refs&#x2F;stash 一次又一次的变化，而 refs&#x2F;stash 引用的变化由 reflog（即.git&#x2F;logs&#x2F;refs&#x2F;stash）所记录下来。</p><h3 id="如何在引用-refs-x2F-stash-中同时保存暂存区的进度和工作区中的进度"><a href="#如何在引用-refs-x2F-stash-中同时保存暂存区的进度和工作区中的进度" class="headerlink" title="如何在引用 refs&#x2F;stash 中同时保存暂存区的进度和工作区中的进度"></a>如何在引用 refs&#x2F;stash 中同时保存暂存区的进度和工作区中的进度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --graph --pretty=raw  refs/stash -2</span><br><span class="line">*   commit e5c0cdc2dedc3e50e6b72a683d928e19a1d9de48</span><br><span class="line">|\  tree 780c22449b7ff67e2820e09a6332c360ddc80578</span><br><span class="line">| | parent 2b31c199d5b81099d2ecd91619027ab63e8974ef</span><br><span class="line">| | parent c5edbdcc90addb06577ff60f644acd1542369194</span><br><span class="line">| | author Jiang Xin &lt;jiangxin@ossxp.com&gt; 1291623066 +0800</span><br><span class="line">| | committer Jiang Xin &lt;jiangxin@ossxp.com&gt; 1291623066 +0800</span><br><span class="line">| |</span><br><span class="line">| |     WIP on master: 2b31c19 Merge commit &#x27;acc2f69&#x27;</span><br><span class="line">| |</span><br><span class="line">| * commit c5edbdcc90addb06577ff60f644acd1542369194</span><br><span class="line">|/  tree 780c22449b7ff67e2820e09a6332c360ddc80578</span><br><span class="line">|   parent 2b31c199d5b81099d2ecd91619027ab63e8974ef</span><br><span class="line">|   author Jiang Xin &lt;jiangxin@ossxp.com&gt; 1291623066 +0800</span><br><span class="line">|   committer Jiang Xin &lt;jiangxin@ossxp.com&gt; 1291623066 +0800</span><br><span class="line">|</span><br><span class="line">|       index on master: 2b31c19 Merge commit &#x27;acc2f69&#x27;</span><br></pre></td></tr></table></figure><p>最新的提交说明中有 <code>WIP</code>（Work In Progess）字样，说明代表了工作区进度。而最新提交的第二个父提交（上图中显示为第二个提交）有 index on master 字样，说明这个提交代表着暂存区的进度。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.worldhello.net/gotgit/02-git-solo/index.html">2. Git 独奏 &amp;mdash; GotGit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git 权威指南】读书笔记 - 独奏 - Part 1</title>
      <link href="/2017/07/19/got-git-reading-notes-solo-part1/"/>
      <url>/2017/07/19/got-git-reading-notes-solo-part1/</url>
      
        <content type="html"><![CDATA[<p>主要内容：【Git 初始化】、【Git 暂存区】、【Git 对象】</p><h2 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h2><p>设置一下 Git 的环境变量，这个设置是一次性的工作。即这些设置会在全局文件（用户主目录下的 <code>~/.gitconfig</code>）或系统文件（<code>/etc/gitconfig</code>）中做永久的记录。</p><p>配置的用户名和邮件地址将在版本库提交时作为提交者的用户名和邮件地址。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Jiang Xin&quot;</span></span><br><span class="line">git config --global user.email jiangxin@ossxp.com</span><br></pre></td></tr></table></figure><h3 id="设置一些-Git-别名，以便可以使用更为简洁的子命令"><a href="#设置一些-Git-别名，以便可以使用更为简洁的子命令" class="headerlink" title="设置一些 Git 别名，以便可以使用更为简洁的子命令"></a>设置一些 Git 别名，以便可以使用更为简洁的子命令</h3><p>只在本用户的全局配置中添加 Git 命令别名：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci <span class="string">&quot;commit -s&quot;</span></span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.st <span class="string">&quot;-p status&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="版本库的初始化"><a href="#版本库的初始化" class="headerlink" title="版本库的初始化"></a>版本库的初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>初始化空的 Git 版本库于 <code>/path/to/my/workspace/demo/.git/</code></p><p>git init 命令的后面直接输入目录名称</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/my/workspace</span><br><span class="line">git init demo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -aF</span><br><span class="line">./  ../  .git/</span><br></pre></td></tr></table></figure><p>这个隐藏的 <code>.git</code> 目录就是 Git 版本库（又叫仓库，repository）。</p><p><code>.git</code> 版本库目录所在的目录，即 <code>/path/to/my/workspace/demo</code> 目录称为 <strong>工作区</strong>。</p><p>将新建立的文件添加到版本库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add welcome.txt</span><br></pre></td></tr></table></figure><p>再执行一次提交操作，使用 <code>-m</code> 参数直接给出了提交说明。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git ci -m <span class="string">&quot;initialized&quot;</span></span><br><span class="line">[master (root-commit) 7f0b2be] init</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 welcome.txt</span><br></pre></td></tr></table></figure><p><code>git ci</code> 是上面配置的别名，我个人觉得 <code>-s</code> 这个参数比较冗余。</p><h3 id="思考：为什么工作区下有一个-git-目录？"><a href="#思考：为什么工作区下有一个-git-目录？" class="headerlink" title="思考：为什么工作区下有一个 .git 目录？"></a>思考：为什么工作区下有一个 <code>.git</code> 目录？</h3><p>Git 的这种设计，将版本库放在工作区根目录下，所有的版本控制操作（除了和其他远程版本库之间的互操作）都在本地即可完成，不像 Subversion 只有寥寥无几的几个命令才能脱离网络执行。而且 Git 也没有 CVS 和 Subversion 的安全泄漏问题（只要保护好 .git 目录），也没有 Subversion 在本地文件搜索时出现搜索结果混乱的问题，甚至 Git 还提供了一条 <code>git grep</code> 命令来更好地搜索工作区的文件内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git grep &quot;工作区文件内容搜索&quot;</span><br></pre></td></tr></table></figure><h3 id="当工作区中包含了子目录，在子目录中执行-Git-命令时，如何定位版本库呢？"><a href="#当工作区中包含了子目录，在子目录中执行-Git-命令时，如何定位版本库呢？" class="headerlink" title="当工作区中包含了子目录，在子目录中执行 Git 命令时，如何定位版本库呢？"></a>当工作区中包含了子目录，在子目录中执行 Git 命令时，如何定位版本库呢？</h3><p>当在 Git 工作区目录下执行操作的时候，会对目录依次向上递归查找 <code>.git</code> 目录，找到的 <code>.git</code> 目录就是工作区对应的版本库，<code>.git</code> 所在的目录就是工作区的根目录，文件 <code>.git/index</code> 记录了工作区文件的状态（实际上是 <strong>暂存区</strong> 的状态）。</p><p>如果跟踪一下执行 <code>git status</code> 命令时的磁盘访问，会看到沿目录依次向上递归的过程。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strace -e &#x27;trace=file&#x27; git status</span><br></pre></td></tr></table></figure><h3 id="那么有什么办法知道-Git-版本库的位置，以及工作区的根目录在哪里呢？"><a href="#那么有什么办法知道-Git-版本库的位置，以及工作区的根目录在哪里呢？" class="headerlink" title="那么有什么办法知道 Git 版本库的位置，以及工作区的根目录在哪里呢？"></a>那么有什么办法知道 Git 版本库的位置，以及工作区的根目录在哪里呢？</h3><p>显示版本库 <code>.git</code> 目录所在的位置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rev-parse --git-dir</span><br><span class="line">/path/to/my/workspace/demo/.git</span><br></pre></td></tr></table></figure><p>显示工作区根目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rev-parse --show-toplevel</span><br><span class="line">/path/to/my/workspace/demo</span><br></pre></td></tr></table></figure><h3 id="把版本库-git-目录放在工作区，是不是太不安全了？"><a href="#把版本库-git-目录放在工作区，是不是太不安全了？" class="headerlink" title="把版本库 .git 目录放在工作区，是不是太不安全了？"></a>把版本库 <code>.git</code> 目录放在工作区，是不是太不安全了？</h3><p>Git 克隆可以降低因为版本库和工作区混杂在一起导致的版本库被破坏的风险。在本机另外的磁盘&#x2F;目录中建立 Git 克隆，并在工作区有改动提交时，手动或自动地执行向克隆版本库的推送 <code>git push</code> 操作。如果使用网络协议，还可以实现在其他机器上建立克隆，这样就更安全了（双机备份）。</p><h3 id="思考：git-config-命令参数的区别？"><a href="#思考：git-config-命令参数的区别？" class="headerlink" title="思考：git config 命令参数的区别？"></a>思考：<code>git config</code> 命令参数的区别？</h3><p>将打开 &#x2F;path&#x2F;to&#x2F;my&#x2F;workspace&#x2F;demo&#x2F;.git&#x2F;config 文件进行编辑：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/my/workspace/demo/</span><br><span class="line">git config -e</span><br></pre></td></tr></table></figure><p>将打开 &#x2F;home&#x2F;jiangxin&#x2F;.gitconfig（用户主目录下的 .gitconfig 文件）全局配置文件进行编辑：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -e --global</span><br></pre></td></tr></table></figure><p>将打开 &#x2F;etc&#x2F;gitconfig 系统级配置文件进行编辑：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -e --system</span><br></pre></td></tr></table></figure><p>Git 的三个配置文件分别是 <code>版本库级别的配置文件</code>、<code>全局配置文件</code>（用户主目录下）和 <code>系统级配置文件</code>（&#x2F;etc 目录下）。</p><p>其中 <code>版本库级别配置文件</code> 的优先级最高，<code>全局配置文件</code> 其次，<code>系统级配置文件</code> 优先级最低。</p><p>Git 配置文件采用的是 INI 文件格式。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">cat /path/to/my/workspace/demo/.git/config</span><br><span class="line"><span class="section">[core]</span></span><br><span class="line">        <span class="attr">repositoryformatversion</span> = <span class="number">0</span></span><br><span class="line">        <span class="attr">filemode</span> = <span class="literal">true</span></span><br><span class="line">        <span class="attr">bare</span> = <span class="literal">false</span></span><br><span class="line">        <span class="attr">logallrefupdates</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>例如读取 <code>[core]</code> 小节的 <code>bare</code> 的属性值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config &lt;section&gt;.&lt;key&gt;</span><br><span class="line"></span><br><span class="line">git config core.bare</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>更改或设置 INI 文件中某个属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config &lt;section&gt;.&lt;key&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line">git config a.b something</span><br><span class="line">git config x.y.z others</span><br></pre></td></tr></table></figure><p>打开 <code>.git/config</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[a]</span><br><span class="line">        b = something</span><br><span class="line">[x <span class="string">&quot;y&quot;</span>]</span><br><span class="line">        z = others</span><br></pre></td></tr></table></figure><p>可以用 <code>git config</code> 命令操作任何其他的 INI 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GIT_CONFIG=test.ini git config a.b.c.d <span class="string">&quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GIT_CONFIG=test.ini git config a.b.c.d</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><h3 id="思考：是谁完成的提交？"><a href="#思考：是谁完成的提交？" class="headerlink" title="思考：是谁完成的提交？"></a>思考：是谁完成的提交？</h3><p>当最新的提交删除了 <code>user.name</code> 和 <code>user.email</code>，提交时 Git 对提交者的用户名和邮件地址做了大胆的猜测，这个猜测可能是错的。</p><p>重新设置 <code>user.name</code> 和 <code>user.email</code>，然后执行下面的命令，重新修改最新的提交，改正作者和提交者的错误信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend --allow-empty --reset-author</span><br></pre></td></tr></table></figure><ul><li>参数 <code>--amend</code> 是对刚刚的提交进行修补，这样就可以改正前面错误的提交（用户信息错误），而不会产生另外的新提交。</li><li>参数 <code>--allow-empty</code> 是因为要进行修补的提交实际上是一个空白提交，Git 默认不允许空白提交。</li><li>参数 <code>--reset-author</code> 的含义是将 Author（提交者）的 ID 重置，否则只会影响最新的 Commit（提交者）的 ID。这条命令也会重置 AuthorDate 信息。</li></ul><h3 id="思考：随意设置提交者姓名，是否太不安全？"><a href="#思考：随意设置提交者姓名，是否太不安全？" class="headerlink" title="思考：随意设置提交者姓名，是否太不安全？"></a>思考：随意设置提交者姓名，是否太不安全？</h3><p>Git 可以随意设置提交的用户名和邮件地址信息，这是分布式版本控制系统的特性使然，每个人都是自己版本库的主人，很难也没有必要进行身份认证从而使用经过认证的用户名作为提交的用户名。</p><p>但是可以使用 GitLab 等服务管理权限。</p><h3 id="思考：命令别名是干什么的？"><a href="#思考：命令别名是干什么的？" class="headerlink" title="思考：命令别名是干什么的？"></a>思考：命令别名是干什么的？</h3><p>命令别名可以帮助用户解决从其他版本控制系统迁移到 Git 后的使用习惯问题。</p><h3 id="备份本章的工作成果"><a href="#备份本章的工作成果" class="headerlink" title="备份本章的工作成果"></a>备份本章的工作成果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/my/workspace</span><br><span class="line">git <span class="built_in">clone</span> demo demo-step-1</span><br><span class="line">Cloning into demo-step-1...</span><br><span class="line"><span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><h2 id="Git-暂存区"><a href="#Git-暂存区" class="headerlink" title="Git 暂存区"></a>Git 暂存区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><p>可以用 <code>git log</code> 查看提交日志，附加的 <code>--stat</code> 参数看到每次提交的文件变更统计。</p><h3 id="修改不能直接提交？"><a href="#修改不能直接提交？" class="headerlink" title="修改不能直接提交？"></a>修改不能直接提交？</h3><p>现在就将修改的文件“添加”到提交暂存区：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add welcome.txt</span><br></pre></td></tr></table></figure><p>这时如果和 HEAD（当前版本库的头指针）或者 master 分支（当前工作分支）进行比较，会发现有差异。这个差异才是正常的，因为尚未真正提交么。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><p>用简洁方式显示状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status -s</span><br><span class="line">M  welcome.txt</span><br></pre></td></tr></table></figure><p>通过参数 <code>--cached</code> 或者 <code>--staged</code> 参数调用 git diff 命令，看到的是提交暂存区 <code>stage</code> 和版本库中文件的差异。不然看到的是工作区的变动。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><p>现在执行 git commit 命令进行提交。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;which version checked in?&quot;</span></span><br></pre></td></tr></table></figure><p>如何证明提交成功了呢？通过查看提交日志，看到了新的提交。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><h3 id="理解-Git-暂存区-stage"><a href="#理解-Git-暂存区-stage" class="headerlink" title="理解 Git 暂存区 stage"></a>理解 Git 暂存区 stage</h3><p>当执行 <code>git status</code> 命令（或者 <code>git diff</code> 命令）扫描工作区改动的时候，先依据 <code>.git/index</code> 文件中记录的（工作区跟踪文件的）时间戳、长度等信息判断工作区文件是否改变。</p><p>文件 <code>.git/index</code> 实际上就是一个包含文件索引的目录树，像是一个虚拟的工作区。在这个虚拟工作区的目录树中，记录了文件名、文件的状态信息（时间戳、文件长度等）。文件的内容并不存储其中，而是保存在 Git 对象库 <code>.git/objects</code> 目录中，文件索引建立了文件和对象库中对象实体之间的对应。</p><p><img src="https://user-images.githubusercontent.com/9289792/80202431-33a64480-8658-11ea-8771-07b2bf81f657.png" alt="got-git-reading-notes-solo-git-stage"></p><ul><li>图中可以看出此时 HEAD 实际是指向 master 分支的一个“游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</li><li>图中的 objects 标识的区域为 Git 的对象库，实际位于 <code>.git/objects</code> 目录下，会在后面的章节重点介绍。</li><li>当执行 <code>git reset HEAD</code> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行 <code>git rm --cached &lt;file&gt;</code> 命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行 <code>git checkout .</code> 或者 <code>git checkout -- &lt;file&gt;</code> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</li><li>当执行 <code>git checkout HEAD .</code> 或者 <code>git checkout HEAD &lt;file&gt;</code> 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li></ul><h3 id="Git-diff-魔法"><a href="#Git-diff-魔法" class="headerlink" title="Git diff 魔法"></a>Git diff 魔法</h3><p>有什么办法能够像查看工作区一样的，直观的查看暂存区以及 HEAD 当中的目录树么？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git ls-tree -l HEAD</span><br><span class="line">100644 blob fd3c069c1de4f4bc9b15940f490aeb48852f3c42      25    welcome.txt</span><br></pre></td></tr></table></figure><p>要显示暂存区的目录树，可以使用 <code>git ls-files</code> 命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git ls-files -s</span><br><span class="line">100644 18832d35117ef2f013c4009f5b2128dfaeff354f 0       a/b/c/hello.txt</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9289792/80202327-06599680-8658-11ea-8329-93b424bc3726.png" alt="got-git-reading-notes-solo-git-diff"></p><h3 id="不要使用-git-commit-a"><a href="#不要使用-git-commit-a" class="headerlink" title="不要使用 git commit -a"></a>不要使用 git commit -a</h3><p>提交命令 <code>git commit</code> 可以带上 <code>-a</code> 参数，对本地所有变更的文件执行提交操作，包括本地修改的文件，删除的文件，但不包括未被版本库跟踪的文件。</p><p>这个“偷懒”的提交命令，就会丢掉 Git 暂存区带给用户最大的好处：对提交内容进行控制的能力。</p><h2 id="Git-对象"><a href="#Git-对象" class="headerlink" title="Git 对象"></a>Git 对象</h2><p>什么是 <code>HEAD</code>？什么是 <code>master</code>？为什么它们二者可以相互替换使用？为什么 Git 中的很多对象像提交、树、文件内容等都用 40 位的 <code>SHA1</code> 哈希值来表示？</p><h3 id="Git-对象库探秘"><a href="#Git-对象库探秘" class="headerlink" title="Git 对象库探秘"></a>Git 对象库探秘</h3><p>40 位十六进制数字组成的 <code>SHA1</code> 哈希值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -1 --pretty=raw</span><br><span class="line"><span class="comment"># 这是本次提交的唯一标识。</span></span><br><span class="line">commit e695606fc5e31b2ff9038a48a3d363f4c21a3d86</span><br><span class="line"><span class="comment"># 这是本次提交所对应的目录树。</span></span><br><span class="line">tree f58da9a820e3fd9d84ab2ca2f1b467ac265038f9</span><br><span class="line"><span class="comment"># 这是本地提交的父提交（上一次提交）。</span></span><br><span class="line">parent a0c641e92b10d8bcca1ed1bf84ca80340fdefee6</span><br><span class="line"></span><br><span class="line">    <span class="built_in">which</span> version checked <span class="keyword">in</span>?</span><br></pre></td></tr></table></figure><p>研究 Git 对象 ID 的命令是 <code>git cat-file</code>，用下面的命令可以查看一下这三个 ID 的类型。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -t e695606</span><br><span class="line">commit</span><br><span class="line">git cat-file -t f58d</span><br><span class="line">tree</span><br><span class="line">git cat-file -t fd3c06</span><br><span class="line">blob</span><br></pre></td></tr></table></figure><!-- more --><p>再用 <code>git cat-file</code> 命令查看一下这几个对象的内容。对于 <code>blob</code> 对象，这个对象保存着文件 welcome.txt 的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -p fd3c06</span><br><span class="line">Hello.</span><br><span class="line">Nice to meet you.</span><br></pre></td></tr></table></figure><p>这个写对象都存在 Git 库中的 <code>objects</code> 目录下，ID 的前两位作为目录名，后 38 位作为文件名。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> e695606 f58da9a a0c641e fd3c069; <span class="keyword">do</span> \</span><br><span class="line">  <span class="built_in">ls</span> .git/objects/<span class="variable">$&#123;id:0:2&#125;</span>/<span class="variable">$&#123;id:2&#125;</span>*; <span class="keyword">done</span></span><br><span class="line">.git/objects/e6/95606fc5e31b2ff9038a48a3d363f4c21a3d86</span><br><span class="line">.git/objects/f5/8da9a820e3fd9d84ab2ca2f1b467ac265038f9</span><br><span class="line">.git/objects/a0/c641e92b10d8bcca1ed1bf84ca80340fdefee6</span><br><span class="line">.git/objects/fd/3c069c1de4f4bc9b15940f490aeb48852f3c42</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9289792/80202330-08235a00-8658-11ea-9040-b280b00b7e43.png" alt="got-git-reading-notes-solo-git-objects"></p><h3 id="HEAD-和-master-的奥秘"><a href="#HEAD-和-master-的奥秘" class="headerlink" title="HEAD 和 master 的奥秘"></a>HEAD 和 master 的奥秘</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -1 HEAD</span><br><span class="line">git <span class="built_in">log</span> -1 master</span><br><span class="line">git <span class="built_in">log</span> -1 refs/heads/master</span><br></pre></td></tr></table></figure><p>在当前版本库中，<code>HEAD</code>、<code>master</code> 和 <code>refs/heads/master</code> 具有相同的指向。现在到版本库 <code>.git</code> 中一探它们的究竟：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find .git -name HEAD -o -name master</span><br><span class="line">.git/HEAD</span><br><span class="line">.git/logs/HEAD</span><br><span class="line">.git/logs/refs/heads/master</span><br><span class="line">.git/refs/heads/master</span><br></pre></td></tr></table></figure><p>显示一下 <code>.git/HEAD</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>指向一个引用：<code>refs/heads/master</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> .git/refs/heads/master</span><br><span class="line">e695606fc5e31b2ff9038a48a3d363f4c21a3d86</span><br></pre></td></tr></table></figure><p>显示该提交的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -p e695606fc5e31b2ff9038a48a3d363f4c21a3d86</span><br><span class="line">tree f58da9a820e3fd9d84ab2ca2f1b467ac265038f9</span><br><span class="line">parent a0c641e92b10d8bcca1ed1bf84ca80340fdefee6</span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> version checked <span class="keyword">in</span>?</span><br></pre></td></tr></table></figure><p>原来分支 <code>master</code> 指向的是一个提交 ID（最新提交）。</p><p>这样的分支实现是多么的巧妙啊：既然可以从任何提交开始建立一条历史跟踪链，那么用一个文件指向这个链条的最新提交，那么这个文件就可以用于追踪整个提交历史了。</p><p>这个文件就是 <code>.git/refs/heads/master</code> 文件。</p><p><img src="https://user-images.githubusercontent.com/9289792/80202610-78ca7680-8658-11ea-9b85-651555b8f005.png" alt="got-git-reading-notes-solo-git-repos-detail"></p><p>目录 <code>.git/refs</code> 是保存引用的命名空间，其中 <code>.git/refs/heads</code> 目录下的引用又称为分支。对于分支既可以使用正规的长格式的表示法，如 <code>refs/heads/master</code>，也可以去掉前面的两级目录用 <code>master</code> 来表示。Git 有一个底层命令 <code>git rev-parse</code> 可以用于显示引用对应的提交 ID。</p><h3 id="问题：SHA1-哈希值到底是什么，如何生成的？"><a href="#问题：SHA1-哈希值到底是什么，如何生成的？" class="headerlink" title="问题：SHA1 哈希值到底是什么，如何生成的？"></a>问题：SHA1 哈希值到底是什么，如何生成的？</h3><p>哈希(hash)是一种数据摘要算法（或称散列算法），是信息安全领域当中重要的理论基石。该算法将任意长度的输入经过散列运算转换为固定长度的输出。固定长度的输出可以称为对应的输入的数字摘要或哈希值。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n Git |<span class="built_in">sha1sum</span></span><br><span class="line">5819778898df55e3a762f0c5728b457970d72cae  -</span><br></pre></td></tr></table></figure><p>提交的 SHA1 哈希值生成方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file commit HEAD | <span class="built_in">wc</span> -c</span><br><span class="line">234</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在提交信息的前面加上内容 `commit 234&lt;null&gt;`（`&lt;null&gt;`为空字符），然后执行 SHA1 哈希算法。</span></span><br><span class="line">( <span class="built_in">printf</span> <span class="string">&quot;commit 234\000&quot;</span>; git cat-file commit HEAD ) | <span class="built_in">sha1sum</span></span><br><span class="line">e695606fc5e31b2ff9038a48a3d363f4c21a3d86  -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面命令得到的哈希值和用 `git rev-parse` 看到的是一样的。</span></span><br><span class="line">git rev-parse HEAD</span><br><span class="line">e695606fc5e31b2ff9038a48a3d363f4c21a3d86</span><br></pre></td></tr></table></figure><p>文件内容的 SHA1 哈希值生成方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件总共包含 25 字节的内容。</span></span><br><span class="line">git cat-file blob HEAD:welcome.txt | <span class="built_in">wc</span> -c</span><br><span class="line">25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件内容的前面加上blob 25&lt;null&gt;的内容，然后执行SHA1哈希算法。</span></span><br><span class="line">( <span class="built_in">printf</span> <span class="string">&quot;blob 25\000&quot;</span>; git cat-file blob HEAD:welcome.txt ) | <span class="built_in">sha1sum</span></span><br><span class="line">fd3c069c1de4f4bc9b15940f490aeb48852f3c42  -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面命令得到的哈希值和用git rev-parse看到的是一样的。</span></span><br><span class="line">git rev-parse HEAD:welcome.txt</span><br><span class="line">fd3c069c1de4f4bc9b15940f490aeb48852f3c42</span><br></pre></td></tr></table></figure><p>树的 SHA1 哈希值的形成方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HEAD对应的树的内容共包含39个字节。</span></span><br><span class="line">git cat-file tree HEAD^&#123;tree&#125; | <span class="built_in">wc</span> -c</span><br><span class="line">39</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在树的内容的前面加上tree 39&lt;null&gt;的内容，然后执行SHA1哈希算法。</span></span><br><span class="line">( <span class="built_in">printf</span> <span class="string">&quot;tree 39\000&quot;</span>; git cat-file tree HEAD^&#123;tree&#125; ) | <span class="built_in">sha1sum</span></span><br><span class="line">f58da9a820e3fd9d84ab2ca2f1b467ac265038f9  -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面命令得到的哈希值和用git rev-parse看到的是一样的。</span></span><br><span class="line">git rev-parse HEAD^&#123;tree&#125;</span><br><span class="line">f58da9a820e3fd9d84ab2ca2f1b467ac265038f9</span><br></pre></td></tr></table></figure><h3 id="问题：为什么不用顺序的数字来表示提交？"><a href="#问题：为什么不用顺序的数字来表示提交？" class="headerlink" title="问题：为什么不用顺序的数字来表示提交？"></a>问题：为什么不用顺序的数字来表示提交？</h3><p>集中式版本控制系统因为只有一个集中式的版本库，可以很容易的实现依次递增的全局唯一的提交号。Git 作为分布式版本控制系统，开发可以是非线性的。这就要求提交的编号不能仅仅是本地局部有效，而是要“全球唯一”。</p><p>采用部分的 SHA1 哈希值。不必写全 40 位的哈希值，只采用开头的部分，不和现有其他的冲突即可。</p><p>使用 <code>master</code> 代表分支 <code>master</code> 中最新的提交，使用全称 <code>refs/heads/master</code> 亦可。</p><p>使用 <code>HEAD</code> 代表版本库中最近的一次提交。</p><p>符号 <code>^</code> 可以用于指代父提交。例如：</p><ul><li><code>HEAD^</code> 代表版本库中上一次提交，即最近一次提交的父提交。</li><li><code>HEAD^^</code> 则代表 <code>HEAD^</code> 的父提交。</li></ul><p>对于一个提交有多个父提交，可以在符号 <code>^</code> 后面用数字表示是第几个父提交。例如：</p><ul><li><code>a573106^2</code> 含义是提交 <code>a573106</code> 的多个父提交中的第二个父提交。</li><li><code>HEAD^1</code> 相当于 <code>HEAD^</code> 含义是 HEAD 多个父提交中的第一个。</li><li><code>HEAD^^2</code> 含义是 <code>HEAD^</code>（HEAD 父提交）的多个父提交中的第二个。</li></ul><p>符号 <code>~&lt;n&gt;</code> 也可以用于指代祖先提交。效果等同：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a573106~5</span><br><span class="line">a573106^^^^^</span><br></pre></td></tr></table></figure><p>提交所对应的树对象：<code>a573106^&#123;tree&#125;</code></p><p>某一此提交对应的文件对象：<code>a573106:path/to/file</code></p><p>暂存区中的文件对象：<code>:path/to/file</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rev-parse HEAD</span><br><span class="line">git cat-file -p e695</span><br><span class="line">git cat-file -p e695^</span><br><span class="line">git rev-parse e695^&#123;tree&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.worldhello.net/gotgit/02-git-solo/index.html">2. Git 独奏 &amp;mdash; GotGit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Git 权威指南】读书笔记 - 初识 Git</title>
      <link href="/2017/07/12/got-git-reading-notes-meet-git/"/>
      <url>/2017/07/12/got-git-reading-notes-meet-git/</url>
      
        <content type="html"><![CDATA[<p>Git 是一款分布式版本控制系统，有别于 CVS 和 SVN 等集中式版本控制系统，Git 可以让研发团队更加高效地协同工作、提高生产率。使用 Git，开发人员的工作不会因为频繁地遭遇提交冲突而中断，管理人员也无须为数据的备份而担心。经过 Linux 这样庞大的项目的考验之后，Git 被证明可以胜任任何规模的团队，即便这个团队的成员分布于世界各地。</p><p>Git 是开源社区奉献给每一个人的宝贝，用好它可以实现个人的知识积累、保护好自己的数据，而且还能与他人分享自己的成果。</p><h2 id="版本控制的前世和今生"><a href="#版本控制的前世和今生" class="headerlink" title="版本控制的前世和今生"></a>版本控制的前世和今生</h2><p>即便是在 CVS 出现之前的“史前时代”，也已经有了非常好用的源码比较和打补丁的工具：<code>diff</code> 和 <code>patch</code>，他们今天生命力依然顽强。</p><span id="more"></span><p>对这 <code>hello</code> <code>world</code> 两个文件执行 diff 命令，查看两个文件的差异。如下所示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff -u hello world | less -N</span><br></pre></td></tr></table></figure><p>上面执行 <code>diff</code> 命令的 <code>-u</code> 参数很重要，使得差异输出中带有上下文。管道后面带有 <code>-N</code> 参数的 <code>less</code> 命令（按字母 <code>q</code> 退出）会在输出的每一行前面添加行号，便于对输出结果进行说明。</p><p>命令 <code>patch</code> 相当于 <code>diff</code> 的反向操作</p><p>分布式版本控制系统最大的反传统之处在于，可以不需要集中式的版本库，每个人都工作在通过克隆操作建立的本地版本库中，也就是说每个人都拥有一个完整的版本库。分布式版本控制系统的几乎所有操作包括查看提交日志、提交、创建里程碑和分支、合并分支、回退等都直接在本地完成而不需要网络连接。每个人都是本地版本库的主人，不再有谁能提交谁不能提交的限制，加之多样的协同工作模型（版本库间推送、拉回，及补丁文件传送等）让开源项目的参与度有爆发式增长。</p><h2 id="爱上-Git-的理由"><a href="#爱上-Git-的理由" class="headerlink" title="爱上 Git 的理由"></a>爱上 Git 的理由</h2><ul><li>每日的工作备份。鸡蛋不全放在一个篮子里。</li><li>异地协同工作。通过一个远程版本库，同步数据。</li><li>现场版本控制。在部署的现场，进行源代码的修改，能够将修改结果甚至修改过程一并带走，并能够将修改结果合并至项目对应的代码库中。</li><li>避免引入辅助目录。只在工作区的顶级目录下创建名为 <code>.git</code> 的目录（版本库目录），如果认为唯一的一个 <code>.git</code> 目录也过于碍眼，可以将其放到工作区之外的任意目录。一旦这么做了，你在执行 Git 命令时，要通过命令行 <code>--git-dir</code> 或环境变量 <code>GIT_DIR</code> 为工作区指定版本库目录，甚至还要指定工作区目录。</li><li>重写提交说明。这个命令如果不带 <code>-m</code> 参数，会进入提交说明编辑界面。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><ul><li>想吃后悔药。假如提交的数据中不小心包含了一个不应该检入的虚拟机文件——大约有 1 个 GB。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached winxp.img</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><ul><li>更好用的提交列表。正确的版本控制系统的使用方法是：一次提交只干一件事。而不要在下班时才想起来要提交，那样的话版本控制系统就被降格为文件备份系统了。</li><li>更好的差异比较。<code>git diff</code></li><li>工作进度保存。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout &lt;new_branch&gt;</span><br><span class="line"><span class="comment"># do something</span></span><br><span class="line">git checkout &lt;orignal_branch&gt;</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><ul><li>代理 SVN 提交实现移动式办公。</li><li>无处不在的分页器。<code>-p</code></li><li>快。Git 作为分布式版本控制系统几乎所有的操作都在本地进行。</li></ul><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo aptitude install git</span><br><span class="line">sudo aptitude install git-doc git-svn git-email gitk</span><br></pre></td></tr></table></figure><p>软件包 git-svn、git-email、gitk 本来也是 Git 软件包的一部分，但是因为有着不一样的软件包依赖（如更多 perl 模组，tk 等），所以单独作为软件包发布。</p><p>软件包 git-doc 则包含了 Git 的 HTML 格式文档，可以选择安装。如果安装了 Git 的 HTML 格式的文档，则可以通过执行 <code>git help -w &lt;sub-command&gt;</code> 命令，自动用 Web 浏览器打开相关子命令 <code>&lt;sub-command&gt;</code> 的 HTML 帮助。</p><h2 id="中文支持"><a href="#中文支持" class="headerlink" title="中文支持"></a>中文支持</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.worldhello.net/gotgit/01-meet-git/index.html">1. 初识 Git &amp;mdash; GotGit</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux | Mac 安装 Node.js 与常见问题</title>
      <link href="/2017/07/06/install-node-js-in-ubuntu-and-faq/"/>
      <url>/2017/07/06/install-node-js-in-ubuntu-and-faq/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h2><p>推荐使用 nvm 安装管理 node.js</p><blockquote><p>the nvm method is definitely much more flexible.</p></blockquote><p><a href="https://github.com/creationix/nvm#installation">creationix&#x2F;nvm: Node Version Manager - Simple bash script to manage multiple active node.js versions</a></p><p>To install or update nvm.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uses automatic LTS (long-term support) alias `lts/*`, if available.</span></span><br><span class="line">nvm ls-remote --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新 lts</span></span><br><span class="line">nvm install --lts</span><br><span class="line"><span class="comment"># v10 lts</span></span><br><span class="line">nvm install --lts=Dubnium</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">nvm install v6.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Usually, nvm will switch to use the most recently installed version</span></span><br><span class="line">nvm use v6.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can see the version currently being used</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他命令可以查看帮助</span></span><br><span class="line">nvm <span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="nrm-源管理"><a href="#nrm-源管理" class="headerlink" title="nrm 源管理"></a>nrm 源管理</h2><p>nrm can help you easy and fast switch between different npm registries.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line"></span><br><span class="line">nrm <span class="built_in">ls</span></span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><h2 id="node-sass-sh-node-command-not-found"><a href="#node-sass-sh-node-command-not-found" class="headerlink" title="node-sass sh: node: command not found"></a>node-sass sh: node: command not found</h2><blockquote><p><a href="https://docs.npmjs.com/misc/config#unsafe-perm">config unsafe-perm | npmjs</a></p></blockquote><p>解决办法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --unsafe-perm node-sass</span><br></pre></td></tr></table></figure><p><code>npm</code> 出于安全考虑不支持以 <code>root</code> 用户运行，即使你用 <code>root</code> 用户身份运行了，npm 会自动转成一个叫 <code>nobody</code> 的用户来运行，而这个用户几乎没有任何权限。这样的话如果你脚本里有一些需要权限的操作，比如写文件（尤其是写 &#x2F;root&#x2F;.node-gyp），就会报错了。</p><p>为了避免这种情况，要么按照 npm 的规矩来，专门建一个用于运行 npm 的高权限用户。要么加 <code>--unsafe-perm</code> 参数，这样就不会切换到 <code>nobody</code> 上，运行时是哪个用户就是哪个用户，即使是 <code>root</code>。</p><p>再或尝试：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm rebuild node-sass</span><br></pre></td></tr></table></figure><h2 id="version-“N-x2F-A-gt-N-x2F-A”-is-not-yet-installed"><a href="#version-“N-x2F-A-gt-N-x2F-A”-is-not-yet-installed" class="headerlink" title="version “N&#x2F;A -&gt; N&#x2F;A” is not yet installed"></a>version “N&#x2F;A -&gt; N&#x2F;A” is not yet installed</h2><p>出现了这个报错提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">N/A: version <span class="string">&quot;N/A -&gt; N/A&quot;</span> is not yet installed.</span><br><span class="line"></span><br><span class="line">You need to run <span class="string">&quot;nvm install N/A&quot;</span> to install it before using it</span><br></pre></td></tr></table></figure><p>List installed versions</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line">-&gt;      v6.11.0</span><br><span class="line">         v8.2.1</span><br><span class="line">default -&gt; 4 (-&gt; N/A)</span><br><span class="line">node -&gt; stable (-&gt; v8.2.1) (default)</span><br><span class="line">stable -&gt; 8.2 (-&gt; v8.2.1) (default)</span><br><span class="line">iojs -&gt; N/A (default)</span><br><span class="line">lts/* -&gt; lts/boron (-&gt; N/A)</span><br><span class="line">lts/argon -&gt; v4.8.4 (-&gt; N/A)</span><br><span class="line">lts/boron -&gt; v6.11.1 (-&gt; N/A)</span><br></pre></td></tr></table></figure><p>Try nvm install in that directory to ensure it’s installed.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line">nvm install iojs</span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">alias</span> default v6.11.1</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04">How To Install Node.js on Ubuntu 16.04 | DigitalOcean</a></li><li><a href="https://github.com/sass/node-sass/issues/2470">nvm node is recognised by npm install script. | GitHub</a></li><li><a href="https://segmentfault.com/q/1010000019365121">npm 的 –unsafe-perm 参数是有何作用呢？| segmentfault</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> node-js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGINX 启用 HTTP/2</title>
      <link href="/2017/06/06/nginx-enable-http2/"/>
      <url>/2017/06/06/nginx-enable-http2/</url>
      
        <content type="html"><![CDATA[<p>2015 年 5 月 14 日 HTTP&#x2F;2 协议正式版的发布，越来越多的网站开始部署 HTTP&#x2F;2 了。</p><p>HTTP&#x2F;2 协议是从 SPDY 演变而来，SPDY 已经完成了使命并很快就会退出历史舞台（例如 Chrome 在 2016 年初结束对 SPDY 的支持；Nginx 在 15 年年底正式支持 HTTP&#x2F;2 后，也不再支持 SPDY）。</p><p><a href="https://http2.akamai.com/demo">HTTP&#x2F;2: the Future of the Internet | Akamai</a> 提供了 HTTP&#x2F;1 和 HTTP&#x2F;2 的加载速度对比。</p><h2 id="HTTP-x2F-2-中的特性"><a href="#HTTP-x2F-2-中的特性" class="headerlink" title="HTTP&#x2F;2 中的特性"></a>HTTP&#x2F;2 中的特性</h2><ul><li>多路复用：通过多个请求 stream 共享一个 TCP 连接的方式，解决了 HTTP1.x holb (head of line blocking) 的问题，降低了延迟同时提高了带宽的利用率。</li><li>压缩头部：HTTP&#x2F;2 规定了在客户端和服务器端会使用并且维护“首部表”，来跟踪和存储之前发送的键值对，对于相同的头部，不必再通过请求发送，只需发送一次。</li><li>二进制分帧：在应用层与传输层之间增加一个二进制分帧层，以此达到：在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破 HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。</li></ul><p>以下配置是在 Ubuntu 14.04 LTS 下。Ubuntu 14.04 LTS 中 Nginx、OpenSSL 的默认版本都是比较低的所以需要升级。</p><span id="more"></span><h2 id="install-OpenSSL"><a href="#install-OpenSSL" class="headerlink" title="install OpenSSL"></a>install OpenSSL</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget openssl.org/source/openssl-1.0.2l.tar.gz</span><br><span class="line">sudo tar -xvzfopenssl-1.0.2l.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.0.2l</span><br><span class="line">sudo ./config --prefix=/usr/</span><br><span class="line">sudo make depend</span><br><span class="line">sudo make install</span><br><span class="line">openssl version</span><br></pre></td></tr></table></figure><h2 id="install-Nginx"><a href="#install-Nginx" class="headerlink" title="install Nginx"></a>install Nginx</h2><h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加源</span></span><br><span class="line">sudo vim /etc/apt/sources.list.d/nginx.list</span><br></pre></td></tr></table></figure><p>add:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ trusty nginx</span><br><span class="line">deb-src http://nginx.org/packages/ubuntu/ trusty nginx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加签名</span></span><br><span class="line">wget -q <span class="string">&quot;http://nginx.org/packages/keys/nginx_signing.key&quot;</span> -O-| sudo apt-key add -</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>这样可以安装上比较新的 Nginx 版本应该就够用了。</p><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>因为我使用了 <code>ngx_pagespeed</code> 模块，所以我采用的是源码编译安装的方式</p><p><a href="http://nginx.org/en/download.html">nginx: download</a> 下载源码，编译 <a href="http://nginx.org/en/docs/http/ngx_http_v2_module.html">Module ngx_http_v2_module</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要添加 http_v2_module 和 --with-openssl</span></span><br><span class="line">sudo ./configure --with-http_v2_module --with-openssl=../openssl-1.0.2l</span><br></pre></td></tr></table></figure><p>这里只写了 HTTP&#x2F;2 涉及的模块，其他参数按需添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="Nginx-configuration"><a href="#Nginx-configuration" class="headerlink" title="Nginx configuration"></a>Nginx configuration</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 default_server ssl http2;</span><br><span class="line">    listen [::]:443 default_server ssl http2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>访问你的网站，在 Chrome Network 中勾选 <code>Protocol</code>，可以看到 <code>h2</code></p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>根据 <a href="https://tsukkomi.org/post/enable-http-2-on-nginx">&amp;#12302; Nginx 启用 HTTP&#x2F;2&amp;#12303; 有槽必吐 - 不吐槽，毋宁死</a> 的经验，在 Ubuntu 16.04 LTS 下只要配置 Nginx server 块就可以了。</p><p>Chrome 插件 <a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en-US">HTTP&#x2F;2 and SPDY indicator</a> 如果网站是 HTTP&#x2F;2 就会显示蓝色，如果是 SPDY（HTTP&#x2F;2 的前身）就会显示绿色，如果没有则显示灰色。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.zhihu.com/question/34074946">HTTP&#x2F;2.0 相比 1.0 有哪些重大改进？ - 知乎</a></li><li><a href="https://tsukkomi.org/post/enable-http-2-on-nginx">&amp;#12302; Nginx 启用 HTTP&#x2F;2&amp;#12303; 有槽必吐 - 不吐槽，毋宁死</a></li><li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details">http2 讲解 · GitBook</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决多个 inline-block width 总和 100% 但是不并列显示</title>
      <link href="/2017/06/03/resolving-multiple-inline-block-not-in-a-single-row/"/>
      <url>/2017/06/03/resolving-multiple-inline-block-not-in-a-single-row/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一个问题：两个宽度和为 100% 的内联块，没有能在同一行并列显示，第二个内联块跑到了下一行，很奇怪。查其原因竟是：空格、换行造成的。</p><span id="more"></span><p>Stack Overflow 中的相似问题：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Width issue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JSFiddle: <a href="http://jsfiddle.net/5EcPK/">http://jsfiddle.net/5EcPK/</a></p><ol><li>当减小一个 <code>inline-block</code> 的 width 为 49% 时，divs 可以并列显示，但是之间有个空隙，显然这不是一个理想的解决方案 <a href="http://jsfiddle.net/mUKSC/">http://jsfiddle.net/mUKSC/</a></li><li>当将两个 divs 浮动时，也解决了这个问题 <a href="http://jsfiddle.net/VptQm/">http://jsfiddle.net/VptQm/</a> 但是浮动布局并不是一个理想的布局方案，浮动属性本意是为了解决“文字环绕”的效果，浮动属性现在被滥用了</li></ol><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p>When using <code>inline-block</code> elements, there will always be an <code>whitespace</code> issue between those elements (that space is about ~ 4px wide).</p><p>So, your two <code>divs</code>, which both have 50% width, plus that <code>whitespace</code>(~ 4px) is more than 100% in width, and so it breaks.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="移除-inline-block-之间的空格"><a href="#移除-inline-block-之间的空格" class="headerlink" title="移除 inline-block 之间的空格"></a>移除 inline-block 之间的空格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不推荐，太依靠代码格式</p><h3 id="利用-HTML-注释"><a href="#利用-HTML-注释" class="headerlink" title="利用 HTML 注释"></a>利用 HTML 注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不推荐，很奇怪的代码格式</p><h3 id="利用闭合标签"><a href="#利用闭合标签" class="headerlink" title="利用闭合标签"></a>利用闭合标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不推荐，利用代码格式的感觉都不太靠谱</p><h3 id="设置父级元素的-font-size-为-0"><a href="#设置父级元素的-font-size-为-0" class="headerlink" title="设置父级元素的 font-size 为 0"></a>设置父级元素的 font-size 为 0</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/* parent value */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>; <span class="comment">/* 1 root em*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用负-margin-值"><a href="#使用负-margin-值" class="headerlink" title="使用负 margin 值"></a>使用负 margin 值</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">4px</span>; <span class="comment">/* negative margin */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/18262300/two-inline-block-elements-each-50-wide-do-not-fit-side-by-side-in-a-single-row">html - Two inline-block elements, each 50% wide, do not fit side by side in a single row - Stack Overflow</a></li><li><a href="https://css-tricks.com/fighting-the-space-between-inline-block-elements/">Fighting the Space Between Inline Block Elements | CSS-Tricks</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP 中获取 Nginx 使用反向代理或 CDN 后的客户端真实 IP</title>
      <link href="/2017/06/02/php-get-real-ip-after-nginx-using-reverse-proxy-or-cdn/"/>
      <url>/2017/06/02/php-get-real-ip-after-nginx-using-reverse-proxy-or-cdn/</url>
      
        <content type="html"><![CDATA[<p>获取 Nginx 反向代理后的客户端 IP，基本是按一定顺序检测以下参数中的信息：</p><ul><li>HTTP_CLIENT_IP</li><li>HTTP_X_REAL_FORWARDED_FOR</li><li>HTTP_X_FORWARDED_FOR</li><li>REMOTE_ADDR</li></ul><h2 id="在未使用-CDN-和反向代理情况下"><a href="#在未使用-CDN-和反向代理情况下" class="headerlink" title="在未使用 CDN 和反向代理情况下"></a>在未使用 CDN 和反向代理情况下</h2><p>当业务服务器直接暴露在公网上，并且未使用 CDN 和反向代理服务器时，可以直接使用 <code>remote_addr</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这时候 <code>HTTP_X_FORWARDED_FOR</code> 和 <code>HTTP_X_REAL_IP</code> 都是可以被伪造的，但 <code>REMOTE_ADDR</code> 是客户端和服务器的握手 IP，即 client 的出口 IP，伪造不了。</p><span id="more"></span><h2 id="在使用-CDN-和反向代理情况下"><a href="#在使用-CDN-和反向代理情况下" class="headerlink" title="在使用 CDN 和反向代理情况下"></a>在使用 CDN 和反向代理情况下</h2><h3 id="铁律"><a href="#铁律" class="headerlink" title="铁律"></a>铁律</h3><p>当多层代理或使用 CDN 时，如果代理服务器不把用户的真实 IP 传递下去，那么业务服务器将永远不可能获取到用户的真实 IP。</p><p>如果 WEB 服务器上层也是使用 Nginx 做代理或负载均衡，则需要在代理层的 Nginx 配置中明确 XFF 参数，累加传递上一个请求方的 IP 到 header 请求中。以下是代理层的 Nginx 配置参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-NginX-Proxy true;</span><br></pre></td></tr></table></figure><h3 id="只有一层代理的情况"><a href="#只有一层代理的情况" class="headerlink" title="只有一层代理的情况"></a>只有一层代理的情况</h3><p>我们按上面的配置发起一个伪造请求，10.100.11.25 是我电脑的 IP，链路为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.100.11.25(client)-&gt;10.200.21.33(Proxy)-&gt;10.200.21.32(Web Server)</span><br></pre></td></tr></table></figure><p>curl 请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://10.200.21.33:88/test.php -H <span class="string">&#x27;X-Forwarded-For: unkonw, &lt;8.8.8.8&gt; 1.1.1.1&#x27;</span> -H <span class="string">&#x27;X-Real-IP: 2.2.2.2&#x27;</span></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[HTTP_X_FORWARDED_FOR] =&gt; unkonw, &lt;8.8.8.8&gt; 1.1.1.1, 10.100.11.25</span><br><span class="line">[REMOTE_ADDR] =&gt; 10.200.21.33</span><br><span class="line">[HTTP_X_REAL_IP] =&gt; 10.100.11.25</span><br></pre></td></tr></table></figure><p>我们可以看到，XFF 被附加上了我的 IP，但前面的一系列伪造内容，可以轻易骗过很多规则，而 <code>HTTP_X_REAL_IP</code> 则传递了我电脑的 IP。因为在上面的配置中，<code>X-Real-IP</code> 已经被设置为握手 IP。</p><p>但多层代理之后，以上面的规则，显然 <code>HTTP_X_REAL_IP</code> 也不会是真实的用户 IP 了。而 <code>HTTP_X_FORWARDED_FOR</code> 则在原有信息（我们伪造的信息）之后附上了握手 IP 一起传递过来了。</p><h3 id="两层或更多代理的情况"><a href="#两层或更多代理的情况" class="headerlink" title="两层或更多代理的情况"></a>两层或更多代理的情况</h3><p>我们这里只测试两层，实际链路为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.100.11.25(client)-&gt;10.200.21.34(Proxy)-&gt;10.200.21.33(Proxy)-&gt;10.200.21.32(Web Server)</span><br></pre></td></tr></table></figure><p>curl 请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://10.200.21.34:88/test.php -H <span class="string">&#x27;X-Forwarded-For: unkonw, &lt;8.8.8.8&gt; 1.1.1.1&#x27;</span> -H <span class="string">&#x27;X-Real-IP: 2.2.2.2&#x27;</span></span><br></pre></td></tr></table></figure><p>两层代理的情况下结果为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HTTP_X_FORWARDED_FOR] =&gt; unkonw, &lt;8.8.8.8&gt; 1.1.1.1, 10.100.11.25, 10.200.21.34</span><br><span class="line">[REMOTE_ADDR] =&gt; 10.200.21.33</span><br><span class="line">[HTTP_X_REAL_IP] =&gt; 10.200.21.34</span><br></pre></td></tr></table></figure><p>根据上面的情况，怎么挑出真正的用户 IP 呢？设想三种方案：</p><p>1、第一层代理将用户的真实 IP 放在 <code>X-Real-IP</code> 中传递下去，后面的每一层都使用 <code>X-Real-IP</code> 继续往下传递。配置为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_set_header X-Real-IP $remote_addr;    # 针对首层代理，拿到真实IP</span><br><span class="line">proxy_set_header X-Real-IP $http_x_real_ip; # 针对非首层代理，一直传下去</span><br></pre></td></tr></table></figure><p>2、从首层开始，将用户的真实 IP 放在 X-Forwarded-For 中，而不是累加各层服务器的 IP，但这样也不够合理，因为丢掉了整个链路信息。配置为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For $remote_addr; # 针对首层代理</span><br><span class="line">proxy_set_header X-Forwarded-For $http_x_forwarded_for; # 针对非首层代理</span><br></pre></td></tr></table></figure><p>3、从 <code>X-Forwarded-For</code> 中获取的用户真实 IP，排除掉所有代理 IP，取最后一个符合 IP 规则的，注意不是第一个，因为第一个可能是被伪造的（除非首层代理使用了握手会话 IP 做为值向下传递）。</p><p>一般 CDN 都会将用户的真实 IP 在 XFF 中传递下去。我们可以做几个简单的测试就能知道我们该怎么做。</p><p>注意：Nginx 配置的这两个变量：</p><ul><li><code>$proxy_add_x_forwarded_for</code> 会累加代理层的 IP 向后传递</li><li><code>$http_x_forwarded_for</code> 仅仅是上层传过来的值</li></ul><h2 id="Nginx-realip-模块获取真实-IP"><a href="#Nginx-realip-模块获取真实-IP" class="headerlink" title="Nginx realip 模块获取真实 IP"></a>Nginx realip 模块获取真实 IP</h2><p>秉承一个原则：<em>能通过配置让事情变的更简单和通用的事儿，就不要用程序去解决。即环境对程序透明。</em> 这当然少不了系统运维人员的辛苦。</p><p>如果能在配置中理清，就不必用复杂的程序去解决，因为 Server 上可能有各种应用都要来获取用户 IP，如果规则不统一，结果会不一致。</p><p>程序不知道链路到底经过了几层才转到 WEB Server 上，所以让程序去做兼容并不是个好主意。索性就让程序把所有的代理都当成透明的好了。</p><p>上面介绍的三种方法中，如果不能保证前面的代理层使用我们指定的规则，这时候怎么办呢？只能使用第三种方法。然后我们将各层代理的 IP 排除在外，就取到了真实的用户 IP。这个可以使用 Nginx 的一个模块儿 <a href="http://nginx.org/en/docs/http/ngx_http_realip_module.html">Module ngx_http_realip_module</a> 来实现。</p><p>原理是从 XFF 中抛弃指定的代理层 IP，那么最后一个符合规则的就是用户 IP。也可以配合第一起方法一起使用。但无论如何，首层代理的规则最重要，直接影响后面的代理层和 WEB Server 的接收结果。</p><p>然后在 Nginx 配置中增加以下配置（可以在 http、server 或 location 段中增加）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># set user real ip to remote addr</span><br><span class="line">set_real_ip_from   10.200.21.0/24;</span><br><span class="line">set_real_ip_from   10.100.23.0/24;</span><br><span class="line">real_ip_header     X-Forwarded-For;</span><br><span class="line">real_ip_recursive on;</span><br></pre></td></tr></table></figure><p><code>set_real_ip_from</code> 后面是可信 IP 规则，可以有多条。如果启用 CDN，知道 CDN 的溯源 IP，也要加进来，除排掉可信的，就是用户的真实 IP，会写入 <code>remote_addr</code> 这个变量中。</p><p>在 PHP 中可以使用 <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code> 来获取。而 WEB Server 不使用任何反向代理时，也是取这个值，这就达到了我们之前所说的原则。</p><p><code>real_ip_recursive</code> 是递归的去除所配置中的可信 IP。如果只有一层代理，也可以不写这个参数。</p><h2 id="ThinkPHP-中的获取-IP-方法"><a href="#ThinkPHP-中的获取-IP-方法" class="headerlink" title="ThinkPHP 中的获取 IP 方法"></a>ThinkPHP 中的获取 IP 方法</h2><p>ThinkPHP 的 function 中提供了一个工具方法，在对获取 IP 地址不严格的情况下，可以启用高级模式</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取客户端IP地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> integer $type 返回类型 0 返回IP地址 1 返回IPV4地址数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> boolean $adv 是否进行高级模式获取（有可能被伪装）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_client_ip</span>(<span class="params"><span class="variable">$type</span> = <span class="number">0</span>, <span class="variable">$adv</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$type</span>       =  <span class="variable">$type</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$ip</span>  =   <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$ip</span> !== <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="variable">$ip</span>[<span class="variable">$type</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$adv</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$arr</span>    =   <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">            <span class="variable">$pos</span>    =   <span class="title function_ invoke__">array_search</span>(<span class="string">&#x27;unknown&#x27;</span>,<span class="variable">$arr</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">false</span> !== <span class="variable">$pos</span>) <span class="keyword">unset</span>(<span class="variable">$arr</span>[<span class="variable">$pos</span>]);</span><br><span class="line">            <span class="variable">$ip</span>     =   <span class="title function_ invoke__">trim</span>(<span class="variable">$arr</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;<span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$ip</span>     =   <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>];</span><br><span class="line">        &#125;<span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$ip</span>     =   <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$ip</span>     =   <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// IP地址合法验证</span></span><br><span class="line">    <span class="variable">$long</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%u&quot;</span>,<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>));</span><br><span class="line">    <span class="variable">$ip</span>   = <span class="variable">$long</span> ? <span class="keyword">array</span>(<span class="variable">$ip</span>, <span class="variable">$long</span>) : <span class="keyword">array</span>(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ip</span>[<span class="variable">$type</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx-LOG-记录真实-IP"><a href="#Nginx-LOG-记录真实-IP" class="headerlink" title="Nginx LOG 记录真实 IP"></a>Nginx LOG 记录真实 IP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_format porxy &#x27;$http_x_forwarded_for - $remote_user [$time_local] &#x27;</span><br><span class="line">                 &#x27; &quot;$request&quot;  $status $body_bytes_sent &#x27;</span><br><span class="line">                 &#x27; &quot;$http_referer&quot;  &quot;$http_user_agent&quot; &#x27;;</span><br><span class="line"></span><br><span class="line">access_log /usr/local/nginx/logs/access.log porxy;</span><br></pre></td></tr></table></figure><p>文章称 <code>nginx reload</code> 配置并不生效，需要 <code>restart</code>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.zhengshuiguang.com/php/php-ip.html">使用 PHP 获取客户端真实 IP 地址？——不可能！ - 也就这样</a></li><li><a href="http://www.wkii.org/nginx-cdn-get-user-real-ip.html">NGINX 多层转发或使用 CDN 之后如何获取用户真实 IP | Snow Blog</a></li><li><a href="https://juejin.im/post/59f94f626fb9a045023af34c">Nginx 日志配置详情解析</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 中 this self parent 用法</title>
      <link href="/2017/05/25/how-to-use-this-self-parent-in-php/"/>
      <url>/2017/05/25/how-to-use-this-self-parent-in-php/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><ul><li><code>self::</code> 调用本类属性、方法；可以抑制方法多态性。</li><li><code>parent::</code> 调用父类属性、方法。</li><li><code>static::</code> 调用静态属性、方法；可以体现多态性。</li><li><code>$this-&gt;</code> 调用本实例的属性、方法；<code>$this::</code> 可以调用静态属性、方法；但是无法在静态方法里使用；可以体现多态性。</li><li><code>-&gt;</code> object-operator, you always know you’re dealing with an instance.</li><li><code>::</code> scope-resolution-operator, you need more information about the context.</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">newStaticClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">newSelfClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newThisClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">$this</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newParentClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">parent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">newSelfClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>::<span class="title function_ invoke__">newStaticClass</span>()); <span class="comment">// C and is same C::newStaticClass()</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>::<span class="title function_ invoke__">newSelfClass</span>()); <span class="comment">// C because self now points to &quot;C&quot; class</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>-&gt;<span class="title function_ invoke__">newThisClass</span>()); <span class="comment">// C</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>-&gt;<span class="title function_ invoke__">newParentClass</span>()); <span class="comment">// A because parent was defined *way back* in class &quot;B&quot;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/151969/when-to-use-self-over-this">php - When to use self over $this? - Stack Overflow</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 修改远程仓库地址</title>
      <link href="/2017/05/17/git-modify-remote-url/"/>
      <url>/2017/05/17/git-modify-remote-url/</url>
      
        <content type="html"><![CDATA[<h2 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><code>-v</code> 是 <code>--verbose</code> 的简写</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">origin ssh://ubuntu@168.8.1.1/usr/share/nginx/html (fetch)</span><br><span class="line">origin ssh://ubuntu@168.8.1.1/usr/share/nginx/html (push)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add pb git://github.com/paulboone/ticgit.git</span><br></pre></td></tr></table></figure><h2 id="修改远程仓库"><a href="#修改远程仓库" class="headerlink" title="修改远程仓库"></a>修改远程仓库</h2><h3 id="修改-url"><a href="#修改-url" class="headerlink" title="修改 url"></a>修改 url</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url [shortname] [new url]</span><br></pre></td></tr></table></figure><h3 id="修改-shortname"><a href="#修改-shortname" class="headerlink" title="修改 shortname"></a>修改 shortname</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rename [new shortname] [url]</span><br></pre></td></tr></table></figure><h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote [shortname]</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8">Git - 远程仓库的使用</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 忽略文件权限修改</title>
      <link href="/2017/05/17/git-config-filemode-false/"/>
      <url>/2017/05/17/git-config-filemode-false/</url>
      
        <content type="html"><![CDATA[<p>Git 默认会记录文件权限的修改，可关闭。设置方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.filemode <span class="literal">false</span></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你是我的骄傲</title>
      <link href="/2017/05/14/i-am-proud-of-you/"/>
      <url>/2017/05/14/i-am-proud-of-you/</url>
      
        <content type="html"><![CDATA[<p>周末看了《摔跤吧，爸爸》，也是第一次独自电影院看电影，试写一篇影评纪念下。</p><p>注意：<strong>严重剧透预警。</strong></p><p>主角爸爸是印度全国摔跤冠军，一心想着为国家赢取一枚金牌。可自己没能实现梦想，把梦想转移给了自己还未出世的孩子。可事与愿违，想要男孩的主角爸爸的前三个孩子都是女孩，第四个还是女孩。主角爸爸近乎要放弃为国争取金牌的梦想时，却意外看的了大女儿、二女儿身上的摔跤天赋。</p><span id="more"></span><p>主角妈妈在得知主角爸爸准备将女儿们训练为拳击手时，道出了 “你不能将你的梦想施加在女儿们身上”，主角爸爸沉思片刻 “给我一年时间，其间你不要插手，如果没成功，我将有永远放弃我的梦想”。在主角爸爸说出这句话之前，我是反对父母将自己的梦想让孩子去实现的，也更没有去争取过孩子们的想法，现实中这样做的父母我是常为 Loser. 但是主角爸爸的回答让我看到的不是一个：被自己个人梦想冲昏头，用孩子的全部去成就自己的父亲。主角爸爸是讲道理的，一年后如果失败也会甘愿放弃。坚持与固执的区别也许就在此。</p><p>主角爸爸变身为女儿们的魔鬼摔跤教练，每天除了上学就是训练，跑步时衣服不合适换男生衣服，找侄子当陪练，没有力量加餐牛奶、鸡肉，长头发难清理剪成了寸头。受苦中的女儿们找妈妈求情，主角妈妈遵守承诺，不干预主角爸爸的训练。这里真的要给主角妈妈点赞，后面女儿们的成功，女儿们、主角爸爸的努力在明面放着，而主角妈妈的守诺不干预，对主角爸爸的信赖，是同样的伟大。不然那柔弱的耳边风不知乱了多少坚定的意志。</p><p>训练太辛苦的女儿们采用消极怠工对抗主角爸爸。破坏闹钟、破坏场地、假摔示弱。而旷工一天参加好友的婚礼现场被主角爸爸收拾。在与好友诉苦时，才发现了：对比其他女孩一望到底的家庭妇女人生，主角爸爸的狠心是那样让人羡慕。</p><p>观念改变的女儿们开始主动训练。大女儿首次参赛就初露锋芒，差一点将男孩对手打败。逐渐成长的大女儿愈战愈勇的直到赢得全国冠军。全国冠军都会进入国家体育学校学习，大女儿也要离开主角爸爸接受新教练的训练，备战世界大赛。从小镇走出来的大女儿，没了主角爸爸的严格管束，开始着迷于这外面多彩的世界。吃油炸食品、留起头发、逛街、电影院。假期回家的大女儿用自己新学的技巧击败了主角爸爸，更是产生自我膨胀，对主角爸爸传统技术技巧的不屑与不信任。</p><p>国际大赛上大女儿频频失利，无能教练将此归为命运。与此同时坚信主角爸爸训练方式的二儿女也获得全国冠军，进入国家队。在二儿女和主角妈妈的劝解下，一通电话化解了大女儿和主角爸爸的隔阂。主角爸爸亲自来到体育学校，为大女儿备战下次的国际大赛。</p><p>主角爸爸在仔细研究大女儿对手后，制定了针对性的战术帮助大女儿杀入决赛。无能教练为了不让主角爸爸抢了自己的功劳，在决赛开始前将主角爸爸骗入小黑屋，无法让主角爸爸指导大女儿比赛。决赛第二局大女儿没能把握赛点，让对手追平。主角爸爸继续被困，只能默默祈祷。决赛最后一局，大女儿大比分落后，最后 10 秒大女儿脑海闪现着主角爸爸的叮咛，一击 5 分绝杀翻盘，赢得世界冠军。冠军的国歌声奏起，小黑屋中的主角爸爸也被路人解救，冲入赛场的主角爸爸与大女儿四目相对，此时这已经不是大女儿或主角爸爸哪一个人的冠军，而是所有正在与命运抗战者的胜利。</p><p>主角爸爸：“你是我的骄傲”</p><hr><p>电影的专业手法和技术自己不懂，但是自己有个感觉：影片后期有大量的摔跤比赛，时不时有种看奥运赛的感觉，但是自己并没有感到乏味。电影故事情节很寻常，但是娓娓道来，很多细节小事让节奏不拖沓。故事人物有主角爸爸的理性和坚持、主角妈妈的守诺不干预、女儿们自我的成长、侄子的酱油加醋、无能教练损人为己</p><p>电影给我也留下了几个现实问题：</p><ul><li>父母的认识经验一定比子女高的多，主角爸爸在看到女儿们的摔跤天赋时，狠心训练与女儿本身的意愿如何选择？</li><li>父母逐渐变老，他们真的跟不上我们了吗？</li><li>如何辨别无能教练的瞎指挥？</li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> reading-notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vagrant 入门使用</title>
      <link href="/2017/04/24/vagrant-getting-started-tutorial/"/>
      <url>/2017/04/24/vagrant-getting-started-tutorial/</url>
      
        <content type="html"><![CDATA[<p>2020-04-28 更新：不确定此文章内容是否已失效。</p><p><strong>2018-04-12 更新：</strong> 开发环境或是生产环境推荐 Docker。</p><ul><li><a href="/2019/05/20/my-macbook/">My MacBook</a></li><li><a href="https://github.com/imzyf/phpdock">PHPDock | imzyf</a></li></ul><span id="more"></span><hr><p>Vagrant 入门教程。Vagrant 安装、配置管理、打包分发</p><h2 id="Vagrant-介绍"><a href="#Vagrant-介绍" class="headerlink" title="Vagrant 介绍"></a>Vagrant 介绍</h2><p>Vagrant 可以为你提供可配置、可再生、便携的工作环境，它主要是一个中间层技术，它的下层是 VirtualBox，VMware，AWS 或者其他 provider，它的上层是 provisioning 工具，比如 shell scripts，Chef or Puppet 等可以自动化安装和配置软件的工具。</p><p>简单说：Vagrant 是虚拟机管理工具。</p><p>对于开发人员来说，Vagrant 可以帮你统一团队成员的开发环境。如果你或者你的伙伴创建了一个 Vagrantfile，那么你只需要执行 vagrant up 就行了，所有的软件都会统一安装并且配置好。同时还避免令人烦躁的 “在我的机器上是可以的” 问题。</p><p>实践环境：</p><ul><li>IBM X200 laptops</li><li>Ubuntu 16.04</li></ul><h2 id="Vagrant-文档"><a href="#Vagrant-文档" class="headerlink" title="Vagrant 文档"></a>Vagrant 文档</h2><ul><li><a href="https://www.vagrantup.com/docs/index.html">Vagrant Documentation</a></li></ul><h2 id="安装-Virtual-Box-和-Vagrant"><a href="#安装-Virtual-Box-和-Vagrant" class="headerlink" title="安装 Virtual Box 和 Vagrant"></a>安装 Virtual Box 和 Vagrant</h2><ul><li>下载 <a href="https://www.virtualbox.org/wiki/Downloads">链接</a> 并安装 Virtual Box</li><li>下载 <a href="https://www.vagrantup.com/downloads.html">链接</a> 并安装 Vagrant</li></ul><h2 id="Enable-Virtualization-Technolog"><a href="#Enable-Virtualization-Technolog" class="headerlink" title="Enable Virtualization Technolog"></a>Enable Virtualization Technolog</h2><p>在刚启动电脑时，按 F1 进入 BIOS，Config-&gt;CPU-&gt;Intel Virtualization Technology 中 <code>Intel VT-d Feature</code> 改成 <code>Enabled</code>，保存退出。</p><p><strong>注意：</strong> 这里有一个坑，修改后需要 <strong>关机再启动</strong>，直接重启电脑，配置不生效。</p><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><h3 id="下载-Ubuntu-box"><a href="#下载-Ubuntu-box" class="headerlink" title="下载 Ubuntu box"></a>下载 Ubuntu box</h3><p>在 <a href="https://atlas.hashicorp.com/boxes/search?utf8=%E2%9C%93&sort=&provider=&q=ubuntu">Discover Vagrant Boxes</a> 查找 Ubuntu Server 14.04 64 box 安装命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant init ubuntu/trusty64; vagrant up --provider virtualbox</span><br></pre></td></tr></table></figure><p>下载速度缓慢，可以在命令行中看到 box 链接，建议直接在游览器中下载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://atlas.hashicorp.com/ubuntu/boxes/trusty64/versions/20170405.0.0/providers/virtualbox.box</span><br></pre></td></tr></table></figure><h3 id="添加镜像"><a href="#添加镜像" class="headerlink" title="添加镜像"></a>添加镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant box add ubuntu1404 ubuntu1404.box</span><br></pre></td></tr></table></figure><h3 id="初始化虚拟机配置"><a href="#初始化虚拟机配置" class="headerlink" title="初始化虚拟机配置"></a>初始化虚拟机配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant init ubuntu1404</span><br></pre></td></tr></table></figure><p>可以在 Vagrantfile 中增加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |vb|</span><br><span class="line">  vb.memory = <span class="string">&quot;1024&quot;</span></span><br><span class="line">  vb.cpus = 2</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p>没有的话则新建。这里也可在 VM VirtualBox 中可以看到新的虚拟机。</p><h2 id="配置虚拟机环境"><a href="#配置虚拟机环境" class="headerlink" title="配置虚拟机环境"></a>配置虚拟机环境</h2><h3 id="SSH-登陆虚拟机"><a href="#SSH-登陆虚拟机" class="headerlink" title="SSH 登陆虚拟机"></a>SSH 登陆虚拟机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><h3 id="替换国内源"><a href="#替换国内源" class="headerlink" title="替换国内源"></a>替换国内源</h3><p>备份旧源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>修改使用 aliyun 源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a>LNMP</h3><h4 id="Ngnix"><a href="#Ngnix" class="headerlink" title="Ngnix"></a>Ngnix</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># search</span></span><br><span class="line">apt-cache search nginx</span><br><span class="line"><span class="comment"># install</span></span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"><span class="comment"># show version</span></span><br><span class="line">nginx -v</span><br><span class="line"><span class="comment">#nginx version: nginx/1.4.6 (Ubuntu)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test nginx</span></span><br><span class="line">curl -I <span class="string">&#x27;http://127.0.0.1&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server-5.6</span><br></pre></td></tr></table></figure><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php5-cli</span><br><span class="line">php -v</span><br><span class="line"><span class="comment">#PHP 5.5.9-1ubuntu4.21 (cli)</span></span><br><span class="line"><span class="comment"># install extend</span></span><br><span class="line">sudo apt-get install php5-mcrypt php5-mysql php5-gd</span><br><span class="line"><span class="comment"># install support nginx fastcgi</span></span><br><span class="line">sudo apt-get install php5-cgi php5-fpm -y</span><br></pre></td></tr></table></figure><h2 id="Vagrant-高级"><a href="#Vagrant-高级" class="headerlink" title="Vagrant 高级"></a>Vagrant 高级</h2><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><h4 id="使用-VirtualBox-设置"><a href="#使用-VirtualBox-设置" class="headerlink" title="使用 VirtualBox 设置"></a>使用 VirtualBox 设置</h4><p>首先挂起虚拟机：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant <span class="built_in">suspend</span></span><br></pre></td></tr></table></figure><p>在 VirtualBox 选择 Settings-&gt;Network-&gt;Advenced-&gt;Port Forwarding-&gt;adds</p><ul><li><code>Host IP</code> 宿主机端口</li><li><code>Guest Port</code> 虚拟机端口</li></ul><p>重启后失效，因为 Vagrant 会去读自己的配置文件</p><h4 id="使用-Vagrant-配置"><a href="#使用-Vagrant-配置" class="headerlink" title="使用 Vagrant 配置"></a>使用 Vagrant 配置</h4><blockquote><p><a href="https://www.vagrantup.com/docs/networking/forwarded_ports.html">Forwarded Ports - Networking</a></p></blockquote><p>This will allow accessing port 80 on the guest via port 8080 on the host.</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, <span class="symbol">guest:</span> <span class="number">80</span>, <span class="symbol">host:</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure><p>重启虚拟机。</p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="Private-Networks"><a href="#Private-Networks" class="headerlink" title="Private Networks"></a>Private Networks</h4><blockquote><p><a href="https://www.vagrantup.com/docs/networking/private_network.html">Private Networks - Networking</a></p></blockquote><p>Static IP</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  config.vm.network <span class="string">&quot;private_network&quot;</span>, <span class="symbol">ip:</span> <span class="string">&quot;192.168.50.4&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Host 访问 Guest machine 将不需要端口转发</p><h4 id="Public-Networks"><a href="#Public-Networks" class="headerlink" title="Public Networks"></a>Public Networks</h4><blockquote><p><a href="https://www.vagrantup.com/docs/networking/public_network.html">Public Networks - Networking</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.network <span class="string">&quot;public_network&quot;</span>, ip: <span class="string">&quot;192.168.0.17&quot;</span></span><br></pre></td></tr></table></figure><p>要和 Host machine 在同一网段，同一路由下的计算机也可访问</p><h3 id="Synced-Folders-共享目录"><a href="#Synced-Folders-共享目录" class="headerlink" title="Synced Folders 共享目录"></a>Synced Folders 共享目录</h3><blockquote><p><a href="https://www.vagrantup.com/docs/synced-folders/basic_usage.html">Basic Usage - Synced Folders</a></p></blockquote><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  <span class="comment"># other config here</span></span><br><span class="line"></span><br><span class="line">  config.vm.synced_folder <span class="string">&quot;src/&quot;</span>, <span class="string">&quot;/srv/website&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Enabling NFS Synced Folders, To enable NFS, just add the <code>type: &quot;nfs&quot;</code> flag onto your synced folder:</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  config.vm.synced_folder <span class="string">&quot;.&quot;</span>, <span class="string">&quot;/vagrant&quot;</span>, <span class="symbol">type:</span> <span class="string">&quot;nfs&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>使用 NFS 需要配置 private network，如果遇到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">It appears your machine doesn<span class="string">&#x27;t support NFS, or there is not an</span></span><br><span class="line"><span class="string">adapter to enable NFS on this machine for Vagrant. Please verify</span></span><br><span class="line"><span class="string">that `nfsd` is installed on your machine, and try again.</span></span><br><span class="line"><span class="string">It appears your machine doesn&#x27;</span>t support NFS</span><br></pre></td></tr></table></figure><p>try to：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-common nfs-kernel-server</span><br></pre></td></tr></table></figure><p>Caveats：</p><blockquote><p><a href="https://www.vagrantup.com/docs/synced-folders/virtualbox.html">Synced Folders VirtualBox</a></p></blockquote><p>There is a VirtualBox bug related to sendfile which can result in corrupted or non-updating files. You should deactivate sendfile in any web servers you may be running.</p><p>In Nginx:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sendfile off;</span><br></pre></td></tr></table></figure><h3 id="Provider-VirtualBox-Configuration"><a href="#Provider-VirtualBox-Configuration" class="headerlink" title="Provider VirtualBox Configuration"></a>Provider VirtualBox Configuration</h3><blockquote><p><a href="https://www.vagrantup.com/docs/virtualbox/configuration.html">Provider VirtualBox Configuration</a></p></blockquote><h4 id="Virtual-Machine-Name"><a href="#Virtual-Machine-Name" class="headerlink" title="Virtual Machine Name"></a>Virtual Machine Name</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |vb|</span><br><span class="line">   vb.name = <span class="string">&quot;my_vm&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="VBoxManage-Customizations"><a href="#VBoxManage-Customizations" class="headerlink" title="VBoxManage Customizations"></a>VBoxManage Customizations</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |vb|</span><br><span class="line">  vb.memory = 1024</span><br><span class="line">  vb.cpus = 2</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="Virtual-hostname"><a href="#Virtual-hostname" class="headerlink" title="Virtual hostname"></a>Virtual hostname</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config.vm.hostname = &quot;mooc&quot;</span><br></pre></td></tr></table></figure><h3 id="Overwrite-host-locale-in-ssh-session"><a href="#Overwrite-host-locale-in-ssh-session" class="headerlink" title="Overwrite host locale in ssh session"></a>Overwrite host locale in ssh session</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">ENV</span>[<span class="string">&quot;LC_ALL&quot;</span>] = <span class="string">&quot;en_US.UTF-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="string">&quot;2&quot;</span>) <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Vagrant-打包分发"><a href="#Vagrant-打包分发" class="headerlink" title="Vagrant 打包分发"></a>Vagrant 打包分发</h2><p>关闭虚拟机：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant halt</span><br></pre></td></tr></table></figure><p>打包时注意：Vagrantfile 中固定的 IP，可以先注释；打包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant package --output mooc.box</span><br></pre></td></tr></table></figure><p>启动 box：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant box add mooc mooc.box</span><br><span class="line">vagrant init mooc</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><h3 id="通过-Vagrantfile-升级"><a href="#通过-Vagrantfile-升级" class="headerlink" title="通过 Vagrantfile 升级"></a>通过 Vagrantfile 升级</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config.vm.provision <span class="string">&quot;shell&quot;</span>, inline: &lt;&lt;-<span class="string">SHELL</span></span><br><span class="line"><span class="string">   apt-get update</span></span><br><span class="line"><span class="string">   apt-get install -y redis-server</span></span><br><span class="line"><span class="string">SHELL</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/apanly/mooc/tree/master/vagrant">mooc&#x2F;vagrant at master · apanly&#x2F;mooc</a></li><li><a href="http://www.imooc.com/learn/805">vagrant 打造跨平台可移动的开发环境</a></li><li><a href="http://weizhifeng.net/learn-vagrant-01.html">Vagrant 介绍</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>区分 NGINX 中 fastcgi_params fastcgi fastcgi-php</title>
      <link href="/2017/04/22/nginx-fastcgi-params-fastcgi-fastcgi-php/"/>
      <url>/2017/04/22/nginx-fastcgi-params-fastcgi-fastcgi-php/</url>
      
        <content type="html"><![CDATA[<p>Nginx 有两份 fastcgi 配置文件，分别是 <code>fastcgi_params</code> 和 <code>fastcgi.conf</code>，其区别只有一点点。到目前为止，由于 package managers，他们仍然引起新用户的混淆。</p><p>在自己系统中还有份 <code>snippets/fastcgi-php.conf</code>，这个又是啥？</p><h2 id="fastcgi-params-vs-fastcgi-conf"><a href="#fastcgi-params-vs-fastcgi-conf" class="headerlink" title="fastcgi_params vs fastcgi.conf"></a>fastcgi_params vs fastcgi.conf</h2><p>它们没有太大的差异，唯一的区别是 <code>fastcgi.conf</code> 比 <code>fastcgi_params</code> 多了一行 <code>SCRIPT_FILENAME</code> 的定义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br></pre></td></tr></table></figure><p>注意：<code>$document_root</code> 和 <code>$fastcgi_script_name</code> 之间没有 <code>/</code>。</p><p>原本 Nginx 只有 <code>fastcgi_params</code>，后来发现很多人在定义 <code>SCRIPT_FILENAME</code> 时使用了硬编码的方式，于是为了规范用法便引入了 <code>fastcgi.conf</code></p><p>不过这样的话就产生一个疑问：为什么一定要引入一个新的配置文件，而不是修改旧的配置文件？</p><p>这是因为<code>fastcgi_param</code> 指令是数组型的，和普通指令相同的是：内层替换外层；和普通指令不同的是：当在同级多次使用的时候，是新增而不是替换。</p><p>换句话说，如果在同级定义两次 <code>SCRIPT_FILENAME</code>，那么它们都会被发送到后端，这可能会导致一些潜在的问题，为了避免此类情况，便引入了一个新的配置文件。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name foo.com;</span><br><span class="line"></span><br><span class="line">    root /path;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri =404;</span><br><span class="line"></span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="snippets-x2F-fastcgi-php-conf"><a href="#snippets-x2F-fastcgi-php-conf" class="headerlink" title="snippets&#x2F;fastcgi-php.conf"></a>snippets&#x2F;fastcgi-php.conf</h2><p><code>/etc/nginx/snippets</code>: This directory contains configuration fragments that can be included elsewhere in the Nginx configuration. Potentially repeatable configuration segments are good candidates for refactoring into snippets.</p><p><code>fastcgi-php.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># regex to split $uri to $fastcgi_script_name and $fastcgi_path</span><br><span class="line">fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line"></span><br><span class="line"># Check that the PHP script exists before passing it</span><br><span class="line">try_files $fastcgi_script_name =404;</span><br><span class="line"></span><br><span class="line"># Bypass the fact that try_files resets $fastcgi_path_info</span><br><span class="line"># see: http://trac.nginx.org/nginx/ticket/321</span><br><span class="line">set $path_info $fastcgi_path_info;</span><br><span class="line">fastcgi_param PATH_INFO $path_info;</span><br><span class="line"></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">include fastcgi.conf;</span><br></pre></td></tr></table></figure><p>从 <code>fastcgi-php.conf</code> 的内容可以看出，它帮我们封装了一些公共代码</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  ...</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include snippets/fastcgi-php.conf;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="让我把话说完"><a href="#让我把话说完" class="headerlink" title="让我把话说完"></a>让我把话说完</h2><h3 id="PHP-Nginx-Unix-sock-切换-TCP-x2F-IP"><a href="#PHP-Nginx-Unix-sock-切换-TCP-x2F-IP" class="headerlink" title="PHP Nginx Unix sock 切换 TCP&#x2F;IP"></a>PHP Nginx Unix sock 切换 TCP&#x2F;IP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/php5/fpm/pool.d/www.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 取消注释</span><br><span class="line">listen.backlog = 65536</span><br><span class="line"># 查找</span><br><span class="line">listen = /var/run/php5-fpm.sock</span><br><span class="line"># 修改为</span><br><span class="line">listen = 127.0.0.1:9000</span><br></pre></td></tr></table></figure><p>and then, edit Nginx configuration file</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line"># 修改为</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service php5-fpm restart</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://huoding.com/2013/10/23/290">如何正确配置 Nginx+PHP | 火丁笔记</a></li><li><a href="http://blog.martinfjordvald.com/2013/04/nginx-config-history-fastcgi_params-versus-fastcgi-conf/">fastcgi_params Versus fastcgi.conf - Nginx Config History</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04">How To Install Nginx on Ubuntu 16.04 | DigitalOcean</a></li><li><a href="https://github.com/EasyEngine/nginx-build/blob/master/nginx/debian/conf/snippets/fastcgi-php.conf">nginx-build&#x2F;fastcgi-php.conf at master · EasyEngine&#x2F;nginx-build</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区分 CGI FastCGI PHP-CGI PHP-FPM</title>
      <link href="/2017/04/21/cgi-fastcgi-phpcgi-php-fpm/"/>
      <url>/2017/04/21/cgi-fastcgi-phpcgi-php-fpm/</url>
      
        <content type="html"><![CDATA[<p>CGI FastCGI PHP-CGI PHP-FPM 一直区分不清，Google 后总结下</p><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>CGI: Common Gateway Interface. HTTP 服务器与你的或其它机器上的程序进行“交谈”的一种协议，其程序须运行在网络服务器上。</p><p>web server（比如说 Nginx）只是内容的分发者。</p><ul><li>如果请求 &#x2F;index.html，那么 web server 会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</li><li>如果现在请求的是 &#x2F;index.php，根据配置文件，nginx 知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理后交给 PHP 解析器。Nginx 会传哪些数据给 PHP 解析器呢？url、查询字符串、POST 数据、HTTP header 等等，CGI 就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。</li></ul><span id="more"></span><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><p>FastCGI 是 CGI 的升级版，一种语言无关的协议，用来沟通程序（如 PHP Python Java）和 Web 服务器（Apache2 Nginx），理论上任何语言编写的程序都可以通过 FastCGI 来提供 Web 服务。</p><p>FastCGI 的特点是会在一个进程中依次完成多个请求，以达到提高效率的目的，多数 FastCGI 实现都会维护一个进程池。</p><p>那么 CGI 程序的性能问题在哪呢？“PHP 解析器会解析 php.ini 文件，初始化执行环境”，就是这里了。标准的 CGI 对每个请求都会执行这些步骤，所以处理每个请求的时间会比较长。</p><p>那么 FastCGI 是怎么做的呢？首先，FastCGI 会先启一个 master，解析配置文件，初始化执行环境，然后再启动多个 worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当 worker 不够用时，master 可以根据配置预先启动几个 worker 等着；当然空闲 worker 太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是 FastCGI 对进程的管理。</p><h2 id="PHP-CGI"><a href="#PHP-CGI" class="headerlink" title="PHP-CGI"></a>PHP-CGI</h2><p>PHP-CGI 只是个 CGI 程序，他自己本身只能解析请求，返回结果，不会进程管理。</p><p>PHP-CGI 的不足：PHP-CGI 变更 php.ini 配置后需重启 PHP-CGI 才能让新的 php-ini 生效，不可以平滑重启。直接杀死 PHP-CGI 进程，PHP 就不能运行了。（PHP-FPM 和 Spawn-FCGI 就没有这个问题，守护进程会平滑从新生成新的子进程。）</p><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p>PHP 的解释器是 php-cgi，它只是个 CGI 程序，只能解析请求，返回结果，不会进程管理。所以就出现了一些能够调度 PHP-CGI 进程的程序。</p><p>PHP-FPM 是 PHP 针对 FastCGI 协议的具体实现，也是 PHP 在多种服务器端应用编程端口（SAPI：cgi、fast-cgi、cli、isapi、apache）里使用最普遍、性能最佳的一款进程管理器。</p><p>PHP 5.3.3 已经集成 PHP-FPM 了，不再是第三方的包了。PHP-FPM 提供了更好的 PHP 进程管理方式，可以有效控制内存和进程、可以平滑重载 PHP 配置，被 PHP 官方收录了。</p><h2 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h2><p>你（PHP）去和爱斯基摩人（web 服务器，如 Apache、Nginx）谈生意。你说中文（PHP 代码），他说爱斯基摩语（C 代码），互相听不懂，怎么办？那就都把各自说的话转换成英语（FastCGI 协议）吧。</p><p>怎么转换呢？你就要使用一个翻译机（PHP-FPM）（当然对方也有一个翻译机，那个是他自带的）</p><p>我们这个翻译机是最新型的，老式的那个（PHP-CGI）被淘汰了。</p><h2 id="让我把话说完"><a href="#让我把话说完" class="headerlink" title="让我把话说完"></a>让我把话说完</h2><p>FastCGI 是 Nginx 和 PHP 之间的一个通信接口，该接口实际处理过程通过启动 PHP-FPM 进程来解析 PHP 脚本，即 PHP-FPM 相当于一个动态应用服务器，从而实现 Nginx 动态解析 PHP。</p><p>因此，如果 Nginx 服务器需要支持 PHP 解析，需要在 nginx.conf 中增加 PHP 的配置：将 PHP 脚本转发到 FastCGI 进程监听的 IP 地址和端口（php-fpm.conf 中指定）。</p><p>同时，PHP 安装的时候，需要开启支持 FastCGI 选项，并且编译安装 PHP-FPM 补丁&#x2F;扩展，同时，需要启动 PHP-FPM 进程，才可以解析 Nginx 通过 FastCGI 转发过来的 PHP 脚本</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://segmentfault.com/q/1010000000256516">搞不清 FastCgi 与 PHP-fpm 之间是个什么样的关系</a></li><li><a href="http://www.mike.org.cn/articles/what-is-cgi-fastcgi-php-fpm-spawn-fcgi/">什么是 CGI、FastCGI、PHP-CGI、PHP-FPM、Spawn-FCGI？</a></li><li><a href="http://blog.sina.com.cn/s/blog_6df9fbe30102v57y.html">nginx、fastCGI、php-fpm 关系梳理 842864681 新浪博客</a></li><li><a href="http://www.nowamagic.net/librarys/veda/detail/1319">概念了解：CGI，FastCGI，PHP-CGI 与 PHP-FPM</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 5.6 5.7 组内排序的区别</title>
      <link href="/2017/04/20/mysql-group-by-and-order-by-difference-between-56-57/"/>
      <url>/2017/04/20/mysql-group-by-and-order-by-difference-between-56-57/</url>
      
        <content type="html"><![CDATA[<p>MySQL 5.7 对比 5.6 有很多的变化。一个常见的需求：按条件分组后，取出每组中某字段最大值的那条记录。其实就是组内排序的问题，我的做法是：子查询先进行倒序排序，外层查询分组。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">+----+----+-------+</span><br><span class="line">| id | no | name |</span><br><span class="line">+----+----+-------+</span><br><span class="line">| 5 | 5 | Mike |</span><br><span class="line">| 4 | 4 | Herry |</span><br><span class="line">| 3 | 3 | wyett |</span><br><span class="line">| 2 | 2 | John |</span><br><span class="line">| 7 | 2 | John |</span><br><span class="line">| 1 | 1 | Mike |</span><br><span class="line">| 6 | 1 | John |</span><br><span class="line">| 8 | 1 | Mike |</span><br><span class="line">| 9 | 1 | Mike |</span><br><span class="line">+----+----+-------+</span><br></pre></td></tr></table></figure><p>要求：取出每人（按 name），最大 no 的记录。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> id,<span class="keyword">no</span>,name <span class="keyword">from</span> testorder <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">no</span> <span class="keyword">desc</span></span><br><span class="line">)a <span class="keyword">group</span> <span class="keyword">by</span> a.name;</span><br></pre></td></tr></table></figure><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">+----+----+-------+</span><br><span class="line">| id | no | name |</span><br><span class="line">+----+----+-------+</span><br><span class="line">| 4 | 4 | Herry |</span><br><span class="line">| 2 | 2 | John |</span><br><span class="line">| 5 | 5 | Mike |</span><br><span class="line">| 3 | 3 | wyett |</span><br><span class="line">+----+----+-------+</span><br></pre></td></tr></table></figure><p>但是在 5.7 中，首先需要关闭 <code>ql_mode = ONLY_FULL_GROUP_BY</code>；相同的 <code>name</code> 值，返回则是取了 <strong>最早写入的数据行</strong> ，<strong>忽略了 <code>order by no desc</code>，按照数据的逻辑存储顺序来返回</strong></p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">+----+----+-------+</span><br><span class="line">| id | no | name |</span><br><span class="line">+----+----+-------+</span><br><span class="line">| 4 | 4 | Herry |</span><br><span class="line">| 2 | 2 | John |</span><br><span class="line">| 1 | 1 | Mike |</span><br><span class="line">| 3 | 3 | wyett |</span><br><span class="line">+----+----+-------+</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,<span class="keyword">no</span>,name <span class="keyword">from</span> testorder <span class="keyword">group</span> <span class="keyword">by</span> name</span><br></pre></td></tr></table></figure><span id="more"></span><p>A query such as</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2 <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> field1, field2 <span class="keyword">FROM</span> table1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> field2 ) alias</span><br></pre></td></tr></table></figure><p>returns a result set that is not necessarily ordered by field2. This is not a bug.<br>A “table” (and subquery in the FROM clause too) is - according to the SQL standard - an unordered set of rows.<br>Rows in a table (or in a subquery in the FROM clause) do not come in any specific order.</p><p>可以总结为：</p><ul><li>在 FROM 后的 subquery 中的 ORDER BY 会被忽略</li><li>GROUP BY cloumn 返回的行是无序的</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.id,a.no,a.name</span><br><span class="line">    <span class="keyword">from</span> testorder a <span class="keyword">inner</span> <span class="keyword">join</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">max</span>(<span class="keyword">no</span>) <span class="keyword">no</span>,name <span class="keyword">from</span> testorder <span class="keyword">group</span> <span class="keyword">by</span> name</span><br><span class="line">    ) b <span class="keyword">on</span> a.no <span class="operator">=</span> b.no <span class="keyword">and</span> a.name <span class="operator">=</span> b.name</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> name,<span class="keyword">no</span></span><br></pre></td></tr></table></figure><p>其他方案：</p><ol><li>对于不符合 ONLY_FULL_GROUP_BY 限制的字段，添加 unique 索引。</li><li>使用 ANY_VALUE()，让 MySQL 跳过 ONLY_FULL_GROUP_BY 检测。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p><a href="https://dev.mysql.com/doc/refman/5.6/en/group-by-handling.html">MySQL 5.6 Handling of GROUP BY</a></p></blockquote><p>In standard SQL, a query that includes a GROUP BY clause cannot refer to nonaggregated columns in the select list that are not named in the GROUP BY clause.</p><p>在标准 SQL 中，包含 GROUP BY 子句的查询 <strong>不能引用</strong> select 列表中未在 GROUP BY 子句中命名的列。</p><p>MySQL extends the standard SQL use of GROUP BY so that the select list can refer to nonaggregated columns not named in the GROUP BY clause. This means that the preceding query is legal in MySQL.</p><p>MySQL 扩展了 GROUP BY 的标准 SQL 使用，以便选择列表可以引用 GROUP BY 子句中未命名的非集合列。这意味着前面的查询在 MySQL 中是合法的。</p><p>However, this is useful primarily when all values in each nonaggregated column not named in the GROUP BY are the same for each group. The server is free to choose any value from each group, so unless they are the same, the values chosen are indeterminate.</p><p>但是，主要是在 GROUP BY 中 <strong>未命名的每个非分组列中的所有值对于每个组是相同的</strong>，这是有用的。服务器可以自由选择每个组中的任何值，因此除非它们相同，所选择的值是 <strong>不确定的</strong>。</p><p>Furthermore, the selection of values from each group cannot be influenced by adding an ORDER BY clause. Result set sorting occurs after values have been chosen, and ORDER BY does not affect which values within each group the server chooses.</p><p>此外，通过添加 ORDER BY 子句不会影响来自每个组的值的选择。结果集排序发生在选择值后，ORDER BY <strong>不影响</strong> 服务选择的每个组中的哪些值。</p><blockquote><p><a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html">MySQL 5.7 Handling of GROUP BY</a></p></blockquote><p>MySQL 5.7.5 and up implements detection of functional dependence. If the ONLY_FULL_GROUP_BY SQL mode is enabled (which it is by default), MySQL rejects queries for which the select list, HAVING condition, or ORDER BY list refer to nonaggregated columns that are neither named in the GROUP BY clause nor are functionally dependent on them. (Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default.)</p><p>MySQL 5.7.5 及以上功能依赖检测功能。如果启用了 ONLY_FULL_GROUP_BY SQL 模式（默认情况下），MySQL 将拒绝对列表，HAVING 条件或 ORDER BY 列表的查询引用在 GROUP BY 子句中既未命名的非集合列，也不在功能上依赖于它们。（5.7.5 之前，MySQL 没有检测到功能依赖关系，默认情况下不启用 ONLY_FULL_GROUP_BY）</p><p>You can achieve the same effect without disabling ONLY_FULL_GROUP_BY by using ANY_VALUE() to refer to the nonaggregated column.</p><p>你可以通过使用 <code>ANY_VALUE()</code> 使禁用了 ONLY_FULL_GROUP_BY 的 SQL，来实现相同的效果来引用非聚合列。</p><h2 id="5-6-与-5-7-的区别"><a href="#5-6-与-5-7-的区别" class="headerlink" title="5.6 与 5.7 的区别"></a>5.6 与 5.7 的区别</h2><p>5.6 升级到 5.7 版本要注意：</p><ol><li>sql_mode 默认值的改变。</li><li>optimizer_switch 值的改变。</li><li>备库升级影响主备复制。</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@SQL</span>_MODE, @<span class="variable">@GLOBAL</span>.SQL_MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.6</span></span><br><span class="line"><span class="comment">-- NO_ENGINE_SUBSTITUTION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.7</span></span><br><span class="line"><span class="comment">-- ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure><ul><li><code>ONLY_FULL_GROUP_BY</code> SELECT 查询的字段必须是 GROUP BY 中出现的或者使用聚合函数的或者是具有唯一索引的。</li><li><code>STRICT_TRANS_TABLES</code> 在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做任何限制。</li><li><code>NO_ZERO_IN_DATE</code> 在严格模式，不接受月或日部分为 0 的日期。如果使用 IGNORE 选项，我们为类似的日期插入’0000-00-00’。在非严格模式，可以接受该日期，但会生成警告。</li><li><code>NO_ZERO_DATE</code> 在严格模式，不要将 ‘0000-00-00’做为合法日期。你仍然可以用 IGNORE 选项插入零日期。在非严格模式，可以接受该日期，但会生成警告。</li><li><code>ERROR_FOR_DIVISION_BY_ZERO</code> 在严格模式，在 INSERT 或 UPDATE 过程中，如果被零除(或 MOD(X，0))，则产生错误(否则为警告)。如果未给出该模式，被零除时 MySQL 返回 NULL。如果用到 INSERT IGNORE 或 UPDATE IGNORE 中，MySQL 生成被零除警告，但操作结果为 NULL。</li><li><code>NO_AUTO_CREATE_USER</code> 防止 GRANT 自动创建新用户，除非还指定了密码。</li><li><code>NO_ENGINE_SUBSTITUTION</code> 如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常。</li></ul><h3 id="STRICT-TRANS-TABLES-和-STRICT-ALL-TABLES-的区别"><a href="#STRICT-TRANS-TABLES-和-STRICT-ALL-TABLES-的区别" class="headerlink" title="STRICT_TRANS_TABLES 和 STRICT_ALL_TABLES 的区别"></a>STRICT_TRANS_TABLES 和 STRICT_ALL_TABLES 的区别</h3><p>唯一的区别是：对于不支持事务的表，若开启 STRICT_TRANS_TABLES，MySQL 会尝试将一个不合法的字段值转换成一个值最近的合法值插入表中；而开启 STRICT_ALL_TABLES 后，则表现为不写入数据，且抛出错误。</p><p>因为现在绝大部分用的 InnoDB 引擎，是支持事务的，所以基本不用关心这种区别。</p><h3 id="严格模式和非严格模式的区别"><a href="#严格模式和非严格模式的区别" class="headerlink" title="严格模式和非严格模式的区别"></a>严格模式和非严格模式的区别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;STRICT_TRANS_TABLES&#x27;</span>;</span><br></pre></td></tr></table></figure><p>严格模式下不能在无符号整数字段插入负值。</p><ul><li>非严格模式下，会存储为 0。</li><li>严格模式下，报错。</li></ul><p>严格模式下，无默认值的 NOT NULL 字段在插入数据时必须指定值。</p><ul><li>非严格模式下，若不插入数据会存储字段类型的默认值。</li><li>严格模式下，报错。</li></ul><p>严格模式下，插入字符串不能超出定义长度</p><ul><li>非严格模式下，会成功插入数据，但是内容被截断。</li><li>严格模式下，报错。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://mysqlwyett.com/blog/2017/01/17/max_values_in_group_by/">MySQL 组内排序取最大值 | mysqlwyett</a></li><li><a href="http://stackoverflow.com/questions/1066453/mysql-group-by-and-order-by">sql - MySQL Group By and Order By; - Stack Overflow</a></li><li><a href="https://zhuanlan.zhihu.com/p/50278304">MySQL5.7 中的 sql_mode 默认值 | zhihu</a></li><li><a href="https://www.letianbiji.com/mysql/mysql-strict-mode.html">MySQL: 严格模式 | letianbiji</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Git 中文文件名乱码</title>
      <link href="/2017/04/12/solving-git-chinese-in-file-name/"/>
      <url>/2017/04/12/solving-git-chinese-in-file-name/</url>
      
        <content type="html"><![CDATA[<p>在使用 <code>git status</code> 时，中文文件名出现乱码。解决方法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>core.quotepath</code> 设为 <code>false</code> 的话，就不会对 <code>0x80</code> 以上的字符进行 quote，中文显示正常。</p><span id="more"></span><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://xstarcd.github.io/wiki/shell/git_chinese.html">Git 中文显示问题解决</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 管理用户与访问授权</title>
      <link href="/2017/04/11/mysql-manage-user-and-grant/"/>
      <url>/2017/04/11/mysql-manage-user-and-grant/</url>
      
        <content type="html"><![CDATA[<p>MySQL 创建用户、修改密码、删除用户；查看、授予、撤销用户权限；对 MySQL 远程访问的新理解。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON _._ TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;pwd123&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><code>username</code>：创建的用户名</li><li><code>host</code>：该用户在哪个主机上可以登陆。如果是本地用户可用 <code>localhost</code>；如果想让该用户可以从任意远程主机登陆，可以使用通配符 <code>%</code></li><li><code>password</code>：该用户的登陆密码。密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li></ul><p>例子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;dog&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">CREATE USER <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;192.168.1.%&#x27;</span> IDENDIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">CREATE USER <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">CREATE USER <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">CREATE USER <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> = PASSWORD(<span class="string">&#x27;newpassword&#x27;</span>);</span><br><span class="line"></span><br><span class="line">SET PASSWORD FOR <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span> = PASSWORD(<span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果修改当前登陆用户密码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&quot;newpassword&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP USER <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="访问授权"><a href="#访问授权" class="headerlink" title="访问授权"></a>访问授权</h2><h3 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="授予用户权限"><a href="#授予用户权限" class="headerlink" title="授予用户权限"></a>授予用户权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT PRIVILEGES ON databasename.tablename TO <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span></span><br><span class="line"></span><br><span class="line">GRANT SELECT, INSERT ON test.user TO <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">GRANT ALL ON *.* TO <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><code>privileges</code>：用户的操作权限，如 <code>SELECT</code> <code>INSERT</code> <code>UPDATE</code> 等，如果要授予所的权限则使用 <code>ALL</code></li><li><code>databasename</code>：数据库名</li><li><code>tablename</code>：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 <code>*</code> 表示</li></ul><p><strong>注意：</strong> 用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用 <code>WITH GRANT OPTION</code> 命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT PRIVILEGES ON databasename.tablename TO <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h3 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REVOKE PRIVILEGE ON databasename.tablename FROM <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br><span class="line"></span><br><span class="line">REVOKE SELECT ON *.* FROM <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 假如你在给用户‘pig‘@’%’授权的时候是这样的（或类似的）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT SELECT ON test.user TO <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>则在使用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REVOKE SELECT ON _._ FROM <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>命令并 <strong>不能</strong> 撤销该用户对 test 数据库中 user 表的 SELECT 操作。</p><p>相反，如果授权使用的是：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT SELECT ON _._ TO <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>则：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REVOKE SELECT ON test.user FROM <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>命令 <strong>也不能</strong> 撤销该用户对 test 数据库中 user 表的 SELECT 权限。</p><p>具体信息可以用查看命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h3><p>通过上面的配置，可以发现：开启 MySQL 远程访问，其实就是修改用户权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 只允许 192.168.1.100 连接</span><br><span class="line">GRANT ALL PRIVILEGES ON _._ TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.1.100&#x27;</span> IDENTIFIED BY <span class="string">&#x27;pwd123&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">-- 允许所有 ip 访问</span><br><span class="line">GRANT ALL PRIVILEGES ON _._ TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;pwd123&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> Ubuntu 上还需要修改 MySQL 配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>将 <code>bind-address = 127.0.0.1</code> 这一行注释掉, 即:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bind-address = 127.0.0.1</span></span><br></pre></td></tr></table></figure><p>重启 MySQL</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>查询当前用户：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CURRENT_USER();</span><br></pre></td></tr></table></figure><table><thead><tr><th>HOST</th><th>User</th><th>被条目匹配的连接</th></tr></thead><tbody><tr><td>‘thomas.loc.gov’</td><td>‘fred’</td><td>fred, 从 thomas.loc.gov 连接</td></tr><tr><td>‘thomas.loc.gov’</td><td>‘’</td><td>任何用户, 从 thomas.loc.gov 连接</td></tr><tr><td>‘%’</td><td>‘fred’</td><td>fred, 从任何主机连接</td></tr><tr><td>‘%’</td><td>‘’</td><td>任何用户, 从任何主机连接</td></tr><tr><td>‘%.loc.gov’</td><td>‘fred’</td><td>fred, 从在 loc.gov 域的任何主机连接</td></tr><tr><td>‘x.y.%’</td><td>‘fred’</td><td>fred, 从 x.y.net、x.y.com,x.y.edu 等联接（这或许无用）</td></tr><tr><td>‘144.155.166.177’</td><td>‘fred’</td><td>fred, 从有 144.155.166.177 的主机连接</td></tr><tr><td>‘144.155.166.%’</td><td>‘fred’</td><td>fred, 从 144.155.166 C 类子网的任何主机连接</td></tr></tbody></table><p>可以在 Host 字段使用 IP 通配符值（例如，<code>&#39;144.155.166.%&#39;</code> 匹配在一个子网上的每台主机），有可能某人可能企图探究这种能力，通过命名一台主机为 144.155.166.somewhere.com。为了阻止这样的企图，MySQL 不允许匹配以数字和一个点起始的主机名，这样，如果你用一个命名为类似 1.2.foo.com 的主机，它的名字决不会匹配授权表中的 Host 列。只有一个 IP 数字能匹配 IP 通配符值。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.jianshu.com/p/d7b9c468f20d">MySQL 创建用户与授权 - 简书</a></li><li><a href="http://www.iteedu.com/database/mysql/mysqlmanualcn/database-administration/connection-access.php">5.7.5. 访问控制, 阶段 1：连接核实</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 命令行下免密码执行 sudo 命令</title>
      <link href="/2017/04/10/execute-sudo-without-password-in-ubuntu-terminal/"/>
      <url>/2017/04/10/execute-sudo-without-password-in-ubuntu-terminal/</url>
      
        <content type="html"><![CDATA[<p>解决你的问题的方法是将你的用户加入 sudoers 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><p>在文件底部输入：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">username ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>这只适用于终端窗口中的 sudo 命令。例如，当你尝试在 software center 中安装软件包时，将提示你输入密码。</p><span id="more"></span><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://askubuntu.com/questions/147241/execute-sudo-without-password">command line - Execute sudo without Password? - Ask Ubuntu</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下使用 sendmail mail 发送邮件</title>
      <link href="/2017/04/06/using-sendmail-mail-in-ubuntu/"/>
      <url>/2017/04/06/using-sendmail-mail-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>使用邮件发送程序的执行情况、运行日志都非常方便，Ubuntu 下搭建邮件服务也不复杂。</p><h2 id="sendmail"><a href="#sendmail" class="headerlink" title="sendmail"></a>sendmail</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install sendmail</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><p>run sendmail’s config and answer <code>Y</code> to everything</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sendmailconfig</span><br></pre></td></tr></table></figure><h2 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h2><h3 id="install-1"><a href="#install-1" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mailutils</span><br></pre></td></tr></table></figure><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;test-email-content&#x27;</span> | mail -s <span class="string">&#x27;email title&#x27;</span> xxx@gmail.com</span><br></pre></td></tr></table></figure><h2 id="sendmail-mail-区别"><a href="#sendmail-mail-区别" class="headerlink" title="sendmail mail 区别"></a>sendmail mail 区别</h2><p>先需要搞清三个概念：</p><ul><li>邮件用户代理（MUA，Mail User Agent）</li><li>邮件传送代理（MTA，Mail Transport Agent）</li><li>邮件分发代理（MDA，Mail Deliver Agent）</li></ul><p>sedmail 是负责邮件传输的 MTA，类似 apache、nginx 的作用。mail 是用户使用客户端 MUA，类似 foxmail。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://gist.github.com/adamstac/7462202">Install and configure Sendmail on Ubuntu</a></li><li><a href="https://www.zhihu.com/question/19728556">Linux 下 mail、mailx 和 sendmail 的区别？ - 知乎</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 在工作目录之间使用 push 进行同步</title>
      <link href="/2017/03/30/git-synchronizing-between-working-directories-by-push/"/>
      <url>/2017/03/30/git-synchronizing-between-working-directories-by-push/</url>
      
        <content type="html"><![CDATA[<p><em>Pushing to a non-bare repo is now possible (Git 2.3.0 February 2015).</em></p><p>And it is possible when you are pushing the branch currently checked out at the remote repo!</p><p>现在已经是可以在俩个 non-bare 的仓库之间推送代码。</p><p>只需要再远程仓库配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config receive.denyCurrentBranch updateInstead</span><br></pre></td></tr></table></figure><p>就可以直接 <code>push</code> 分支到远程，并更新工作区。此方法可以用于项目部署。</p><span id="more"></span><p><strong>receive-pack: add another option for <code>receive.denyCurrentBranch</code></strong></p><p>When synchronizing between working directories, it can be handy to update the current branch via ‘push’ rather than ‘pull’, e.g. when pushing a fix from inside a VM, or when pushing a fix made on a user’s machine (where the developer is not at liberty to install an ssh daemon let alone know the user’s password).</p><p>The common workaround – pushing into a temporary branch and then merging on the other machine – is no longer necessary with this patch.</p><p>The new option is:</p><p><code>updateInstead</code>: Update the working tree accordingly, but refuse to do so if there are any uncommitted changes.</p><p>in remote repo:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config receive.denyCurrentBranch updateInstead</span><br></pre></td></tr></table></figure><p>and then you can use <code>git push</code> to synchronize between working directories in local repo.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://stackoverflow.com/questions/3221859/cannot-push-into-git-repository">cannot push into git repository - Stack Overflow</a></li><li><a href="https://github.com/git/git/commit/1404bcbb6b3bdb248d32024430644e55faec91ce">receive-pack: add another option for receive.denyCurrentBranch</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 SSH 连接提示 Permission denied publickey</title>
      <link href="/2017/03/30/resolving-ssh-permission-denied-publickey/"/>
      <url>/2017/03/30/resolving-ssh-permission-denied-publickey/</url>
      
        <content type="html"><![CDATA[<p>服务器是使用 publickey 进行连接，当在 git push 时发生 <code>Permission denied (publickey)</code>。同时解决 ssh-add 重启后失效。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add your_publickey</span><br></pre></td></tr></table></figure><p>如果遇到报错</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure><p>Try to</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> `ssh-agent`</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>注意：</strong> 在重启电脑后失效，一直没有找的其他合适的解决方案，所以选择在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中添加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add your_publickey 2&gt; /dev/null</span><br></pre></td></tr></table></figure><p><code>2&gt; /dev/null</code> 是为了保持静默运行</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.mr-wu.cn/ssh-permission-denied-publickey/">ssh 连接提示 Permission denied (publickey) 怎么破？ | 吴川斌的博客</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Ubuntu Sogou 无法选词输入中文</title>
      <link href="/2017/03/17/resolving-ubuntu-sogou-can-not-select-word/"/>
      <url>/2017/03/17/resolving-ubuntu-sogou-can-not-select-word/</url>
      
        <content type="html"><![CDATA[<p>sogou 输入法突然无法选词输入中文，候选词位置出现白框，多次重重装 fcitx 和 sogou 也没有解决。尝试使用 google pinyin 代替，但是感觉很不顺手。</p><span id="more"></span><h2 id="issue-in-GitHub"><a href="#issue-in-GitHub" class="headerlink" title="issue in GitHub"></a>issue in GitHub</h2><p>sogou 输入法 GitHub 上的一些 issue：</p><ul><li><a href="https://github.com/FZUG/repo/issues/43">#43</a></li><li><a href="https://github.com/FZUG/repo/issues/177">#177</a></li><li><a href="https://github.com/FZUG/repo/issues/179">#179</a></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>try to lastest version</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>clean <code>fcitx</code>, <code>SogouPY*</code>, <code>sogou-qimpanel</code> in <code>~/.config</code>, then relogin and try again</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.config</span><br><span class="line">sudo <span class="built_in">rm</span> -rf  fcitx SogouPY sogou-qimpanel</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://colorwin.github.io/2017/02/17/ubuntu-sogou/">ubuntu-sogou-不能显示候选词 | Color Win’s Notes</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git pull rebase 和 merge no-ff 保持提交线图整洁</title>
      <link href="/2017/03/17/git-pull-rebase-and-merge-no-ff-to-keep-clear-commit-graph/"/>
      <url>/2017/03/17/git-pull-rebase-and-merge-no-ff-to-keep-clear-commit-graph/</url>
      
        <content type="html"><![CDATA[<p>git log 中的一个清晰的提交线图是很方便进行 code review 和代码回退<br><code>git pull --rebase</code> 主要是为是将提交约线图平坦化，而 <code>git merge --no-ff</code> 则是刻意制造分叉</p><h2 id="pull-rebase"><a href="#pull-rebase" class="headerlink" title="pull rebase"></a>pull rebase</h2><blockquote><p>perform a rebase after fetching</p></blockquote><h3 id="状况"><a href="#状况" class="headerlink" title="状况"></a>状况</h3><p>Git 作为分布式版本控制系统，所有修改操作都是基于本地的，在团队协作过程中，假设你和你的同伴在本地中分别有各自的新提交，而你的同伴先于你 push 了代码到远程分支上，所以你必须先执行 <code>git pull</code> 来获取同伴的提交，然后才能 push 自己的提交到远程分支。</p><p><img src="https://user-images.githubusercontent.com/9289792/80202129-c1cdfb00-8657-11ea-814e-49f8618f301c.jpg" alt="170317-git-pull-rebase-and-merge-no-ff-to-keep-clear-commit-graph-01"></p><p>按照 Git 的默认策略，如果远程分支和本地分支之间的提交线图有分叉的话（即不是 fast-forwarded），Git 会执行一次 merge 操作，因此产生<strong>一次没意义的提交记录</strong>，从而造成了像上图那样的混乱。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>其实在 pull 操作的时候，使用 <code>git pull --rebase</code> 选项即可很好地解决上述问题。 加上 <code>--rebase</code> 参数的作用是，提交线图有分叉的话，Git 会 <code>rebase</code> 策略来代替默认的 <code>merge</code> 策略。<br>假设提交线图在执行 pull 前是这样的：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">      A---B---C  remotes/origin/master</span><br><span class="line">     /</span><br><span class="line">D---E---F---G  master</span><br></pre></td></tr></table></figure><p>如果是执行 <code>git pull</code> 后，结果多出了 H 这个没必要的提交记录。提交线图会变成这样：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">      A---B---C remotes/origin/master</span><br><span class="line">     /         \</span><br><span class="line">D---E---F---G---H master</span><br></pre></td></tr></table></figure><p>如果是执行 <code>git pull --rebase</code> 的话，提交线图就会变成这样：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">            remotes/origin/master</span><br><span class="line">                |</span><br><span class="line">D---E---A---B---C---F<span class="string">&#x27;---G&#x27;</span>  master</span><br></pre></td></tr></table></figure><p>F G 两个提交通过 <code>rebase</code> 方式重新拼接在 C 之后，多余的分叉去掉了，目的达到。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>使用 <code>git log --graph</code> 可查看提交线图<br>使用 <code>git pull --rebase</code> 是为了使提交线图更好看，从而方便 code review 和代码回退<br>使用 <code>git pull --rebase</code> 比直接 pull 容易导致冲突的产生，如果预期冲突比较多的话，建议还是直接 pull</p><span id="more"></span><h2 id="merge-no-ff"><a href="#merge-no-ff" class="headerlink" title="merge no-ff"></a>merge no-ff</h2><blockquote><p>generate a merge commit even if the merge resolve</p></blockquote><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><p><code>git pull --rebase</code> 策略目的是修整提交线图，使其形成一条直线，而即将要用到的 <code>git merge --no-ff &lt;branch-name&gt;</code> 策略偏偏是反行其道，刻意地弄出提交线图分叉出来。</p><p>假设你在本地准备合并两个分支，而刚好这两个分支是 fast-forwarded 的，那么直接合并后你得到一个直线的提交线图，当然这样没什么坏处，但如果你想更清晰地告诉你同伴：这一系列的提交都是为了实现同一个目的，那么你可以刻意地将这次提交内容弄成一次提交线图分叉。</p><p>执行 <code>git merge --no-ff &lt;branch-name&gt;</code> 的结果大概会是这样的：</p><p><img src="https://user-images.githubusercontent.com/9289792/80202132-c397be80-8657-11ea-8135-781a36fc64e5.jpg" alt="170317-git-pull-rebase-and-merge-no-ff-to-keep-clear-commit-graph-02"></p><p>中间的分叉线路图很清晰的显示这些提交都是为了实现：<strong>complete adjusting user domains and tags</strong></p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><p>往往在合并分支之前（假设要在本地将 feature 分支合并到 dev 分支），会先检查 feature 分支是否部分落后于远程 dev 分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line">git pull <span class="comment"># 更新 dev 分支</span></span><br><span class="line">git <span class="built_in">log</span> feature..dev <span class="comment"># 对比</span></span><br></pre></td></tr></table></figure><p>如果没有输出任何提交信息的话，即表示 feature 对于 dev 分支是 up-to-date 的。如果有输出的话而马上执行了 <code>git merge --no-ff</code> 的话，提交线图会变成这样：</p><p><img src="https://user-images.githubusercontent.com/9289792/80202134-c4305500-8657-11ea-8c4b-52f858f669ec.jpg" alt="170317-git-pull-rebase-and-merge-no-ff-to-keep-clear-commit-graph-03"></p><p>所以这时在合并前，通常先执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git rebase dev</span><br></pre></td></tr></table></figure><p>这样就可以将 feature 重新拼接到更新了的 dev 之后，然后就可以合并了。这时分叉点将上移，最终得到一个干净舒服的提交线图</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>使用 <code>git pull --rebase</code> 和 <code>git merge --no-ff</code> 其实和直接使用 <code>git pull</code> <code>git merge</code> 得到的代码应该是一样。</li><li>使用 <code>git pull --rebase</code> 主要是为是将提交约线图平坦化，而 <code>git merge --no-ff</code> 则是刻意制造分叉。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://hungyuhei.github.io/2012/08/07/better-git-commit-graph-using-pull---rebase-and-merge---no-ff.html">洁癖者用 Git：pull –rebase 和 merge –no-ff</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给网站添加保存到移动设备主屏的 icon</title>
      <link href="/2017/03/15/add-website-icons-to-the-home-screen/"/>
      <url>/2017/03/15/add-website-icons-to-the-home-screen/</url>
      
        <content type="html"><![CDATA[<p>By adding an iOS icon, anyone who decides to save your webpage to the home screen of their iPhone, iPad, or Android will see a nice app-like icon rather than an image of your page.</p><p>Here is a table of the current <a href="https://developer.apple.com/ios/human-interface-guidelines/graphics/app-icon/">iOS icon sizes from Apple</a>:</p><table><thead><tr><th align="center">iPhone 6&#x2F;7, iPhone SE</th><th align="center">iPad &#x2F; iPad Mini</th><th align="center">iPad Pro</th><th align="center">iPhone 6&#x2F;7 Plus</th></tr></thead><tbody><tr><td align="center">120×120</td><td align="center">152×152</td><td align="center">167×167</td><td align="center">180×180</td></tr></tbody></table><p>For Android icons you’ll want to follow these specifications:</p><table><thead><tr><th align="center">Android Regula</th><th align="center">Android Hi-Res</th></tr></thead><tbody><tr><td align="center">1128×128</td><td align="center">192×192</td></tr></tbody></table><span id="more"></span><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;http://www.yoursite.com/apple-touch-icon.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;http://www.yoursite.com/apple-touch-icon-152x152.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;152x152&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;http://www.yoursite.com/apple-touch-icon-167x167.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;167x167&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;http://www.yoursite.com/apple-touch-icon-180x180.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;180x180&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;http://www.yoursite.com/icon-hires.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;192x192&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;http://www.yoursite.com/icon-normal.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;128x128&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>Make the first apple one the 120 x 120.</p><p>If you don’t want to create all these images, you should at least create the larger resolution ones. That way they’ll look good on the hi-res devices.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.kylejlarson.com/blog/adding-an-icon-for-iphone-ipad-android-to-your-website/">How to Add Icons to iPhone, iPad &amp; Android to Your Website</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>禁止 Google 根据区域重定向跳转</title>
      <link href="/2017/03/14/google-no-country-redirection/"/>
      <url>/2017/03/14/google-no-country-redirection/</url>
      
        <content type="html"><![CDATA[<p>使用代理上 Google 时，Google 常会根据网络代理的区域进行重定向跳转。例如：使用韩国代理时，<code>google.com</code> 会跳转到 <code>https://www.google.co.kr/</code>，搜索结果也多为韩语，很是不方便。</p><p>解决的办法其实也很简单：访问 <code>https://www.google.com/ncr</code> 就可以了。</p><span id="more"></span><p><code>ncr</code> 表示：No Country Redirection，禁止区域重定向。</p><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 修改提交历史</title>
      <link href="/2017/03/13/git-modify-commits-history/"/>
      <url>/2017/03/13/git-modify-commits-history/</url>
      
        <content type="html"><![CDATA[<p>在使用 Git 时，我们经常会遇到修改本地提交记录的情况。比如：修改最近一次提交记，还比如：将多次小的 <code>commit</code> 合并成一个大的 <code>commit</code>。</p><p>这种做发有利也有弊，利在：review 代码时，可以按功能看，可以省去 review 一些前期写的无效的代码；弊是：一次提交修改过多，如果有问题，不利于调试。</p><p>具体情况具体分析，是解决问题的金句。</p><h2 id="修改最近一次提交记录"><a href="#修改最近一次提交记录" class="headerlink" title="修改最近一次提交记录"></a>修改最近一次提交记录</h2><h3 id="修改提交说明"><a href="#修改提交说明" class="headerlink" title="修改提交说明"></a>修改提交说明</h3><p>如果只想更改最近一次的提交说明，只需输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>然后你就会进入文本编辑器，输入你想要的内容，保存并退出即可</p><h3 id="改被提交的快照"><a href="#改被提交的快照" class="headerlink" title="改被提交的快照"></a>改被提交的快照</h3><p>如果你完成 <code>commit</code> 后又想修改被提交的快照，增加或者修改其中的文件。</p><p>先执行 <code>git add</code> 命令，将修改的文件添加到缓存区，然后运行 <code>git commit -amend</code> 命令，该命令会获取你当前的暂存区的内容一并提交到最后一次 <code>commit</code></p><p>例如：新加了一个文件 <code>new_file.cpp</code> ，想要合并到最后一次提交，过程如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add new_file.cpp</span><br><span class="line">git commit -amend</span><br></pre></td></tr></table></figure><p>也可以直接运行下面的命令，不过要小心，不要提交了多余的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -amend</span><br></pre></td></tr></table></figure><h3 id="将文件从本次提交中移除"><a href="#将文件从本次提交中移除" class="headerlink" title="将文件从本次提交中移除"></a>将文件从本次提交中移除</h3><p>如果想把已经 <code>commit</code> 的文件从这次 <code>commit</code> 移除的话，运行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset [-soft] HEAD~1 <span class="comment"># -soft可加可不加，默认就是soft选项</span></span><br><span class="line">git checkout -filename <span class="comment"># 要从本次提交移除的文件名</span></span><br><span class="line">git commit -m <span class="string">&quot;new commit&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="修改多个提交记录"><a href="#修改多个提交记录" class="headerlink" title="修改多个提交记录"></a>修改多个提交记录</h2><p>要修改历史中更早的提交，你必须采用更复杂的工具。Git 没有一个修改历史的工具，但是你可以使用 rebase 工具来衍合一系列的提交到它们原来所在的 HEAD 上。</p><p>依靠这个交互式的 rebase 工具，你就可以停留在每一次提交后，如果你想修改或改变说明、增加文件或任何其他事情。你可以通过给 <code>git rebase -i</code> 命令以交互方式进行 rebase。</p><p>例如，你想修改最近三次的提交说明，或者其中任意一次，你必须给 <code>git rebase -i</code> 提供一个参数，指明你想要修改的提交的父提交。</p><p>例如 <code>HEAD~3</code> 是指从 HEAD 指针到 HEAD+3 的位置，也就是最近第 4 次提交。所以想修改最近 3 次提交，你需要指明第 3 次提交的父提交（第 4 次提交）即 <code>HEAD~3</code>。运行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>再次提醒这是一个衍合命令，也就是 HEAD~3 到 HEAD 范围内的每一次提交都会被重写，不管你是否修改提交说明 SHA-1 的值都会发生变化。</p><p>所以千万不要涵盖你已经推送到中心服务器的提交。这么做会使其他开发者产生混乱，因为你提供了同样变更的不同版本。运行该命令后进入交互界面，类似：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase f77f585..fecb551 onto f77f585</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment">#  p, pick = use commit</span></span><br><span class="line"><span class="comment">#  r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment">#  e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment">#  s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment">#  f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment">#  x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p>根据命令提示，就可以进行历史更改了。很重要的一点是你得注意这些提交的顺序与你通常通过 log 命令看到的是相反的。</p><p>如果你运行 log，你会看到下面这样的结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick bc5cd9d Add new method</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick fecb551 Init the view model</span><br></pre></td></tr></table></figure><h3 id="修改指定提交"><a href="#修改指定提交" class="headerlink" title="修改指定提交"></a>修改指定提交</h3><p>例如：只修改最近第 3 次提交说明可以进行如下更改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reword fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存并退出编辑器，rebase 命令在衍合到第 3 次提交时会进入提交说明编辑页面，在此进行编辑新的提交说明，保存并退出即可，rebase 命令继续进行直至完成全部衍合操作。</p><p>如果你不仅想要修改提交说明，还要更改提交，可以进行如下更改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">edit fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存并退出编辑器，rebase 命令在衍合到第三次提交时会等待你提交新的更改，并提示你修改完成后运行 <code>git commit –amend</code> 命令，然后运行 <code>git rebase –continue</code> 继续进行 rebase 直至完成全部衍合。</p><h3 id="重排提交"><a href="#重排提交" class="headerlink" title="重排提交"></a>重排提交</h3><p>你也可以使用 <code>git rebase -i</code> 命令对提交历史彻底重排或删除提交。例如你想删除”Update the version”这个提交，并且修改其他两次提交的顺序，可以将：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">pick bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick bc5cd9d Add new method</span><br><span class="line">pick fecb551 Init the view model</span><br></pre></td></tr></table></figure><p>然后保存并退出编辑器，此时 rebase 命令会先应用 bc5cd9d (Add new method)，然后应用 fecb551 (Init the view model) bb199a0 Update the version 这次提交。然后保存并退出编辑器，此时 rebase 命令会先应用 bc5cd9d (Add new method)，然后应用 fecb551 (Init the view model)，接着停止。</p><p>执行完上诉操作，你已经修改了这些提交的顺序，并且删除了 bb199a0 (Update the version) 这次提交。</p><h3 id="合并提交"><a href="#合并提交" class="headerlink" title="合并提交"></a>合并提交</h3><p><code>git rebase -i</code> 命令还可以将一系列提交合并成一个提交。从上面的脚本提示中可以看到 s, squash &#x3D; use commit, but meld into previous commit 提示。</p><p>如果用 squash 修饰提交就可以进行提交之间的合并，例如可以将脚本修改成这样：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">squash bb199a0 Update the version</span><br><span class="line">squash bc5cd9d Add new method</span><br></pre></td></tr></table></figure><p>保存并退出编辑器，rebase 命令会应用全部三次变更然后进入编辑器来归并三次提交说明。当你保存之后，你就拥有了一个包含前三次提交的全部变更的单一提交。</p><h3 id="拆分提交"><a href="#拆分提交" class="headerlink" title="拆分提交"></a>拆分提交</h3><p>拆分提交实际上就是撤销一次提交，然后分多次进行重新提交。例如你想将三次提交中的中间一次拆分。将 ”Update the version” 拆分成两次提交：”Update the version1” 和 ”Update the version2”，可以进行如下修改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pick fecb551 Init the view model</span><br><span class="line">edit bb199a0 Update the version</span><br><span class="line">pick bc5cd9d Add new method</span><br></pre></td></tr></table></figure><p>当 rebase 到 bb199a0 时，会进入等待你提交新 commit 的状态，这时看可以运行 git reset HEAD^ 对当前提交进行重置，然后分别运行 git add 命令添加想要提交的文件，分别进行 git commit，最后运行 git rebase –continue 完成所有衍合。整体过程如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD^</span><br><span class="line">git add file1</span><br><span class="line">git commit -m <span class="string">&#x27;Update the version1&#x27;</span></span><br><span class="line">git add file2</span><br><span class="line">git commit -m <span class="string">&#x27;Update the version2&#x27;</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>执行完上诉操作，提交历史看起来就像这样了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1c002dd Add new method</span><br><span class="line">9b29157 Update the version2</span><br><span class="line">35cfb2b Update the version1</span><br><span class="line">f3cc40e Init the view model</span><br></pre></td></tr></table></figure><p>再次提醒，这会修改你列表中的提交的 SHA 值，所以请确保这个列表里不包含你已经推送到共享仓库的提交。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://glgjing.github.io/blog/2015/01/06/git-xiu-gai-ti-jiao-li-shi/">Git 修改提交历史 - GLGJing&amp;#8217;s Blog</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP empty 方法判断 0.0</title>
      <link href="/2017/03/09/php-empty-method-judge-0/"/>
      <url>/2017/03/09/php-empty-method-judge-0/</url>
      
        <content type="html"><![CDATA[<p>在使用 <code>empty(mixed $var)</code> 时要考虑 <code>$var</code> 的 <strong>类型</strong>，尤其是在判断数据库查询后的字段。</p><span id="more"></span><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">bool empty(mixed $var)</span><br></pre></td></tr></table></figure><p>以下的东西被认为是空的：</p><ul><li><code>&quot;&quot;</code>（空字符串）</li><li><code>0</code> （作为整数的 0）</li><li><code>0.0</code> （作为浮点数的 0）</li><li><code>&quot;0&quot;</code> （作为字符串的 0）</li><li><code>NULL</code></li><li><code>FALSE</code></li><li><code>array()</code> （一个空数组）</li><li><code>$var</code> （一个声明了，但是没有值的变量）</li></ul><p><strong>注意：</strong> string 的判断要非常注意，数据库查询后的字段常常为 string，应该进行正确的类型转换。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;0.0&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">empty</span>(<span class="variable">$str</span>); <span class="comment">// false 很可能和预期是相反的</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">empty</span>((<span class="keyword">float</span>)<span class="variable">$str</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux crontab 内容定时备份</title>
      <link href="/2017/03/07/linux-crontab-content-backup/"/>
      <url>/2017/03/07/linux-crontab-content-backup/</url>
      
        <content type="html"><![CDATA[<p><code>crontab -r</code> 是一个很危险的命令，它将直接重置 crontab 中的内容；输入 <code>crontab</code> 后，使用 <code>ctrl + d</code> 退出也将清空 crontab 中的内容。所以 crontab 内容的定时备份也变得有必要了。</p><h2 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h2><p><code>crontab_bak.sh</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">crontab -l &gt; /home/tom/crontab_bak/bak`<span class="built_in">date</span> <span class="string">&#x27;+%Y%m%d&#x27;</span>`.txt</span><br></pre></td></tr></table></figure><p>config in crontab</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">12 12 * * * /bin/bash /home/tom/crontab_bak/crontab_bak.sh</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="crontab-常用命令"><a href="#crontab-常用命令" class="headerlink" title="crontab 常用命令"></a>crontab 常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l  <span class="comment"># 列举 crontab 的任务</span></span><br><span class="line">crontab -e  <span class="comment"># 编辑 crontab 的任务</span></span><br><span class="line">crontab -r  <span class="comment"># 删除 crontab 的任务；风险</span></span><br><span class="line">crontab -h  <span class="comment"># crontab 的帮助</span></span><br><span class="line">crontab -i  <span class="comment"># 删除 crontab 前进行提示</span></span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Ubuntu warning Setting locale failed</title>
      <link href="/2017/03/03/resolving-ubuntu-warning-setting-locale-failed/"/>
      <url>/2017/03/03/resolving-ubuntu-warning-setting-locale-failed/</url>
      
        <content type="html"><![CDATA[<p>在配置新服务器时遇到 <code>Setting locale failed</code> 的警告，要求 <code>Please check that your locale settings</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">    LANGUAGE = (<span class="built_in">unset</span>),</span><br><span class="line">    LC_ALL = (<span class="built_in">unset</span>),</span><br><span class="line">    LC_MESSAGES = <span class="string">&quot;zh_CN.UTF-8&quot;</span>,</span><br><span class="line">    LANG = <span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line">    are supported and installed on your system.</span><br><span class="line">perl: warning: Falling back to the standard locale (<span class="string">&quot;C&quot;</span>).</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="安装-localepurge-管理语言文件"><a href="#安装-localepurge-管理语言文件" class="headerlink" title="安装 localepurge 管理语言文件"></a>安装 localepurge 管理语言文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install localepurge</span><br></pre></td></tr></table></figure><p>选择我们想要的语言，例如 <code>en_US.UTF-8</code> 和 <code>zh_CN.UTF-8</code><br>当然也可以使用以下命令再次进行配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure localepurge</span><br></pre></td></tr></table></figure><h3 id="生成自己想要的语言"><a href="#生成自己想要的语言" class="headerlink" title="生成自己想要的语言"></a>生成自己想要的语言</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo locale-gen zh_CN.UTF-8 en_US.UTF-8</span><br></pre></td></tr></table></figure><p>打印出当前的配置信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locale</span><br></pre></td></tr></table></figure><p>默认情况下终端 ssh 的时候会将本地的 locale 传到服务器中，可以通过命令指定 ssh 服务器的语言：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LC_ALL=en_US.UTF-8 ssh &lt;host&gt;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://wenzhixin.net.cn/2014/01/11/ubuntu_setting_locale_failed">ubuntu 解决语言设置错误的问题 —— 文翼的博客</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IMOOC HTML+CSS 基础课程 Part 4</title>
      <link href="/2017/03/01/imooc-html-css-basic-course-part4/"/>
      <url>/2017/03/01/imooc-html-css-basic-course-part4/</url>
      
        <content type="html"><![CDATA[<p>慕课网上【HTML+CSS 基础课程】学习笔记。本文主要内容：CSS 代码缩写、单位和值、样式设置小技巧。</p><span id="more"></span><h2 id="第-13-章-CSS-代码缩写，占用更少的带宽"><a href="#第-13-章-CSS-代码缩写，占用更少的带宽" class="headerlink" title="第 13 章 CSS 代码缩写，占用更少的带宽"></a>第 13 章 CSS 代码缩写，占用更少的带宽</h2><h3 id="盒模型代码简写"><a href="#盒模型代码简写" class="headerlink" title="盒模型代码简写"></a>盒模型代码简写</h3><p>还记得在讲盒模型时外边距（margin）、内边距（padding）和边框（border)设置上下左右四个方向的边距是按照顺时针方向设置的：上右下左</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 上设置为10px、右设置为15px、下设置为12px、左设置为14px */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">15px</span> <span class="number">12px</span> <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line"><span class="comment">/* 可缩写为：*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="comment">/* 可缩写为：*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果left和right的值相同，如下面代码：*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="comment">/* 可缩写为：*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* padding、border的缩写方法和margin是一致的。*/</span></span><br></pre></td></tr></table></figure><h3 id="颜色值缩写"><a href="#颜色值缩写" class="headerlink" title="颜色值缩写"></a>颜色值缩写</h3><p>当设置的颜色是 16 进制的色彩值时，如果每两位的值相同，可以缩写一半</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 可以缩写为：*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#336699</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 可以缩写为：*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#369</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字体缩写"><a href="#字体缩写" class="headerlink" title="字体缩写"></a>字体缩写</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;宋体&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这么多行的代码其实可以缩写为一句：*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: italic small-caps bold <span class="number">12px</span>/<span class="number">1.5em</span> <span class="string">&quot;宋体&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>使用这一简写方式你至少要指定 <code>font-size</code> 和 <code>font-family</code> 属性，其他的属性（如 font-weight、font-style、font-variant、line-height）如未指定将自动使用默认值。</li><li>在缩写时 <code>font-size</code> 与 <code>line-height</code> 中间要加入 <code>/</code> 斜扛。</li><li>一般情况下因为对于中文网站，英文还是比较少的，所以下面缩写代码比较常用：</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5em</span> <span class="string">&quot;宋体&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 只是有字号、行间距、中文字体、英文字体设置 */</span></span><br></pre></td></tr></table></figure><h2 id="第-14-章-单位和值"><a href="#第-14-章-单位和值" class="headerlink" title="第 14 章 单位和值"></a>第 14 章 单位和值</h2><h3 id="颜色值"><a href="#颜色值" class="headerlink" title="颜色值"></a>颜色值</h3><p>字体颜色（color）、背景颜色（background-color）、边框颜色（border）等：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 英文命令颜色 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* RGB颜色 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">133</span>, <span class="number">45</span>, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 每一项的值可以是 0~255 之间的整数，也可以是 0%~100% 的百分数。如：*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">20%</span>, <span class="number">33%</span>, <span class="number">25%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 十六进制颜色。原理其实也是 RGB 设置，值由 0-255 变成了十六进制 00-ff */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00ffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长度值"><a href="#长度值" class="headerlink" title="长度值"></a>长度值</h3><p>长度单位总结一下，目前比较常用到 px（像素）、em、% 百分比，要注意其实这三种单位都是相对单位。</p><ul><li>像素：像素为什么是相对单位呢？因为像素指的是显示器上的小点（CSS 规范中假设“90 像素&#x3D;1 英寸”）。实际情况是浏览器会使用显示器的实际像素值有关，在目前大多数的设计者都倾向于使用像素（px）作为单位</li><li>em：就是本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em &#x3D; 14px；如果 font-size 为 18px，那么 1em &#x3D; 18px。如下代码：</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 上面代码就是可以实现段落首行缩进 24px（也就是两个字体大小的距离）*/</span></span><br></pre></td></tr></table></figure><p>下面注意一个特殊情况：<br>但当给 font-size 设置单位为 em 时，此时计算的标准以 p 的父元素的 font-size 为基础。如下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>以这个<span class="tag">&lt;<span class="name">span</span>&gt;</span>例子<span class="tag">&lt;/<span class="name">span</span>&gt;</span>为例。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">// css: p&#123;font-size:14px&#125; span&#123;font-size:0.8em;&#125; // 结果 span</span><br><span class="line">中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。</span><br></pre></td></tr></table></figure><ul><li>百分比</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">130%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置行高（行间距）为字体的 <code>130%</code>（12 * 1.3 &#x3D; 15.6px）</p><h2 id="第-15-章-CSS-样式设置小技巧"><a href="#第-15-章-CSS-样式设置小技巧" class="headerlink" title="第 15 章 CSS 样式设置小技巧"></a>第 15 章 CSS 样式设置小技巧</h2><h3 id="水平居中-行内元素"><a href="#水平居中-行内元素" class="headerlink" title="水平居中 - 行内元素"></a>水平居中 - 行内元素</h3><p>如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 <code>text-align:center</code> 来实现的</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;txtCenter&quot;</span>&gt;</span>我想要在父容器中水平居中显示。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.txtCenter</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水平居中-定宽块状元素"><a href="#水平居中-定宽块状元素" class="headerlink" title="水平居中 - 定宽块状元素"></a>水平居中 - 定宽块状元素</h3><p>当被设置元素为 <code>块状元素</code> 时用 <code>text-aligncenter</code> 就不起作用了，这时也分两种情况：<code>定宽块状元素</code> 和 <code>不定宽块状元素</code>。</p><p>满足 <code>定宽</code> 和 <code>块状</code> 两个条件的元素是可以通过设置 <code>左右margin</code> 值为 <code>auto</code> 来实现居中的。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是定宽块状元素，哈哈，我要水平居中显示。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid red; <span class="comment">/*为了显示居中效果明显为 div 设置了边框*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/*定宽*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">20px</span> auto; <span class="comment">/* margin-left 与 margin-right 设置为 auto */</span></span></span><br><span class="line"><span class="language-css">    // 注意：元素的“上下 <span class="attribute">margin</span>” 是可以随意设置的</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水平居中-不定宽块状元素方法（一）"><a href="#水平居中-不定宽块状元素方法（一）" class="headerlink" title="水平居中 - 不定宽块状元素方法（一）"></a>水平居中 - 不定宽块状元素方法（一）</h3><p>不定宽度的块状元素有三种方法居中：</p><ol><li>加入 <code>table</code> 标签</li><li>设置 <code>display: inline</code> 方法：与第一种类似，显示类型设为 行内元素，进行不定宽元素的属性设置</li><li>设置 <code>position:relative</code> 和 <code>left:50%</code>：利用 相对定位 的方式，将元素向左偏移 50% ，即达到居中的目的</li></ol><p>加入 <code>table</code> 标签是利用 <code>table</code> 标签的长度自适应性，即不定义其长度也不默认父元素 body 的长度（table 其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的 margin 的方法，使其水平居中</p><p>第一步：为需要设置的居中的元素外面加入一个 table 标签 ( 包括 <code>&lt;tbody&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code> )</p><p>第二步：为这个 table 设置 <code>左右 margin 居中</code>（这个和定宽块状元素的方法一样）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第三行文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水平居中-不定宽块状元素方法（二）"><a href="#水平居中-不定宽块状元素方法（二）" class="headerlink" title="水平居中 - 不定宽块状元素方法（二）"></a>水平居中 - 不定宽块状元素方法（二）</h3><p>改变块级元素的 <code>display</code> 为 <code>inline</code> 类型（设置为 行内元素 显示），然后使用 <code>text-align:center</code> 来实现居中效果。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* margin:0;padding:0（消除文本与div边框之间的间隙）*/</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* margin-right:8px（设置li文本之间的间隔）*/</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方法相比第一种方法的优势是不用增加无语义标签，但也存在着一些问题：它将块状元素的 display 类型改为 inline，变成了<strong>行内元素</strong>，所以少了一些功能，比如设定长度值</p><h3 id="水平居中-不定宽块状元素方法（三）"><a href="#水平居中-不定宽块状元素方法（三）" class="headerlink" title="水平居中 - 不定宽块状元素方法（三）"></a>水平居中 - 不定宽块状元素方法（三）</h3><ul><li>通过给父元素设置 <code>float</code>，然后给父元素设置 <code>position:relative</code> 和 <code>left:50%</code>，子元素设置 <code>position:relative</code> 和 <code>left: -50%</code> 来实现水平居中</li><li><code>div</code> 中间有条平分界线，然后将 <code>ul</code> 的最左端与 <code>div</code> 的平分线对其；</li><li><code>li</code> 中有条平分线，然后将 <code>li</code> 的平分线与 <code>ul</code> 的最左端对其；</li></ul><p>简单的说就是：<code>div</code> 和 <code>li</code> 都有条平分线，然后 <code>ul</code> 的最左端作为平分线标准，<code>div</code> 和 <code>li</code> 都与其对其，然后 <code>div</code> 确定外框，则 <code>li</code> 就是在 <code>div</code> 的中间</p><p>注：可以使用 <code>clear:both;</code> 清除浮动</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: -<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="垂直居中-父元素高度确定的单行文本"><a href="#垂直居中-父元素高度确定的单行文本" class="headerlink" title="垂直居中 - 父元素高度确定的单行文本"></a>垂直居中 - 父元素高度确定的单行文本</h3><p>分两种情况：父元素高度确定的单行文本，以及父元素高度确定的多行文本</p><p>父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的 （height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的<strong>基线间的距离</strong> ）</p><p><code>line-height</code> 与 <code>font-size</code> 的计算值之差，在 CSS 中成为“行间距”。分为两半，分别加到一个文本行内容的顶部和底部</p><p>这种文字行高与块高一致带来了一个弊端：当文字内容的长度大于块的宽时，就有内容脱离了块（溢出）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>hi,imooc!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="垂直居中-父元素高度确定的多行文本（方法一）"><a href="#垂直居中-父元素高度确定的多行文本（方法一）" class="headerlink" title="垂直居中 - 父元素高度确定的多行文本（方法一）"></a>垂直居中 - 父元素高度确定的多行文本（方法一）</h3><p>使用插入 table (包括 tbody、tr、td)标签，同时设置 <code>vertical-align：middle</code></p><p>CSS 中有一个用于竖直居中的属性 <code>vertical-align</code>，在父元素设置此样式时，会对 inline-block 类型的子元素都有用。下面看一下例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 td 标签默认情况下就默认设置了 <code>vertical-align: middle</code>，所以我们不需要显式地设置了</p><h3 id="垂直居中-父元素高度确定的多行文本（方法二）"><a href="#垂直居中-父元素高度确定的多行文本（方法二）" class="headerlink" title="垂直居中 - 父元素高度确定的多行文本（方法二）"></a>垂直居中 - 父元素高度确定的多行文本（方法二）</h3><p>在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align 属性，但注意 IE6、7 并不支持这个样式，兼容性比较差</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>看我是否可以居中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: table-cell; <span class="comment">/*IE8以上及Chrome、Firefox*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: middle; <span class="comment">/*IE8以上及Chrome、Firefox*/</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方法的好处是不用添加多余的无意义的标签，但缺点也很明显，它的兼容性不是很好，不兼容 IE6、7 而且这样修改 display 的 block 变成了 table-cell，破坏了原有的块状元素的性质（笔者：IE6、7 基本可以放弃了）</p><h3 id="隐性改变-display-类型"><a href="#隐性改变-display-类型" class="headerlink" title="隐性改变 display 类型"></a>隐性改变 display 类型</h3><p>有一个有趣的现象就是当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一：</p><ol><li><code>position : absolute</code></li><li><code>float : left</code> 或 <code>float:right</code><br>只要 HTML 代码中出现以上两句之一，元素的 display 显示类型就会自动变为以 <code>display:inline-block</code>（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素</li></ol><p>如下面的代码，<code>a</code> 标签是 行内元素 ，所以设置它的 width 是 没有效果的，但是设置为 <code>position:absolute</code> 以后，就可以了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span>进入课程请单击这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IMOOC HTML+CSS 基础课程 Part 3</title>
      <link href="/2017/02/26/imooc-html-css-basic-course-part3/"/>
      <url>/2017/02/26/imooc-html-css-basic-course-part3/</url>
      
        <content type="html"><![CDATA[<p>慕课网上【 HTML+CSS 基础课程】学习笔记。本文主要内容： CSS 盒模型、CSS 布局模型</p><span id="more"></span><h2 id="第-11-章-CSS-盒模型"><a href="#第-11-章-CSS-盒模型" class="headerlink" title="第 11 章 CSS 盒模型"></a>第 11 章 CSS 盒模型</h2><p>1、元素分类<br>HTML 中标签元素大体被分为三类：块状元素、内联元素（又叫行内元素）和内联块状元素。常用的块状元素有：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</span><br></pre></td></tr></table></figure><p>常用的内联元素有：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br></pre></td></tr></table></figure><p>常用的内联块状元素有：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;img&gt;、&lt;input&gt;</span><br></pre></td></tr></table></figure><p>2、块级元素</p><p>在 HTML 中 <code>&lt;div&gt;</code>、 <code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;form&gt;</code>、<code>&lt;ul&gt;</code> 和 <code>&lt;li&gt;</code> 就是块级元素。设置 <code>display:block</code> 就是将元素显示为块级元素。</p><p>如下代码就是将内联元素 <code>a</code> 转换为块状元素：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块级元素特点：</p><ul><li>每个块级元素都从新的一行开始，并且其后的元素也另起一行；</li><li>元素的高度、宽度、行高以及顶和底边距都可设置；</li><li>元素宽度在不设置的情况下，是它本身父容器的 100%（和父元素的宽度一致），除非设定一个宽度；</li></ul><p>3、内联元素</p><p>在 HTML 中，<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;label&gt;</code>、 <code>&lt;strong&gt;</code> 和 <code>&lt;em&gt;</code> 就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码 <code>display:inline</code> 将元素设置为内联元素。</p><p>如下代码就是将块状元素 <code>div</code> 转换为内联元素，从而使 <code>div</code> 元素具有内联元素特点</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内联元素特点：</p><ul><li>和其他元素都在一行上；</li><li>元素的高度、宽度及顶部和底部边距不可设置；</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变；</li></ul><p>4、内联块状元素</p><p>内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点。<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code> 标签就是这种内联块状标签：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>inline-block 元素特点：</p><ul><li>和其他元素都在一行上；</li><li>元素的高度、宽度、行高以及顶和底边距都可设置；</li></ul><p>5、盒模型</p><ul><li>内填充（padding）：页面元素与内容之间的距离</li><li>外边距（margin）：两个盒子模型之间的距离</li><li>边框（border）</li><li>内填充、外边距、边框都有 4 个方向（如内填充分为 padding-top&#x2F;padding-bottom&#x2F;padding-left&#x2F;padding-right）</li></ul><p>注意：内部元素的实际高度是：内容高度+上下内填充高度+上下边框的高度，宽度同理</p><p>6、边框</p><p>边框可以设置它的粗细、样式和颜色</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 border 代码的缩写形式，分开写：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>border-style（边框样式）常见样式有：dashed（虚线）| dotted（点线）| solid（实线）</li><li>border-color（边框颜色）中的颜色可设置为十六进制颜色，如：border-color:#888;</li><li>border-width（边框宽度）中的宽度也可以设置为：thin | medium | thick，最常还是用象素（px）</li></ul><p>单独设置某一边框</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、宽度和高度</p><p>CSS 定义的宽（width）和高（height），指的是填充以里的内容范围</p><p>因此一个元素实际宽度（盒子的宽度）&#x3D; 左边界 + 左边框 + 左填充 + 内容宽度 + 右填充 + 右边框 + 右边界</p><p><img src="https://img.mukewang.com/539fbb3a0001304305570259.jpg" alt="一个元素实际宽度"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素的实际长度为：10px + 1px + 20px + 200px + 20px + 1px + 10px &#x3D; 262px</p><p><img src="https://img.mukewang.com/543b4cae0001b34304300350.jpg" alt="元素的实际长度"></p><p>9、填充</p><p>元素内容与边框之间是可以设置距离的，称之为“填充”。填充也可分为上、右、下、左（顺时针）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以分开写上面代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果上、右、下、左的填充都为 10px; 可以这么写：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果上下填充一样为 10px，左右一样为 20px，可以这么写：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、边界</p><p>元素与其它元素之间的距离可以使用边界（margin）来设置。边界也是可分为上、右、下、左</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他同 <code>padding</code></p><h2 id="第-12-章-CSS-布局模型"><a href="#第-12-章-CSS-布局模型" class="headerlink" title="第 12 章 CSS 布局模型"></a>第 12 章 CSS 布局模型</h2><p>1、CSS 布局模型</p><p>如果说布局模型是本，那么 CSS 布局模板就是末了，是外在的表现形式。CSS 包含 3 种基本的布局模型，用英文概括为：Flow、Layer 和 Float</p><ul><li>流动模型（Flow）</li><li>浮动模型 (Float)</li><li>层模型（Layer）</li></ul><p>2、流动模型</p><p>流动（Flow）是默认的网页布局模式。流动布局模型具有 2 个比较典型的特征：</p><ul><li>第一点，块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为 100%。实际上，块状元素都会以行的形式占据位置</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块状元素，由于没有设置宽度，宽度默认显示为100%--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块状元素，由于没有设置宽度，宽度默认显示为100%--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段文本段。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块状元素，由于没有设置宽度，宽度默认显示为100%--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--块状元素，由于设置了width:300px，宽度显示为300px--&gt;</span></span><br></pre></td></tr></table></figure><p>第二点，在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.imooc.com&quot;</span>&gt;</span>www.imooc.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>强调<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>重点<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>强调<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、浮动模型</p><p>块状元素这么霸道都是独占一行，设置元素浮动可以实现让两个块状元素并排显示</p><p>任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，如 div、p、table、img 等元素都可以被定义为浮动。如下代码可以实现两个 div 元素一行显示。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> red solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、层模型</p><p>层布局模型就像是图像软件 PhotoShop 中非常流行的图层编辑功能一样，每个图层能够精确定位操作。网页上局部使用层布局是有其方便之处的</p><p>CSS 定义了一组定位（positioning）属性来支持层布局模型</p><ul><li>绝对定位（position: absolute）</li><li>相对定位（position: relative）</li><li>固定定位（position: fixed）<br>如果想为元素设置层模型中的绝对定位，需要设置 position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用 left、right、top、bottom 属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于 body 元素，即相对于浏览器窗口。</li></ul><p>4、层模型 - 绝对定位</p><p>如果想为元素设置层模型中的绝对定位，需要设置 <code>position:absolute</code> （表示绝对定位），这条语句的作用将元素从文档流中拖出来，然后使用 left、right、top、bottom 属性相对于其<strong>最接近的一个具有定位属性</strong>的父包含块进行绝对定位。如果不存在这样的包含块，则相对于 body 元素，即相对于浏览器窗口</p><p>如下面代码可以实现 div 元素相对于浏览器窗口向右移动 100px，向下移动 50px</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> red solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.mukewang.com/53a00b130001e86707360547.jpg" alt="层模型 - 绝对定位 | 400x0"></p><p>5、层模型 - 相对定位</p><p>如果想为元素设置层模型中的相对定位，需要设置 <code>position:relative</code>（表示相对定位），它通过 left、right、top、bottom 属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按 static(float) 方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由 left、right、top、bottom 属性确定，偏移前的位置保留不动</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> red solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img.mukewang.com/53a00d2b00015c4b06190509.jpg" height="350px" /><p>什么叫做“偏移前的位置保留不动”呢？</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>偏移前的位置还保留不动，覆盖不了前面的div没有偏移前的位置<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img.mukewang.com/541a4bfc0001abef05940489.jpg" height="350px" /><p>6、层模型 - 固定定位</p><p>fixed：表示固定定位，与 absolute 定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与 <code>background-attachment:fixed;</code> 属性功能相同。</p><p>以下代码可以实现相对于浏览器视图向右移动 100px，向下移动 50px。并且拖动滚动条时位置固定不变</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> red solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>7、Relative 与 Absolute 组合使用</p><p>使用 <code>position:absolute</code> 可以实现被设置元素相对于浏览器（body）设置定位以后，使用 <code>position:relative</code> 可以相对于其它元素进行定位。但是必须遵守下面规范：</p><ul><li>参照定位的元素必须是相对定位元素的前辈元素：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--参照定位的元素--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>相对参照元素进行定位<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--相对定位元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参照定位的元素必须加入 <code>position:relative;</code></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定位元素加入 <code>position:absolute</code>，便可以使用 top、bottom、left、right 来进行偏移定位了</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box2</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 box2 就可以相对于父元素 box1 定位了（这里注意参照物就可以不是浏览器了，而可以自由设置了）</p><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IMOOC HTML+CSS 基础课程 Part 2</title>
      <link href="/2017/02/23/imooc-html-css-basic-course-part2/"/>
      <url>/2017/02/23/imooc-html-css-basic-course-part2/</url>
      
        <content type="html"><![CDATA[<p>慕课网上【 HTML+CSS 基础课程】学习笔记。本文主要内容：CSS 介绍，选择器，继承、层叠和特殊性，格式化排版。</p><span id="more"></span><h2 id="第-6-章-开始学习-CSS，为网页添加样式"><a href="#第-6-章-开始学习-CSS，为网页添加样式" class="headerlink" title="第 6 章 开始学习 CSS，为网页添加样式"></a>第 6 章 开始学习 CSS，为网页添加样式</h2><ol><li>认识 CSS 样式。CSS 全称为“层叠样式表 (Cascading Style Sheets)”，它主要是用于定义 HTML 内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等</li><li>CSS 样式的优势。批量定义样式</li><li>CSS 代码语法。CSS 样式由 <code>选择符</code> 和 <code>声明</code> 组成，而 <code>声明</code> 又由 <code>属性</code> 和 <code>值</code> 组成<ul><li>选择符：又称选择器，指明网页中要应用样式规则的元素</li><li>声明：在英文大括号 <code>&#123;&#125;</code> 中的的就是声明，属性和值之间用英文冒号 <code>:</code> 分隔。当有多条声明时，中间可以英文分号 <code>;</code> 分隔，如下所示：</li></ul></li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后一条声明可以没有分号，但是为了以后修改方便，一般也加上分号</li><li>为了使用样式更加容易阅读，可以将每条代码写在一个新行内</li></ul><p>4、CSS 注释代码</p><p>用 <code>/*注释语句*/</code> 来标明（HTML 中使用 <code>&lt;!--注释语句--&gt;</code>）</p><h2 id="第-7-章-CSS-样式基本知识"><a href="#第-7-章-CSS-样式基本知识" class="headerlink" title="第 7 章 CSS 样式基本知识"></a>第 7 章 CSS 样式基本知识</h2><p>1、内联式 CSS 样式</p><p>内联式 CSS 样式表就是把 CSS 代码直接写在现有的 HTML 标签中</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>这里文字是红色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、嵌入式 CSS 样式</p><p>嵌入式 CSS 样式，就是可以把 CSS 样式代码写在 <code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code> 标签之间</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、外部式 CSS 样式</p><p>外部式 CSS 样式（也可称为外联式）就是把 CSS 代码写一个单独的外部文件中，这个 CSS 样式文件以 <code>.css</code> 为扩展名，在 <code>&lt;head&gt;</code> 内（不是在 <code>&lt;style&gt;</code> 标签内）使用 <code>&lt;link&gt;</code> 标签将 CSS 样式文件链接到 HTML 文件内</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;base.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>CSS 样式文件名称以有意义的英文字母命名，如 main.css</li><li><code>rel=&quot;stylesheet&quot; type=&quot;text/css&quot;</code> 是固定写法不可修改</li><li><code>&lt;link&gt;</code> 标签位置一般写在 <code>&lt;head&gt;</code> 标签之内</li></ul><p>4、三种方法的优先级</p><p>内联式 &gt; 嵌入式 &gt; 外部式</p><p>但是嵌入式&gt;外部式有一个前提：嵌入式 css 样式的位置一定在外部式的后面。其实总结来说，就是 <strong>就近原则</strong>（离被设置元素越近优先级别越高）</p><h2 id="第-8-章-CSS-选择器"><a href="#第-8-章-CSS-选择器" class="headerlink" title="第 8 章 CSS 选择器"></a>第 8 章 CSS 选择器</h2><p>1、什么是选择器？</p><p>每一条 CSS 样式声明（定义）由两部分组成</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    样式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、标签选择器</p><p>标签选择器其实就是 HTML 代码中的标签。如右侧代码编辑器中的 <code>&lt;html&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、类选择器</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">.类选器名称&#123;css样式代码;&#125;</span><br></pre></td></tr></table></figure><p>4、ID 选择器</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#ID</span>选择器名称&#123;css样式代码;&#125;</span><br></pre></td></tr></table></figure><p>5、类和 ID 选择器的区别</p><p>相同点：可以应用于任何元素</p><p>不同点：</p><ul><li>ID 选择器只能在文档中使用一次</li><li>可以使用类选择器词列表方法为一个元素同时设置多个样式（不能使用 ID 词列表）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.stress</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.bigsize</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  到了<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;stress bigsize&quot;</span>&gt;</span>三年级&lt;/span</span><br><span class="line">  &gt;下学期时，我们班上了一节公开课...</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、子选择器</p><p>子选择器 <code>&gt;</code> 用于选择指定标签元素的第一代子元素</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.food</span> &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、包含（后代）选择器</p><p>包含选择器 <code>空格</code> 用于选择指定标签元素下的后辈元素</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.first</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<code>&gt;</code> 作用于元素的第一代后代，<code>空格</code> 作用于元素的所有后代。</p><p>8、通用选择器</p><p>通用选择器 <code>*</code> 作用是匹配 HTML 中所有标签元素</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、伪类选择符</p><p>伪类选择符，它允许给 HTML 不存在的标签（标签的某种状态）设置样式，比如说我们给 HTML 中一个标签元素的鼠标滑过的状态来设置字体颜色：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、分组选择符</p><p>HTML 多个标签元素设置同一个样式时，可以使用分组选择符 <code>,</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它相当于：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-9-章-CSS-继承、层叠和特殊性"><a href="#第-9-章-CSS-继承、层叠和特殊性" class="headerlink" title="第 9 章 CSS 继承、层叠和特殊性"></a>第 9 章 CSS 继承、层叠和特殊性</h2><p>1、继承</p><p>CSS 的<strong>某些样式</strong>是具有继承性的。继承是一种规则，它允许样式不仅应用于某个特定 HTML 标签元素，而且应用于其后代。</p><p>比如下面代码：如某种颜色应用于 <code>p</code> 标签，这个颜色设置不仅应用 <code>p</code> 标签，还应用于 <code>p</code> 标签中的所有子元素文本，这里子元素为 <code>span</code> 标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p&#123;color:red;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>三年级时，我还是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>胆小如鼠<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的小女孩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但注意有一些 CSS 样式是不具有继承性的，例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p&#123;border:1px solid red;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>三年级时，我还是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>胆小如鼠<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的小女孩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面例子中它代码的作用只是给 <code>p</code> 标签设置了边框为 1 像素、红色、实心边框线，而对于子元素 <code>span</code> 是没用起到作用的</p><p>2、特殊性</p><p>有的时候我们为同一个元素设置了不同的 CSS 样式代码，那么元素会启用哪一个 CSS 样式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p&#123;color:red;&#125; .first&#123;color:green;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>三年级时，我还是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>胆小如鼠<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的小女孩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>p</code> 和 <code>.first</code> 都匹配到了 <code>p</code> 这个标签上，那么会显示哪种颜色呢？<code>green</code> 是正确的颜色。因为浏览器是根据权值来判断使用哪种 css 样式的，权值高的就使用哪种 css 样式。下面是权值的规则：</p><p><code>标签</code> 的权值为 1，<code>类选择符</code> 的权值为 10，<code>ID选择符</code> 的权值最高为 100</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125; <span class="comment">/*权值为1*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125; <span class="comment">/*权值为1+1=2*/</span></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125; <span class="comment">/*权值为10*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125; <span class="comment">/*权值为1+1+10=12*/</span></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-class">.note</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125; <span class="comment">/*权值为100+10+1=111*/</span></span><br></pre></td></tr></table></figure><p>注意：还有一个权值比较特殊–继承也有权值但很低，有的文献提出它只有 0.1，所以可以理解为继承的权值最低</p><p>3、层叠</p><p>层叠就是在 html 文件中对于同一个元素可以有多个 CSS 样式存在，当有相同权重的样式存在时，会根据这些 CSS 样式的前后顺序来决定，处于最后面的 css 样式会被应用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p&#123;color:red;&#125; p&#123;color:green;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>三年级时，我还是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>胆小如鼠<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的小女孩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后 <code>p</code> 中的文本会设置为 green。所以 CSS 样式优先级：</p><p><strong>内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）</strong></p><p>4、重要性</p><p>使用 <code>!important</code> 为某些样式设置具有最高权值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p&#123;color:red!important;&#125; p&#123;color:green;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>三年级时，我还是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>胆小如鼠<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的小女孩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时 <code>p</code> 段落中的文本会显示的 red</p><p>注意：<code>!important</code> 要写在分号的前面</p><p>当网页制作者不设置 CSS 样式时，浏览器会按照自己的一套样式来显示网页。并且用户也可以在浏览器中设置自己习惯的样式，比如有的用户习惯把字号设置为大一些，使其查看网页的文本更加清楚。这时注意样式优先级为：浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式，但记住 <code>!important</code> 优先级样式是个例外，权值高于用户自己设置的样式</p><h2 id="第-10-章-CSS-格式化排版"><a href="#第-10-章-CSS-格式化排版" class="headerlink" title="第 10 章 CSS 格式化排版"></a>第 10 章 CSS 格式化排版</h2><p>1、字体</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;宋体&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意不要设置不常用的字体，因为如果用户本地电脑上如果没有安装你设置的字体，就会显示浏览器默认的字体。（因为用户是否可以看到你设置的字体样式取决于用户本地电脑上是否安装你设置的字体。）</p><p>现在一般网页喜欢设置“微软雅黑”，如下代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：第一种方法比第二种方法兼容性更好一些。使用微软雅黑，没有版权问题吗？）</p><p>2、字号、颜色</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、粗体、斜体、下划线、删除线</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.oldPrice</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、段落排版 - 缩进</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：2em 的意思就是文字的 2 倍大小</p><p>5、段落排版 - 行间距（行高）</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、段落排版 - 中文字间距、字母间距</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">50px</span>; // 中文字间隔、字母间隔设置</span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">50px</span>; // 单词间距设置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、段落排版 - 对齐<br>&amp;emsp;&amp;emsp;为块状元素中的文本、图片设置居中&#x2F;左&#x2F;右</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center/left/right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IMOOC HTML+CSS 基础课程 Part 1</title>
      <link href="/2017/02/23/imooc-html-css-basic-course-part1/"/>
      <url>/2017/02/23/imooc-html-css-basic-course-part1/</url>
      
        <content type="html"><![CDATA[<p>2017 年一个心愿，认真学习前端，成为公司里最厉害前端工程师。Flag 立的还是很大的……</p><p>本文主要内容：HTML 介绍，基本标签，表单标签</p><span id="more"></span><h2 id="第-1-章-HTML-介绍"><a href="#第-1-章-HTML-介绍" class="headerlink" title="第 1 章 HTML 介绍"></a>第 1 章 HTML 介绍</h2><p>1、HTML 是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。</p><p>2、CSS 样式是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。</p><p>3、JavaScript 是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有焦点新闻（新闻图片）的轮换。可以这么理解，有动画的，有交互的一般都是用 JavaScript 来实现的。</p><h2 id="第-2-章-认识标签-第一部分"><a href="#第-2-章-认识标签-第一部分" class="headerlink" title="第 2 章 认识标签(第一部分)"></a>第 2 章 认识标签(第一部分)</h2><p>常常会听到一个词，<strong>语义化</strong>。说的通俗点就是：明白每个标签的用途（在什么情况下使用此标签合理）。</p><p>比如，网页上的文章的标题就可以用标题标签，网页上的各个栏目的栏目名称也可以使用标题标签。文章中内容的段落就得放在段落标签中，在文章中有想强调的文本，就可以使用 <code>em</code> 标签表示强调等等。<br>语义化可以给我们带来什么样的好处呢？</p><ul><li>更容易被搜索引擎收录。</li><li>更容易让屏幕阅读器读出网页内容。</li></ul><p>1、在网页上要展示出来的页面内容一定要放在 <code>body</code> 标签中；</p><p>2、如果想在网页上显示文章，这时就需要 <code>&lt;p&gt;</code> 标签了，把文章的段落放到 <code>&lt;p&gt;</code> 标签；</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、标题标签一共有 6 个，h1、h2、h3、h4、h5、h6 分别为一级标题、二级标题、三级标题、四级标题、五级标题、六级标题。并且依据重要性递减。<code>&lt;h1&gt;</code> 是最高的等级：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hx</span>&gt;</span>标题文本<span class="tag">&lt;/<span class="name">hx</span>&gt;</span>(x为1-6)</span><br></pre></td></tr></table></figure><p>4、在一段话中特别强调某几个文字，这时候就可以用到 <code>&lt;em&gt;</code> 或 <code>&lt;strong&gt;</code> 标签。在浏览器中 <code>&lt;em&gt;</code> 默认用斜体表示，<code>&lt;strong&gt;</code> 用粗体表示。两个标签相比，目前国内前端程序员更喜欢使用 <code>&lt;strong&gt;</code> 表示强调：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>需要强调的文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>需要强调的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、<code>&lt;span&gt;</code> 标签是没有语义的，它的作用就是为了设置单独的样式用的：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、想引用某个作家的一句诗，这样会使你的文章更加出彩，那么 <code>&lt;q&gt;</code> 标签是你所需要的</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>引用文本<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、<code>&lt;blockquote&gt;</code> 的作用也是引用别人的文本。但它是对长文本的引用，如在文章中引入大段某知名作家的文字，这时需要这个标签。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>引用文本<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8、使用 <code>&lt;br&gt;</code> 标签分行显示文本</p><p>xhtml1.0 写法：<code>&lt;br /&gt;</code></p><p>html4.01 写法：<code>&lt;br&gt;</code></p><p><strong>注意：现在一般使用 xhtml1.0 的版本的写法（其它标签也是），这种版本比较规范</strong>。</p><p>9、为你的网页中添加一些空格 <code>&amp;nbsp;</code></p><p>10、<code>&lt;hr&gt;</code> 添加水平横线</p><p>html4.01 版本：<code>&lt;hr&gt;</code></p><p>xhtml1.0 版本：<code>&lt;hr /&gt;</code></p><p><code>&lt;hr /&gt;</code> 标签的在浏览器中的默认样式线条比较粗，颜色为灰色，可能有些人觉得这种样式不美观，没有关系，这些外在样式在我们以后学习了 css 样式表之后，都可以对其修改</p><p>11、联系地址信息如公司的地址就可以 <code>&lt;address&gt;</code> 标签。也可以定义一个地址（比如电子邮件地址）、签名或者文档的作者身份</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>联系地址信息<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure><p>12、网页中显示一些计算机专业的编程代码，当代码为一行代码时，你就可以使用 <code>&lt;code&gt;</code> 标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>var i=i+300;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure><p>13、如果是多行代码，可以使用 <code>&lt;pre&gt;</code> 标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>语言代码段<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;pre&gt;</code> 标签的主要作用：预格式化的文本。被包围在 <code>&lt;/pre&gt;</code> 元素中的文本通常会保留空格和换行符<br>注意：<code>&lt;pre&gt;</code> 标签不只是为显示计算机的源代码时用的，在你需要在网页中预显示格式时都可以使用它，只是 <code>&lt;pre&gt;</code> 标签的一个常见应用就是用来展示计算机的源代码</p><h2 id="第-3-章-认识标签-第二部分"><a href="#第-3-章-认识标签-第二部分" class="headerlink" title="第 3 章 认识标签(第二部分)"></a>第 3 章 认识标签(第二部分)</h2><p>1、使用 <code>ul</code>，添加列表</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用 <code>ol</code>，添加有前后顺序的列表</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、把一些独立的逻辑部分划分出来，放在一个 <code>&lt;div&gt;</code> 标签中，这个 <code>&lt;div&gt;</code> 标签的作用就相当于一个容器</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、给 <code>div</code> 命名，使逻辑更加清晰。可以为这一个独立的逻辑部分设置一个名称，用 <code>id</code> 属性来为 <code>&lt;div&gt;</code> 提供<strong>唯一</strong>的名称</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;版块名称&quot;</span>&gt;</span>…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、<code>table</code> 标签，认识网页上的表格</p><p><code>&lt;table&gt;…&lt;/table&gt;</code>：整个表格以 <code>&lt;table&gt;</code> 标记开始、<code>&lt;/table&gt;</code> 标记结束</p><p><code>&lt;tbody&gt;…&lt;/tbody&gt;</code>：当表格内容非常多时，表格会下载一点显示一点，但如果加上 <code>&lt;tbody&gt;</code> 标签后，这个表格就要等表格内容全部下载完才会显示</p><p><code>&lt;tr&gt;…&lt;/tr&gt;</code>：表格的一<strong>行</strong>，所以有几对 <code>tr</code> 表格就有几行。</p><p><code>&lt;td&gt;…&lt;/td&gt;</code>：表格的一个单元格，一行中包含几对 <code>&lt;td&gt;...&lt;/td&gt;</code>，说明一行中就有几<strong>列</strong></p><p><code>&lt;th&gt;…&lt;/th&gt;</code>：表格的头部的一个单元格，表格<strong>表头</strong></p><p>6、<code>caption</code> 标签，为表格添加标题和摘要</p><p>摘要：摘要的内容是不会在浏览器中显示出来的。它的作用是增加表格的可读性（语义化），使搜索引擎更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">summary</span>=<span class="string">&quot;表格简介文本&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标题：用以描述表格内容，标题的显示位置：表格上方</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span></span><br><span class="line">    标题文本</span><br><span class="line">  <span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>…<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>…<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    …</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  …</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第-4-章-认识标签-第三部分"><a href="#第-4-章-认识标签-第三部分" class="headerlink" title="第 4 章 认识标签(第三部分)"></a>第 4 章 认识标签(第三部分)</h2><p>1、使用 <code>&lt;a&gt;</code> 标签可实现超链接</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;目标网址&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标滑过显示的文本&quot;</span>&gt;</span>链接显示的文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>title</code> 属性的作用，鼠标滑过链接文字时会显示这个属性的文本内容。这个属性在实际网页开发中作用很大，主要方便搜索引擎了解链接地址的内容（语义化更友好）</p><p>2、在新建浏览器窗口中打开链接</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;目标网址&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>click here!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、使用 <code>mailto</code> 在网页中链接 <code>Email</code> 地址</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:yy@imooc.com?subject=主题名称&amp;body=邮件内容&amp;cc=yy@mail.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、<code>&lt;img&gt;</code> 为网页插入图片</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;下载失败时的替换文本&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示文本&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第-5-章-与浏览者交互，表单标签"><a href="#第-5-章-与浏览者交互，表单标签" class="headerlink" title="第 5 章 与浏览者交互，表单标签"></a>第 5 章 与浏览者交互，表单标签</h2><p>1、<code>form</code> 标签与用户交互</p><p>表单是可以把浏览者输入的数据传送到服务器端，这样服务器端程序就可以处理表单传过来的数据</p><p>action：浏览者输入的数据被传送到的地方,比如一个 PHP 页面(save.php)</p><p>method：数据传送的方式（get&#x2F;post）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post/get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;save.php&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pass&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、文本输入框、密码输入框</p><ul><li>type：当 <code>type=&quot;text&quot;</code> 时，输入框为文本输入框；当 <code>type=&quot;password&quot;</code> 时, 输入框为密码输入框</li><li>name：为文本框命名，以备后台程序使用</li><li>value：为文本输入框设置默认值（一般起到提示作用）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text/password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;名称&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文本&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>3、文本域，支持多行文本输入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;行数&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;列数&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：这两个属性可用 css 样式的 width 和 height 来代替：col 用 width、row 用 height 来代替</p><p>4、使用单选框、复选框，让用户选择</p><p>type：当 type&#x3D;”radio” 时，控件为单选框；当 type&#x3D;”checkbox” 时，控件为复选框</p><p>注意：同一组的单选按钮，name 取值一定要一致，比如上面例子为同一个名称“radioLove”，这样同一组的单选按钮才可以起到单选的作用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio/checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;值&quot;</span> <span class="attr">name</span>=<span class="string">&quot;名称&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>5、使用下拉列表框，节省空间</p><p>设置 <code>selected=&quot;selected&quot;</code> 属性，则该选项就被默认选中</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看书&quot;</span>&gt;</span>看书<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;旅游&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;运动&quot;</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;购物&quot;</span>&gt;</span>购物<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、使用提交按钮，提交数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>7、使用重置按钮，重置表单信息</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>8、form 表单中的 <code>label</code> 标签</p><p><code>label</code> 标签不会向用户呈现任何特殊效果，它的作用是为鼠标用户改进了可用性。如果你在 <code>label</code> 标签内点击文本，就会触发此控件。就是说，当用户单击选中该 <code>label</code> 标签时，浏览器就会自动将焦点转到和标签相关的表单控件上（就自动选中和该 <code>label</code> 标签相关连的表单控件上）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;控件id名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：标签的 <code>for</code> 属性中的值应当与相关控件的 <code>id</code> 属性值一定要相同</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>输入你的邮箱地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.imooc.com/learn/9">HTML+CSS 基础课程-慕课网</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git clean 从工作区中删除未跟踪的文件</title>
      <link href="/2017/02/22/git-clean-remove-untracked-files-from-the-working-tree/"/>
      <url>/2017/02/22/git-clean-remove-untracked-files-from-the-working-tree/</url>
      
        <content type="html"><![CDATA[<p>从当前目录开始，通过递归删除不在版本控制之下的文件来清除工作树。</p><h2 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h2><p>使用 <code>man</code> 命令，是一个很好的查看命令使用的方法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man git clean</span><br><span class="line"></span><br><span class="line">git clean -h</span><br></pre></td></tr></table></figure><h2 id="SYNOPSIS-概要"><a href="#SYNOPSIS-概要" class="headerlink" title="SYNOPSIS 概要"></a>SYNOPSIS 概要</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean [-d] [-f] [-i] [-n] [-q] [-e &lt;pattern&gt;] [-x | -X] [--] &lt;path&gt;...</span><br></pre></td></tr></table></figure><h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-q, --quiet           <span class="keyword">do</span> not <span class="built_in">print</span> names of files removed</span><br><span class="line">-n, --dry-run         dry run</span><br><span class="line">-f, --force           force</span><br><span class="line">-i, --interactive     interactive cleaning</span><br><span class="line">-d                    remove whole directories</span><br><span class="line">-e, --exclude &lt;pattern&gt;</span><br><span class="line">                      add &lt;pattern&gt; to ignore rules</span><br><span class="line">-x                    remove ignored files, too</span><br><span class="line">-X                    remove only ignored files</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 删除未跟踪的目录和未跟踪的文件。如果一个未跟踪的目录是另一个不同的 Git 库，默认将不会把它删除。如果你想删除这个目录，可以使用 <code>-f</code>。</li><li><code>-f</code> , <code>--force</code> 如果 Git 配置中 <code>clean.requireForce</code> 没有设置为 <code>false</code>，git clean 将拒绝执行。除非是使用 <code>-f</code> <code>-n</code> <code>-i</code>。</li><li><code>-i</code> , <code>--interactive</code> 使用交互式显示将被删除的文件。</li><li><code>-n</code> , <code>--dry-run</code> 仅仅显示将被删除的文件，不会真正的删除。</li><li><code>-q</code> , <code>--quiet</code> 静默，仅仅显示错误，不包括成功移除的文件。</li><li><code>-e &lt;pattern&gt;</code> , <code>--exclude=&lt;pattern&gt;</code> 除了在 <code>.gitignore</code>（每个目录）和 <code>$GIT_DIR/info/exclude</code>，也要考虑这些模式设置的忽略规则。</li><li><code>-x</code> 不使用 <code>.gitignore</code>（每个目录）和 <code>$GIT_DIR/info/exclude</code> 的标准忽略规则，但仍然使用使用 <code>-e</code> 选项给出的忽略规则。这允许删除所有未跟踪的文件，包括构建产品。 这可以使用（可能与 git reset）以创建一个原始的工作目录来测试一个干净的构建。</li><li><code>-X</code> 只删除 Git 忽略的文件。这可能有助于从头重建一切，但保留手动创建的文件。</li></ul><span id="more"></span><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>通过以上几根参数组合，基本上可以满足删除未跟踪文件的需求了</p><p>1、例如在删除前先查看有哪些文件将被删除运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看要被删除 Git 忽略的文件与文件夹</span></span><br><span class="line">git clean -Xdn</span><br></pre></td></tr></table></figure><p>2、想删除当前工作目录下的未跟踪文件，但不删除文件夹运行（如果 <code>clean.requireForce</code> 为 <code>false</code> 可以不加 <code>-f</code> 选项）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要被删除 Git 忽略的文件与文件夹</span></span><br><span class="line">git clean -Xdf</span><br></pre></td></tr></table></figure><p>3、想删除当前工作目录下的未跟踪文件以及文件夹运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean -<span class="built_in">df</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://glgjing.github.io/blog/2015/01/09/git-qing-chu-wei-gen-zong-wen-jian/">Git 清除未跟踪文件 | github</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾 2016</title>
      <link href="/2016/12/31/review-2016/"/>
      <url>/2016/12/31/review-2016/</url>
      
        <content type="html"><![CDATA[<p>2016 肯定是很特别的一年。年初离开了老师的队伍，来北京找实习。年中和 318 告别，大学毕业了。年末换房学做饭，开始另种生活。对于 2017 更多了对自己的期待。</p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=260 height=52 src="//music.163.com/outchain/player?type=2&id=31445772&auto=0&height=32"></iframe><p>2016 是在保定的雾霾中开始。结束了大为，决定离开老师的队伍，来北京实习，这对我来说是一个不大不小的决定。老师带着，跟学长一起走到这里，这里有了很多宝贵的东西，有很多回忆，很多故事可以讲。选择离开，主要还是想看看在这之外的是什么样子。</p><p>朋友、老师、爸妈都为我的实习操过心，不过推荐的地方在各种奇怪的理由下都没有成。自己开始在拉勾上投简历，一次次来返在京石铁路上。面试一直是不顺的。完全没有想到对实习生有如此高的要求，很多技术问题正中下怀。心里是有落差的，在我当时的想法里，那些在工程中是用不易用到的，但也感到自己技术知识的浅薄。面试了俩三家后也发现了套路，回答不好的、答不上的问题，回去查查准备准备，下回就能用上。</p><p>没什么难度的大学毕业。大学里更多的收获是跟着老师、学长在课堂外搞事，是和宿舍的、好朋友在一起的时间。真的好幸运啊，遇到 318 的舍友们。没想到和你们每一个人都超级聊的来。大四的时候人就渐渐不齐，但只要宿舍在，不到最后毕业真的不知道要分别了。我们相互影响着成长，至少除去了我很多很 low 的思想。我们相互练着酒量、每天演着戏、日常说着骚话。</p><p>德育答辩上一个同学说：我常翘课、考试挂科，但我大学四年过的很坦荡，我会因为和舍友游戏上的一个好玩的套路高兴很久。我收获朋友。我没什么后悔的。<br>这很戳中我的泪点。没什么后悔的，也是对我大学的注脚。愿你们成家的幸福，工作的有成。</p><p>从上学到工作，过渡的很平稳。工作中有一些挑战，但总之是还应对的来。可没有什么出众的地方，我不想过的太平凡，愿有一技之长，独挡一面。我常说自己：菜啊、傻啊、什么的，我确实不想用这些来词来逃避问题，我想尽快的甩掉这些。我也愿自己可以更有底气和勇气说出，现在不能说出的话，愿更决绝的对大事小情做决定。</p><p>年末随着公司搬家，自己也搬了。炒菜做饭成了每天另一部分。也许才是真正生活二字的开始。</p><p>突然想到学长提的一个问题：你们有谁把技术当做以后安身立命的本事？<br>现在对于我来说，这问题的答案比任何时候都更加清晰。</p><p>最后，还是怀揣着 2014 末的敬请期待，让一切皆有可能，开始 2017。</p><p>—— 送给 木林木丶</p><p>– EOF –</p>]]></content>
      
      
      <categories>
          
          <category> review </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Git 图形化客户端 Git Cola</title>
      <link href="/2016/11/25/git-client-gui-in-ubuntu-git-cola/"/>
      <url>/2016/11/25/git-client-gui-in-ubuntu-git-cola/</url>
      
        <content type="html"><![CDATA[<p>Git Cola 是一个 Ubuntu 下的 Git 图形化客户端。在不熟悉 Git 命令时和在进行代码比对的情况下，可以很方便协助完成操作。</p><span id="more"></span><h2 id="Install-Git-Cola"><a href="#Install-Git-Cola" class="headerlink" title="Install Git Cola"></a>Install Git Cola</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git-core git-cola</span><br></pre></td></tr></table></figure><h2 id="使用-Git-Cola"><a href="#使用-Git-Cola" class="headerlink" title="使用 Git Cola"></a>使用 Git Cola</h2><p>在桌面搜索栏中输入：<code>cola</code>，点打开软件。点击 <code>Open..</code> 选择 <code>git</code> 项目路径</p><p>可以在 <code>Branch</code>-&gt; <code>Visualize Current Branch</code> 查看当前的 <code>branch</code>。目前的 branch 会以 <code>gitk</code> 视图显示</p><p><code>Status</code> 视图中显示文件的状态，<code>Diff</code> 可方便查看文件的变动</p><h2 id="一点经验"><a href="#一点经验" class="headerlink" title="一点经验"></a>一点经验</h2><p>当发现 <code>Status</code> 面板中的内容没有刷新时，可以 <code>ctrl + r</code> 进行刷新</p><p>下面的这篇文章介绍的很好，就不再累述了：</p><ul><li><a href="http://graphicalgit.blogspot.com/2012/07/git-cola-git-gui-1.html">圖解 Git 版本控制: Cola Git GUI (1)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下使用 UFW 管理防火墙服务</title>
      <link href="/2016/10/10/manage-iptables-using-ufw-in-ubuntu/"/>
      <url>/2016/10/10/manage-iptables-using-ufw-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>UFW (Uncomplicated Firewall) 作为 <code>iptables</code> 的前端应用，给用户提供了简单的接口界面。使用着不需要去记非常复杂的 <code>iptables</code> 语法。UFW 也使用了 简单英语 作为它的参数。像 allow、deny、reset 就是他们当中的一部分。UFW 绝对是那些想要快速、简单的就建立自己的防火墙，而且还很安全的用户的最佳替代品之一。</p><h2 id="检查系统上是否已经安装-UFW"><a href="#检查系统上是否已经安装-UFW" class="headerlink" title="检查系统上是否已经安装 UFW"></a>检查系统上是否已经安装 UFW</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --get-selections | grep ufw</span><br></pre></td></tr></table></figure><h2 id="安装-UFW"><a href="#安装-UFW" class="headerlink" title="安装 UFW"></a>安装 UFW</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="UFW-常用命令"><a href="#UFW-常用命令" class="headerlink" title="UFW 常用命令"></a>UFW 常用命令</h2><h3 id="查看-UFW-状态"><a href="#查看-UFW-状态" class="headerlink" title="查看 UFW 状态"></a>查看 UFW 状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h3 id="see-configured-rules-even-when-inactive"><a href="#see-configured-rules-even-when-inactive" class="headerlink" title="see configured rules even when inactive"></a>see configured rules even when inactive</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw show added</span><br></pre></td></tr></table></figure><h3 id="启用-x2F-禁用-UFW"><a href="#启用-x2F-禁用-UFW" class="headerlink" title="启用&#x2F;禁用 UFW"></a>启用&#x2F;禁用 UFW</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line"><span class="comment"># 禁用</span></span><br><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p>先添加 <code>ufw allow ssh</code>，防止墙掉自己</p><h3 id="查看-UFW-规则"><a href="#查看-UFW-规则" class="headerlink" title="查看 UFW 规则"></a>查看 UFW 规则</h3><p>需要先启用 UFW</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure><p>在每条规则上加个序号数字</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status numbered</span><br></pre></td></tr></table></figure><h3 id="添加-UFW-允许规则"><a href="#添加-UFW-允许规则" class="headerlink" title="添加 UFW 允许规则"></a>添加 UFW 允许规则</h3><p>允许特定服务程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br></pre></td></tr></table></figure><p>允许特定服务程序特定协议</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow ssh/tcp</span><br></pre></td></tr></table></figure><p>允许特定端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 8080</span><br></pre></td></tr></table></figure><p>允许特定端口特定协议</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 8080/tcp</span><br></pre></td></tr></table></figure><p>允许范围端口特定协议，必须指明协议 udp 或 tcp</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 2290:2300/tcp</span><br></pre></td></tr></table></figure><p>允许特定 IP</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 192.168.0.104</span><br></pre></td></tr></table></figure><p>允许范围 IP</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 192.168.0.0/24</span><br></pre></td></tr></table></figure><ul><li><a href="https://askubuntu.com/questions/646424/ufw-allow-range-of-ip-addresees">networking - UFW - allow range of IP addresees? - Ask Ubuntu</a></li><li><a href="https://en.wikipedia.org/wiki/IPv4_subnetting_reference">IPv4 subnetting reference - Wikipedia</a></li></ul><p>组合参数</p><p>可以把 IP 地址、协议和端口这些组合在一起用。创建一条规则，限制仅仅来自于 192.168.0.104 的 IP ，而且只能使用 tcp 协议和通过 22 端口来访问本地资源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow from 192.168.0.104 proto tcp to any port 22</span><br></pre></td></tr></table></figure><h3 id="添加-UFW-拒绝规则"><a href="#添加-UFW-拒绝规则" class="headerlink" title="添加 UFW 拒绝规则"></a>添加 UFW 拒绝规则</h3><p>创建拒绝规则的命令和允许的规则类似，仅需要把 <code>allow</code> 参数换成 <code>deny</code> 参数就可以。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw deny ftp</span><br></pre></td></tr></table></figure><h3 id="删除-UFW-规则"><a href="#删除-UFW-规则" class="headerlink" title="删除 UFW 规则"></a>删除 UFW 规则</h3><p>方法一：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw delete allow ftp</span><br></pre></td></tr></table></figure><p>方法二：按行号删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示行号</span></span><br><span class="line">sudo ufw status numbered</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行号删除</span></span><br><span class="line">sudo ufw delete 1</span><br></pre></td></tr></table></figure><h3 id="重置-UFW-所有规则"><a href="#重置-UFW-所有规则" class="headerlink" title="重置 UFW 所有规则"></a>重置 UFW 所有规则</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw reset</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://linux.cn/article-2489-1.html">Debian&#x2F;Ubuntu 系统中安装和配置 UFW－简单的防火墙-技术 ◆ 学习|Linux.中国-开源社区</a></li><li><a href="https://askubuntu.com/questions/30781/see-configured-rules-even-when-inactive">See configured rules even when inactive</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Core Java】读书笔记 Part 2</title>
      <link href="/2016/09/23/core-java-reading-notes-part2/"/>
      <url>/2016/09/23/core-java-reading-notes-part2/</url>
      
        <content type="html"><![CDATA[<p>本文总结的是书中的：第 5 章 继承</p><p>前几章的总结在：<a href="/2016/05/06/core-java-reading-notes/">ZYF.IM-【Core Java】读书笔记 Part1</a></p><span id="more"></span><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5 继承"></a>5 继承</h2><h3 id="5-1-类、超类和子类"><a href="#5-1-类、超类和子类" class="headerlink" title="5.1 类、超类和子类"></a>5.1 类、超类和子类</h3><p>1、有些人认为 <code>super</code> 与 <code>this</code> 引用是类似的概念，实际上，这样比较并不太恰当。这是因为 <code>super</code> 不是一个对象的引用，不能将 <code>super</code> 赋予另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。<br>2、使用 <code>super</code> 或 <code>this</code> 调用构造器的语句必须时子类构造器的第一条语句。也就是说 <code>super</code> 和 <code>this</code> 不能同时出现在一个构造器中。<br>3、<code>this</code> 关键字。</p><ul><li>引用隐式参数</li><li>调用该类其他的构造器</li></ul><p>4、<code>super</code> 关键字</p><ul><li>调用超类的方法</li><li>调用超类的构造器</li></ul><p>5、调用构造器的语句只能作为另一个构造器的第一条语句出现。<br>6、一个对象变量可以指示多种实际类型的现象被称为多态。在运行时能够自动的选择则调用哪个方法的现象称为动态绑定。<br>7、<code>Manager[] managers = new Manager[10];</code> 将它转换成 <code>Employee[]</code> 数组是完全合法的：<br><code>Employee[] staff = managers;// OK</code><br>毕竟如果<code>manager[i]</code>是一个 Manager，也一定是一个 Employee，然而，实际上，将会发生一些令人惊讶的事情。要切记 managers 和 staff 引用的时同一个数组。现在请看：<br><code>staff[0] = new Employee(&quot;Harry Hacker&quot;, ..);</code><br>编译器竟然接纳了这个赋值操作。<code>staff[0]</code>与<code>manager[0]</code>引用的是同一个对象，似乎我们把一个普通雇员擅自归入了经理行列中了。这时一个种很忌讳发生的情形，当调用<code>managers[0].setBonus(1000)</code>的时候，将会导致调用一个不存在的实例域，今儿搅乱相邻存储空间的内容。<br>为了确保不发生这类错误，所有数组都要牢记创建它们的元素类型，并负责监督仅将类型兼容的引用存储到数组中。</p><p>8、调用对象方法的执行过程</p><ul><li>编译器查看对象的声明类型和方法名。假设调用 x.f(param)，编译器将会一一列举所有 C 类中名为 f 的方法和其他超类中访问属性为 public 且名为 f 的方法（超类的私有方法不可访问）。</li><li>编译器将查看调用方法时提供的参数类型。如果在所有名为 f 的方法中存在一个与提供的参数类型完全匹配，就选择这个方法。这个工程称为重载解析。</li><li>Tips：返回类型不是签名方法的一部分，因此，在覆盖方法时，一定要保证返回类型的兼容性。允许子类将覆盖方法的返回类型定义为原返回类型的子类型。</li><li>如果是 private 方法、static 方法、final 方法或者构造器，那么编译器将可以准确的知道应该调用哪个方法，我们将这种调用方式称为静态绑定。与此对应，调用的方法依赖于隐式参数的实际类型，并且在运行时实现动态绑定。</li></ul><p>9、动态绑定与静态绑定区别对比<br>9.1）静态绑定发生在编译时期，动态绑定发生在运行时<br>9.2）使用 private 或 static 或 final 修饰的变量或者方法，使用静态绑定。而虚方法（可以被子类重写的方法）则会根据运行时的对象进行动态绑定。<br>9.3）静态绑定使用类信息来完成，而动态绑定则需要使用对象信息来完成。<br>9.4）重载(Overload)的方法使用静态绑定完成，而重写(Override)的方法则使用动态绑定完成。</p><p>10、当程序运行，并且采用动态绑定调用方法时，虚拟机一定调用与 x 所引用对象的实际类型最合适的那个类的方法。假设 x 的实际类型是 D，它是 C 类的子类。如果 D 类定义了方法 f(String)，就直接调用它；否则，将在 D 类的超类中寻找 f(String)，以此类推。</p><p>11、每次调用方法都要进行搜索，时间开销相当大。因此，虚拟机预先为每个类创建了一个方法表，其中列出了所有方法的签名和实际调用的方法。这样一来，在真正调用方法的时候，虚拟机仅查找这个表就行了。</p><h3 id="5-1-类、超类和子类-1"><a href="#5-1-类、超类和子类-1" class="headerlink" title="5.1 类、超类和子类"></a>5.1 类、超类和子类</h3><p>1、4 个访问修饰符</p><ul><li>仅对本类可 - private</li><li>对所有类可见 - publice</li><li>对本包和所有子类可见 - protected</li><li>对本包可见 - 默认，不需要修饰符</li></ul><p>2、编写一个完美的 equals 方法的建议<br>2.1）参数命名为 otherObject，稍后需要将它转换成另一个叫做 other 的变量<br>2.2）检测 this 与 otherObject 是否引用同一个对象：<br><code>if(this == otherObject) return true;</code><br>这条语句只是一个优化。实际上，这是一种经常采用的形式。因为计算这个等试要比一个一个的比较类中的域付出的代价小得多。<br>2.3）检测 otherObject 是否为 null，如果为 null，返回 false。这项检测时很有必要的。<br><code>if(otherObject == null) return false;</code><br>2.4）比较 this 与 otherObject 是否属于同一个类。如果 equals 的语义在每一个子类中有所改变（子类能够拥有自己的相等概念），就使用 getClass 检测：<br><code>if(getClass() != otherObject.getClass()) return false;</code><br>如果所有的子类都拥有统一的语义（由超类决定相等的概念）就使用 instanceof 检测：<br><code>if(!(otherObject instanceof ClassName)) return false;</code><br>2.5）将 otherObject 转换为相应的类类型变量<br><code>ClassName other = (ClassName)otherObject;</code><br>2.6）现在开始对所有需要比较的域进行比较了。使用 &#x3D;&#x3D; 比较基本类型域，使用 equals 比较对象域。如果所有的域都匹配，就返回 true；否则返回 false<br>2.7）完整的例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object otherObject)</span> &#123;</span><br><span class="line"><span class="comment">// a quick test to see if the objects are identical</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span> == otherObject) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// must return false if the explicit parameter is null</span></span><br><span class="line"><span class="keyword">if</span>(otherObject == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the classes don`t match, they can`t be equal</span></span><br><span class="line"><span class="keyword">if</span>(getClass() != otherObject.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// now we know otherObject is a non-null values</span></span><br><span class="line"><span class="type">Emloyee</span> <span class="variable">other</span> <span class="operator">=</span> (Emloyee)otherObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test whether the fields have identical values</span></span><br><span class="line"><span class="keyword">return</span> name.equals(other.name) &amp;&amp; salary == other.salary</span><br><span class="line">&amp;&amp; hrieDay.equals(other.hirDay);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://droidyue.com/blog/2014/12/28/static-biding-and-dynamic-binding-in-java/">技术小黑屋-Java 中的静态绑定和动态绑定</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Shell 解题集合</title>
      <link href="/2016/09/19/leetcode-shell-solutions/"/>
      <url>/2016/09/19/leetcode-shell-solutions/</url>
      
        <content type="html"><![CDATA[<p>LeetCode Shell 的试题多为文本操作，<a href="https://leetcode.com/problems/tenth-line/">195. Tenth Line</a>、<a href="https://leetcode.com/problems/valid-phone-numbers/">193. Valid Phone Numbers</a>、<a href="https://leetcode.com/problems/word-frequency/">192. Word Frequency</a>、<a href="https://leetcode.com/problems/transpose-file/">194. Transpose File</a> 暂时只有 4 道题，就整合在这一起了</p><p>Shell 中文本处理的事情基本 <code>awk</code> <code>sed</code> <code>grep</code> <code>sort</code> <code>uniq</code> <code>tail</code> <code>head</code> 几个命令组合组合就搞定了</p><span id="more"></span><h2 id="195-Tenth-Line"><a href="#195-Tenth-Line" class="headerlink" title="195. Tenth Line"></a><a href="https://leetcode.com/problems/tenth-line/">195. Tenth Line</a></h2><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>How would you print just the 10th line of a file?<br>For example, assume that file.txt has the following content:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Line 1</span><br><span class="line">Line 2</span><br><span class="line">Line 3</span><br><span class="line">Line 4</span><br><span class="line">Line 5</span><br><span class="line">Line 6</span><br><span class="line">Line 7</span><br><span class="line">Line 8</span><br><span class="line">Line 9</span><br><span class="line">Line 10</span><br></pre></td></tr></table></figure><p>Your script should output the tenth line, which is:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Line 10</span><br></pre></td></tr></table></figure><p>打印出文本文件中第 10 行的内容。</p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>  file.txt | <span class="built_in">tail</span> -n +10 | <span class="built_in">head</span> -n 1</span><br></pre></td></tr></table></figure><p>这是学习了：<a href="http://www.cnblogs.com/xianghang123/archive/2011/08/03/2125977.html">linux 如何显示一个文件的某几行(中间几行) - 香格里拉(^o^)&#x2F;</a></p><h3 id="别人的解法"><a href="#别人的解法" class="headerlink" title="别人的解法"></a>别人的解法</h3><p>方法一：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;NR==10&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># awk的默认动作就是打印$0，所以NR==10后面可以不用加&#123;print $0&#125;</span></span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -n <span class="string">&#x27;10p&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># 如果不够10行，则什么也不打印</span></span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">line=$(<span class="built_in">cat</span> file.txt | <span class="built_in">wc</span> -l)     <span class="comment"># 千万注意，等号前后一定不要有空格</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$line</span>&quot;</span> -ge 10 ] ; <span class="keyword">then</span>     <span class="comment"># $line的双引号也可以不用加</span></span><br><span class="line">  <span class="built_in">cat</span> file.txt | <span class="built_in">head</span> -n 10 | <span class="built_in">tail</span> -n 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>Reference: <a href="http://blog.csdn.net/sole_cc/article/details/44977821">leetcode-195 Tenth Line - 2&gt; &#x2F;dev&#x2F;null</a></p><h2 id="193-Valid-Phone-Numbers"><a href="#193-Valid-Phone-Numbers" class="headerlink" title="193. Valid Phone Numbers"></a><a href="https://leetcode.com/problems/valid-phone-numbers/">193. Valid Phone Numbers</a></h2><h3 id="大体意思-1"><a href="#大体意思-1" class="headerlink" title="大体意思"></a>大体意思</h3><p>Given a text file <code>file.txt</code> that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.<br>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)<br>You may also assume each line in the text file must not contain leading or trailing white spaces.</p><p>For example, assume that <code>file.txt</code> has the following content:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">123 456 7890</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></table></figure><p>Your script should output the following valid phone numbers:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">987-123-4567</span><br><span class="line">(123) 456-7890</span><br></pre></td></tr></table></figure><p>匹配有效的电话号码</p><h3 id="自己的解法-1"><a href="#自己的解法-1" class="headerlink" title="自己的解法"></a>自己的解法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> file.txt | grep <span class="string">&#x27;^[0-9]\&#123;3\&#125;-[0-9]\&#123;3\&#125;-[0-9]\&#123;4\&#125;$\|^([0-9]\&#123;3\&#125;) [0-9]\&#123;3\&#125;-[0-9]\&#123;4\&#125;$&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="别人的解法-1"><a href="#别人的解法-1" class="headerlink" title="别人的解法"></a>别人的解法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -P <span class="string">&#x27;^(\(\d&#123;3&#125;\)|\d&#123;3&#125;-)\d&#123;3&#125;-\d&#123;4&#125;$&#x27;</span> file.txt</span><br></pre></td></tr></table></figure><p>Reference: <a href="https://ruixublog.wordpress.com/2015/05/13/leetcode-193-valid-phone-numbers/">LeetCode 193: Valid Phone Numbers &amp;#8211; Revo</a></p><h2 id="192-Word-Frequency"><a href="#192-Word-Frequency" class="headerlink" title="192. Word Frequency"></a><a href="https://leetcode.com/problems/word-frequency/">192. Word Frequency</a></h2><h3 id="大体意思-2"><a href="#大体意思-2" class="headerlink" title="大体意思"></a>大体意思</h3><p>Write a bash script to calculate the frequency of each word in a text file <code>words.txt</code>.</p><p>For simplicity sake, you may assume:</p><p><code>words.txt</code> contains only lowercase characters and space <code>&#39; &#39;</code> characters.<br>Each word must consist of lowercase characters only.<br>Words are separated by one or more whitespace characters.<br>For example, assume that <code>words.txt</code> has the following content:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">the day is sunny the the</span><br><span class="line">the sunny is is</span><br></pre></td></tr></table></figure><p>Your script should output the following, sorted by descending frequency:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">the 4</span><br><span class="line">is 3</span><br><span class="line">sunny 2</span><br><span class="line">day 1</span><br></pre></td></tr></table></figure><p>Note:<br>Don’t worry about handling ties, it is guaranteed that each word’s frequency count is unique.</p><p>统计单词出现的频次，然后倒序排列</p><h3 id="别人的解法-2"><a href="#别人的解法-2" class="headerlink" title="别人的解法"></a>别人的解法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;i=1;while(i&lt;=NF)&#123;print $i;i++&#125;&#125;&#x27;</span> words.txt  | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c  | <span class="built_in">sort</span> -k1nr  | awk <span class="string">&#x27;&#123;print $2 &quot; &quot; $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>1、利用 awk 默认一行一条记录，默认以空格划分每条记录，NF 为划分的总块数先打印出所有单词<br>2、排序 + 统计 + 消除重复<br>3、输出</p><p>Reference: <a href="http://blog.csdn.net/wangxiaobupt/article/details/45201817">LeetCode 192 Word Frequency - wangxiaobupt 的专栏</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; for (i=1; i&lt;=NF; i++) &#123; ++S[$i]; &#125; &#125;</span></span><br><span class="line"><span class="string">END &#123; for (i in S) &#123; print i, S[i] &#125; &#125;</span></span><br><span class="line"><span class="string">&#x27;</span> words.txt | <span class="built_in">sort</span> -nr -k 2</span><br></pre></td></tr></table></figure><p>Reference: <a href="https://github.com/illuz/leetcode/tree/master/solutions/192.Word_Frequency">leetcode&#x2F;solutions&#x2F;192.Word_Frequency at master · illuz&#x2F;leetcode</a></p><h2 id="194-Transpose-File"><a href="#194-Transpose-File" class="headerlink" title="194. Transpose File"></a><a href="https://leetcode.com/problems/transpose-file/">194. Transpose File</a></h2><h3 id="大体意思-3"><a href="#大体意思-3" class="headerlink" title="大体意思"></a>大体意思</h3><p>Given a text file <code>file.txt</code>, transpose its content.</p><p>You may assume that each row has the same number of columns and each field is separated by the <code>&#39; &#39;</code> character.</p><p>For example, if <code>file.txt</code> has the following content:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name age</span><br><span class="line">alice 21</span><br><span class="line">ryan 30</span><br></pre></td></tr></table></figure><p>Output the following:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name alice ryan</span><br><span class="line">age 21 30</span><br></pre></td></tr></table></figure><h3 id="别人的解法-3"><a href="#别人的解法-3" class="headerlink" title="别人的解法"></a>别人的解法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk &#x27;</span><br><span class="line">&#123;</span><br><span class="line">    for (i = 1; i &lt;= NF; i++) &#123;</span><br><span class="line">        if(NR == 1) &#123;</span><br><span class="line">            s[i] = $i;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            s[i] = s[i] &quot; &quot; $i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    for (i = 1; s[i] != &quot;&quot;; i++) &#123;</span><br><span class="line">        print s[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27; file.txt</span><br></pre></td></tr></table></figure><p>Reference: <a href="https://github.com/illuz/leetcode/tree/master/solutions/194.Transpose_File">leetcode&#x2F;solutions&#x2F;194.Transpose_File at master · illuz&#x2F;leetcode</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Shell 中文本处理的事情基本 <code>awk</code> <code>sed</code> <code>grep</code> <code>sort</code> <code>uniq</code> <code>tail</code> <code>head</code> 几个命令组合组合就搞定了，各命令的常用方法之后总结</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下使用 sysv-rc-conf 管理开机启动服务</title>
      <link href="/2016/09/19/manage-startup-program-using-sysv-rc-conf-in-ubuntu/"/>
      <url>/2016/09/19/manage-startup-program-using-sysv-rc-conf-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<p><code>sysv-rc-conf</code> gives an easy to use interface for managing “&#x2F;etc&#x2F;rc{runlevel}.d&#x2F;“ symlinks. The interface comes in two different flavors, one that simply allows turning services on or off and another that allows for more fine tuned management of the symlinks.</p><h2 id="安装-sysv-rc-conf"><a href="#安装-sysv-rc-conf" class="headerlink" title="安装 sysv-rc-conf"></a>安装 sysv-rc-conf</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install sysv-rc-conf</span><br></pre></td></tr></table></figure><h2 id="使用-sysv-rc-conf"><a href="#使用-sysv-rc-conf" class="headerlink" title="使用 sysv-rc-conf"></a>使用 sysv-rc-conf</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysv-rc-conf</span><br></pre></td></tr></table></figure><p>操作界面十分简洁，你可以用鼠标点击，也可以用键盘方向键定位，用空格键选择，用 <code>Ctrl+n</code> 翻下一页，用 <code>Ctrl+p</code> 翻上一页，用 <code>q</code> 退出。</p><span id="more"></span><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h3 id="Ubuntu-运行级别"><a href="#Ubuntu-运行级别" class="headerlink" title="Ubuntu 运行级别"></a>Ubuntu 运行级别</h3><p>Linux 系统任何时候都运行在一个指定的运行级上，并且不同的运行级的程序和服务都不同，所要完成的工作和要达到的目的都不同，系统可以在这些运行级之间进行切换，以完成不同的工作。</p><p>Ubuntu 的系统运行级别：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 停机</span><br><span class="line">1 单用户，Does not configure network interfaces, start daemons, or allow non-root logins</span><br><span class="line">2 多用户，无网络连接 Does not configure network interfaces or start daemons</span><br><span class="line">3 多用户，启动网络连接 Starts the system normally.</span><br><span class="line">4 用户自定义</span><br><span class="line">5 多用户带图形界面</span><br><span class="line">6 重启</span><br></pre></td></tr></table></figure><p>查看当前运行级别，执行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runlevel</span><br></pre></td></tr></table></figure><p>runlevel 显示上次的运行级别和当前的运行级别，“N”表示没有上次的运行级别。</p><p>切换运行级别，执行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int [0123456Ss]</span><br></pre></td></tr></table></figure><p>即在 init 命令后跟一个参数，此参数是要切换到的运行级的运行级代号，如：用 init 0 命令关机；用 init 6 命令重新启动。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /etc/rc*</span><br></pre></td></tr></table></figure><p>对于以 K 开头的文件，系统将终止对应的服务；<br>对于以 S 开头的文件，系统将启动对应的服务；</p><h3 id="Linux-系统主要启动步骤"><a href="#Linux-系统主要启动步骤" class="headerlink" title="Linux 系统主要启动步骤"></a>Linux 系统主要启动步骤</h3><p>1、读取 MBR 的信息，启动 Boot Manager</p><p>Windows 使用 NTLDR 作为 Boot Manager，如果您的系统中安装多个版本的 Windows，您就需要在 NTLDR 中选择您要进入的系统。Linux 通常使用功能强大，配置灵活的 GRUB 作为 Boot Manager。</p><p>2、加载系统内核，启动 init 进程</p><p>init 进程是 Linux 的根进程，所有的系统进程都是它的子进程。</p><p>3、init 进程读取 <code>/etc/inittab</code> 文件中的信息，并进入预设的运行级别，按顺序运行该运行级别对应文件夹下的脚本。脚本通常以 start 参数启动，并指向一个系统中的程序。通常情况下，<code>/etc/rcS.d/</code> 目录下的启动脚本首先被执行，然后是 <code>/etc/rcN.d/</code> 目录。例如您设定的运行级别为 <code>3</code>，那么它对应的启动目录为 <code>/etc/rc3.d/</code>。</p><p>4、根据 <code>/etc/rcS.d/</code> 文件夹中对应的脚本启动 Xwindow 服务器 xorg Xwindow 为 Linux 下的图形用户界面系统。</p><p>5、启动登录管理器，等待用户登录 Ubuntu 系统默认使用 GDM 作为登录管理器，您在登录管理器界面中输入用户名和密码后，便可以登录系统。</p><h3 id="常见的系统服务"><a href="#常见的系统服务" class="headerlink" title="常见的系统服务"></a>常见的系统服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acpi-support 高级电源管理支持</span><br><span class="line">acpid acpi 守护程序。这两个用于电源管理，非常重要</span><br><span class="line">alsa 声音子系统</span><br><span class="line">alsa-utils</span><br><span class="line">anacron cron 的子系统，将系统关闭期间的计划任务，在下一次系统运行时执行</span><br><span class="line">apmd acpi 的扩展</span><br><span class="line">atd 类似于 cron 的任务调度系统。建议关闭</span><br><span class="line">binfmt-support 核心支持其他二进制的文件格式。建议开启</span><br><span class="line">bluez-utiles 蓝牙设备支持</span><br><span class="line">bootlogd 启动日志。开启它</span><br><span class="line">cron 任务调度系统，建议开启</span><br><span class="line">cupsys 打印机子系统</span><br><span class="line">dbus 消息总线系统(message bus system)。非常重要</span><br><span class="line">dns-clean 使用拨号连接时，清除 dns 信息</span><br><span class="line">evms 企业卷管理系统(Enterprise Volumn Management system)</span><br><span class="line">fetchmail 邮件用户代理守护进程，用于收取邮件</span><br><span class="line">gdm gnome 登录和桌面管理器。</span><br><span class="line">gdomap</span><br><span class="line">gpm 终端中的鼠标支持</span><br><span class="line">halt 别动它</span><br><span class="line">hdparm 调整硬盘的脚本，配置文件为 /etc/hdparm.conf</span><br><span class="line">hibernate 系统休眠</span><br><span class="line">hotkey-setup 笔记本功能键支持。支持类型包括: HP， Acer， ASUS， Sony，Dell， 和 IBM</span><br><span class="line">hotplug and hotplug-net 即插即用支持，比较复杂，建议不要动它</span><br><span class="line">hplip HP 打印机和图形子系统</span><br><span class="line">ifrename 网络接口重命名脚本。如果您有十块网卡，您应该开启它</span><br><span class="line">inetd 在文件 /etc/inetd.conf 中，注释掉所有你不需要的服务。如果该文件不包含任何服务，那关闭它是很安全的</span><br><span class="line">klogd 重要</span><br><span class="line">linux-restricted-modules-common 受限模块支持</span><br><span class="line">/lib/linux-restricted-modules/ 文件夹中的模块为受限模块。例如某些驱动程序，如果您没有使用受限模块，就不需要开启它</span><br><span class="line">lvm 逻辑卷管理系统支持</span><br><span class="line">makedev 创建设备文件，非常重要</span><br><span class="line">mdamd 磁盘阵列</span><br><span class="line">module-init-tools 从/etc/modules 加载扩展模块，建议开启</span><br><span class="line">networking 网络支持。按 /etc/network/interfaces 文件预设激活网络，非常重要</span><br><span class="line">ntpdate 时间同步服务，建议关闭</span><br><span class="line">pcmcia pcmcia 设备支持</span><br><span class="line">powernowd 移动 CPU 节能支持</span><br><span class="line">ppp and ppp-dns 拨号连接</span><br><span class="line">readahead 预加载库文件</span><br><span class="line">reboot 别动它</span><br><span class="line">resolvconf 自动配置 DNS</span><br><span class="line">rmnologin 清除 nologin</span><br><span class="line">rsync rsync 守护程序</span><br><span class="line">sendsigs 在重启和关机期间发送信号</span><br><span class="line">single 激活单用户模式</span><br><span class="line">ssh ssh 守护程序。建议开启</span><br><span class="line">stop-bootlogd 在 2，3，4，5 运行级别中停止 bootlogd 服务</span><br><span class="line">sudo 检查 sudo 状态。重要</span><br><span class="line">sysklogd 系统日志</span><br><span class="line">udev &amp; udev-mab 用户空间 dev 文件系统(userspace dev filesystem)。重要</span><br><span class="line">umountfs 卸载文件系统</span><br><span class="line">urandom 随机数生成器</span><br><span class="line">usplash 开机画面支持</span><br><span class="line">vbesave 显卡 BIOS 配置工具。保存显卡的状态</span><br><span class="line">xorg-common 设置 X 服务 ICE socket。</span><br><span class="line">adjtimex 调整核心时钟的工具</span><br><span class="line">dirmngr 证书列表管理工具，和 gnupg 一起工作。</span><br><span class="line">hwtools irqs 优化工具</span><br><span class="line">libpam-devperm 系统崩溃之后，用于修理设备文件许可的守护程序。</span><br><span class="line">lm-sensors 板载传感器支持</span><br><span class="line">mdadm-raid 磁盘陈列管理器</span><br><span class="line">screen-cleanup 清除开机屏幕的脚本</span><br><span class="line">xinetd 管理其他守护进程的一个 inetd 超级守护程序</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.binghe.org/2009/12/manage-services-using-sysv-rc-conf-in-ubuntu/">Ubuntu 下使用 sysv-rc-conf 管理服务 » 冰河的博客</a></li><li><a href="http://blog.csdn.net/gatieme/article/details/45251389">Ubuntu 下使用 sysv-rc-conf 管理服务 - AderStep</a></li><li><a href="http://wiki.ubuntu.org.cn/%E5%90%AF%E5%8A%A8">启动 - Ubuntu 中文</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse Java 注释模板</title>
      <link href="/2016/09/18/eclipse-java-comments-templates/"/>
      <url>/2016/09/18/eclipse-java-comments-templates/</url>
      
        <content type="html"><![CDATA[<p>自己总结的比较规范的 Eclipse Java 注释模板</p><h2 id="Eclipse-Java-注释模板设置"><a href="#Eclipse-Java-注释模板设置" class="headerlink" title="Eclipse Java 注释模板设置"></a>Eclipse Java 注释模板设置</h2><p>Window -&gt; Preference -&gt; Java -&gt; CodeStyle -&gt; Code Template 然后展开 Comments 节点就是所有需设置注释的元素</p><span id="more"></span><h2 id="各项注释模板"><a href="#各项注释模板" class="headerlink" title="各项注释模板"></a>各项注释模板</h2><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright © $&#123;year&#125;. All rights reserved.</span><br><span class="line"> *</span><br><span class="line"> * @Title: $&#123;file_name&#125;</span><br><span class="line"> * @Prject: $&#123;project_name&#125;</span><br><span class="line"> * @Package: $&#123;package_name&#125;</span><br><span class="line"> * @Description: $&#123;todo&#125;</span><br><span class="line"> * @author: $&#123;user&#125;</span><br><span class="line"> * @date: $&#123;date&#125; $&#123;time&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @ClassName: $&#123;type_name&#125;</span><br><span class="line"> * @Description: $&#123;todo&#125;</span><br><span class="line"> * @author: $&#123;user&#125;</span><br><span class="line"> * @date: $&#123;date&#125; $&#123;time&#125;</span><br><span class="line"> * $&#123;tags&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @fieldName: $&#123;field&#125;</span><br><span class="line"> * @fieldType: $&#123;field_type&#125;</span><br><span class="line"> * @Description: $&#123;todo&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Title:$&#123;enclosing_type&#125;</span><br><span class="line"> * @Description:$&#123;todo&#125;</span><br><span class="line"> * $&#123;tags&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> * @Title: $&#123;enclosing_method&#125;</span><br><span class="line"> * @Description: $&#123;todo&#125;</span><br><span class="line"> * @author: $&#123;user&#125;</span><br><span class="line"> * $&#123;tags&#125;</span><br><span class="line"> * @return: $&#123;return_type&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="Overriding-methods"><a href="#Overriding-methods" class="headerlink" title="Overriding methods"></a>Overriding methods</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* (no Javadoc)</span><br><span class="line"> * &lt;p&gt;Title: $&#123;enclosing_method&#125;&lt;/p&gt;</span><br><span class="line"> * &lt;p&gt;Description: &lt;/p&gt;</span><br><span class="line"> * $&#123;tags&#125;</span><br><span class="line"> * $&#123;see_to_overridden&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h2 id="定制-user-显示内容"><a href="#定制-user-显示内容" class="headerlink" title="定制 ${user} 显示内容"></a>定制 ${user} 显示内容</h2><p>找到你的 Eclipse 安装路径，打开 <code>eclipse.ini</code> 文件，在 -vmargs 下面添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Duser.name=姓名 + 空格 + 邮箱地址</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL LIMIT 查询优化</title>
      <link href="/2016/09/18/mysql-limit-query-optimization/"/>
      <url>/2016/09/18/mysql-limit-query-optimization/</url>
      
        <content type="html"><![CDATA[<p>最近常在 SQL 中使用到 <code>LIMIT ? ?</code>，在执行 <code>LIMIT 0, 1000</code> 与 <code>LIMIT 100000, 1000</code> 时，查询速度明显有很大的区别，而且随着 LIMIT 的偏移量的增加，查询速度越来越慢。是否有办法对 SQL 中 LIMIT 查询进行优化呢？</p><span id="more"></span><h2 id="LIMIT-速度慢的原因"><a href="#LIMIT-速度慢的原因" class="headerlink" title="LIMIT 速度慢的原因"></a>LIMIT 速度慢的原因</h2><p>LIMIT 100000, 1000 的意思扫描满足条件的 101000 行，扔掉前面的 100000 行，返回最后的 1000 行，问题就在这里。</p><h2 id="LIMIT-优化思路"><a href="#LIMIT-优化思路" class="headerlink" title="LIMIT 优化思路"></a>LIMIT 优化思路</h2><p>1、尽可能从索引中直接获取数据，避免或减少直接扫描行数据的频率<br>2、尽可能减少扫描的记录数，也就是先确定起始的范围，再往后取 N 条记录即可</p><h2 id="LIMIT-优化示例"><a href="#LIMIT-优化示例" class="headerlink" title="LIMIT 优化示例"></a>LIMIT 优化示例</h2><h3 id="原始-SQL"><a href="#原始-SQL" class="headerlink" title="原始 SQL"></a>原始 SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 含条件</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `t1` <span class="keyword">WHERE</span> ftype<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span> LIMIT <span class="number">100</span>, <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 不含 WHERE</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `t1` <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span> LIMIT <span class="number">100</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="子查询优化-SQL"><a href="#子查询优化-SQL" class="headerlink" title="子查询优化 SQL"></a>子查询优化 SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 采用子查询的方式优化，在子查询里先从索引获取到最大 id，然后倒序排，再取 10 行结果集</span></span><br><span class="line"><span class="comment">-- 注意这里采用了 2 次倒序排，因此在取 LIMIT 的 start 值时，比原来的值加了 10，即 935510，否则结果将和原来的不一致</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `t1` <span class="keyword">WHERE</span> id <span class="operator">&gt;</span></span><br><span class="line">    ( <span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `t1` <span class="keyword">WHERE</span> ftype<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span> LIMIT <span class="number">935510</span>, <span class="number">1</span>)</span><br><span class="line">  LIMIT <span class="number">10</span>) T</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="INNER-优化-SQL"><a href="#INNER-优化-SQL" class="headerlink" title="INNER 优化 SQL"></a>INNER 优化 SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 采用 INNER JOIN 优化，JOIN 子句里也优先从索引获取 ID 列表，然后直接关联查询获得最终结果，这里不需要加 10</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `t1`</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> ( <span class="keyword">SELECT</span> id <span class="keyword">FROM</span> `t1`</span><br><span class="line">    <span class="keyword">WHERE</span> ftype<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span> LIMIT <span class="number">935500</span>,<span class="number">10</span>) t2</span><br><span class="line">  <span class="keyword">USING</span> (id);</span><br></pre></td></tr></table></figure><p>1、要学着使用 <code>EXPLAIN</code> 对 SQL 进行优化调整<br>2、推荐使用 INNER 优化 SQL<br>3、发现了一个 ubuntu 中监控 MySQL 的 <code>mytop</code> 命令，刚刚安装还没细研究</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mytop</span><br></pre></td></tr></table></figure><p>4、<code>USING (id)</code> 如果两个表的字段名都一样，那么可以用 using(字段名) 来协商条件，效果跟 <code>on a.id = b.id</code> 一样</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://imysql.com/2014/07/26/mysql-optimization-case-paging-optimize.shtml">MySQL 优化案例系列 — 分页优化 | iMySQL</a></li><li><a href="http://www.fienda.com/archives/110">MYSQL 分页 limit 速度太慢优化方法 | Fienda blog</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse Maven 配置使用国内镜像库</title>
      <link href="/2016/09/14/eclipse-maven-settings-mirror-in-china/"/>
      <url>/2016/09/14/eclipse-maven-settings-mirror-in-china/</url>
      
        <content type="html"><![CDATA[<p>Windows 下因为 Eclipse 自带了 Maven 插件，还算够用就懒得安装 Maven 了。在不使用代理的情况下，用 Maven 的下载库不是一般的慢。Eclipse Maven 的插件怎么配置国内的镜像库呢？其实很简单。</p><span id="more"></span><h2 id="创建-settings-xml-文件"><a href="#创建-settings-xml-文件" class="headerlink" title="创建 settings.xml 文件"></a>创建 settings.xml 文件</h2><p>注意两个地方：<br>1、<code>&lt;localRepository&gt;C:\Users\Lenovo\.m2\repository&lt;/localRepository&gt;</code> 本地仓库位置<br>2、镜像配置，选取的是 aliyun 的</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整的 settings.xml 文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they&#x27;re all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It&#x27;s normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.home&#125;/conf/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> | |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--  Change in below line  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:\Users\Lenovo\.m2\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">interactiveMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">interactiveMode</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">offline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">offline</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;crunchify&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;crunchify&lt;/password&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置-Eclipse-Maven-Plugin"><a href="#设置-Eclipse-Maven-Plugin" class="headerlink" title="设置 Eclipse Maven Plugin"></a>设置 Eclipse Maven Plugin</h2><p>Window -&gt; Preferences -&gt; Maven -&gt; User Settings -&gt; User settings Browse 选择上面创建的 <code>setting.xml</code> -&gt; ok</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Database Trips and Users 262</title>
      <link href="/2016/09/14/leetcode-database-trips-and-users-262/"/>
      <url>/2016/09/14/leetcode-database-trips-and-users-262/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/trips-and-users/">262. Trips and Users</a><br>&amp;emsp;&amp;emsp;The <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the <code>Users</code> table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Client_Id <span class="operator">|</span> Driver_Id <span class="operator">|</span> City_Id <span class="operator">|</span>        Status      <span class="operator">|</span>Request_at<span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span>     <span class="number">1</span>     <span class="operator">|</span>    <span class="number">10</span>     <span class="operator">|</span>    <span class="number">1</span>    <span class="operator">|</span>     completed      <span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-01</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span>     <span class="number">2</span>     <span class="operator">|</span>    <span class="number">11</span>     <span class="operator">|</span>    <span class="number">1</span>    <span class="operator">|</span> cancelled_by_driver<span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-01</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span>     <span class="number">3</span>     <span class="operator">|</span>    <span class="number">12</span>     <span class="operator">|</span>    <span class="number">6</span>    <span class="operator">|</span>     completed      <span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-01</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span>     <span class="number">4</span>     <span class="operator">|</span>    <span class="number">13</span>     <span class="operator">|</span>    <span class="number">6</span>    <span class="operator">|</span> cancelled_by_client<span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-01</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span>     <span class="number">1</span>     <span class="operator">|</span>    <span class="number">10</span>     <span class="operator">|</span>    <span class="number">1</span>    <span class="operator">|</span>     completed      <span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-02</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>  <span class="operator">|</span>     <span class="number">2</span>     <span class="operator">|</span>    <span class="number">11</span>     <span class="operator">|</span>    <span class="number">6</span>    <span class="operator">|</span>     completed      <span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-02</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>  <span class="operator">|</span>     <span class="number">3</span>     <span class="operator">|</span>    <span class="number">12</span>     <span class="operator">|</span>    <span class="number">6</span>    <span class="operator">|</span>     completed      <span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-02</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8</span>  <span class="operator">|</span>     <span class="number">2</span>     <span class="operator">|</span>    <span class="number">12</span>     <span class="operator">|</span>    <span class="number">12</span>   <span class="operator">|</span>     completed      <span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-03</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span>  <span class="operator">|</span>     <span class="number">3</span>     <span class="operator">|</span>    <span class="number">10</span>     <span class="operator">|</span>    <span class="number">12</span>   <span class="operator">|</span>     completed      <span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-03</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span>     <span class="number">4</span>     <span class="operator">|</span>    <span class="number">13</span>     <span class="operator">|</span>    <span class="number">12</span>   <span class="operator">|</span> cancelled_by_driver<span class="operator">|</span><span class="number">2013</span><span class="number">-10</span><span class="number">-03</span><span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-----------+---------+--------------------+----------+</span></span><br></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;The <code>Users</code> table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> Users_Id <span class="operator">|</span> Banned <span class="operator">|</span>  Role  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span>     <span class="operator">|</span>   <span class="keyword">No</span>   <span class="operator">|</span> client <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span>     <span class="operator">|</span>   Yes  <span class="operator">|</span> client <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span>     <span class="operator">|</span>   <span class="keyword">No</span>   <span class="operator">|</span> client <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span>     <span class="operator">|</span>   <span class="keyword">No</span>   <span class="operator">|</span> client <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">10</span>    <span class="operator">|</span>   <span class="keyword">No</span>   <span class="operator">|</span> driver <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">11</span>    <span class="operator">|</span>   <span class="keyword">No</span>   <span class="operator">|</span> driver <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">12</span>    <span class="operator">|</span>   <span class="keyword">No</span>   <span class="operator">|</span> driver <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">13</span>    <span class="operator">|</span>   <span class="keyword">No</span>   <span class="operator">|</span> driver <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+--------+</span></span><br></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;Write a SQL query to find the cancellation rate of requests made by unbanned clients between Oct 1, 2013 and Oct 3, 2013. For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">Day</span>    <span class="operator">|</span> Cancellation Rate <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2013</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span>       <span class="number">0.33</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2013</span><span class="number">-10</span><span class="number">-02</span> <span class="operator">|</span>       <span class="number">0.00</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2013</span><span class="number">-10</span><span class="number">-03</span> <span class="operator">|</span>       <span class="number">0.50</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------------+</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>写一个 SQL 语句，查询非禁止客户（Users 表中 Banned 列为 No 的客户）在 2013-10-1 至 2013-10-3 间的单据取消率，结果为四舍五入后的两位有效数字。</p><h3 id="别人的解法"><a href="#别人的解法" class="headerlink" title="别人的解法"></a>别人的解法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Request_at <span class="keyword">DAY</span>,</span><br><span class="line">       ROUND(<span class="built_in">SUM</span>(IF(Status <span class="operator">=</span> <span class="string">&#x27;completed&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>)) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="number">2</span>) <span class="string">&#x27;Cancellation Rate&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span>   Trips t</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Users t1 <span class="keyword">ON</span> t.Client_Id <span class="operator">=</span> t1.Users_Id</span><br><span class="line"><span class="keyword">WHERE</span>  t1.Banned <span class="operator">=</span> <span class="string">&#x27;No&#x27;</span> <span class="keyword">AND</span> Request_at <span class="keyword">BETWEEN</span> <span class="string">&#x27;2013-10-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2013-10-03&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span> t.Request_at;</span><br></pre></td></tr></table></figure><p>这道题主要是统计计算</p><p>笔记：<br>1、函数：ROUND(column_name,decimals)<br><code>column_name</code> 必需。要舍入的字段<br><code>decimals</code> 必需。规定要返回的小数位数</p><p>2、<code>SUM(IF(Status = &#39;completed&#39;, 0, 1))</code><br>统计 SUM 这里也好巧妙</p><p>3、<code>having</code> 与 <code>where</code> 的区别<br>having 字句可以让我们筛选成组后的各种数据，where 字句在聚合前先筛选记录，也就是说作用在 group by 和 having 字句前。而 having 子句在聚合后对组记录进行筛选。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> region, <span class="built_in">SUM</span>(population), <span class="built_in">SUM</span>(area)</span><br><span class="line"><span class="keyword">FROM</span> bbc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> region</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(area) <span class="operator">&gt;</span> <span class="number">1000000</span></span><br></pre></td></tr></table></figure><p>在这里，我们不能用 where 来筛选超过 1000000 的地区，因为表中不存在这样一条记录。相反，having 子句可以让我们筛选成组后的各组数据</p><blockquote><p>Reference:<br><a href="https://my.oschina.net/Tsybius2014/blog/496047">LeetCode：Trips and Users - 出租车接单取消率 - Tsybius2014</a> &gt; <a href="http://www.blogjava.net/Johnny-Ajun/archive/2011/08/28/357445.html">mysql 中的 where 和 having 子句的区别 - Hukin</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Database Department Highest Salary 184</title>
      <link href="/2016/09/12/leetcode-database-department-highest-salary-184/"/>
      <url>/2016/09/12/leetcode-database-department-highest-salary-184/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/department-highest-salary/">184. Department Highest Salary</a><br>&amp;emsp;&amp;emsp;The <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Name  <span class="operator">|</span> Salary <span class="operator">|</span> DepartmentId <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Joe   <span class="operator">|</span> <span class="number">70000</span>  <span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> Henry <span class="operator">|</span> <span class="number">80000</span>  <span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> Sam   <span class="operator">|</span> <span class="number">60000</span>  <span class="operator">|</span> <span class="number">2</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> Max   <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span> <span class="number">1</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+--------+--------------+</span></span><br></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;The <code>Department</code> table holds all departments of the company.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Name     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> IT       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> Sales    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, Max has the highest salary in the IT department and Henry has the highest salary in the Sales department.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> Department <span class="operator">|</span> Employee <span class="operator">|</span> Salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> IT         <span class="operator">|</span> Max      <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sales      <span class="operator">|</span> Henry    <span class="operator">|</span> <span class="number">80000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>查询出每一个部门中收入最后的员工的信息</p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><p>一开始时自己没有考虑收入最高可能有并列的情况，就直接 MAX()，加 join in 了；同时也要考虑到：所属部门不存在的情况；修改后 SQL 为</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  d.NAME Department,</span><br><span class="line">  e.NAME Employee,</span><br><span class="line">  e.Salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  Employee e</span><br><span class="line">  <span class="keyword">JOIN</span> ( <span class="keyword">SELECT</span> <span class="built_in">max</span>( salary ) salary, departmentId <span class="keyword">FROM</span> Employee <span class="keyword">GROUP</span> <span class="keyword">BY</span> departmentId ) m <span class="keyword">USING</span> ( salary, departmentId )</span><br><span class="line">  <span class="keyword">JOIN</span> Department d <span class="keyword">ON</span> e.departmentId <span class="operator">=</span> d.id</span><br></pre></td></tr></table></figure><h3 id="别人的解法"><a href="#别人的解法" class="headerlink" title="别人的解法"></a>别人的解法</h3><p>基本都是连表查询的套路，但是有一段总结还是有些意思的。</p><p>1、聚合函数 max() 的效率不如嵌套子查询<br>2、in 与 exists 效率差不多，当时在网上查的是：</p><blockquote><p>in 和 not in 也要慎用，否则会导致全表扫描<br>很多时候用 exists 代替 in 是一个好的选择</p></blockquote><p>3、将 join on 代替了 where 判断，效率提升很多，后来有个看过 MYSQL 源码的大神说：</p><blockquote><p>在 MySQL 的 SELECT 查询当中，其核心算法就是 JOIN 查询算法。其他的查询语句都相应向 JOIN 靠拢：单表查询被当作 JOIN 的特例；子查询被尽量转换为 JOIN 查询</p></blockquote><p>4、将 join 替换为了 straight_join，还是源码大神说的：</p><blockquote><p>对于多表查询，如果可以确定表按照某一固定次序处理可以获得较好的效率，则建议加上 STRAIGHT_JOIN 子句，以减少优化器对表进行重排序优化的过程。<br>该子句一方面可以用于优化器无法给出最优排列的 SQL 语句；另一方面同样适用于优化器可以给出最优排列的 SQL 语句，因为 MySQL 算出最优排列也需要耗费较长的流程。<br>对于后一状况，可以根据 EXPLAIN 的提示选定表的顺序，并加上 STRAIGHT_JOIN 子句固定该顺序。该状况下的使用前提是几个表之间的数据量比例会一直保持在某一顺序，否则在各表数据此消彼长之后会适得其反。</p></blockquote><p>对于经常调用的 SQL 语句，这一方法效果较好；同时操作的表越多，效果越好。</p><blockquote><p>Reference:<br><a href="http://www.cnblogs.com/zhangyunhao/p/4896055.html">leetcode-184-Department Highest Salary 优化记录 - M-zyh</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Database Consecutive Numbers 180</title>
      <link href="/2016/09/11/leetcode-database-consecutive-numbers-180/"/>
      <url>/2016/09/11/leetcode-database-consecutive-numbers-180/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/consecutive-numbers/">180. Consecutive Numbers</a><br>&amp;emsp;&amp;emsp;Write a SQL query to find all numbers that appear at least three times consecutively.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Num <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span>  <span class="number">1</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span>  <span class="number">1</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span>  <span class="number">1</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span>  <span class="number">2</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span>  <span class="number">1</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span>  <span class="operator">|</span>  <span class="number">2</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>  <span class="operator">|</span>  <span class="number">2</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----+</span></span><br></pre></td></tr></table></figure><p>For example, given the above <code>Logs</code> table, <code>1</code> is the only number that appears consecutively for at least three times.</p><span id="more"></span><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>写 SQL 查询出连续出现至少 3 次的 Num</p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> L1.Num <span class="keyword">AS</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span> Logs L1</span><br><span class="line"><span class="keyword">JOIN</span> Logs L2 <span class="keyword">ON</span> L1.Id <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> L2.Id</span><br><span class="line"><span class="keyword">JOIN</span> Logs L3 <span class="keyword">ON</span> L1.Id <span class="operator">+</span> <span class="number">2</span> <span class="operator">=</span> L3.Id</span><br><span class="line"><span class="keyword">WHERE</span> L1.Num <span class="operator">=</span> L2.Num <span class="keyword">AND</span> L1.Num <span class="operator">=</span> L3.Num</span><br></pre></td></tr></table></figure><p>很传统连表查询，但是有坑的地方，就是依靠的时 Id，所以局限是 Id 要连贯</p><h3 id="别人的解法"><a href="#别人的解法" class="headerlink" title="别人的解法"></a>别人的解法</h3><p>首先，增加一个 rank 字段，记录序号，初始值为 1，当后一个值与前一个值相等时，序号加 1。之后，把所有 rank 值大于等于 3 的都检索出来，再去重即可。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(Num) <span class="keyword">AS</span> ConsecutiveNums <span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> Id,Num,</span><br><span class="line"><span class="variable">@Rank</span>:<span class="operator">=</span>IF(<span class="variable">@prevNum</span> <span class="operator">!=</span> Num,<span class="number">1</span>,<span class="variable">@Rank</span><span class="operator">+</span><span class="number">1</span>) <span class="keyword">AS</span> Rank,</span><br><span class="line"><span class="variable">@prevNum</span>:<span class="operator">=</span>Num</span><br><span class="line"><span class="keyword">FROM</span> Logs) t,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="variable">@Rank</span>:<span class="operator">=</span><span class="number">0</span>,<span class="variable">@prevNum</span>:<span class="operator">=</span><span class="keyword">NULL</span>) r</span><br><span class="line"><span class="keyword">WHERE</span> t.Rank <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="自己的理解"><a href="#自己的理解" class="headerlink" title="自己的理解"></a>自己的理解</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(SELECT @Rank:=0,@prevNum:=NULL) r</span><br></pre></td></tr></table></figure><p>是个巧妙的地方，对变量进行了初始化</p><blockquote><p>Reference:<br><a href="http://blog.csdn.net/Kevin_zhai/article/details/52152289">【leetcode Database】180. Consecutive Numbers - Kevin_zhai 的博客</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Database Second Highest Salary 176</title>
      <link href="/2016/09/11/leetcode-database-second-highest-salary-176/"/>
      <url>/2016/09/11/leetcode-database-second-highest-salary-176/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/second-highest-salary/">176. Second Highest Salary</a><br>&amp;emsp;&amp;emsp;Write a SQL query to get the second highest salary from the <code>Employee</code> table.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">100</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">200</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">300</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br></pre></td></tr></table></figure><p>For example, given the above Employee table, the second highest salary is <code>200</code>. If there is no second highest salary, then the query should return <code>null</code>.</p><span id="more"></span><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>写 SQL 查询出第二高薪水的 Id。如何没有第二高，则返回 <code>null</code></p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    Salary</span><br><span class="line">FROM</span><br><span class="line">    Employee</span><br><span class="line">ORDER BY Salary DESC</span><br><span class="line">LIMIT 1,1</span><br></pre></td></tr></table></figure><p>但是在没有第二高的时候将没有返回值，不符合题意；看了别人的，发现自己也少考虑 <code>DISTINCT</code></p><h3 id="别人的解法"><a href="#别人的解法" class="headerlink" title="别人的解法"></a>别人的解法</h3><p>多加一层 SELECT 并添加一个 IF 条件判断。如果结果有 0 行则返回 NULL，有 1 行返回正常结果。由于可以预期上一步结果只有一个，所以这里可以用 COUNT 而不用 GROUP BY。</p><p>构造测试数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Employee (</span><br><span class="line">    Id <span class="type">INT</span>,</span><br><span class="line">    Salary <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Employee;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employee <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p>预期结果：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> SecondHighestSalary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">200</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure><p>解法一：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    IF(<span class="built_in">COUNT</span>(Salary) <span class="operator">&gt;=</span> <span class="number">1</span>, Salary, <span class="keyword">NULL</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">        Salary</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        Employee</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">    LIMIT <span class="number">1</span> , <span class="number">1</span>) tmp</span><br></pre></td></tr></table></figure><p>解法二：<br>正常 Ranking 类问题解法，使用自定义变量计算排名。接着和上面一种解法类似需要对结果进行处理，没有第 2 名的返回 NULL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    IF(<span class="built_in">COUNT</span>(Salary) <span class="operator">&gt;=</span> <span class="number">1</span>, Salary, <span class="keyword">NULL</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">        Salary</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        (<span class="keyword">SELECT</span></span><br><span class="line">        Id,</span><br><span class="line">            Salary,</span><br><span class="line">            <span class="variable">@rank</span>:<span class="operator">=</span>IF(<span class="variable">@prevVal</span> <span class="operator">&gt;</span> Salary, <span class="variable">@rank</span>:<span class="operator">=</span><span class="variable">@rank</span> <span class="operator">+</span> <span class="number">1</span>, <span class="variable">@rank</span>) <span class="keyword">AS</span> Rank,</span><br><span class="line">            <span class="variable">@prevVal</span>:<span class="operator">=</span>Salary</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        Employee, (<span class="keyword">SELECT</span> <span class="variable">@prevVal</span>:<span class="operator">=</span><span class="keyword">NULL</span>) x, (<span class="keyword">SELECT</span> <span class="variable">@rank</span>:<span class="operator">=</span><span class="number">1</span>) y</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span>) tmp</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        tmp.Rank <span class="operator">=</span> <span class="number">2</span>) tmp2</span><br></pre></td></tr></table></figure><p>解法三：<br>上面两种解法都是可以扩展到任意排名的，如果想偏一点可以得到其他解法。排名第 2 可以看做是除了 MAX 之外的 MAX，可以得到这两种类似的解法。由于 MAX 函数可以返回 NULL 结果，就不用在进一步加工结果。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    Salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span></span><br><span class="line">            <span class="built_in">MAX</span>(Salary)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    Salary <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            <span class="built_in">MAX</span>(Salary)</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee)</span><br></pre></td></tr></table></figure><blockquote><p>Reference:<br><a href="http://tsuinte.ru/2015/04/05/leetcode-database-176-second-highest-salary/">Leetcode Database: #176 Second Highest Salary | tsuinteru</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Database Rising Temperature 197</title>
      <link href="/2016/09/11/leetcode-database-rising-temperature-197/"/>
      <url>/2016/09/11/leetcode-database-rising-temperature-197/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/rising-temperature/">197. Rising Temperature</a><br>&amp;emsp;&amp;emsp;Given a <code>Weather</code> table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------+------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> Id(<span class="type">INT</span>) <span class="operator">|</span> <span class="type">Date</span>(<span class="type">DATE</span>) <span class="operator">|</span> Temperature(<span class="type">INT</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span>               <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span> <span class="operator">|</span>               <span class="number">25</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-03</span> <span class="operator">|</span>               <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">4</span> <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-04</span> <span class="operator">|</span>               <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------+------------------+</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>For example, return the following Ids for the above Weather table:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br></pre></td></tr></table></figure><hr><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>写 SQL 查询出温度比昨天大的日期 Id</p><h3 id="别人的解法"><a href="#别人的解法" class="headerlink" title="别人的解法"></a>别人的解法</h3><p>The <code>DATEDIFF()</code> function returns the time between two dates</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> w1.Id <span class="keyword">FROM</span> Weather w1, Weather w2</span><br><span class="line"><span class="keyword">WHERE</span> w1.Temperature <span class="operator">&gt;</span> w2.Temperature <span class="keyword">AND</span> (DATEDIFF(w1.Date, w2.Date) <span class="operator">=</span> <span class="number">1</span> )</span><br></pre></td></tr></table></figure><blockquote><p>Reference:<br><a href="https://leijiangcoding.wordpress.com/2015/05/01/leetcode-q197-rising-temperature/">LeetCode Q197 Rising Temperature | Lei Jiang Coding</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Generator 使用配置</title>
      <link href="/2016/09/10/mybatis-generator-tutorial/"/>
      <url>/2016/09/10/mybatis-generator-tutorial/</url>
      
        <content type="html"><![CDATA[<p>MyBatis Generator (MBG) 是一个 Mybatis 的代码生成器。MBG 可以内省数据库的表（或多个表）然后生成可以用来访问（多个）表的基础对象。 这样和数据库表进行交互时不需要创建对象和配置文件。MBG 的解决了对数据库操作有最大影响的一些简单的 CRUD（插入、查询、更新、删除）操作。</p><h2 id="Mybatis-Generator-文档"><a href="#Mybatis-Generator-文档" class="headerlink" title="Mybatis Generator 文档"></a>Mybatis Generator 文档</h2><ul><li><a href="http://www.mybatis.org/generator/index.html">Mybatis Generator 官方原版</a></li><li><a href="http://mbg.cndocs.tk/index.html">Mybatis Generator 中文版</a></li></ul><h2 id="通过-Maven-运行-MBG"><a href="#通过-Maven-运行-MBG" class="headerlink" title="通过 Maven 运行 MBG"></a>通过 Maven 运行 MBG</h2><p>MyBatis Generator (MBG) 包含了一个可以集成到 Maven 构建的 Maven 插件，按照 Maven 的配置惯例，将 MBG 集成到 Maven 很容易。</p><span id="more"></span><h3 id="pom-xml-配置"><a href="#pom-xml-配置" class="headerlink" title="pom.xml 配置"></a><code>pom.xml</code> 配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">&lt;!-- 设置一些变量 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- plugin versions --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin.mybatis.generator</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">plugin.mybatis.generator</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- plugin setting --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.generator.generatorConfig.xml</span>&gt;</span>$&#123;basedir&#125;/src/test/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">mybatis.generator.generatorConfig.xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.generator.generatorConfig.properties</span>&gt;</span>file:///$&#123;basedir&#125;/src/test/resources/generatorConfig.properties<span class="tag">&lt;/<span class="name">mybatis.generator.generatorConfig.properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- Mybatis generator代码生成插件 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.mybatis.generator&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;mybatis.generator.generatorConfig.xml&#125;<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="generatorConfig-xml-核心配置"><a href="#generatorConfig-xml-核心配置" class="headerlink" title="generatorConfig.xml 核心配置"></a><code>generatorConfig.xml</code> 核心配置</h3><p>非常完整的 MBG 核心配置文件，配合文档效果更佳。因为有大量的注释篇幅长，建议复制到 xml 文件中查看<br>generatorConfig.xml 的文件位置要对应在 pom.xml 中的：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mybatis.generator.generatorConfig.xml</span>&gt;</span>$&#123;basedir&#125;/src/test/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">mybatis.generator.generatorConfig.xml</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span></span><br><span class="line"><span class="comment">    注意，两个属性只能选址一个; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;properties resource=&quot;&quot; url=&quot;&quot; /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置文件路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">&quot;$&#123;mybatis.generator.generatorConfig.properties&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包 location属性指明加载jar/zip包的全路径 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 数据库访问的驱动包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;mbg.drive.class.path&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- context:生成一组对象的环境 id:必选，上下文id，用于在生成错误时提示 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- defaultModelType:指定生成对象的样式 1，conditional：类似hierarchical; 2，flat：所有内容（主键，blob）等全部生成在一个对象中;</span></span><br><span class="line"><span class="comment">    3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record</span></span><br><span class="line"><span class="comment">    class) --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--targetRuntime: 1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample;</span></span><br><span class="line"><span class="comment">    2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample; introspectedColumnImpl：类全限定名，用于扩展MBG --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;mysql_mbg&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表; 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFormatter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xmlFormatter&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--关闭注释 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 必须要有的，使用这个配置链接数据库 @<span class="doctag">TODO:</span>是否可以扩展 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">connectionURL</span>=<span class="string">&quot;$&#123;mbg.jdbc.url&#125;&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;$&#123;mbg.jdbc.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">password</span>=<span class="string">&quot;$&#123;mbg.jdbc.password&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl; 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和</span></span><br><span class="line"><span class="comment">      NUMERIC数据类型; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">        scale=0;length[10,18]：使用Long; scale=0;length[5,9]：使用Integer; scale=0;length&lt;5：使用Short; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- java模型创建器，是必须要的元素 负责：1，key类（见context的defaultModelType）;2，java类;3，查询类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;$&#123;mbg.model.package&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">targetProject</span>=<span class="string">&quot;src/test/java&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field;而不是使用setter; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;constructorBased&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- for MyBatis3 / MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;immutable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 设置一个根对象，如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类;在Table的rootClass属性中可以覆盖该选项 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了， 包括：</span></span><br><span class="line"><span class="comment">        1，属性名相同，类型相同，有相同的getter/setter方法; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;rootClass&quot; value=&quot;com.domain.BaseDomain&quot; /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成SQL map的XML文件生成器，注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span></span><br><span class="line"><span class="comment">      或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span></span><br><span class="line"><span class="comment">      targetPackage/targetProject:同javaModelGenerator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;$&#123;mbg.xml.mapper.package&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">targetProject</span>=<span class="string">&quot;src/test/java&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 targetPackage/targetProject:同javaModelGenerator --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;$&#123;mbg.xml.mapper.package&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/test/java&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;rootInterface&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素 选择的table会生成一下文件： --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1，SQL map文件 2，生成一个主键类; 3，除了BLOB和主键的其他字段的类; 4，包含BLOB的类; 5，一个用户生成动态查询的条件类（selectByExample,</span></span><br><span class="line"><span class="comment">      deleteByExample），可选; 6，Mapper接口（可选） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 必要： --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tableName ：要生成对象的表名; 注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span></span><br><span class="line"><span class="comment">      根据设置的schema，catalog或tablename去查询数据表，按照下面的流程： 1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询;</span></span><br><span class="line"><span class="comment">      2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找; 3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找;</span></span><br><span class="line"><span class="comment">      4，否则，使用指定的大小写格式查询; 另外的，如果在创建表的时候，使用的&quot;&quot;把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名;</span></span><br><span class="line"><span class="comment">      这个时候，请设置delimitIdentifiers=&quot;true&quot;即可保留大小写格式; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可选： --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1，schema：数据库的schema; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2，catalog：数据库的catalog; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字;可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 5，enableInsert（默认true）：指定是否生成insert语句; 6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update); --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 13，modelType：参考context元素的defaultModelType，相当于覆盖; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span></span><br><span class="line"><span class="comment">      注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;test_handbook&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;constructorBased&quot; value=&quot;false&quot; /&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;ignoreQualifiersAtRuntime&quot; value=&quot;false&quot; /&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;immutable&quot; value=&quot;false&quot; /&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper</span></span><br><span class="line"><span class="comment">        XML文件中，只生成resultMap元素 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;modelOnly&quot; value=&quot;false&quot; /&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 &lt;property name=&quot;rootClass&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 参考javaClientGenerator 的 rootInterface 属性 &lt;property name=&quot;rootInterface&quot;</span></span><br><span class="line"><span class="comment">        value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;runtimeCatalog&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema &lt;property</span></span><br><span class="line"><span class="comment">        name=&quot;runtimeSchema&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;runtimeTableName&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用; 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;selectAllOrderByClause&quot; value=&quot;age desc,username</span></span><br><span class="line"><span class="comment">        asc&quot; /&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useActualColumnNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素， --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 该元素可选 column:主键的列名; sqlStatement：要生成的selectKey语句， --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 有以下可选项： --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL() --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- DB2 :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL() --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- DB2_MF :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Derby :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL() --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- HSQLDB :相当于selectKey的SQL为：CALL IDENTITY() --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Informix :相当于selectKey的SQL为：select dbinfo(&#x27;sqlca.sqlerrd1&#x27;) from</span></span><br><span class="line"><span class="comment">        systables where tabid=1 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- MySql :相当于selectKey的SQL为：SELECT LAST_INSERT_ID() --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY() --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- SYBASE :相当于selectKey的SQL为：SELECT @@IDENTITY --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- JDBC :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候， --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 那么就可以设置searchString为&quot;^CUST_&quot;，并使用空白替换，那么生成的Customer对象中的属性名称就不是 custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span></span><br><span class="line"><span class="comment">        如果使用了columnOverride元素，该属性无效; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;columnRenamingRule searchString=&quot;&quot; replaceString=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性; column:要重新设置的列名; 注意，一个table元素中可以有多个columnOverride元素 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;columnOverride column=&quot;username&quot;&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;property name=&quot;property&quot; value=&quot;userName&quot; /&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名 &lt;property name=&quot;javaType&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- jdbcType用于指定该列的JDBC类型 &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span></span><br><span class="line"><span class="comment">        只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;jdbcType&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false &lt;property name=&quot;delimitedColumnName&quot;</span></span><br><span class="line"><span class="comment">        value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;/columnOverride&gt; --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 column:指定要忽略的列的名字;</span></span><br><span class="line"><span class="comment">        delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false 注意，一个table元素中可以有多个ignoreColumn元素</span></span><br><span class="line"><span class="comment">        &lt;ignoreColumn column=&quot;deptId&quot; delimitedColumnName=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相关的-properties-文件-generatorConfig-properties"><a href="#相关的-properties-文件-generatorConfig-properties" class="headerlink" title="相关的 properties 文件 generatorConfig.properties"></a>相关的 properties 文件 <code>generatorConfig.properties</code></h3><p>generatorConfig.properties 要对应在 pom.xml 中的：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mybatis.generator.generatorConfig.properties</span>&gt;</span>file:///$&#123;basedir&#125;/src/test/resources/generatorConfig.properties<span class="tag">&lt;/<span class="name">mybatis.generator.generatorConfig.properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 数据库驱动 jar 路径</span><br><span class="line">mbg.drive.class.path=/home/yifan/.m2/repository/mysql/mysql-connector-java/5.1.39/mysql-connector-java-5.1.39.jar</span><br><span class="line"># 数据库连接参数</span><br><span class="line">mbg.jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">mbg.jdbc.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">mbg.jdbc.username=root</span><br><span class="line">mbg.jdbc.password=root</span><br><span class="line"># 包路径配置</span><br><span class="line">mbg.model.package=com.test.demo.mybatis</span><br><span class="line">mbg.dao.package=com.test.demo.mybatis</span><br><span class="line">mbg.xml.mapper.package=com.test.demo.mybatis</span><br></pre></td></tr></table></figure><h3 id="生成代码-方法一：Eclipse-Maven-运行"><a href="#生成代码-方法一：Eclipse-Maven-运行" class="headerlink" title="生成代码 方法一：Eclipse Maven 运行"></a>生成代码 方法一：Eclipse Maven 运行</h3><p>如果是在 Eclipse 中，选择 pom.xml 文件，击右键先择：<br>Run AS &gt; Maven Build… &gt; 在 Goals 框中输入：<code>mybatis-generator:generate</code><br>在 <code>Console</code> 中可以看 log</p><h3 id="生成代码-方法二：Shell-运行"><a href="#生成代码-方法二：Shell-运行" class="headerlink" title="生成代码 方法二：Shell 运行"></a>生成代码 方法二：Shell 运行</h3><p>如果在命令行输入 Maven 命令即可，注意：一定是当前项目目录下运行该命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn mybatis-generator:generate</span><br></pre></td></tr></table></figure><h2 id="Eclipse-Plugin-运行-MGB"><a href="#Eclipse-Plugin-运行-MGB" class="headerlink" title="Eclipse Plugin 运行 MGB"></a>Eclipse Plugin 运行 MGB</h2><p>详细见：<a href="http://www.mybatis.org/generator/running/runningWithEclipse.html">MyBatis Generator - Running MyBatis Generator with Eclipse</a></p><p>1、如果使用这种方法，将不在依靠 Maven，pox.xml 中的配置将可以省去<br>2、加载 properties 文件需变化，自己一直没搞清楚 properties 的路径应该怎么写，后来变量就直接写在 generatorConfig.xml 中了。要是有明白的小伙伴，可以在下面留言<br>3、需要下载 plugin：Help &gt; Eclipse Marketplace… &gt; Search for “MyBatis Generator”；这个也是个局限，就是用的人还需要下载 Eclipse plugin，所以推荐上面使用 Maven 的方法</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.mybatis.org/generator/index.html">Mybatis Generator 官方原版</a></li><li><a href="http://mbg.cndocs.tk/index.html">Mybatis Generator 中文版</a></li><li><a href="http://www.jianshu.com/p/e09d2370b796">Mybatis Generator 最完整配置详解 - 简书</a></li><li><a href="http://my.oschina.net/lilw/blog/168304">用 Maven 插件生成 Mybatis 代码 - 边城刀客的博客</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 入门使用</title>
      <link href="/2016/09/07/springmvc-getting-started-tutorial/"/>
      <url>/2016/09/07/springmvc-getting-started-tutorial/</url>
      
        <content type="html"><![CDATA[<p>本文主要参考了 <a href="http://www.imooc.com/video/7237">imooc-SpringMVC 起步</a> 视频教程和 <a href="http://www.imooc.com/article/3804">SpringMVC 从入门到精通 系列 - HansonQ</a> ，还有自己的一些总结。</p><p>主要内容：MVC 简介、前端控制器模式、SpringMVC 基本概念、SpringMVC 配置、SpringMVC 中的注解、SpringMVC 数据绑定。</p><span id="more"></span><h2 id="MVC-简介"><a href="#MVC-简介" class="headerlink" title="MVC 简介"></a>MVC 简介</h2><p>1、MVC 是一种架构模式</p><p>程序分层，分工合作，既相互独立，又协同工作，分为三层：模型层、视图层和控制层</p><p>2、MVC 是一种思考方式</p><ul><li>View：视图层，为用户提供 UI，重点关注数据的呈现，为用户提供界面</li><li>Model：模型层，业务数据的信息表示，关注支撑业务的信息构成，通常是多个业务实体的组合</li><li>Controller：控制层，调用业务逻辑产生合适的数据（Model），传递数据给视图用于呈现</li></ul><p>MVC 设计模式在 B&#x2F;S 下的应用：</p><p><img src="https://user-images.githubusercontent.com/9289792/80199601-1cfdee80-8654-11ea-8328-9d74c174b2bc.gif" alt="160907-springmvc-getting-started-tutorial-mvc"></p><p>①：浏览器发送请求到控制器(这里要知道控制器的作用)<br>②：控制器不能处理请求必须交给模型层来处理接着去访问数据库<br>③：模型层将处理好的结果返回给控制层<br>④：控制层将逻辑视图响应给浏览器(浏览器显示的是渲染过的视图)</p><p>MVC 本质：<strong>MVC 的核心思想是业务数据抽取同业务数据呈现相分离；分离有利于程序简化，方便编程</strong></p><h2 id="前端控制器模式"><a href="#前端控制器模式" class="headerlink" title="前端控制器模式"></a>前端控制器模式</h2><p>前端控制器模式（Front Controller Pattern）是用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证&#x2F;授权&#x2F;记录日志，或者跟踪请求，然后把请求传给相应的处理程序。</p><ul><li>前端控制器（Front Controller）- 处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。</li><li>调度器（Dispatcher） - 前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。</li><li>视图（View） - 视图是为请求而创建的对象。</li></ul><p>前端控制器的主要作用：</p><ul><li>指前端控制器将我们的请求分发给我们的控制器去生成业务数据</li><li>将生成的业务数据分发给恰当的视图模版来生成最终的视图界面</li></ul><p><img src="https://user-images.githubusercontent.com/9289792/80201864-63a11800-8657-11ea-91cb-2b2a2f55f6a6.jpg" alt="160907-springmvc-getting-started-tutorial-front-controller"></p><h2 id="SpringMVC-基本概念"><a href="#SpringMVC-基本概念" class="headerlink" title="SpringMVC 基本概念"></a>SpringMVC 基本概念</h2><p><img src="https://user-images.githubusercontent.com/9289792/80199605-1d968500-8654-11ea-8f05-57d4685934bb.jpg" alt="160907-springmvc-getting-started-tutorial-springmvc01"></p><p>对组件说明：</p><ol><li>DispatherServlet：前端控制器 用户请求到达前端控制器，相当于 MVC 中的 C，而 DispatherServlet 是整个流程的核心，它来调用其他组件来处理用户的请求，前端控制器的存在降低了其他组件之间的耦合度。</li><li>HandlerMapping：处理器映射器 它的作用就好比去看电影要拿着电影票根据电影票上面的座位号找到座位其中座位就是 Handler，电影票以及上面的座位号就是 URL HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</li><li>Handler：处理器 Handler 是后端控制器，在前端控制器的控制下后端控制器对具体的用户请求进行处理，Handler 涉及到具体的用户业务请求，所以一般情况下需要程序员根据业务需求开发。</li><li>HandlerAdapter：处理器适配器 通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过适配器可以对更多类型的处理器进行执行。播放的电影是 3D 的你看不清楚，因此电影院跟你说你要想看清电影就必须戴 3D 眼镜。也就是说 Handler 满足一定的要求才可以被执行。</li><li>ViewResolver：视图解析器 ViewResolver 负责将处理结果生成 View 视图，ViewResolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</li></ol><p><img src="https://user-images.githubusercontent.com/9289792/80199609-1d968500-8654-11ea-997b-67a5862bfd25.jpg" alt="160907-springmvc-getting-started-tutorial-springmvc02"></p><p>工作原理解释说明：<br>1、用户发送请求到 SpringMVC 框架提供的 DispatcherServlet 这个前端控制器（了解 struts2 的朋友也都知道其实 struts2 也有一个前端控制器 web.xml 中的 filter 标签就是）。<br>2、前端控制器会去找处理器映射器（HandlerMapping），处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet 。<br>3、根据处理器映射器返回的处理器，DispatcherServlet 会找“合适”的处理器适配器（HandlerAdapter）<br>4、处理器适配器 HandlerAdpater 会去执行处理器（Handler 开发的时候会被叫成 Controller 也叫后端控制器在 struts2 中 action 也是一个后端控制器）执行之前会有转换器、数据绑定、校验器等等完成上面这些才会去正在执行 Handler<br>5、后端控制器 Handler 执行完成之后返回一个 ModelAndView 对象 。<br>6、处理器适配器 HandlerAdpater 会将这个 ModelAndView 返回前端控制器 DispatcherServlet。前端控制器会将 ModelAndView 对象交给视图解析器 ViewResolver。<br>7、视图解析器 ViewResolver 解析 ModelAndView 对象之后返回逻辑视图。<br>8、前端控制器 DispatcherServlet 对逻辑视图进行渲染（数据填充）之后返回真正的物理 View 并响应给浏览器。</p><p><img src="https://user-images.githubusercontent.com/9289792/80199612-1e2f1b80-8654-11ea-9245-65a4470bc5f5.jpg" alt="160907-springmvc-getting-started-tutorial-springmvc03"></p><h2 id="SpringMVC-配置"><a href="#SpringMVC-配置" class="headerlink" title="SpringMVC 配置"></a>SpringMVC 配置</h2><p>1、前端控制器需要在 web.xml 中配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>web-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加载前端控制器配置文件 上下文配置位置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 备注：</span></span><br><span class="line"><span class="comment">            contextConfigLocation：指定 SpringMVC 配置的加载位置，如果不指定则默认加载</span></span><br><span class="line"><span class="comment">            WEB-INF/[DispatcherServlet 的 Servlet 名字]-servlet.xml</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表示随WEB服务器启动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>web-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 备注：可以拦截三种请求</span></span><br><span class="line"><span class="comment">        第一种：拦截固定后缀的url，比如设置为 *.do、*.action， 例如：/user/add.action 此方法最简单,不会导致静态资源（jpg,js,css）被拦截</span></span><br><span class="line"><span class="comment">        第二种：拦截所有,设置为/，例如：/user/add  /user/add.action此方法可以实现REST风格的url,</span></span><br><span class="line"><span class="comment">        很多互联网类型的应用使用这种方式.但是此方法会导致静态文件(jpg,js,css)被拦截后不能正常显示.需要特殊处理</span></span><br><span class="line"><span class="comment">        第三种：拦截所有,设置为/*，此设置方法错误,因为请求到Action,当action转到jsp时再次被拦截,提示不能根据jsp路径mapping成功</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认匹配所有的请求 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在 <code>spring/spring-web.xml</code> 配置视图解析器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- InternalResourceViewResolver：支持JSP视图解析 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- viewClass：JstlView 表示JSP模板页面需要使用JSTL标签库，所以classpath中必须包含jstl的相关jar包； --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- prefix 和 suffix：查找视图页面的前缀和后缀，最终视图的址为： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 前缀+逻辑视图名+后缀，逻辑视图名需要在controller中返回ModelAndView指定，比如逻辑视图名为hello，--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 则最终返回的jsp视图地址 &quot;WEB-INF/jsp/hello.jsp&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 决定视图类型，如果添加了jstl支持（即有jstl.jar），那么默认就是解析为jstl视图 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在 <code>spring/spring-web.xml</code> 配置 注解模式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动加载RequestMappingHandlerMapping和RequestMappingHandlerAdapter， --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可用在xml配置文件中使用&lt;mvc:annotation-driven&gt;替代注解处理器和适配器的配置。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>4、在 <code>spring/spring-web.xml</code> 配置 扫描 web 相关的 bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描器：可以扫描 @Controller、@Service、@Repository 等等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.controller&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC-中的注解"><a href="#SpringMVC-中的注解" class="headerlink" title="SpringMVC 中的注解"></a>SpringMVC 中的注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a><code>@Controller</code></h3><p>@Controller 注解，用于标识这个类是一个后端控制器（类似 struts 中的 action），主要作用就是接受页面的参数，转发页面。<br>@Controller 源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span> <span class="comment">// 表明只能定义在类上面</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//保留策略是RUNTIME，在JVM加载类时，会把注解加载到JVM内存中（它是唯一可以用反射来读取注解的策略）</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">//@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//spring框架规定当一个类不好归类（service、dao、controller）的时候可以使用这个注解，由此可见即便好归类内部还是使用的@Component注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">    * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the suggested component name, if any</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a><code>@RequestMapping</code></h3><p>这个注解的作用目标就跟 @Controller 不一样了，这个注解可以定义在类上面也可以定义在方法上面。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1.<span class="doctag">@RequestMapping</span>：除了修饰方法,还可以修饰类</span></span><br><span class="line"><span class="comment">* 2.类定义处：提供初步的请求信息映射.相对于WEB应用的根目录(窄化请求)</span></span><br><span class="line"><span class="comment">* 3.方法处：提供进一步的细分映射信息。相对于类定义处的URL。</span></span><br><span class="line"><span class="comment">*      若类定义处为标注<span class="doctag">@RequestMapping</span>,则方法出的URL相对于WEB应用的根目录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line">  String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;; <span class="comment">//限制请求方式</span></span><br><span class="line">  String[] params() <span class="keyword">default</span> &#123;&#125;; <span class="comment">//要求请求的URL包含指定的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;/test&quot;, method = RequestMethod.GET)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 在游览器访问 http://localhost:8080/demo/test 将进入这里</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;originURL&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;controllerName&quot;</span>, <span class="string">&quot;index&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestMapping 还支持 Ant 方格的请求</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">?：匹配文件中的一个字符</span><br><span class="line">*：匹配文件中任意字符</span><br><span class="line">**：**匹配多层路径</span><br><span class="line"></span><br><span class="line">/user/*/createUser : 匹配 -/user/aa/createUser 或者 -/user/aa/createUser</span><br><span class="line">/user/**/createUser : 匹配 -/user/aa/createUser 或者 -/user/createUser 或者 -/user/aa/cc/createUser</span><br><span class="line">/user/createUser?? : 匹配 -/user/aa/createUseraa</span><br></pre></td></tr></table></figure><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a><code>@PathVariable</code></h3><p>@PathVariable 这个注解支持现在当下较为流行的 Restful 风格的 URL。 先说说这个注解的作用，支持将 url 中的占位符参数绑定到目标方法的参数上， 该功能也是 SpringMVC 实现 Restful 风格 url 的重要措施。</p><p>代码实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/demo/sss</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/&#123;slug:.+&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(<span class="meta">@PathVariable(&quot;slug&quot;)</span> String slug, Model model)</span> &#123;</span><br><span class="line">  LOG.info(<span class="string">&quot;DemoController index2 slug  &quot;</span> + slug);</span><br><span class="line">  <span class="comment">// common</span></span><br><span class="line">  model.addAttribute(<span class="string">&quot;originURL&quot;</span>, <span class="string">&quot;demo/&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerName&quot;</span>, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerMethod&quot;</span>, <span class="string">&quot;index2&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;slug&quot;</span>, slug);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//slug = sss</span></span><br></pre></td></tr></table></figure><p>我们熟悉的请求应该是 POST 和 GET 请求，这两个请求也是最常用的而实际上 HTTP1.1 请求还有 PUT、DELETE 等 8 种来表名请求的动作。</p><p>在 SpringMVC 中要实现 PUT 和 DELETE 请求需要在 web.xml 额外配置一个过滤器，这个过滤器的作用就是把 POST 请求变为 PUT 和 DELETE 请求。<br><em>关于 Restful 的内容计划单独写。</em></p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a><code>@RequestParam</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestParam &#123;</span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//值即为请求参数的参数名</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;<span class="comment">//该参数是否是必须。默认值为true</span></span><br><span class="line">  String <span class="title function_">defaultValue</span><span class="params">()</span> <span class="keyword">default</span> ValueConstants.DEFAULT_NONE;<span class="comment">//请求参数的默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/demo/para?slug=google</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/para&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index3</span><span class="params">(<span class="meta">@RequestParam(value = &quot;slug&quot;, defaultValue = &quot;&quot;)</span> String slug, Model model)</span> &#123;</span><br><span class="line">  model.addAttribute(<span class="string">&quot;originURL&quot;</span>, <span class="string">&quot;demo/&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerName&quot;</span>, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerMethod&quot;</span>, <span class="string">&quot;index3&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;slug&quot;</span>, slug);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">slug = google</span><br></pre></td></tr></table></figure><p>另外还有一点要提示一下，参数没有加这个注解也能映射成功，这是应为 SpringMVC 框架支持请求参数和目标方法参数一致的时候可以省略这个注解。</p><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a><code>@ResponseBody</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation that indicates a method return value should be bound to the web</span></span><br><span class="line"><span class="comment"> * response body. Supported for annotated handler methods in Servlet environments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个注解指明一个方法的返回值应该绑定在 web response body 中，在 Servlet 环境中支持注解处理方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As of version 4.0 this annotation can also be added on the type level in</span></span><br><span class="line"><span class="comment"> * which case it is inherited and does not need to be added on the method level.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ResponseBody &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/demo/json</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> Domain <span class="title function_">index7</span><span class="params">(HttpServletRequest request, Model model)</span> &#123;</span><br><span class="line">  LOG.info(<span class="string">&quot;DemoController demo index7&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;originURL&quot;</span>, <span class="string">&quot;demo/&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerName&quot;</span>, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerMethod&quot;</span>, <span class="string">&quot;index7&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">Domain</span> <span class="variable">domain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Domain</span>();</span><br><span class="line">  domain.setDomain(<span class="string">&quot;gggoogle.com&quot;</span>);</span><br><span class="line">  domain.setId(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> domain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* response body</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;id&quot;: 100,</span></span><br><span class="line"><span class="comment">  &quot;domain&quot;: &quot;gggoogle.com&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC-数据绑定"><a href="#SpringMVC-数据绑定" class="headerlink" title="SpringMVC 数据绑定"></a>SpringMVC 数据绑定</h2><p>简单说一下场景：<br>对于一个注册页面有很多信息譬如：用户名、密码、确认密码、邮箱、手机、兴趣等等。这时候就会想能不能将这些个参数包装在一个对象中（POJO），用这个 POJO 来做目标方法的形参上面。</p><p>可以说的是 SpringMVC 是支持将 POJO 作为目标参数的。当然也是要遵循一些规则的，就是表单的 name 属性值要和 POJO 的属性值要一致。当然了，这样又会有一个新的疑问支不支持级联属性答案是支持的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String city;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Address address;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo/pojo&quot;</span>&gt;</span></span><br><span class="line">  NAME:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> CITY:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;address.city&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/pojo&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index4</span><span class="params">(Persion persion, Model model)</span> &#123;</span><br><span class="line">  `model.addAttribute(<span class="string">&quot;originURL&quot;</span>, <span class="string">&quot;demo/&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerName&quot;</span>, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerMethod&quot;</span>, <span class="string">&quot;index4&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;persion&quot;</span>, persion);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;demo&quot;</span>;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC-使用-Servlet-API"><a href="#SpringMVC-使用-Servlet-API" class="headerlink" title="SpringMVC 使用 Servlet API"></a>SpringMVC 使用 Servlet API</h3><p>可以使用 Servlet 原生的 API 作为目标方法的参数。具体支持以下类型：HttpServletRequest、HttpServletResponse、HttpSession、java.security.Principal、Locale、InputStream、OutputStream、Reader、Writer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://localhost:8080/demo/req?slug=facebook</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/req&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index5</span><span class="params">(HttpServletRequest request, Model model)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">slug</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;slug&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;originURL&quot;</span>, <span class="string">&quot;demo/&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerName&quot;</span>, <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;controllerMethod&quot;</span>, <span class="string">&quot;index5&quot;</span>);</span><br><span class="line">  model.addAttribute(<span class="string">&quot;slug&quot;</span>, slug);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.imooc.com/video/7237">IMOOC-SpringMVC 起步</a></li><li><a href="http://www.imooc.com/article/3804">SpringMVC 从入门到精通 系列 - HansonQ</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刚刚毕业的两个月小结</title>
      <link href="/2016/08/31/2016-08-report/"/>
      <url>/2016/08/31/2016-08-report/</url>
      
        <content type="html"><![CDATA[<p>走出校园已经两个月了，因为之前的暑期也没怎么在家待过，大一在中康、大二在腾骏、大三在大为，大四毕业也就是现在，所以也没有什么特别的感觉。可以说，这两个月也做了些事情，学了些东西的。</p><span id="more"></span><p>从学校毕业，最直接的影响就是自己更加专注于计算机知识，不用再为学业担心。确定了先走技术的道路，也让自己不那么迷茫做什么。工作规律，自己开始读读书，才觉的读书是件有意思的事。也逼着自己常常写点东西，主要是觉的：写东西的时候自己会主动的思考，文笔练着练着也就能进步吧。</p><p>（一）</p><p>DMV 是毕业后自己第一个项目，全栈开发。初版两周上线，后有花了一周多的时间编写了答题记录的功能。其中的收获是：项目框架的搭建和前端入门知识。原来的项目搭建都不是自己做的，也一直觉的是一件很难的事情。也许就是因为没有做过才觉的难，做过之后也觉的不过如此。项目的页面不多，但都是自己一点点写的，HTML JS 原来也就是自己改改，没有完整写过，这次算是一次不错的锻炼。写前端的时候才发现现在的前端真的是日新月异 AngularJS React 好多好多自己都没有听过的东西，也是从 Mengqi 那里了解到了很多。可惜的是自己没有实际的用上这些，如有机会一定尝试。</p><p>DMV 项目流量平平，因为有 Domain 类项目的工作，DMV 的维护就暂时放置了，还是心有不舍的。期间和 John 聊过一次关于产品的事基本总结为：</p><ul><li>产品项目是会有失败的，有流量的项目才有维护的意义。</li><li>大型项目只有成功与失败之分，没有中间项，失败将代价很大。</li><li>不一定要留住用户。</li><li>更小的成本更高的流量，高流量后就可以做很多的事。</li></ul><p>（二）</p><p>Domain 信息类项目，使用的架构和 DMV 一致，逻辑更加简单。自己主要做了数据整理，收获是关于 SQL 命令。SQL 就可以直接处理很多的事情。使用了 RMI 做数据同步，用反射写了一段程序，是一次有突破的尝试。<br>一次看到自己年初的简历，笑了。自己是真敢写，能写个 Hello World 就敢标成了解。从会用到原理，是接下要走的路。</p><p>（三）</p><p>最近在看设计模式和算法的书，一直在做 LeetCode 的题。设计模式没用过，逮到能用机会绝不错过。算法健脑，刚刚开始接触觉的挺有意思，对数据结构也是种了解。</p><p>（四）</p><p>再次参加舍友的婚礼，又个结婚了。大一奶了一口，现在成真。祝福 Lu&amp;Feifei。</p><p>（五）</p><blockquote><p>来说说程序员那无处安放的创造力</p><p>有了锤子想找钉子是很正常的原始冲动，但我们必须认识到，创造力对于程序员这个职业来讲，是锦上添花的东西。如果你没有强大的工程能力，那么创造力也不过是无本之木。所以扎扎实实的把工程基础打好，这是最根本的。</p><p>在此基础上，我比较推荐程序员采用内外两条线来培养自己。在公司内的项目上采取相对保守的策略，尽力把稳定性做到最好，培养出自己卓越的工程能力；然后在公司外的开源项目和自己的独立项目上，采用一些新的技术、实践一些新的想法、充分发挥自己的创造力，梦想还是要有的，对吧。</p><p>这样做最明显的好处是，你可以了解到新技术和激进方案的优缺点，从而在进行方案选型时，有更多的依据；还有一个职业发展上的好处：如果不是主负责人，公司的项目往往不能代表你的能力；但独立项目却可以作为一个非常好的能力证明出现在你的简历里边。</p><p>你可以是一个身怀绝技的手艺人，在自己家里你尝试各种手法各种风格的个人作品；但当你参与颐和园这种级别的工程时，好好的把自己负责的石头雕成总设计师要求的样子就好 —— 毕竟这个时代一个人已经很难负责整个项目了。这就是我所理解的程序员的工匠精神。</p><p>摘自：<a href="http://mp.weixin.qq.com/s?__biz=MzI5OTI5Njg2Mg==&mid=2247483667&idx=1&sn=d6e5953c7a7835148e3822b919b82416#rd">程序员到底是一个什么职业？</a></p></blockquote><p>（尾）</p><p>现在自己能听见进去一些原来听不去的话了。我不认为自己是被同化了，也许是心中少了些恶意。</p><p>状态不错，继续前进。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Number of 1 Bits 191</title>
      <link href="/2016/08/31/leetcode-number-of-1-bits-191/"/>
      <url>/2016/08/31/leetcode-number-of-1-bits-191/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-1-bits/">191. Number of 1 Bits</a><br>&amp;emsp;&amp;emsp;Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).<br>&amp;emsp;&amp;emsp;For example, the 32-bit integer ’11’ has binary representation <code>00000000000000000000000000001011</code>, so the function should return 3.</p><span id="more"></span><hr><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>写一个函数，输入一个无符号整数，返回其中值为 1 的比特位的个数（这个值也被称为数字汉明重量）</p><h3 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h3><p>循环判断最后一位是否是 <code>1</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">result++;</span><br><span class="line">&#125;</span><br><span class="line">n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Submit Solution</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Submission Result: Time Limit Exceeded</span><br><span class="line">Last executed input: 2147483648 (10000000000000000000000000000000)</span><br></pre></td></tr></table></figure><h3 id="别人的算法"><a href="#别人的算法" class="headerlink" title="别人的算法"></a>别人的算法</h3><p>2147483648 输入超过了 Java 语言中整型的上限</p><p>原来问题就出在输入可能是无符号数字上！当输入为 2147483648 时，Java 会将这个数字判断位 -1，而右移符号 &gt;&gt; 在计算时会保持数字的符号位，即正数右移高位补 0，负数右移高位补 1。使用这种规则进行右移，会导致数字在右移过程中被不断补 1，这样循环永远无法停止！因此，如果输入为负数，也应该保持右移时高位补 0，位运算符 &gt;&gt;&gt; 可以帮助我们解决这个问题。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    n = n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>&gt;&gt;</code> 是带符号右移，负数高位补 1，正数补 0</li><li><code>&lt;&lt;</code> 左移不管负数还是正数，在低位永远补 0</li><li><code>&gt;&gt;&gt;</code> 是不带符号右移，不论负数还是正数，高位补 0</li></ol><blockquote><p>引用：<a href="http://my.oschina.net/Tsybius2014/blog/491381">LeetCode：Number of 1 Bits-整数的汉明重量-Tsybius2014</a></p></blockquote><h3 id="别人的算法-2"><a href="#别人的算法-2" class="headerlink" title="别人的算法 2"></a>别人的算法 2</h3><ul><li>资料：<a href="http://www.cnblogs.com/xinsheng/p/3419202.html">Int 型数值存储</a></li><li>资料：<a href="http://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html">原码, 反码, 补码</a></li></ul><p>补码：正数为其本身，负数为取反加一</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Integer.toUnsignedLong(n);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; l != <span class="number">0</span>; l = l &gt;&gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((l &amp; <span class="number">1</span>) == <span class="number">1</span>) count ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在 Java 中需要将 <code>int</code> 转换为 <code>unsigned int</code> 的时候，可以将 <code>int</code> 转换到容量更大的 <code>long</code> 中就行了，直接 <code>((long) x) &amp; 0xffffffffL</code> 或者使用函数 <code>Integer.toUnsignedLong()</code>。</p><blockquote><p>引用：<a href="https://github.com/nekocode/leetcode-solutions/blob/master/solutions/191.%20Number%20of%201%20Bits.md">nekocode&#x2F;leetcode-solutions-191. Number of 1 Bits</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Happy Number 202</title>
      <link href="/2016/08/29/leetcode-happy-number-202/"/>
      <url>/2016/08/29/leetcode-happy-number-202/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/happy-number/">202. Happy Number</a><br>&amp;emsp;&amp;emsp;Write an algorithm to determine if a number is “happy”.<br>&amp;emsp;&amp;emsp;A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p><span id="more"></span><p>&amp;emsp;&amp;emsp;<strong>Example</strong>: 19 is a happy number</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^2 + 9^2 = 82</span><br><span class="line">8^2 + 2^2 = 68</span><br><span class="line">6^2 + 8^2 = 100</span><br><span class="line">1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure><hr><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>题目说的是取任意一个正整数，不断各个数位上数字的平方和，若最终收敛为 1，则该数字为<code>happy number</code>，否则程序可能从某个数开始陷入循环。</p><h3 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h3><p>关键：通过 <code>/</code> 和 <code>%</code> 取 int 各个位的数字；用 <code>set</code> 判重复</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">newN</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">          n = n / <span class="number">10</span>;</span><br><span class="line">          newN += Math.pow(end, <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (n != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        n = newN;</span><br><span class="line">        newN = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (result.contains(n)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.add(n);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>套路：取各个位数字</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">  n = n / <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (n != <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Roman to Integer 13</title>
      <link href="/2016/08/25/leetcode-roman-to-integer-13/"/>
      <url>/2016/08/25/leetcode-roman-to-integer-13/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/roman-to-integer/">13. Roman to Integer</a><br>&amp;emsp;&amp;emsp;Given a roman numeral, convert it to an integer.<br>&amp;emsp;&amp;emsp;Input is guaranteed to be within the range from 1 to 3999.</p><span id="more"></span><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97">wikipedia-罗马数字</a></p></blockquote><p>罗马数字共有 7 个，即 I（1）、V（5）、X（10）、L（50）、C（100）、D（500）和 M（1000）。按照下述的规则可以表示任意正整数。需要注意的是罗马数字中没有“0”，与进位制无关。一般认为罗马数字只用来记数，而不作演算。</p><p>重复数次：一个罗马数字重复几次，就表示这个数的几倍。</p><p>右加左减：</p><ul><li>在较大的罗马数字的右边记上较小的罗马数字，表示大数字加小数字。</li><li>在较大的罗马数字的左边记上较小的罗马数字，表示大数字减小数字。</li><li>左减的数字有限制，仅限于 I、X、C。比如 45 不可以写成 VL，只能是 XLV</li><li>但是，左减时不可跨越一个位值。比如，99 不可以用 IC（100-1）表示，而是用 XCIX（[100-10]+[10-1]）表示。（等同于阿拉伯数字每位数字分别表示。）</li><li>左减数字必须为一位，比如 8 写成 VIII，而非 IIX。</li><li>右加数字不可连续超过三位，比如 14 写成 XIV，而非 XIIII。（见下方“数码限制”一项。）</li></ul><p>加线乘千：</p><ul><li>在罗马数字的上方加上一条横线或者加上下标的 Ⅿ，表示将这个数乘以 1000，即是原数的 1000 倍。</li><li>同理，如果上方有两条横线，即是原数的 1000000（1000^2）倍。</li></ul><p>数码限制：</p><ul><li>同一数码最多只能连续出现三次，如 40 不可表示为 XXXX，而要表示为 XL。</li><li>例外：由于 IV 是古罗马神话主神朱庇特（即 IVPITER，古罗马字母里没有 J 和 U）的首字，因此有时用 IIII 代替 IV。</li></ul><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><p>做一个数组对照的字典，遵守此条规定：在较大的罗马数字的左边记上较小的罗马数字，表示大数字减小数字。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="type">char</span>[] chr = s.toCharArray();</span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;I&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">&quot;V&quot;</span>, <span class="number">5</span>);</span><br><span class="line">map.put(<span class="string">&quot;X&quot;</span>, <span class="number">10</span>);</span><br><span class="line">map.put(<span class="string">&quot;L&quot;</span>, <span class="number">50</span>);</span><br><span class="line">map.put(<span class="string">&quot;C&quot;</span>, <span class="number">100</span>);</span><br><span class="line">map.put(<span class="string">&quot;D&quot;</span>, <span class="number">500</span>);</span><br><span class="line">map.put(<span class="string">&quot;M&quot;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">nowInt</span> <span class="operator">=</span> map.get(String.valueOf(chr[i]));</span><br><span class="line"><span class="type">int</span> <span class="variable">nextInt</span> <span class="operator">=</span> map.get(String.valueOf(chr[i + <span class="number">1</span>]));</span><br><span class="line"><span class="keyword">if</span> (nowInt &lt; nextInt) &#123;</span><br><span class="line">result -= nowInt;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result += nowInt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result += map.get(String.valueOf(chr[chr.length - <span class="number">1</span>]));</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Majority Element 169</title>
      <link href="/2016/08/24/leetcode-majority-element-169/"/>
      <url>/2016/08/24/leetcode-majority-element-169/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/majority-element/">169. Majority Element</a></p><p>Given an array of size n, find the majority element. The majority element is the element that appears more than [ n&#x2F;2 ] times.</p><p>You may assume that the array is non-empty and the majority element always exist in the array.</p><span id="more"></span><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个数组，找这个数组中的主元素，主元素是元素出现次数大于⌊ n&#x2F;2 ⌋的元素。<br>假设给定的数组非空，主元素都存在。</p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><p>将数组进行排序，根据题意，那么中间的这个数就是 majority element</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nums[nums.length / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别人的解法"><a href="#别人的解法" class="headerlink" title="别人的解法"></a>别人的解法</h3><p><a href="http://blog.csdn.net/DERRANTCM/article/details/47902549">【LeetCode-面试算法经典-Java 实现】【169-Majority Element（主元素）】</a></p><p>&amp;emsp;&amp;emsp;用一个标记 cnt 记录某个元素出现的次数，如果后面的元素和它相同就加一，有一个元素和他不相同就减一，当 cnt 小于等于 0 时重新记录新的元素。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">main</span> <span class="operator">=</span> nums[<span class="number">0</span>]; <span class="comment">// 用于记录主元素，假设第一个是主元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 用于抵消数的个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123; <span class="comment">// 从第二个元素开始到最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (main == nums[i]) &#123; <span class="comment">// 如果两个数相同就不能抵消</span></span><br><span class="line">            count++; <span class="comment">// 用于抵消的数据加1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果不相同，并且有可以抵消的数</span></span><br><span class="line">                count--; <span class="comment">// 进行数据抵消</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果不相同，并且没有可以抵消的数</span></span><br><span class="line">                main = nums[i]; <span class="comment">// 记录最后不可以抵消的数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对于数组中可能没有主元素的情况，题中说明存在，此步可以省略。</span></span><br><span class="line">    <span class="comment">// count = 0;</span></span><br><span class="line">    <span class="comment">// for (int a : nums) &#123;</span></span><br><span class="line">    <span class="comment">// if (a == main) &#123;</span></span><br><span class="line">    <span class="comment">// count++;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// if (count &gt;= nums.length / 2) &#123;</span></span><br><span class="line">    <span class="comment">// return main;</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">// throw new RuntimeException(&quot;No majority element&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode First Unique Character in a String 387</title>
      <link href="/2016/08/23/leetcode-first-unique-character-in-a-string-387/"/>
      <url>/2016/08/23/leetcode-first-unique-character-in-a-string-387/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">387. First Unique Character in a String</a><br>&amp;emsp;&amp;emsp;Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.<br>&amp;emsp;&amp;emsp;<strong>Examples:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &quot;leetcode&quot;</span><br><span class="line">return 0.</span><br><span class="line"></span><br><span class="line">s = &quot;loveleetcode&quot;,</span><br><span class="line">return 2.</span><br></pre></td></tr></table></figure><span id="more"></span><p>&amp;emsp;&amp;emsp;<strong>Note:</strong><br>&amp;emsp;&amp;emsp;You may assume the string contain only lowercase letters.</p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><p>开始觉的遍历 char[] 然后判断在 String 的首位置和末位置，若一样就返回索引。呃，感觉有点偷鸡</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.indexOf(s.charAt(i)) == s.lastIndexOf(s.charAt(i))) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查了下别人的，又是 <code>new int[26]</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">  <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    count[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (count[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在运行时间上，下面的方法更快</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Maximum Depth of Binary Tree 104</title>
      <link href="/2016/08/23/leetcode-maximum-depth-of-binary-tree-104/"/>
      <url>/2016/08/23/leetcode-maximum-depth-of-binary-tree-104/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">104. Maximum Depth of Binary Tree</a><br>&amp;emsp;&amp;emsp;Given a binary tree, find its maximum depth.<br>&amp;emsp;&amp;emsp;The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><span id="more"></span><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><p>自己想到应该用递归、为空的返回 0，不为空的返回 1，递归累加；但是有两个点这么判断呢？其实很容易取两数字的 MAX</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://jingjingshao.gitbooks.io/data-structure-and-algorithm-analysis/content/Tree/104_maximum_depth_of_binary_tree.html">104 Maximum Depth of Binary Tree | Data Structure and algorithm analysis</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读【此生为完成】随笔</title>
      <link href="/2016/08/22/being-alive-is-a-gift-reading-notes/"/>
      <url>/2016/08/22/being-alive-is-a-gift-reading-notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们要用多大的代价，才能认清活着的意义？<br>于娟，这个风华正茂的女子，拥有留洋经历和博士学位的复旦大学青年教师，在与晚期癌症抗争一年又四个月后，终于撒手人寰。她带走的家人的思念和不舍，给我们留下坚强的力量。</p></blockquote><p>《此生未完成》这本书是上周末聚会时 Zhen 提到的，上周京东买书就带上了。书里前半探讨作者在生死临界时对生活、工作、名利、家人、朋友的一些看法和思考。这对于刚刚毕业的我来说，确实有些是无法真切体会到的，毕竟经历少。但是在书的字里行间中，仍然可以看到一个（不知道用什么词）的女子。</p><span id="more"></span><h2 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h2><p>疾病能让人有怎样的疼痛？</p><blockquote><p>我还是没有哭，不是因为坚强，而是因为痛的想不起来哭，那个时候，只要能用尽全力顶着。如果稍微分神，我就会痛的晕厥。我不想家人看到我的痛苦。</p></blockquote><p>说来惭愧的一个对比，自己在喝多时有过这样的经历：自己抱着垃圾桶使劲顶着一股劲，要是有人来给自己说话，就会分神似的使劲的呕吐。可这蚀骨之痛要比这疼痛多少倍呢？</p><h2 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h2><blockquote><p>重要的是当他得知我生病消息后的第一反应，眼神表情乃至电话语气网络留言里端倪尽出，你会觉得世间很多人情世故是那么的让你淡然一笑。</p></blockquote><p>在遇到大事的时候方显出真正的朋友和所谓的朋友，扬尘散土，洗沙留金。能遇到“大事”的机会不多，遇到的“大事”还能全身而退的机会就更少了。所以觉的自己应该及时去明辨所有的朋友，将真心给最真的，对于其他的就随他去吧。我不可能讨所有人喜欢，也用不着。</p><h2 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h2><blockquote><p>三十岁之前的努力更多是因为自己有着太多的欲望和执著，从没有“只要活着就好”的简单。名利权情，没有一样是不辛苦的，却没有一样可以带走。</p></blockquote><p>这是一个作者很重要的一个观点。在现在的我看来，“只要活着就好”的活着，是一种精神上富有的活着，是充满智慧的活着。<br>就说现在的自己，什么都不曾拥有，或许不用拥有过的名、利，但是其他方面什么都没有，自己一切都是空的，看到好就会有强烈的“欲望”，如果再强烈一点就会有“执著”。在文字中我感受到了作者在精神方面的强大与富有，或许在这之后才能感受到在名、利之外更重要的东西。其实，自己真的很难想通，到底拥有什么自己就可以“苟”了，自己到底想要什么。了解自己真正想要什么真是一幸事。<br>作者提到的有时间，多多陪陪家人父母、有机会就尽孝，自己是很赞同的。</p><h2 id="（四）"><a href="#（四）" class="headerlink" title="（四）"></a>（四）</h2><blockquote><p>外公反映土豆每次经过，都趴在玻璃上看玻璃窗里的圣诞树、圣诞彩球和姜饼屋。土豆眼神里有点想，但却乖乖看着，并不讨。外公回想说：“那个眼神我想起了卖火柴的小女孩，有时候孩子听话，你却反而会心酸。”</p></blockquote><p>这文字碰触心灵最柔软的地方。</p><h2 id="（五）"><a href="#（五）" class="headerlink" title="（五）"></a>（五）</h2><blockquote><p>你的妈妈不是懦夫，所以你的人生里，遇到珍贵的人与关键的事，都要积极争取，可以失败，但是不能放弃。我想做一个让儿子骄傲的妈妈，只此一点，无论任何地步，我都不会选择自己走，哪怕，万劫不复的痛。</p></blockquote><h2 id="（六）"><a href="#（六）" class="headerlink" title="（六）"></a>（六）</h2><blockquote><p>更多人不会明白，我们两个的谈笑深处埋藏着多少不能言表的无声叹息。上一次见面，我和梅两个事多么风华正茂，像展翅云霄的鹰隼，挥着翅膀相约下次的冲天。这次的相逢，是灰头土脸被命运按在尘土里依然微笑的土鸡之间的问候。</p></blockquote><h2 id="（七）"><a href="#（七）" class="headerlink" title="（七）"></a>（七）</h2><p>“为啥是我得癌症” 的非学术报告，是书的精华文章。从饮食习惯、睡眠习惯、突击作业、环境问题，分析了对身体不利的因素。突击作业其实就是工作习惯。</p><p>在饮食上常吃不寻常的动物、暴饮暴食、嗜荤如命。</p><blockquote><p>我们要相信聪明的祖先，几千年的智慧沉淀，才最终锁定了我们现在的食材，并在远古对他们进行豢养。如果孔雀比鸡好吃，那么现在的就是孔雀，孔雀就是鸡。</p></blockquote><p>在睡眠习惯上：</p><blockquote><p>二十三时至次日三时，是肝脏活动能力最强的时段，也是肝脏最佳的排毒时期，如果肝脏功能得不到休息，会引起肝脏血流相对不足，已受损的肝细胞难以修复并加剧恶化。所以“长期熬夜等于慢性自杀”的说法并不夸张。因此医生建议人们从二十三时左右开始上床睡觉，次日一至三时进入深睡眠状态，好好地养足肝血。</p></blockquote><p>突击作业：</p><blockquote><p>一辆平时就跌跌撞撞一直不维修的破车，一踩油门就彻夜地疯跑疯开半个月。一年搞个五六次，就是钢筋铁打的汽车，开个二十几年也到报废了。</p></blockquote><p>环境问题，空气污染、水污染和食品安全危机还有那可怕的甲醛家具。</p><h2 id="（八）"><a href="#（八）" class="headerlink" title="（八）"></a>（八）</h2><blockquote><p>不去想控制大局小局，不想去多管闲事淡事，我不在有对手，不再有敌人，我也不在关心谁比谁强，课题也好，任务也罢，暂且放着。</p></blockquote><p>也许只有正在想明白的人，才懂的世间的一切，隔岸看花、风淡云轻。</p>]]></content>
      
      
      
        <tags>
            
            <tag> reading-notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Intersection of Two Arrays 349</title>
      <link href="/2016/08/22/leetcode-intersection-of-two-arrays-349/"/>
      <url>/2016/08/22/leetcode-intersection-of-two-arrays-349/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/intersection-of-two-arrays/">349. Intersection of Two Arrays</a><br>&amp;emsp;&amp;emsp;Given two arrays, write a function to compute their intersection.<br>&amp;emsp;&amp;emsp;<strong>Example:</strong><br>&amp;emsp;&amp;emsp;Given nums1 &#x3D; <code>[1, 2, 2, 1]</code>, nums2 &#x3D; <code>[2, 2]</code>, return <code>[2]</code>.</p><span id="more"></span><p>&amp;emsp;&amp;emsp;<strong>Note:</strong><br>&amp;emsp;&amp;emsp;Each element in the result must be unique.<br>&amp;emsp;&amp;emsp;The result can be in any order.</p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><p>使用 set 进行去重</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersection2(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">Set&lt;Integer&gt; nums1Set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> integer : nums1) &#123;</span><br><span class="line">nums1Set.add(integer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> integer : nums2) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums1Set.contains(integer)) &#123;</span><br><span class="line">set.add(integer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[set.size()];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> integer : set) &#123;</span><br><span class="line">result[i] = integer;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别人的思路"><a href="#别人的思路" class="headerlink" title="别人的思路"></a>别人的思路</h3><p><a href="www.programcreek.com/2015/05/leetcode-intersection-of-two-arrays-java/">LeetCode – Intersection of Two Arrays (Java)</a></p><p>Binary Search</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">    Arrays.sort(nums2);</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums1.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span> || (i&gt;<span class="number">0</span> &amp;&amp; nums1[i]!=nums1[i-<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(Arrays.binarySearch(nums2, nums1[i])&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">                list.add(nums1[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i: list)&#123;</span><br><span class="line">        result[k++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Time &#x3D; O(nlog(n)).<br>Space &#x3D; O(n).</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Same Tree 100</title>
      <link href="/2016/08/22/leetcode-same-tree-100/"/>
      <url>/2016/08/22/leetcode-same-tree-100/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/same-tree/">100. Same Tree</a><br>&amp;emsp;&amp;emsp;Given two binary trees, write a function to check if they are equal or not.<br>&amp;emsp;&amp;emsp;Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p><span id="more"></span><p>关于树结构自己没怎么看过，查了查遍历通常是：递归、stack</p><h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">null</span> || q == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p.val == q.val) &#123;</span><br><span class="line"><span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Excel Sheet Column Title 168</title>
      <link href="/2016/08/22/leetcode-excel-sheet-column-title-168/"/>
      <url>/2016/08/22/leetcode-excel-sheet-column-title-168/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/excel-sheet-column-title/">168. Excel Sheet Column Title</a><br>&amp;emsp;&amp;emsp;Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p><span id="more"></span><p>For example:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> -&gt; A</span><br><span class="line"><span class="number">2</span> -&gt; B</span><br><span class="line"><span class="number">3</span> -&gt; C</span><br><span class="line">...</span><br><span class="line"><span class="number">26</span> -&gt; Z</span><br><span class="line"><span class="number">27</span> -&gt; AA</span><br><span class="line"><span class="number">28</span> -&gt; AB</span><br></pre></td></tr></table></figure><h3 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h3><p>十进制转“二十六进制”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">convertToTitle</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">chrInt</span> <span class="operator">=</span> n % <span class="number">26</span>;</span><br><span class="line"><span class="type">char</span> chr;</span><br><span class="line"><span class="keyword">if</span> (chrInt == <span class="number">0</span>) &#123;</span><br><span class="line">chr = <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">n -= <span class="number">26</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">chr = (<span class="type">char</span>) (chrInt - <span class="number">1</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">str = chr + str;</span><br><span class="line">n = n / <span class="number">26</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (n != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别人的思路"><a href="#别人的思路" class="headerlink" title="别人的思路"></a>别人的思路</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">convertToTitle</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Input is not valid!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> (<span class="type">char</span>) (n % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        n /= <span class="number">26</span>;</span><br><span class="line">        sb.append(ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb.reverse();</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路是一样的，但是代码更简洁，使用了<code>StringBuilder</code> 和 <code>reverse()</code>，提前减 1 也避免了特殊处理’Z’</p><p>在算法问题中常常用到：</p><ul><li><code>1</code> 的 ascii 为 33，十六进制为 21H</li><li><code>A</code> 的 ascii 为 65，十六进制为 41H</li><li><code>a</code> 的 ascii 为 97，十六进制为 61H</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Excel Sheet Column Number 171</title>
      <link href="/2016/08/22/leetcode-excel-sheet-column-number-171/"/>
      <url>/2016/08/22/leetcode-excel-sheet-column-number-171/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/excel-sheet-column-number/">171. Excel Sheet Column Number</a><br>&amp;emsp;&amp;emsp;Given a column title as appear in an Excel sheet, return its corresponding column number.</p><span id="more"></span><p>For example:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A -&gt; <span class="number">1</span></span><br><span class="line">B -&gt; <span class="number">2</span></span><br><span class="line">C -&gt; <span class="number">3</span></span><br><span class="line">...</span><br><span class="line">Z -&gt; <span class="number">26</span></span><br><span class="line">AA -&gt; <span class="number">27</span></span><br><span class="line">AB -&gt; <span class="number">28</span></span><br></pre></td></tr></table></figure><h3 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h3><p>很像是“二十六进制”转十进制</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">titleToNumber</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; chars.length) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">charInt</span> <span class="operator">=</span> chars[chars.length - <span class="number">1</span> - i] - <span class="number">64</span>;</span><br><span class="line">col += Math.pow(<span class="number">26</span>, i) * charInt;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在算法问题中常常用到：</p><ul><li><code>1</code> 的 ascii 为 33，十六进制为 21H</li><li><code>A</code> 的 ascii 为 65，十六进制为 41H</li><li><code>a</code> 的 ascii 为 97，十六进制为 61H</li></ul><p>上面有个写的不好的地方就是 64，好像的很莫名的一个数字，其实时在将 A 折算为 1</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读【蛤蟆的油】随笔</title>
      <link href="/2016/08/17/something-like-an-autobiography-reading-notes/"/>
      <url>/2016/08/17/something-like-an-autobiography-reading-notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>日本民间流传着这样一个故事：在深山里，有一种特别的蛤蟆，它和同类相比不仅外表更丑，而且还多长了几条腿。人们转到它后，将其放在镜前或者玻璃箱内，蛤蟆一看到自己丑陋不堪的真面目，不禁吓出一身油。这种油，也是民间用来治疗烧伤烫伤的珍贵药材。</p></blockquote><p>第一次写人文类书籍的笔记。</p><p>故事是从黑泽明一岁多光着身子洗澡开始回忆的，然后按时间，一个个小故事讲述自己。</p><p>（一）</p><p>二年级是他得到了“糖酥”这个绰号，因为有人揪他的头发，往他西装上抹鼻涕，让他哭了好几次。</p><p>想到了自己大概三四年级的一件事：一次在公交车站等车被人嘲笑嘴巴大，是陌生的同龄人。自己当时被蒙掉了，也不知道说什么或者做点什么，傻傻的，后来车来了，上车回家了。我记得我是在车上委屈的哭了。十几年来这件事我一直都记得，总是把这事归为黑历史、很怂的事，也从来没和别人讲过。我当时为什么没有还击？是被大人教育的打架不是好孩子？还是自己的胆小？还是正中下怀？细思这些都有，是太小没有自己的判断力，也缺少一份对自己信心与肯定。</p><p>要能再来我一定会把那小子打到哭。</p><span id="more"></span><p>（二）</p><p>小黑遇到了“崇尚自由、以鲜活的感性及创造精神从事教育的老师”，立川老师对智力发育缓慢、性格乖僻的他多方庇护，使他第一次有了自信。立川老师还为了使植草（小黑好友）尽快地开出灿烂的花，把植草移栽到了副班长这个盆里，而且放在向阳之处。</p><p>遇到一个能指导你成长的同学、朋友、老师、哥哥姐姐真的是一件很幸运的事情。我觉的他们在有智慧的人群里，不是瞎折腾或者很世俗。</p><p>（三）</p><p>给客人吃的鱼，鱼头朝左，鱼腹朝着客人。给剖腹者上的鱼，大概是鱼头朝右，鱼背朝着本人。或许是因为，如果让剖腹者看到剖开的鱼腹，未免太残酷了。</p><p>（四）</p><p>小黑在学剑道时，道场的主人被汽车撞了，那是汽车本来是稀罕之物，却又让这稀罕之物撞伤，简直像挨马踢一样可笑。而对道场主人的尊敬烟消云散。自己在高野佐三郎的道场在学交叉坎时，被弹回来撞到墙上，眼前一阵发黑，两眼直冒金星，对自己剑道的自豪化为乌有。</p><p>人世并不像想象的那么简单。人外有人，天外有天。自己不免是井底之蛙，总是管中窥豹。很多像这样的道理，我都听过，我也认同，可在没有遇到一件具体的事情的时候，总是看不到认不清自己的浅薄。多多经历，多多思考。</p><p>（五）</p><p>在体育课上，体育老师教跳高采取比赛的方法，撞掉竿就被淘汰下去。黑泽明刚一起跑，同学们就哄堂大笑。他们准是觉得我会头一个把横杆撞下来。出乎意料的是我轻松越过了横杆。横杆逐渐上移，然而，挑战的人中间总有我。看热闹的人们寂然无声了。不知道什么原因，居然出现了奇迹：只剩我一个人在挑战了。一个个无不呆呆地看着我。而且，只剩下我一个人之后，仍然几次跳过了横杆。也许是天使哀怜我体操课总得零分，给我的背插上了翅膀。<br>最后一句，写的真美。</p><p>（六）</p><p>人是可笑的，过分受惊时，头脑的一部分会脱离现实，想入非非，看起来显得十分沉着。当大地震时，抱着电线杆忍受着强烈的摇晃时，仍然想到了这些，而且非常佩服日式建筑的优越性。然而这绝不意味着我遇事沉着冷静。</p><p>（七）</p><p>没有经历过的人无法想象对人类来说何谓正真的黑暗，这黑暗又是多么的可怕。这恐怖夺走了人的正气。无论朝哪里望，什么都看不见，这是最使人感到孤立无援的地方，它使人内心深处产生了惊慌和不安，也使人处于名副其实的疑心生暗鬼状态。</p><p>好像有点像我国的“吃盐防辐射”，都是巧妙地利用黑暗对人的威胁制造的阴谋？还是易受蛊惑的人心是社会发展的过程中要的经历？</p><p>（八）</p><p>结束这趟可怕的远足，当天晚上，我以为一定难以入睡，还会大做噩梦，但头刚一沾枕就到了第二天早晨。哥哥说：“面对可怕的事物闭眼不敢看，就会觉得它可怕；什么都不在乎，哪里还有什么可怕的呢？”。现在看来，那趟远足，对哥哥来说可能也是可怕的。正因为可怕，所以必须征服它。这次远足也是一次征服恐怖的远征。</p><p>可是面对了自己可怕的东西后，还是怕的原因是什么呢？是还没有正面面对？</p><p>（九）</p><p>高山仰止</p><p>对有气质、有修养或有崇高品德之人的崇敬、仰慕之情。</p><p>（十）</p><p>人能把卫星送进宇宙，在精神层面却不会向上看，而是像野狗一样，只注意脚下，徘徊不已。</p><p>（十一）</p><p>后娘用艾苦我身&#x2F;我为后娘买大艾&#x2F;为讨她欢心。继母为什么虐待前房孩子？如果说出于憎恨丈夫的前妻而虐待其子，这是没有道理的。认为这完全出于愚昧。愚昧是人的疯狂病症之一，以虐待没有反抗能力的孩子或者小动物为乐的人，纯粹是疯子。然而这类疯子并不认为这是犯罪，却认为是理所当然，所以难以对付。我能解开绑她的带子，然而无法把她从捆绑她的境遇中救出。对这个孩子来说，人们的同情是毫无意义的。那种温情反倒给她招来更多的麻烦。</p><p>想到了打劫的故事，说：被劫持的人只要交的钱比上一人交的钱多一倍，就可以走。人争先恐后的交赎金，不再有人反抗。</p><p>（十二）</p><p>本来是红的，却不老实说它是红的，等到能坦率说出来的时候，已经到了晚年。很多人年轻时表现欲过强，这样反倒迷失了自己。我也毫不例外，拼命的考技巧作画，那画的俗气使我对自己心生憎恶，逐渐丧失了对自己才能有的信心，把绘画看作痛苦了。为了买油彩和画布还得干些不愿干的杂活儿赚钱才行。</p><p>少搞些套路，玩花活，踏踏实实才是真。别瞎折腾，没有用。</p><p>（十三）</p><p>产生这种急于就业的焦虑和降格以求的心情，主要是以为哥哥突然去世，我要继他之后负起长子的责任。</p><p>在年初有类似的经历，最后一个学期，都找工作去了，也要毕业要长大了，急着确定个工作。其实现在也着急着，想快有所作为。前几日，看到好友暗叶的朋友圈发：年轻人想法没多，都是还得慢慢来。我初看是不赞同。黑泽明的父亲也告诫他说：“不要着急，也没有着急的必要”，“要等下去，前面的道路自然会打开的”。这些话我确实还不太理解为什么，得慢慢的体会。</p><p>（十四）</p><p>凡事想用人的，必须先培养人。培养出人，激发出人的才能，这才能用。</p><p>纷扰的现在，还有多少人或公司愿意培养人？应该说人培养应该是必须的。</p><p>（十五）</p><p>山本先生对于追随他的副导演，绝不干改变他们个性的事，而是一心一意的着力于发掘他们的个性；而且丝毫不让我们有从师学习的拘束心情，而是让我们充分的发展自己。<br>山本先生为了培养副导演，不惜牺牲自己的作品。<br>“那是卖香荷包的招牌。随随便便说话可不行！不知道的事情就该说不知道！”</p><p>（十六）</p><p>提出批评不难。但是，提出批评的人能够按照自己的批评意见亲自把剧本改好，却不是普通人能做到的事。</p><p>太有同感了，常常有人在旁边指手画脚，却说不出什么切实可行的办法建议。</p><p>（十七）</p><p>人往往习惯于认为价值与辛苦成正比。这在电影界剪辑上是最要不得的。人们说电影是时间的艺术，所以，没有用的时间就应删去。</p><p>这观点在互联网行业也行的通，做好的功能不合适了，说废也就废掉了。</p><p>（十八）</p><p>我常常把群众演员的名字忘掉，所以只好按他们的衣服颜色招呼。结果被山本先生训了几句：“黑泽明，那可不行。人都有个名嘛！”。名不见经传的演员听到山本先生如此亲切的招呼他，无不感到。难道能说山本先生有些滑头吗？我看应该说他善于用人。</p><p>自己还不是什么重要人物，但是记住别人的名字应该是件重要的事情。</p><p>（十九）</p><p>关于演员的关键问题主要有以下几点：第一，人很难了解自己，不能客观的观察自己的说话方式和行为举止。第二，凡事有意识的动作，首先注意的不是动作本身，而是意识。第三，教给演员怎么做，同时必须告诉他为什么怎么做，而且让他充分理解、心悦诚服。</p><p>做事情的时候应该反向考虑第三点，为什么要怎么做事情？目的是什么？</p><p>（二十）</p><p>电影评论家中冲有这样的人，看到电影中一些自己认为是缺点的地方就如获至宝，大发谬论，但是电影导演也乐于此道可就错了。</p><p>现在这样的人越来越多，哗众取宠。</p><p>（二十一）</p><p>他们以为一部卖座影片的续集也必然会成功，于是不想再开拓新的领域，总想旧梦重温。重拍的影片绝不如前作，这虽然是已经证明的事实，但他们还要重蹈覆辙，这才是地地道道的愚蠢之举。</p><p>学习新东西，找新路子。</p><p>（二十二）</p><p>我为了抵抗人的苦恼，戴上一幅强者的面具；而植草却为了沉溺与人的苦恼，戴上了一幅弱者的面具。事实不过如此。但这只是表面的不同，就本质来说。我们都是弱者。我不是特别的人。我既不是特别强的人，也不是得天独厚的有特殊才能的人。我不过是个不愿示弱于人，不愿输给别人，因而不懈努力的人。</p><p>在原来看到这样的句子是很不屑的，觉的成功的人，说什么都行。现在信了，真的人都本是普通人，只是有的人一直在进步成长就现在不再普通了。</p><p>（二十三）</p><p>有一天，我在电车里看到这种杂志的广告，简直目瞪口呆。那上面用大字标题写着：是谁夺走了 XX 的贞操？乍看起来，这似乎在为 XX 女士鸣不平，实际则是把 XX 当作玩物恣意戏耍。我认为，这不是言论自由，而是言论暴力。</p><p>没想到在那么早，就提到了“言论暴力”的话题，社交平台的评论区常常有的血雨腥风。</p><p>（二十四）</p><p>本民族人为什么对于本民族的存在毫无自信呢？为什么对异域的东西那么尊重，对于自己的东西就那么轻视呢？</p><p>黑泽明提到是：可悲的国民性。自己没太理解。</p><blockquote><p>人是很难如实的谈论自己的。人总是本能的美化自己。人不会老老实实的说自己是怎样一个人，常常是假托别人才能老老实实的谈论自己。<br>因为，在没有什么能比作品更好的说明作者了。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> reading-notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Move Zeroes 283</title>
      <link href="/2016/08/16/leetcode-move-zeroes-283/"/>
      <url>/2016/08/16/leetcode-move-zeroes-283/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/move-zeroes/">283. Move Zeroes</a><br>&amp;emsp;&amp;emsp;Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements. For example, given nums &#x3D; [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p><span id="more"></span><p>Note:</p><ul><li>You must do this in-place without making a copy of the array.</li><li>Minimize the total number of operations.</li></ul><hr><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>将数组中 0 元素移动到数组的末尾，不改变其他元素的顺序；不能 copy 数组，最小化的操作</p><h3 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h3><h4 id="交换冒泡"><a href="#交换冒泡" class="headerlink" title="交换冒泡"></a>交换冒泡</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasChange</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">hasChange = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] == <span class="number">0</span> &amp;&amp; nums[i + <span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">nums[i] = nums[i + <span class="number">1</span>];</span><br><span class="line">nums[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">hasChange = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (hasChange);</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="与-0-换位置，参考了别人的想法"><a href="#与-0-换位置，参考了别人的想法" class="headerlink" title="与 0 换位置，参考了别人的想法"></a>与 0 换位置，参考了别人的想法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">moveZeroes2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">firstZoneIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (firstZoneIndex != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 发现了过0</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] != <span class="number">0</span>) &#123;</span><br><span class="line">nums[firstZoneIndex] = nums[i];</span><br><span class="line">nums[i] = <span class="number">0</span>;</span><br><span class="line">firstZoneIndex++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 没有发现过0</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">firstZoneIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别人的算法"><a href="#别人的算法" class="headerlink" title="别人的算法"></a>别人的算法</h3><ul><li><a href="http://blog.csdn.net/xudli/article/details/48574521">西施豆腐渣 - leetcode 283: Move Zeroes</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; nums.length) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != i) &#123;</span><br><span class="line">nums[i++] = nums[j];</span><br><span class="line">nums[j] = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Ransom Note 383</title>
      <link href="/2016/08/11/leetcode-ransom-note-383/"/>
      <url>/2016/08/11/leetcode-ransom-note-383/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/ransom-note/">383. Ransom Note</a><br>&amp;emsp;&amp;emsp;Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.<br>&amp;emsp;&amp;emsp;Each letter in the magazine string can only be used once in your ransom note.</p><span id="more"></span><p>Note:<br>You may assume that both strings contain only lowercase letters.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false</span><br><span class="line">canConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false</span><br><span class="line">canConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true</span><br></pre></td></tr></table></figure><hr><p>自己第一次做 LeetCode 上面的题，也没什么算法方面的学习，摸着石头过河，步步提高。</p><h3 id="大体意思"><a href="#大体意思" class="headerlink" title="大体意思"></a>大体意思</h3><p>判断第二个字符串中的字母是否可以组成第一个字符串，每个字母只能用一次；两个字符串仅包含小写字母</p><h3 id="自己的思路"><a href="#自己的思路" class="headerlink" title="自己的思路"></a>自己的思路</h3><p>将 ransom 转成 char 数组，遍历数组，然后在 magazines，进行对比，然后除去一个一样的字母</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransom, String magazine)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ransom.length() &gt; magazine.length()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] ransomChar = ransom.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomChar.length; i++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(ransomChar[i]);</span><br><span class="line"><span class="keyword">if</span> (magazine.indexOf(str) == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (magazine.indexOf(str) == magazine.length() - <span class="number">2</span>) &#123;</span><br><span class="line">magazine = magazine.substring(<span class="number">0</span>, magazine.indexOf(str));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">magazine = magazine.substring(<span class="number">0</span>, magazine.indexOf(str)) + magazine.substring(magazine.indexOf(str) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别人的算法"><a href="#别人的算法" class="headerlink" title="别人的算法"></a>别人的算法</h3><ul><li><a href="https://www.hrwhisper.me/leetcode-ransom-note/">leetcode Ransom Note - 细语呢喃</a></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] cnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++) cnt[magazine.charAt(i) - <span class="number">97</span>]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++) <span class="keyword">if</span> (--cnt[ransomNote.charAt(i) - <span class="number">97</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我的理解<br>26 个元素的数组，每个元素存放字母的个数，如果需要的多于存在的 return false</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【IMOOC-与MySQL的零距离接触】笔记</title>
      <link href="/2016/07/31/imooc-meet-mysql-notes/"/>
      <url>/2016/07/31/imooc-meet-mysql-notes/</url>
      
        <content type="html"><![CDATA[<p>涵盖全部 MySQL 数据库的基础，MySQL 数据库的基础知识、数据表的常用操作及各种约束的使用，以及综合的运用各种命令实现记录进行 CURD 等操作。</p><ul><li>MySQL 安装与配置</li><li>数据类型</li><li>流程控制与运算符</li><li>DDL、DCL、DQL、DML</li><li>常用函数</li><li>表类型（存储引擎）</li><li>图形化工具</li></ul><span id="more"></span><h2 id="修改-MySQL-提示符"><a href="#修改-MySQL-提示符" class="headerlink" title="修改 MySQL 提示符"></a>修改 MySQL 提示符</h2><p>MySQL 客户端的默认提示符是 <code>mysql&gt;</code>，基本上没什么实际作用。其实可以修改这个提示符，让它显示一些有用的信息，例如当前所在的数据库等。修改方法有四种，其中前两种只对当前连接有效，后两种则对所有连接有效。</p><h3 id="连接客户端时通过参数指定"><a href="#连接客户端时通过参数指定" class="headerlink" title="连接客户端时通过参数指定"></a>连接客户端时通过参数指定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql --prompt=<span class="string">&quot;(\u@\h) [\d]&gt; &quot;</span></span><br></pre></td></tr></table></figure><p><code>my.cnf</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">prompt=mysql(\\u@\\h:\\d)&gt;</span><br></pre></td></tr></table></figure><p>这样提示符就会变成 <code>(user@host) [database]&gt;</code>。其中常用的字符参数有：</p><ul><li><code>\D</code> 完整的日期</li><li><code>\d</code> 当前数据库</li><li><code>\h</code> 服务器名称</li><li><code>\u</code> 当前用户</li></ul><p>连接上客户端后，通过 <code>prompt</code> 命令修改</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">prompt (\u@\h) [\d]<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>在 MySQL 的配置文件中配置。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">prompt<span class="operator">=</span>(\\u@\\h) [\\d]<span class="operator">&gt;</span>\\_</span><br></pre></td></tr></table></figure><p>通过环境变量配置。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">export MYSQL_PS1<span class="operator">=</span>&quot;(\u@\h) [\d]&gt; &quot;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="http://renial.iteye.com/blog/773675">http://renial.iteye.com/blog/773675</a></p></blockquote><h2 id="MySQL-语法规范"><a href="#MySQL-语法规范" class="headerlink" title="MySQL 语法规范"></a>MySQL 语法规范</h2><ul><li>关键字和函数名称全部 <strong>大写</strong></li><li>数据库名称，表名称，字段名称全部 <strong>小写</strong></li><li>SQL 语句必须以 <strong>分号结尾</strong></li></ul><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="数据库创建：CREATE"><a href="#数据库创建：CREATE" class="headerlink" title="数据库创建：CREATE"></a>数据库创建：CREATE</h3><ul><li>语法：CREATE {DATABASE SCHEMA} [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [&#x3D;] charset_name</li><li>DATABASE 和 SCHEMA 是相同的，任选其一</li><li>IF NOT EXISTS:如果创建的数据库存在，则不只报出 warning，不写会报错</li><li>CHRARCTER SET utf8:为表设置编码方式，如果不设置则用 mysql 默认的编码方式</li></ul><h3 id="查看数据库列表：SHOW"><a href="#查看数据库列表：SHOW" class="headerlink" title="查看数据库列表：SHOW"></a>查看数据库列表：SHOW</h3><ul><li>SHOW { DATABASE SCHEMAS } [LIKE ‘pattern’ WHERE expr]</li><li>SHOW CREATE DATABASE xx：显示 xx 数据库信息</li></ul><h3 id="数据库的修改：ALTER"><a href="#数据库的修改：ALTER" class="headerlink" title="数据库的修改：ALTER"></a>数据库的修改：ALTER</h3><ul><li>修改数据库编码方式：ALTER { DATABASE SCHEMAS } [db_name][default] CHARACTER SET [&#x3D;] charset_name</li></ul><h3 id="删除数据库：DROP"><a href="#删除数据库：DROP" class="headerlink" title="删除数据库：DROP"></a>删除数据库：DROP</h3><ul><li>删除数据库：DROP { DATABASE SCHEMAS } [IF EXISTS] db_name;</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--修改mysql操作符为当前日期</span></span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>proot prompt \D</span><br><span class="line"><span class="comment">--展示所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">--创建数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> t1 <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br><span class="line"><span class="comment">--展示数据库t1的创建命令和编码形式</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database t1;</span><br><span class="line"><span class="comment">--修改数据库编码格式</span></span><br><span class="line"><span class="keyword">alter</span> database t2 <span class="type">character</span> <span class="keyword">set</span> <span class="operator">=</span> utf8;</span><br><span class="line"><span class="comment">--删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> t1;</span><br><span class="line"><span class="comment">--展示警告信息</span></span><br><span class="line"><span class="keyword">show</span> warnings;</span><br></pre></td></tr></table></figure><h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><p><img src="https://user-images.githubusercontent.com/9289792/80199388-d5776280-8653-11ea-9182-29a23e53ba50.png" alt="160731-imooc-mysql-tutorials-notes-int"></p><p><img src="https://user-images.githubusercontent.com/9289792/80199384-d4decc00-8653-11ea-88ea-81e6e1f29f5a.png" alt="160731-imooc-mysql-tutorials-notes-float"></p><p><img src="https://user-images.githubusercontent.com/9289792/80199382-d3150880-8653-11ea-9c7c-2385530649ad.png" alt="160731-imooc-mysql-tutorials-notes-char"></p><ul><li>char 型字符串有 0-255 之间的字节，通常被称作定长类型。所存字节不满 char 型所给它的字节，剩下的以空格补齐，仍会存储满你所给它的字节。</li><li>varchar 型的字符串是变长类型，存多少字节它就存储多少字节，不会在后面补上空格。字节长度在 0-65535 之间。</li><li>1 个字节等于 8 个 bit，L+ 几个字节后面的几个字节指的是他的最大存储范围。8 个 bit 等于就是 8 个 1，相当于 255，就是 2 的 8 次方。16 个 1 就相当于 2 的 16 次方。3 个字节四个字节依次类推。</li><li>ENUM 枚举值 就是给他几个选项，它从这几个选项中做选择，最多有 65535 个值。</li><li>SET 我们称之为集合，集合最多有 64 个成员，它在这些集合成员中做任意的排列组合。</li></ul><p><img src="https://user-images.githubusercontent.com/9289792/80199391-d60ff900-8653-11ea-9836-4fa28ac1cb33.png" alt="160731-imooc-mysql-tutorials-notes-time"></p><ul><li>YEAR：2 位或者 4 位，1970 到 2069 年，允许 70 到 69</li><li>TIME：-8385959 到 8385959</li><li>DATE：1000.01.01 到 9999.12.31</li><li>DATETIME：1000.01.01 00:00:00 到 9999.12.31 23:59:59</li><li>TIMESTAMP：1970.01.01 00 点起 到 2037 年之间的一个值</li></ul><h2 id="五、数据表操作"><a href="#五、数据表操作" class="headerlink" title="五、数据表操作"></a>五、数据表操作</h2><ul><li>数据表（或表）是数据库最重要的组成部分之一，是其他对象的基础</li><li>表是一个二维表，行称为 <code>记录</code>，列称为 <code>字段</code></li></ul><h3 id="创建数据表据表"><a href="#创建数据表据表" class="headerlink" title="创建数据表据表"></a>创建数据表据表</h3><p>1、打开数据库：<code>USE db_name;</code><br>2、查看当前数据库：<code>SELECT DATABASE();</code><br>3、创建数据表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name(</span><br><span class="line">column_name data_type,</span><br><span class="line">...</span><br><span class="line">column_name data_type</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb1(</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">userage TINYINT UNSIGNED,</span><br><span class="line">salary <span class="type">FLOAT</span>(<span class="number">8</span>,<span class="number">2</span>) UNSIGNED,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> db_name] [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span> <span class="keyword">WHERE</span> expr];</span><br></pre></td></tr></table></figure><p>查看当前选择的数据库的所有表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>查看 MYSQL 数据库中的所有表，当前选择数据库位置不变</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES <span class="keyword">FROM</span> MYSQL;</span><br></pre></td></tr></table></figure><p>查看当前选择的数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><p>查看数据表结构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="插入与查找"><a href="#插入与查找" class="headerlink" title="插入与查找"></a>插入与查找</h3><p>插入记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tb_name [(col_name,col_name,...)] <span class="keyword">VALUES</span> (va1,...)</span><br></pre></td></tr></table></figure><p>查找记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expr,.. <span class="keyword">FROM</span> tb_name</span><br></pre></td></tr></table></figure><h3 id="空值与非空"><a href="#空值与非空" class="headerlink" title="空值与非空"></a>空值与非空</h3><p>NULL，字段值可以为空<br>NOT NULL，字段值禁止为空</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb2(</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">age TINYINT UNSIGNE <span class="keyword">NULL</span>;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h3><p>自动编号 <code>AUTO_INCREMENT</code><br>自动编号，且必须与主键配合使用</p><p>自动编号 AUTO_INCREMENT 作用<br>1、自动编号：保证记录的唯一性<br>2、类型必须为整型（可以是 FLOAT(5,0)等，小数点后必须为 0），必须和主键 PRIMARY KEY 组合使用<br>3、默认情况下，起始值为 1，每次的增量为 1</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb3(</span><br><span class="line">id <span class="type">SMALLINT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"><span class="comment">-- 报错，自动增量字段必须设置成主键</span></span><br></pre></td></tr></table></figure><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p><code>PRIMARY KEY</code>，也可以写成<code>KEY</code><br>1、每张数据表只能存在一个主键<br>2、主键保证记录的唯一性<br>3、主键自动为<code>NOT NULL</code>，即必须要为主键赋值。但如果记录中添加了<code>AUTO_INCREMENT</code>，那么不需要手动赋值<br>4、<code>auto_increment</code>必须和主键<code>primary key</code>一起使用，但主键<code>primary key</code>不一定要和<code>auto_increment</code>一块使用</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb3(</span><br><span class="line">id <span class="type">SMALLINT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p><code>PRIMARE KEY</code><br>主键约束 一张表中只能有一个</p><p><code>UNIQUE KEY</code><br>1、唯一约束<br>2、唯一约束可以保证记录的唯一性<br>3、唯一约束的字段可以为空值<br>4、每张数据表可以存在多个唯一约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb3(</span><br><span class="line">id <span class="type">SMALLINT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> KEY,</span><br><span class="line">age tinyint UNSIGNED</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>在创建索引时也是有区别的</li></ul><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p><code>DEFAULT</code> 当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb6(</span><br><span class="line">id <span class="type">SMALLINT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> KEY,</span><br><span class="line">sex ENUM(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中对性别字段默认选择<code>3</code></p><h2 id="六、约束以及修改数据表"><a href="#六、约束以及修改数据表" class="headerlink" title="六、约束以及修改数据表"></a>六、约束以及修改数据表</h2><ul><li>FOREIGN KEY：保持数据一致性，完整性；实现一对一或一对多关系。</li><li>要求：父表和子表必须使用相同的存储引擎,而且禁止使用临时表；数据表的存储引擎只能为 InnoDB；外键列和参照列必须具有类似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同；外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL 将自动创建索引。</li><li>在 MY.ini 文件中编辑默认的存储引擎：default-storage-engine&#x3D;INNODB；</li><li>显示创建表的语句：SHOW CREATE TABLE table_name；</li><li>查看表是否有索引：SHOW INDEXS FROM table_name；</li><li>以网格查看表是否有索引：SHOW INDEXS FROM table_name\G；</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name1(</span><br><span class="line">id <span class="type">SMALLINT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name2(</span><br><span class="line">id <span class="type">SMALLINT</span> UNSIGNED AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">pid <span class="type">SMALLINT</span> UNSIGNED,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (pid) <span class="keyword">REFERENCES</span> table_name1(id) <span class="comment">/* 外键 pid 参照 table_name1中的 id 字段 */</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux SSH 密钥登陆免密码</title>
      <link href="/2016/07/29/linux-ssh-key-login-without-password/"/>
      <url>/2016/07/29/linux-ssh-key-login-without-password/</url>
      
        <content type="html"><![CDATA[<p>最近有需求使用 SSH 进行通信，而且要需免密码，总结了 SSH 密钥登陆免密码的方法。</p><h2 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h2><ul><li>本机 ip：192.168.1.1</li><li>服务器 ip：192.168.1.2</li></ul><p>要实现本机免密码登录服务器，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id username@192.168.1.2</span><br></pre></td></tr></table></figure><p>如果命令成功，则说明配置成功。如果执行失败，则需要参考下面的步骤进行配置。</p><span id="more"></span><h2 id="本地配置步骤"><a href="#本地配置步骤" class="headerlink" title="本地配置步骤"></a>本地配置步骤</h2><h3 id="客户端生成公钥、私钥"><a href="#客户端生成公钥、私钥" class="headerlink" title="客户端生成公钥、私钥"></a>客户端生成公钥、私钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>-t</code> 表示 <code>key</code> 的类型</li><li><code>-P</code> 表示密码，<code>-P &#39;&#39;</code> 就表示空密码，也可以不用 <code>-P</code> 参数</li></ul><p>运行完之后在 <code>~/.ssh</code> 目录下生成私钥 <code>id_rsa</code> 和公钥 <code>id_rsa.pub</code>。</p><h3 id="将公钥添加到服务器"><a href="#将公钥添加到服务器" class="headerlink" title="将公钥添加到服务器"></a>将公钥添加到服务器</h3><p>将客户端公钥 <code>id_rsa.pub</code> 写入到服务端 <code>~/.ssh/authorzied_keys</code> 之中。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制输出的内容，登陆服务端：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>粘贴到最后一行。如果没有这个 <code>authorzied_keys</code> 文件，可以创建一个。</p><h3 id="设置文件权限"><a href="#设置文件权限" class="headerlink" title="设置文件权限"></a>设置文件权限</h3><p>服务端，非必须。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 755 ~/.ssh</span><br><span class="line">sudo <span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="客户端重启服务"><a href="#客户端重启服务" class="headerlink" title="客户端重启服务"></a>客户端重启服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><p>此时就可以不免密码登陆服务端了。</p><h2 id="以证书登录后-使用-sudo-操作"><a href="#以证书登录后-使用-sudo-操作" class="headerlink" title="以证书登录后 使用 sudo 操作"></a>以证书登录后 使用 sudo 操作</h2><p>设置用户以证书登录后，使用 sudo 操作。在服务端设置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%sudo ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上一行替换为：</span></span><br><span class="line"></span><br><span class="line">%sudo ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><h2 id="类似-AWS-PEM-配置方法"><a href="#类似-AWS-PEM-配置方法" class="headerlink" title="类似 AWS PEM 配置方法"></a>类似 AWS PEM 配置方法</h2><p>亚马逊 AWS 虚拟服务器使用一个预先生成的 <code>*.pem</code> 证书文件（密钥）为客户端和服务器之间建立连接。 例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i ~/ec2.pem ubuntu@12.34.56.78</span><br></pre></td></tr></table></figure><p>首先确定你可以以密码的形式连接远程服务器，也可以 <a href="http://blog.csdn.net/hanshileiai/article/details/51141854">创建一个非超级管理员用户，并增加 sudo 权限</a>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ssh root@12.34.56.78</span><br></pre></td></tr></table></figure><h3 id="客户端生成验证没有密码密钥对"><a href="#客户端生成验证没有密码密钥对" class="headerlink" title="客户端生成验证没有密码密钥对"></a>客户端生成验证没有密码密钥对</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -v</span><br></pre></td></tr></table></figure><p>执行上述命令首先会让你输入生成密钥的文件名：我这里输入的 <code>myPemKey</code> 之后一路回车。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/anonymouse/.ssh/id_rsa): myPemKey</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> hetzner.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> hetzner.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">bb:c6:9c:ee:6b:c0:67:58:b2:bb:4b:44:72:d3:cc:a5 localhost@localhost</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br></pre></td></tr></table></figure><p>在执行命令的当前目录下会生成一个 <code>myPemKey.pub</code>、<code>myPemKey</code> 两个文件。</p><h3 id="服务端添加公钥"><a href="#服务端添加公钥" class="headerlink" title="服务端添加公钥"></a>服务端添加公钥</h3><p>把生成的 <code>myPemKey.pub</code> 通过本地命令推送到服务器端，使服务器自动添加认证这个证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/myPemKey.pub root@12.34.56.78</span><br></pre></td></tr></table></figure><p>输入你的 <code>root</code> 用户密码</p><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ssh -i ~/myPemKey root@12.34.56.78</span><br></pre></td></tr></table></figure><p>或者把 <code>myPemKey</code> 重命名为 <code>myPemKey.pem</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ssh -i ~/myPemKey.pem root@12.34.56.78</span><br></pre></td></tr></table></figure><h3 id="禁用密码连接"><a href="#禁用密码连接" class="headerlink" title="禁用密码连接"></a>禁用密码连接</h3><p><strong>注意：要保证 .pem 连接成功的状态下，禁用密码连接。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到这一行 <code>#PasswordAuthentication yes</code> 取消前边的 # 注释，改为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><p>重启 ssh 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://blog.csdn.net/hanshileiai/article/details/51141638">韩世磊-ubuntu 生成 .pem 证书连接服务器，取消 OpenSSH 密钥密码认证</a></li><li><a href="http://blog.csdn.net/hanshileiai/article/details/50381467">韩世磊-ubuntu ssh 证书登录（不输入密码）</a></li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【IMOOC-MySQL开发技巧】笔记</title>
      <link href="/2016/07/25/imooc-mysql-development-skills-notes/"/>
      <url>/2016/07/25/imooc-mysql-development-skills-notes/</url>
      
        <content type="html"><![CDATA[<p>主要涉及：JOIN 、JOIN 更新、GROUP BY HAVING 数据查重&#x2F;去重。</p><span id="more"></span><h2 id="INNER"><a href="#INNER" class="headerlink" title="INNER"></a>INNER</h2><p>INNER JOIN、LEFT JOIN、RIGHT JOIN、FULL JOIN(MySQL 不支持)、CROSS JOIN</p><p>这是在网上找到的非常好的一篇博文，图解 JOIN 语句：</p><blockquote><p><a href="https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/">CODING HORROR-A Visual Explanation of SQL Joins</a></p></blockquote><p>下图可以很清楚的明白，JOIN 的数据选取范围：</p><p><img src="https://user-images.githubusercontent.com/9289792/80199172-9d701f80-8653-11ea-8d20-498f54e41708.png" alt="160725-imooc-mysql-development-skills-notes-001"></p><p><img src="https://user-images.githubusercontent.com/9289792/80199188-9fd27980-8653-11ea-9386-e76dca7b4d0c.jpeg" alt="160725-imooc-mysql-development-skills-notes-002"></p><h2 id="更新使用过滤条件中包括本身的表"><a href="#更新使用过滤条件中包括本身的表" class="headerlink" title="更新使用过滤条件中包括本身的表"></a>更新使用过滤条件中包括本身的表</h2><p>更新 <code>t1</code> <code>t2</code> 表中 <code>col_a</code> 重复的字段：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t1</span><br><span class="line"><span class="keyword">SET</span> col_a <span class="operator">=</span> <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> t1.col_a <span class="keyword">IN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> b.col_a</span><br><span class="line">  <span class="keyword">FROM</span> t1 a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 b <span class="keyword">on</span></span><br><span class="line">  a.col_a <span class="operator">=</span> b.col_a</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line">ERROR:<span class="number">1093</span></span><br></pre></td></tr></table></figure><p>可转换为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t1 aa <span class="keyword">JOIN</span>(</span><br><span class="line">  <span class="keyword">SELECT</span> b.col_a</span><br><span class="line">  <span class="keyword">FROM</span> t1 a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 b <span class="keyword">on</span></span><br><span class="line">  a.col_a <span class="operator">=</span> b.col_a</span><br><span class="line">)bb <span class="keyword">on</span> aa.col_a<span class="operator">=</span> bb.col_a</span><br><span class="line"><span class="keyword">SET</span> col_a <span class="operator">=</span> <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="查询重复数据、删除重复数据"><a href="#查询重复数据、删除重复数据" class="headerlink" title="查询重复数据、删除重复数据"></a>查询重复数据、删除重复数据</h2><p>利用 <code>GROUP BY</code> 和 <code>HAVING</code> 查询重复数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col_a, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col_a <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>删除重复数据，对于相同数据保留 ID 最大的：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a</span><br><span class="line"><span class="keyword">FROM</span> t1 a <span class="keyword">JOIN</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> col_a,<span class="built_in">COUNT</span>(<span class="operator">*</span>),<span class="built_in">MAX</span>(id) <span class="keyword">AS</span> id</span><br><span class="line">  <span class="keyword">FROM</span> t1</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> col_a <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line">)b <span class="keyword">ON</span> a.col_a <span class="operator">=</span> b.col_a</span><br><span class="line"><span class="keyword">WHERE</span> a.id <span class="operator">&lt;</span> b.id</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写一些人文的日志</title>
      <link href="/2016/07/11/write-some-humanities-diary/"/>
      <url>/2016/07/11/write-some-humanities-diary/</url>
      
        <content type="html"><![CDATA[<p>还是越来越觉的思想重要。每周给自己博客的计划是写三篇，稍稍改动下：其中一篇要是关于思想上的。</p><p>周末的时候和北京的朋友们：龙、梦、思，小聚了下。问起毕业一个月感觉有啥变化，都说没啥。是，刚刚才一个月。可我心里却有些小慌张，总想搞个大新闻，让自己不那么平凡。是眼高手低吗？</p><span id="more"></span><p>现在每天都会跑跑步，已经坚持了 6 天了也习惯了，挺赞的。也总是去了解新鲜的东西技术，并且尝试运用它们，才有点原来学长们不喜欢用用过的东西做事情的劲。关于英语的学习，现在找到一个法：阅读英文的技术教程或者技术文档。这些东西肯定和计算机有关，也写的比较通俗，感觉挺有收获的。</p><p>最近状态还不错，就是晚上想看会书，可眼睛挺累的。职业生涯的第一个月，经济有些困难。想参与个开源项目。现在手头项目就自己一个人在编，有点孤独，也不知道自己设计的和写的哪里好哪里不好。还有就是在 GitHub 或者 StackOverflow 有人给自己点赞，感觉挺激动的。</p><p>因为公司都是 Google 的服务，出门很方便，GitHub 也用的越来越多。时不时总能搜到、看到很多工程师写的博客，有教程、有分享，还有我最喜欢看的：他们的思想。我觉的他们现在都是比我棒的，我想知道他们是怎么想的、怎么解决问题、怎么看待问题、看待工作生活。</p><p>最后毒奶一口自己：</p><blockquote><p>与那些名校的同学的差距不是毕业后的薪水，也不是学业水平的差距，而是一种思维方式与做事标准。<br>对自己的标准会不由自主的降低以适应这个环境，减少自身与环境的冲突，在一个低标准下，自觉“满意”的度过每一天。<br>&amp;nbsp;<br>为什么名企喜欢要名校的学生？其实名企要的不是多么高的 GPA 成绩，而是一种内在的精神状态。他们的辛苦不叫辛苦，也不为百万年薪。辛苦是他们获得自我实现的途径，自我是实现使他无穷快乐。这世界就是一拨人在昼夜不停的高速运转，另一拨人起床发现世界变了。<br>&amp;nbsp;<br>我们大部分人的工作和生活状态是怎样的呢？<br>上班稍微努力点就开始讲究公平，自己不得志就开始抱怨公司和领导，下班后看几页书就觉得自己特别上进，辛苦上几天就觉得自己要赶紧去享受一下生活了，加几天班就担心自己会过劳死。<br>遇到些鸡毛蒜皮的小事儿就郁郁寡欢，仿佛遇到了天大的人生难题磨磨唧唧解决不清。看见牛逼的人也会心生羡慕，但总也突破不了努力却总不得要领魔咒。<br>&amp;nbsp;<br>越能干，越努力；越有钱，越上进<br>而造成这一切的差异，最主要的来自人的精神内核。<br>&amp;nbsp;<br>你要用牛人的标准要求自己，不断的走到牛人当中去，拉近和牛人之间的距离。当你觉得自己能够成为他们中的一员的时候，你才能成为了真正的牛人。</p></blockquote><p>成功？我才刚上路呢。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu JDK Nginx WildFly MySQL 环境配置</title>
      <link href="/2016/07/07/ubuntu-jdk-nginx-wildfly-mysql-config/"/>
      <url>/2016/07/07/ubuntu-jdk-nginx-wildfly-mysql-config/</url>
      
        <content type="html"><![CDATA[<p>新项目部署上线，主要参考 <a href="http://blog.csdn.net/hanshileiai">世雷博客</a> 的内容，自己也总结了下。从 JDK 安装、Web 容器、数据库，都有涉及比较全面。</p><h2 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h2><h3 id="安装-JDK8"><a href="#安装-JDK8" class="headerlink" title="安装 JDK8"></a>安装 JDK8</h3><p>1、添加软件源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br></pre></td></tr></table></figure><p>2、更新软件源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>3、安装 jdk1.8</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><h3 id="查看-Java-安装路径"><a href="#查看-Java-安装路径" class="headerlink" title="查看 Java 安装路径"></a>查看 Java 安装路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br><span class="line">sudo update-alternatives --config javac</span><br></pre></td></tr></table></figure><h3 id="查看-Java-安装后的版本"><a href="#查看-Java-安装后的版本" class="headerlink" title="查看 Java 安装后的版本"></a>查看 Java 安装后的版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="（扩展）增加多版本-JDK-和切换方法"><a href="#（扩展）增加多版本-JDK-和切换方法" class="headerlink" title="（扩展）增加多版本 JDK 和切换方法"></a>（扩展）增加多版本 JDK 和切换方法</h3><p>1、安装 JDK 6 和 JDK 7</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install oracle-java6-installer</span><br><span class="line">sudo apt-get install oracle-java7-installer</span><br></pre></td></tr></table></figure><p>2、查看所有 JDK 安装版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-java-alternatives -l</span><br><span class="line">java-6-oracle 3 /usr/lib/jvm/java-6-oracle</span><br><span class="line">java-7-oracle 4 /usr/lib/jvm/java-7-oracle</span><br><span class="line">java-8-oracle 2 /usr/lib/jvm/java-8-oracle</span><br></pre></td></tr></table></figure><p>3、通过 <code>-s</code> 参数可以方便的切换到其它的 JDK 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-java-alternatives -s java-6-oracle</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-java-alternatives -s java-7-oracle</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-java-alternatives -s java-8-oracle</span><br></pre></td></tr></table></figure><p>4、再次查看 JDK 版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java version &quot;1.6.0_45&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.6.0_45-b06)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h3><p>1、更新软件源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>2、安装 Nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>3、查看 Nginx 位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><h3 id="Nginx-禁止外网访问"><a href="#Nginx-禁止外网访问" class="headerlink" title="Nginx 禁止外网访问"></a>Nginx 禁止外网访问</h3><p>防止 Google 收录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><p>在 <code>server</code> 中添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># server add</span><br><span class="line"># 公司代理IP</span><br><span class="line">allow *.*.*.*;</span><br><span class="line">deny all;</span><br></pre></td></tr></table></figure><h3 id="Nginx-域名调整"><a href="#Nginx-域名调整" class="headerlink" title="Nginx 域名调整"></a>Nginx 域名调整</h3><p>域名 <code>www</code> 跳转 <code>non www</code>，<code>server</code> 中添加配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server_name www.aaa.org aaa.org;</span><br><span class="line">if ($host != &#x27;aaa.org&#x27;)&#123;</span><br><span class="line">rewrite ^/(.*)$ http://aaa.org/$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx-GZip"><a href="#Nginx-GZip" class="headerlink" title="Nginx GZip"></a>Nginx GZip</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##</span><br><span class="line"># Gzip Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line">gzip_disable &quot;msie6&quot;;</span><br><span class="line"></span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_buffers 16 8k;</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png image/x-icon</span><br></pre></td></tr></table></figure><h3 id="Nginx-静态文件缓存"><a href="#Nginx-静态文件缓存" class="headerlink" title="Nginx 静态文件缓存"></a>Nginx 静态文件缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~*\.(gif|jpg|jpeg|png|bmp|swf|woff|icon)$ &#123;</span><br><span class="line">proxy_cache my_zone;</span><br><span class="line">proxy_cache_bypass $http_cache_control;</span><br><span class="line">proxy_cache_valid 200 1d;</span><br><span class="line">add_header X-Proxy-Cache $upstream_cache_status;</span><br><span class="line">expires 15d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ .*\.(js|css|ttf)$ &#123;</span><br><span class="line">proxy_cache my_zone;</span><br><span class="line">proxy_cache_bypass $http_cache_control;</span><br><span class="line">proxy_cache_valid 200 1d;</span><br><span class="line">add_header X-Proxy-Cache $upstream_cache_status;</span><br><span class="line">expires 15d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态文件放在配置的 <code>root</code> 下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root /opt/***;</span><br></pre></td></tr></table></figure><p>还有个技巧，项目中大量资源文件，例如 PDF，在设计访问 url 时可以 <code>**/pdf/**</code>，这样在 Nginx 进行配置就可以将文件分离出项目；这些文件也放在 <code>root</code> 路径下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ^~ /html/ &#123;</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /pdf/ &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx-Commands"><a href="#Nginx-Commands" class="headerlink" title="Nginx Commands"></a>Nginx Commands</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service nginx stop</span><br><span class="line">sudo service nginx start</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h3 id="Nginx-Show-Log"><a href="#Nginx-Show-Log" class="headerlink" title="Nginx Show Log"></a>Nginx Show Log</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tail -f /var/log/nginx/error.log</span><br></pre></td></tr></table></figure><h2 id="WildFly-10-0-0-Final"><a href="#WildFly-10-0-0-Final" class="headerlink" title="WildFly 10.0.0.Final"></a>WildFly 10.0.0.Final</h2><h3 id="WildFly-安装"><a href="#WildFly-安装" class="headerlink" title="WildFly 安装"></a>WildFly 安装</h3><p>1、下载 WildFly，并提取到 &#x2F;opt 目录 WildFly 10.0.0.Final <a href="http://wildfly.org/downloads/">下载地址</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">sudo wget -c http://download.jboss.org/wildfly/10.0.0.Final/wildfly-10.0.0.Final.tar.gz</span><br><span class="line">sudo tar -xzvf wildfly-10.0.0.Final.tar.gz</span><br></pre></td></tr></table></figure><p>2、创建 WildFly 用户和组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo addgroup wildfly</span><br><span class="line">sudo useradd -g wildfly wildfly</span><br></pre></td></tr></table></figure><p>改变 wildfly 文件夹的所有权：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown -R wildfly:wildfly /opt/wildfly-10.0.0.Final</span><br></pre></td></tr></table></figure><p>创建一个链接映射（好处：如果你改变 WildFly 版本,不需要更新其他配置）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s wildfly-10.0.0.Final /opt/wildfly</span><br></pre></td></tr></table></figure><p>3、安装 init.d 脚本<br>设置并使用 init.d 脚本来启动和停止 WildFly。复制<code>/opt/wildfly/bin/init.d/wildfly-init-debian.sh</code>脚本到 <code>/etc/init.d/wildfly</code>，更改权限,并使其可执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp /opt/wildfly/docs/contrib/scripts/init.d/wildfly-init-debian.sh /etc/init.d/wildfly</span><br><span class="line">sudo chown root:root /etc/init.d/wildfly</span><br><span class="line">sudo chmod ug+x /etc/init.d/wildfly</span><br></pre></td></tr></table></figure><p>启动&#x2F;停止 WildFly 命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/wildfly start</span><br><span class="line">sudo /etc/init.d/wildfly stop</span><br></pre></td></tr></table></figure><p>4、WildFly 做为系统服务，开机启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo update-rc.d wildfly defaults</span><br></pre></td></tr></table></figure><h3 id="配置-WildFly-允许所有-ip-访问"><a href="#配置-WildFly-允许所有-ip-访问" class="headerlink" title="配置 WildFly 允许所有 ip 访问"></a>配置 WildFly 允许所有 ip 访问</h3><p>1、打开配置文件 <code>standalone.xml</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /opt/wildfly/standalone/configuration/standalone.xml</span><br></pre></td></tr></table></figure><p>2、替换此处</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;interface name=&quot;management&quot;&gt;</span><br><span class="line">    &lt;inet-address value=&quot;$&#123;jboss.bind.address.management:127.0.0.1&#125;&quot;/&gt;</span><br><span class="line">&lt;/interface&gt;</span><br><span class="line">&lt;interface name=&quot;public&quot;&gt;</span><br><span class="line">    &lt;inet-address value=&quot;$&#123;jboss.bind.address:0.0.0.0&#125;&quot;/&gt;</span><br><span class="line">&lt;/interface&gt;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;interface name=&quot;management&quot;&gt;</span><br><span class="line">    &lt;any-address/&gt;</span><br><span class="line">&lt;/interface&gt;</span><br><span class="line">&lt;interface name=&quot;public&quot;&gt;</span><br><span class="line">    &lt;any-address/&gt;</span><br><span class="line">&lt;/interface&gt;</span><br></pre></td></tr></table></figure><p>3、保存后，重新启动 WildFily</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service wildfly restart</span><br></pre></td></tr></table></figure><h3 id="删除默认欢迎内容（可选）"><a href="#删除默认欢迎内容（可选）" class="headerlink" title="删除默认欢迎内容（可选）"></a>删除默认欢迎内容（可选）</h3><p>如果你部署了应用程序在上下文根目录里，欢迎你 将需要从 WildFly 配置删除默认内容。在 standalone.xml 文件里删除粗体突出显示的行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;server name=&quot;default-server&quot;&gt;</span><br><span class="line">    &lt;http-listener name=&quot;default&quot; socket-binding=&quot;http&quot;/&gt;</span><br><span class="line">    &lt;host name=&quot;default-host&quot; alias=&quot;localhost&quot;&gt;</span><br><span class="line">        **&lt;!-- &lt;location name=&quot;/&quot; handler=&quot;welcome-content&quot;/&gt; --&gt;**</span><br><span class="line">        &lt;filter-ref name=&quot;server-header&quot;/&gt;</span><br><span class="line">        &lt;filter-ref name=&quot;x-powered-by-header&quot;/&gt;</span><br><span class="line">    &lt;/host&gt;</span><br><span class="line">&lt;/server&gt;</span><br><span class="line">&lt;handlers&gt;</span><br><span class="line">    **&lt;!-- &lt;file name=&quot;welcome-content&quot; path=&quot;$&#123;jboss.home.dir&#125;/welcome-content&quot;/&gt; --&gt;**</span><br><span class="line">&lt;/handlers&gt;</span><br></pre></td></tr></table></figure><h3 id="其它设置"><a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h3><p>改为可以修改 JSP 页面不用重启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet-container name=&quot;default&quot;&gt;</span><br><span class="line">      &lt;jsp-config development=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/servlet-container&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1、项目以站点根目录访问<br>你现在可以将应用程序部署到 WildFly 视图在 your_ip:8080<br>在你的项目目录 WEB-INF 下添加 jboss-web.xml，确保你的配置 context-root 设置为 &#x2F;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;jboss-web&gt;</span><br><span class="line">    &lt;context-root&gt;/&lt;/context-root&gt;</span><br><span class="line">&lt;/jboss-web&gt;</span><br></pre></td></tr></table></figure><p>2、Linux 里设置端口 80 到 8080<br><strong>注意：在之后的配置会使用 Nginx 反向代理，所用 WildFly 端口不用映射为 80，这里只是个方法的笔记</strong></p><p>注意，在 linux 里，由于内核的限制，普通用户不能使用 1024 一下的端口。所以在配置文件（standalone.xml）里改成 80，用普通用户是启动不了的。</p><p>此时，我们需要在 linux 下使用 root 用户运行一个命令，使访问 80 端口的应用转到 8080 上：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure><p>以上端口转发为临时操作，重启 linux 服务器后失效。如果要重启服务器不丢失 FORWARD 转发”操作，可写入配置。</p><blockquote><p>在 Linux 的下面部署了 tomcat，为了安全我们使用非 root 用户进行启动，但是在域名绑定时无法直接访问 80 端口号。众所周知，在 unix 下，非 root 用户不能监听 1024 以上的端口号，这个 tomcat 服务器就没办法绑定在 80 端口下。所以这里需要使用 linux 的端口转发机制，把到 80 端口的服务请求都转到 8080 端口上。</p></blockquote><p>2.1、安装 iptables-persistent</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install iptables-persistent</span><br></pre></td></tr></table></figure><p>2.2、添加 80 端口跳转到 8080 规则</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</span><br></pre></td></tr></table></figure><p>2.3、保存跳转规则</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service iptables-persistent save</span><br></pre></td></tr></table></figure><p>3、wildfly 不支持 struts2 的配置文件（.xml）里用通配符<br><strong>这是原博文的内容，我没有使用 struts2；在 spring 中有用通配符，但是好像没什么影响</strong><br>jboss wildfly 不支持 struts2 配置文件里用通配符 <code>*.xml</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &lt;include file=&quot;struts/*.xml&quot;&gt;&lt;/include&gt; --&gt;</span><br><span class="line">&lt;include file=&quot;struts/struts_post.xml&quot;&gt;&lt;/include&gt;</span><br><span class="line">&lt;include file=&quot;struts/struts_user.xml&quot;&gt;&lt;/include&gt;</span><br></pre></td></tr></table></figure><p>4、增加部署扫描仪的超时设置<br>位置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;subsystem xmlns=&quot;urn:jboss:domain:deployment-scanner:2.0&quot;&gt;</span><br><span class="line">    &lt;deployment-scanner path=&quot;deployments&quot; relative-to=&quot;jboss.server.base.dir&quot; scan-interval=&quot;5000&quot; /&gt;</span><br><span class="line">&lt;/subsystem&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;deployment-scanner&gt;</code> 内增加属性 <code>deployment-timeout=&quot;1200&quot;</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;subsystem xmlns=&quot;urn:jboss:domain:deployment-scanner:2.0&quot;&gt;</span><br><span class="line">    &lt;deployment-scanner path=&quot;deployments&quot; relative-to=&quot;jboss.server.base.dir&quot; scan-interval=&quot;5000&quot; deployment-timeout=&quot;1200&quot; /&gt;</span><br><span class="line">&lt;/subsystem&gt;</span><br></pre></td></tr></table></figure><h3 id="Nginx-反向代理-WildFly"><a href="#Nginx-反向代理-WildFly" class="headerlink" title="Nginx 反向代理 WildFly"></a>Nginx 反向代理 WildFly</h3><p>1、在 <code>http</code> 中添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream jboss &#123;</span><br><span class="line">server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在 <code>server</code> 中修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line">proxy_pass http://jboss;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">index index.html index.htm index.jsp;</span><br><span class="line"># 动态网站要小心这个 缓存 选项</span><br><span class="line">add_header Cache-Control max-age=1728000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="MySQL5-6-安装"><a href="#MySQL5-6-安装" class="headerlink" title="MySQL5.6 安装"></a>MySQL5.6 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server-5.6</span><br></pre></td></tr></table></figure><h3 id="MySQL-创建数据库"><a href="#MySQL-创建数据库" class="headerlink" title="MySQL 创建数据库"></a>MySQL 创建数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS scrapy DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="MySQL-数据库导出-x2F-导入"><a href="#MySQL-数据库导出-x2F-导入" class="headerlink" title="MySQL 数据库导出&#x2F;导入"></a>MySQL 数据库导出&#x2F;导入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p123456 db_name | gzip &gt; /home/backup/db_name.sql.gz</span><br><span class="line">mysqldump -u root -p123456 --all-databases | gzip &gt; /home/backup/all.sql.gz</span><br><span class="line"></span><br><span class="line">mysqldump -h192.168.1.100 -uroot -p db_name &gt; db_name.sql</span><br><span class="line">mysqldump -uroot -p db_name_1 db_name_2 &gt; db_name_1_and_2.sql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunzip &lt; db_name.sql.gz | mysql -u root -p123456 db_name</span><br><span class="line">gunzip &lt; all.sql.gz | mysql -u root -p123456</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line">show databases;</span><br><span class="line">use db_name;</span><br><span class="line"><span class="built_in">source</span> ~/db_name.sql</span><br></pre></td></tr></table></figure><h3 id="MySQL-查看表结构"><a href="#MySQL-查看表结构" class="headerlink" title="MySQL 查看表结构"></a>MySQL 查看表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><h3 id="robots-txt-config-禁止所有爬虫爬取"><a href="#robots-txt-config-禁止所有爬虫爬取" class="headerlink" title="robots.txt config 禁止所有爬虫爬取"></a>robots.txt config 禁止所有爬虫爬取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure><h2 id="Renferences"><a href="#Renferences" class="headerlink" title="Renferences"></a>Renferences</h2><ul><li><a href="http://blog.csdn.net/hanshileiai/article/details/46968275">韩世雷-ubuntu 配置 java jdk1.8 环境，增加多版本 jdk 和切换方法</a></li><li><a href="http://blog.csdn.net/hanshileiai/article/details/46987859">韩世雷-ubuntu14.04 Terminal 配置 wildfly-10.0.0.Final 服务器</a></li><li><a href="http://blog.csdn.net/hanshileiai/article/details/47757217">韩世雷-Ubuntu14.04 配置 iptables 把 80 端口转到 8080</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Webhook 自动部署 Hexo</title>
      <link href="/2016/07/01/github-webhook-example/"/>
      <url>/2016/07/01/github-webhook-example/</url>
      
        <content type="html"><![CDATA[<p>在 <a href="/2016/06/30/github-pages-forbidden-baiduspide-solution/">GitHub Pages 不被百度收录解决方案</a> 中，思路二是通过 Dnspod 的智能 DNS 服务。简而言之就是搭建一个 Server，做一个 Blog 的镜像站，专为百度收录使用。</p><p>但是每次将新建的博客文章 <code>PUSH</code> 到 GitHub 后，还要再登陆 Server <code>PULL</code> 一下，简直是太蠢了。那有什么解决办法吗？答：GitHub Webhook。</p><span id="more"></span><h2 id="Webhook"><a href="#Webhook" class="headerlink" title="Webhook"></a>Webhook</h2><p>Webhook，也就是人们常说的钩子，是一个很有用的工具。你可以通过定制 Webhook 来监测你在 Github.com 上的各种事件，最常见的莫过于 push 事件。</p><p>如果你设置了一个监测 push 事件的 Webhook，那么每当你的这个项目有了任何提交，这个 Webhook 都会被触发，这时 Github 就会发送一个 HTTP POST 请求到你配置好的地址。</p><p>如此一来，你就可以通过这种方式去自动完成一些重复性工作；比如，你可以用 Webhook 来自动触发一些持续集成（CI）工具的运作，比如 Travis CI；又或者是通过 Webhook 去部署你的线上服务器。</p><p>Github 开发者平台的文档中对 Webhook 的所能做的事是这样描述的：</p><blockquote><p>You’re only limited by your imagination.</p></blockquote><h2 id="响应-Webhook"><a href="#响应-Webhook" class="headerlink" title="响应 Webhook"></a>响应 Webhook</h2><p>在参考文章里博主是使用 Node.js 编写的服务端响应代码，但考虑到自己对 Node.js 不熟悉，还要部署环境，所以改用 Python 语言编写响应代码。</p><p>自己在 GitHub 搜索下 <code>github webhook</code>，<code>language</code> 选择 <code>Python</code> 便找到了 Python 编写的：<a href="https://github.com/razius/github-webhook-handler">razius&#x2F;github-webhook-handler</a></p><p>自己的 VPS 是在 <a href="https://bandwagonhost.com/aff.php?aff=5403">Bandwagon Host</a> 上购买的，最合适的配置：</p><ul><li>Self-managed service</li><li>SSD: 10 GB</li><li>RAM: 512 MB</li><li>CPU: 1x Intel Xeon</li><li>BW: 1000 GB&#x2F;mo</li><li>Link speed: 1 Gigabit</li><li>VPS technology: OpenVZ&#x2F;KiwiVM</li><li>Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora</li></ul><p>费用：</p><ul><li>$2.99 USD Monthly</li><li>$7.99 USD Quarterly</li><li>$12.99 USD Semi-Annually</li><li>$19.99 USD Annually</li></ul><p>Bandwagon Host 支持支付宝付款很是方便，优惠码：<code>IAMSMART52J3NC</code> 再打个 9.5 折左右。这配置有时会 <code>(out of stock)</code> 等等随缘会有的。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><h3 id="clone-razius-x2F-github-webhook-handler"><a href="#clone-razius-x2F-github-webhook-handler" class="headerlink" title="clone razius&#x2F;github-webhook-handler"></a>clone <a href="https://github.com/razius/github-webhook-handler">razius&#x2F;github-webhook-handler</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/razius/github-webhook-handler.git</span><br></pre></td></tr></table></figure><p>根据 github-webhook-handler Gettings started:</p><h4 id="Installation-Requirements"><a href="#Installation-Requirements" class="headerlink" title="Installation Requirements"></a>Installation Requirements</h4><p>Install dependencies found in requirements.txt</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="Repository-Configuration"><a href="#Repository-Configuration" class="headerlink" title="Repository Configuration"></a>Repository Configuration</h4><p>Edit repos.json to configure repositories, each repository must be registered under the form <code>GITHUB_USER/REPOSITORY_NAME</code>.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;razius/puppet&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;/home/puppet&quot;,</span><br><span class="line">        &quot;key&quot;: &quot;MyVerySecretKey&quot;,</span><br><span class="line">        &quot;action&quot;: [[&quot;git&quot;, &quot;pull&quot;, &quot;origin&quot;, &quot;master&quot;]]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;d3non/somerandomexample/branch:live&quot;: &#123;</span><br><span class="line">        &quot;path&quot;: &quot;/home/exampleapp&quot;,</span><br><span class="line">        &quot;key&quot;: &quot;MyVerySecretKey&quot;,</span><br><span class="line">        &quot;action&quot;: [[&quot;git&quot;, &quot;pull&quot;, &quot;origin&quot;, &quot;live&quot;],</span><br><span class="line">            [&quot;echo&quot;, &quot;execute&quot;, &quot;some&quot;, &quot;commands&quot;, &quot;...&quot;]]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程如果出现：<code>pip: command not found</code> 可以执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><h4 id="Set-environment-variable-for-the-repos-json-config"><a href="#Set-environment-variable-for-the-repos-json-config" class="headerlink" title="Set environment variable for the repos.json config"></a>Set environment variable for the repos.json config</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export REPOS_JSON_PATH=/path/to/repos.json</span><br></pre></td></tr></table></figure><h4 id="Start-the-server"><a href="#Start-the-server" class="headerlink" title="Start the server"></a>Start the server</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python index.py 80</span><br></pre></td></tr></table></figure><h4 id="clone-and-pull-your-Blog"><a href="#clone-and-pull-your-Blog" class="headerlink" title="clone and pull your Blog"></a>clone and pull your Blog</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:imzyf/imzyf.github.io.git</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>过程如果出现：<code>Permission denied (publickey).</code> 可以参考：</p><ul><li><a href="http://stackoverflow.com/questions/2643502/git-permission-denied-publickey">Stack Overflow-Git - Permission denied (publickey)</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh &amp;&amp; ssh-keygen</span><br><span class="line">cat id_rsa.pub | xclip</span><br></pre></td></tr></table></figure><p>然后添加到你的 GitHub 账户：Settings -&gt; SSH keys 中。</p><h3 id="config-imzyf-github-io-Webhooks"><a href="#config-imzyf-github-io-Webhooks" class="headerlink" title="config imzyf.github.io Webhooks"></a>config imzyf.github.io Webhooks</h3><p>首先进入你的 repo 主页，通过点击页面上的按钮 [settings] -&gt; [Webhooks &amp; service] 进入 Webhooks 配置主页面。也可以通过下面这个链接直接进入配置页面：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/[ 用户名 ]/[ 仓库名称 ]/settings/hooks</span><br></pre></td></tr></table></figure><p>此处只需要配置 Webhook 所发出的 POST 请求发往何处即可，于是我们就配置我们所需要的路径：<br><a href="">http://104.236.xxx.xxx:9988/deploy/</a>。这个地址指向的就是那个能够响应 Webhook 所发出请求的服务器。</p><p>配置好 Webhook 后，Github 会发送一个 ping 来测试这个地址。如果成功了，那么这个 Webhook 前就会加上一个绿色的勾；如果你得到的是一个红色的叉，那就好好检查一下哪儿出问题了吧！</p><h3 id="config-Nginx-server"><a href="#config-Nginx-server" class="headerlink" title="config Nginx server"></a>config Nginx server</h3><h2 id="最后想说的"><a href="#最后想说的" class="headerlink" title="最后想说的"></a>最后想说的</h2><p>为了一个百度收录大可不必这么麻烦，刚刚查到这些解决方案时心里也是烦的、虚的，但还是硬的头皮搞了。过程中已经不单单是为了百度收录自己的博客，而是变成学习了东西、思考问题。这些解决方案网上都有，也不是自己创造的，但是别人的东西自己不尝试，就还是别人的。</p><p>现在百度已经收录我的博客了，imzyf.github.io 到 Server 也是自动部署的。解决问题后的快乐和信心，才是我这次最大的收获。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://jerryzou.com/posts/webhook-practice/">jerryzou-Webhook 实践 —— 自动部署</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages 不被百度收录解决方案</title>
      <link href="/2016/06/30/github-pages-forbidden-baiduspide-solution/"/>
      <url>/2016/06/30/github-pages-forbidden-baiduspide-solution/</url>
      
        <content type="html"><![CDATA[<p>2019-12-02 更新：现在我的 Blog 还是用的 GitHub Pages，反正没有备案的域名不会被百度收录。</p><p>2017-04-22 更新：现在我的 Blog 使用的是 <a href="https://www.ufovps.com/">UFOVPS</a> 直接部署的。</p><hr><p>在 <a href="/2016/06/24/hexo-github-blog/">使用 Hexo 和 Github 搭建个人独立博客</a> 几天后，发现百度并不对博客进行收录。</p><p>在天朝使用百度搜索毕竟多数，使用百度站长工具-抓取诊断，在百度 Spider 抓取结果返回 HTTP 头：HTTP&#x2F;1.1 403 Forbidden，原来是 GitHub 禁止了百度爬虫的爬去。</p><span id="more"></span><p>Google 后早已有许多热心网友给出了解决方案，自己在这里总结下。</p><h2 id="思路一：利用-CDN-解决百度爬虫被-Github-Pages-拒绝的问题"><a href="#思路一：利用-CDN-解决百度爬虫被-Github-Pages-拒绝的问题" class="headerlink" title="思路一：利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题"></a>思路一：利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题</h2><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>既然 Github 彻底和百度决裂了，那我们也只能自己动手来解决了。Github 可能是封了百度的 IP，也有可能是封了百度爬虫的 User-Agent。</p><p>所以要解决这个问题，最好就不要让百度爬虫直接访问 Github 了，需要在中间套一层 <a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>。</p><p>那么问题又来了，既然我可以搭一个反向代理服务器了，那我为什么不直接把博客放在这台服务器上？放 Github Pages 上不就是为了少一台服务器，少一点费用吗？</p><p>那有没有免费的第三方反向代理服务呢？当然有，其实现在各种 <strong>CDN 服务</strong> 不就是吗？而且还额外提供了各种网络环境下的加速功能。</p><p>但是使用 CDN 也会有一个非常大的缺点：只能对 <strong>静态资源</strong> 做，因为 CDN 和反向代理有一个很大的不同就是：它会做缓存，并向各个节点分发。</p><p>所以 CDN 一般都是用来给静态资源做加速的。如果你对动态页面做加速，用户看到的页面在一段时间内就一直不会变了。但是我们不怕！因为 Github Pages 本来就是全静态的！</p><p>国内提供 CDN 服务的有：加速乐、七牛云存储、又拍云等。</p><p>最后选择了 <a href="https://www.upyun.com/index.html"><strong>又拍云</strong></a></p><p>CDN 回源配置</p><p>有设置缓存时间的功能，上面明确写了：CDN 缓存时间是指 UPYUN 回源取得文件后，文件在 UPYUN CDN 网络中的缓存的时间，超过缓存时间则重新回源获取文件。</p><p>是的，这才是真正满足我需求的功能！</p><p>这个解决方案我尝试了，但是在 CDN 域名配置时，有天朝特色要求域名必须备案，我的域名 <code>zyf.im</code> 是在 <a href="http://www.name.com/">name.com</a> 上注册的，<code>.im</code> 的尾缀也无法在国内备案。所以这个方案不适合我。</p><h2 id="思路二：通过-Dnspod-的智能-DNS-服务"><a href="#思路二：通过-Dnspod-的智能-DNS-服务" class="headerlink" title="思路二：通过 Dnspod 的智能 DNS 服务"></a>思路二：通过 Dnspod 的智能 DNS 服务</h2><p>在这里博主首先分析了：使用 CDN 可能 <strong>无法</strong> 真正解决百度被拒绝的问题。理由是：<strong>CDN 节点众多，百度爬取的节点可能并没有页面的缓存</strong>。</p><p>通过 Dnspod 的智能 DNS 服务可以变相解决这个问题，大概的设置如下图所示，只要为你所有的主机记录重复添加 A 记录，把线路类型设置为百度，并将记录值指向你自己的云主机即可。</p><p>你说什么？等下！自己的云主机？没错，其实这种方式就是 <strong>专门为百度的爬虫增开了一个小窗口</strong>，使得它可以在你自己的服务器上爬取内容，而不是直接去爬取 Github Pages 的内容。你需要自己搭个服务器，并将你的静态网站架在上面。</p><p>我博客解决方案就是采用这种方法。看起来有些“笨”因为我又搭建了一个 Server 用于博客，相当于没有完全利用 GitHub Pages，实际上普通用户访问我的博客就是有利用 GitHub 的 CDN 服务的，更快一些。而且我这么做还利用了 GitHub Webhook，当我把新的页面提交到 GitHub 时，我的博客服务器会自动 <code>pull</code> 最新的项目，这么看也就不那么“傻”了。</p><p>请参看：<a href="/2016/06/30/github-webhook-example/">GitHub Webhook 自动部署 Hexo</a></p><p>经过这么一配置，我的博客现在已经被百度收录了。百度搜索：<code>site:zyf.im</code></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.dozer.cc/2015/06/github-pages-and-cdn.html">DOZER-利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题</a></li><li><a href="http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/">jerryzou-解决 Github Pages 禁止百度爬虫的方法与可行性分析</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse Maven Spring SpringMVC Mybatis 整合</title>
      <link href="/2016/06/27/eclipse-maven-spring-springmvc-mybatis-example/"/>
      <url>/2016/06/27/eclipse-maven-spring-springmvc-mybatis-example/</url>
      
        <content type="html"><![CDATA[<p>新项目自己撘框架，想着用点新的。看慕课网 <a href="http://www.imooc.com/index/search?words=%E7%A7%92%E6%9D%80">Java 高并发秒杀 API</a> 的系列课程时很受益。所以想着仿着来使用：Mavan-Spring-SpringMVC-Mybatis 的架构。框架整合的代码我已上传到我的 Github：<a href="https://github.com/imzyf/maven-mybatis-spring-springmvc">maven-mybatis-spring-springmvc</a>。</p><p>本示例是在：Ubuntu15 上实现的；Windows 上安装 Maven 将不太相同。</p><h2 id="Maven-Install"><a href="#Maven-Install" class="headerlink" title="Maven Install"></a>Maven Install</h2><blockquote><p>2016-09-10 更新：较新版 Eclipse 都有集成 Maven，所以并不需要安装</p></blockquote><ol><li>Run command <code>sudo apt-get install maven</code>, to install the latest Apache Maven.</li><li>Run command <code>mvn -version to verify</code> your installation.</li><li>Where is Maven installed?<br>The command <code>apt-get</code> install the Maven in <code>/usr/share/maven</code><br>The Maven configuration files are stored in <code>/etc/maven</code></li></ol><h2 id="Eclipse-Maven-Plugin-m2e"><a href="#Eclipse-Maven-Plugin-m2e" class="headerlink" title="Eclipse Maven Plugin - m2e"></a>Eclipse Maven Plugin - m2e</h2><blockquote><p>2016-09-10 更新：较新版 Eclipse 都有集成 Maven，所以并不需要安装</p></blockquote><ol><li>open Eclipse -&gt; Help -&gt; click “Install New Software” -&gt; click “add”</li></ol><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Name:m2e</span><br><span class="line">Location:http://download.eclipse.org/technology/m2e/releases</span><br></pre></td></tr></table></figure><ol start="2"><li>click “ok” -&gt; click “Maven Integration for Eclipse” -&gt; click “Next”</li><li>restrat Eclipse</li><li>config m2e -&gt; Window -&gt; Preferences -&gt; Maven -&gt; Installations -&gt; click “Add…” -&gt; select Maven</li></ol><span id="more"></span><h2 id="Create-a-Maven-Project"><a href="#Create-a-Maven-Project" class="headerlink" title="Create a Maven Project"></a>Create a Maven Project</h2><ol><li>File -&gt; New -&gt; New Maven project</li><li>select “Use default Workspace location”</li><li>select “maven-archetype-j2ee-simple”</li><li>input info -&gt; Finish</li><li>选中项目右键菜单中选择 Properties -&gt; Project Facets -&gt; select “Dynamic Web Module” Version “3.1”</li></ol><p>Tips:</p><ul><li>如果在 <code>Project Facets</code> 选择版本时“can not change”，可以在项目目录下手动修改 <code>.settings/org.eclipse.wst.common.project.facet.core.xml</code> 文件配置</li><li>项目自动生成的 <code>web.xml</code> 版本较低，手动修改</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span> <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>项目结构</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── src</span><br><span class="line">    ├── main</span><br><span class="line">    |   ├── java //java源代码</span><br><span class="line">    |   ├── resources //配置资源文件</span><br><span class="line">    |   └── webapp //web文件</span><br><span class="line">    |</span><br><span class="line">    └── test</span><br><span class="line">    └── java //junit测试</span><br></pre></td></tr></table></figure><h2 id="pom-xml-Config"><a href="#pom-xml-Config" class="headerlink" title="pom.xml Config"></a>pom.xml Config</h2><p><a href="https://github.com/imzyf/maven-mybatis-spring-springmvc/blob/master/pom.xml">Github-maven-mybatis-spring-springmvc pom.xml</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实现slf4j接口整合 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JDBC MySQL Driver --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DAO框架 mybatis --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet API --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1 Spring 核心依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 Spring DAO依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 Spring web相关依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4 Spring Test相关依赖 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="logback-xml-Config"><a href="#logback-xml-Config" class="headerlink" title="logback.xml Config"></a>logback.xml Config</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder</span></span><br><span class="line"><span class="comment">by default --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis-Config"><a href="#Mybatis-Config" class="headerlink" title="Mybatis Config"></a>Mybatis Config</h2><p><a href="https://github.com/imzyf/maven-mybatis-spring-springmvc/blob/master/src/main/resources/mybatis-config.xml">Github-maven-mybatis-spring-springmvc mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用jdbc的getGeneratedKays 获取数据库自增主键 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用列别名替换列名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Config"><a href="#Spring-Config" class="headerlink" title="Spring Config"></a>Spring Config</h2><p><a href="https://github.com/imzyf/maven-mybatis-spring-springmvc/tree/master/src/main/resources/spring">Github-maven-mybatis-spring-springmvc spring</a></p><h3 id="Spring-DAO-Config"><a href="#Spring-DAO-Config" class="headerlink" title="Spring-DAO Config"></a>Spring-DAO Config</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 数据库配置文件位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 数据库连接池 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Employee DB data source. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.dburl&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- c3p0连接池 私有属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.maxPoolSize&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.minPoolSize&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接失败重试次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设计原则：约定大于配置 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3 配置 SqlSessionFactory 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mybitis 全局配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.moma.dmv.entity&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描sql配置文件 mapper 需要的xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入sqlsessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.moma.dmv.dao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Service-Config"><a href="#Spring-Service-Config" class="headerlink" title="Spring-Service Config"></a>Spring-Service Config</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描service包下 所有使用注解的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.moma.dmv.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用注解控制事务方法的优点</span></span><br><span class="line"><span class="comment">1：开发团队达成一致约定，明确标注事务方法的编程风格</span></span><br><span class="line"><span class="comment">2：保证事务方法的执行时间尽可能短，不要穿插其他网络操作RPC/HTTP请求或者剥离到事务方法外部</span></span><br><span class="line"><span class="comment">3：不是所有的方法都需要事务，比如只有一条修改操作，只读操作不需要事务控制</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Web-Config"><a href="#Spring-Web-Config" class="headerlink" title="Spring-Web Config"></a>Spring-Web Config</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1:开启springMVC 注解模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 静态资源默认servlet配置 1 加入对静态资源的处理 js gif png 2 允许使用“/”做整体映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3:配置jsp 显示ViewResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 决定视图类型，如果添加了jstl支持（即有jstl.jar），那么默认就是解析为jstl视图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/resources/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/resources/**&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4:扫描web相关的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.moma.dmv.web&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DAO-Mapper-Example"><a href="#DAO-Mapper-Example" class="headerlink" title="DAO Mapper Example"></a>DAO Mapper Example</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.moma.dmv.dao.InfoDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Info&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">select id,`key`,`value` from info where id = #&#123;id&#125;</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Info&quot;</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">select id,key,value</span><br><span class="line">from info</span><br><span class="line">limit #&#123;offset&#125;,#&#123;limit&#125;</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web-xml-Config"><a href="#web-xml-Config" class="headerlink" title="web.xml Config"></a>web.xml Config</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dmv-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml spring-service.xml spring-web.xml</span></span><br><span class="line"><span class="comment">mybatis -&gt; spring -&gt; springMVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dmv-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认匹配所有的请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JUnit-Example"><a href="#JUnit-Example" class="headerlink" title="JUnit Example"></a>JUnit Example</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.moma.dmv.dao.InfoDao;</span><br><span class="line"><span class="keyword">import</span> com.moma.dmv.entity.Info;</span><br><span class="line"></span><br><span class="line">RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">ContextConfiguration(locations = &#123; <span class="string">&quot;classpath:spring/spring-dao.xml&quot;</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> InfoDao infoDao;</span><br><span class="line"><span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryById</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Info</span> <span class="variable">info</span> <span class="operator">=</span> infoDao.queryById(id);</span><br><span class="line">logger.info(info.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.mkyong.com/maven/how-to-install-maven-in-ubuntu/">MKyong-How to install Maven on Ubuntu</a></li><li><a href="http://blog.csdn.net/qjyong/article/details/9098213">Java 之道-使用 Eclipse 构建 Maven 项目 (step-by-step)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 GitHub 和 Hexo 搭建个人独立博客</title>
      <link href="/2016/06/24/hexo-github-blog/"/>
      <url>/2016/06/24/hexo-github-blog/</url>
      
        <content type="html"><![CDATA[<p><code>Wordpress</code> 这类博客系统功能强大，可对与我只想划拉的写点东西的人，感觉大材小用了。而且 <code>Wordpress</code> 需要部署，网站的服务器也会带来问题，国内的服务器首先需要备案，费用不低，国外服务器访问速度受影响。</p><p>近来接触到一种新的博客系统 Hexo，它的不同地方就是将：<strong>在上线编写博客和页面渲染的过程在线下完成</strong>。</p><p>在本地编写博文的 Markdown 文件，使用 Hexo 将博客网站的所有前台 HTML 等全部生成，让后将生成的文件上传的服务器就行了。</p><p>那么原来 wp 中的评论等动态功能怎么办呢？放心第三方服务商早已为我们考虑了。例如：<a href="https://disqus.com/">disqus</a>就是一家第三方社会化评论系统，主要为网站主提供评论托管服务。</p><p>本文的操作的系统环境是 Ubuntu 15，Windows 下的搭建可触类旁通。</p><h2 id="了解-Hexo"><a href="#了解-Hexo" class="headerlink" title="了解 Hexo"></a>了解 Hexo</h2><blockquote><p>A fast, simple &amp; powerful blog framework</p></blockquote><p><a href="https://hexo.io/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，<a href="https://hexo.io/zh-cn/docs/setup.html">Hexo setup 官方文档</a>。</p><span id="more"></span><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><blockquote><p><a href="https://git-scm.com/download/linux">Download for Linux and Unix | git-scm</a></p></blockquote><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><blockquote><p><a href="/2017/07/06/install-node-js-in-ubuntu-and-faq/">Linux | Mac 安装 Node.js 与常见问题 | zyf.im</a></p></blockquote><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">| ├── _drafts</span><br><span class="line">| └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以简写为</span></span><br><span class="line"></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以简写为</span></span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>网站会在 <a href="http://localhost:4000/">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><h2 id="部署静态网页到-GitHub"><a href="#部署静态网页到-GitHub" class="headerlink" title="部署静态网页到 GitHub"></a>部署静态网页到 GitHub</h2><h3 id="注册设置-GitHub"><a href="#注册设置-GitHub" class="headerlink" title="注册设置 GitHub"></a>注册设置 GitHub</h3><ol><li>登录 GitHub，注册自定义用户名如：<code>imzyf</code></li><li>在主页右下角创建 New repository，name 必须和用户名一致如：<code>imzyf.github.io</code></li><li>等待 3 分钟左右，之后即可访问静态主页如：<code>https://imzyf.github.io</code></li></ol><h3 id="同步内容至-GitHub"><a href="#同步内容至-GitHub" class="headerlink" title="同步内容至 GitHub"></a>同步内容至 GitHub</h3><ol><li>在 Hexo 目录下 <code>git clone git@github.com:imzyf/imzyf.github.io.git</code></li><li>将 <code>public</code> 文件下的所有文件拷贝到 <code>imzyf.github.io</code> 下</li><li><code>git add .</code> 增加当前子目录下所有更改过的文件至 index</li><li><code>git commit -m &#39;xxx&#39;</code> 提交到本地</li><li><code>git push origin master</code> 将当前分支 push 到远程 master 分支</li><li>最后访问主页<code>http://imzyf.github.io</code> 观察效果</li></ol><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><p>在 GitHub 项目页面，Settings -&gt; GitHub Pages，Source 选择 master branch，Custom domain 填写自己的域名，同时勾选 Enforce HTTPS 让你的网址支持 HTTPS。</p><p>在你的域名服务商那里，将填写的域名解析到：<code>&lt;username&gt;.github.io</code> 利于 <code>imzyf.github.io</code>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://wsgzao.github.io/post/hexo-guide/">HellDog-使用 GitHub 和 Hexo 搭建免费静态 Blog</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下连接蓝牙键盘</title>
      <link href="/2016/06/14/ubuntu-bluetooth-keyboard/"/>
      <url>/2016/06/14/ubuntu-bluetooth-keyboard/</url>
      
        <content type="html"><![CDATA[<p>新买了 <code>Filco Majestouch Convertible 2</code> 键盘。在自己的笔记本上连接没什么问题，搬到公司 Ubuntu 的 IBM 笔记本这么都连接不上，查找解决。</p><span id="more"></span><p>安装蓝牙的 <code>hcidump</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install bluez-hcidump</span><br></pre></td></tr></table></figure><p>然后，监测蓝牙事件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hcidump -at</span><br></pre></td></tr></table></figure><p>再次连接蓝牙键盘，可以看到输出事件中有一条 <code>Pin ...</code> 键盘输入对应的 Pin，Enter，连接成功。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java final 修饰符</title>
      <link href="/2016/06/13/java-modifier-final/"/>
      <url>/2016/06/13/java-modifier-final/</url>
      
        <content type="html"><![CDATA[<h2 id="final-修饰符"><a href="#final-修饰符" class="headerlink" title="final 修饰符"></a>final 修饰符</h2><p>final 修饰符表示不可变。类似 C 中的 constant。用于修饰变量表示不可变的变量。用于修饰方法表示不可被重写。用于修饰类表示不可被继承。</p><h2 id="final-的成员变量"><a href="#final-的成员变量" class="headerlink" title="final 的成员变量"></a>final 的成员变量</h2><p>成员变量随着类或者实例的初始化而初始化。在类初始化时，静态变量就会被分配内存并初始化。对于实例变量，系统会在实例初始化的时候初始化这些变量。</p><p>由于成员变量会被系统隐式的初始化。如果程序员不显式的初始化它们，那他们会变成 0，false，null 这样的值。失去了意义。</p><p>所以 <strong>final 修饰的成员变量必须显式的初始化。</strong></p><ul><li>类变量：必须在静态初始化块，或者在声明的时候初始化</li><li>实例变量：必须在非静态初始化块，声明时，或者构造函数中初始化。</li></ul><span id="more"></span><h2 id="final-的局部变量"><a href="#final-的局部变量" class="headerlink" title="final 的局部变量"></a>final 的局部变量</h2><p>对于形参：在方法内部无法对其进行赋值。<br>方法体内的 final 局部变量：只能赋值一次。<br>final 的基本类型变量和引用类型变量</p><p>基本类型变量：值不可变。<br>引用类型变量：指针不可变，但是指向的内存区域可变。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalVariableTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">20</span>;</span><br><span class="line">        System.out.print(Arrays.toString(arr));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Console</span></span><br><span class="line"><span class="comment">//[1, 23, 4, 5]</span></span><br><span class="line"><span class="comment">//[1, 23, 20, 5]</span></span><br></pre></td></tr></table></figure><h2 id="final-的宏替换"><a href="#final-的宏替换" class="headerlink" title="final 的宏替换"></a>final 的宏替换</h2><p>对于 final 的变量来说，不管是类变量，实例变量还是局部变量。只要在编译的时候可以确定，那么编译器就会把它看成一个直接量而不是变量。<br>比如:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalVar</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">       System.out.println(a);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际编译器在执行 System.out.println(a);等同于执行 System.out.println(5);<br><strong>什么叫做编译时可以确定</strong><br>下面这个例子。<br>str1 在编译的时候就可以确定。而 str2 需要调用 valueOf() 方法才能得到后面一个字符串。在编译的时候无法确定。从结果也可以看出来。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>+<span class="number">2016</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>+String.valueOf(<span class="number">2016</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1==<span class="string">&quot;hello world2016&quot;</span>);</span><br><span class="line">System.out.println(str2==<span class="string">&quot;hello world2016&quot;</span>);</span><br></pre></td></tr></table></figure><p>再看这个</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span> + <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);</span><br><span class="line">System.out.println(str1 == str3);</span><br></pre></td></tr></table></figure><p>str1 &#x3D;&#x3D; str3 返回是 false。因为 str3 在编译是无法确定。所以不会被当作直接量。但是如 s1 和 s2 都加上 final。编译器会进行宏替换。str3 就等同于”hello “ + ”world”。</p><h2 id="final-的方法"><a href="#final-的方法" class="headerlink" title="final 的方法"></a>final 的方法</h2><p>final 的方法不会被重写。</p><h2 id="final-的类"><a href="#final-的类" class="headerlink" title="final 的类"></a>final 的类</h2><p>final 的类不能被继承。</p><h2 id="不可变类"><a href="#不可变类" class="headerlink" title="不可变类"></a>不可变类</h2><p>Java 提供的基础变量类型的包装类和 String 类都是不可变类。如果要自己创建不可变的类需要注意几点：</p><ul><li>使用 private 和 final 修饰成员变量。</li><li>提供带参数的构造器，用于根据需要传入参数来初始化类里的成员变量。</li><li>仅提供 getter 方法，不提供 setter 方法。</li><li>如果有必要重写 hashCode() 和 equals() 方法。还要保证两个用 equals 方法判断相等的对象 hasdCode() 也相等。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String detail;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String postCode;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.detail=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>.postCode=<span class="string">&quot;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String detail，String postCode)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.detail=detail;</span><br><span class="line">       <span class="built_in">this</span>.postCode=postCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getDetail</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.detail;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getPoetCode</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.postCode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">this</span> == obj)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(obj!=<span class="literal">null</span>&amp;&amp;obj.getClass()==Address.class)&#123;</span><br><span class="line">           <span class="type">Address</span> <span class="variable">ad</span> <span class="operator">=</span> (Address)obj;</span><br><span class="line">           <span class="keyword">if</span>(<span class="built_in">this</span>.getClass().equals(ad.getDetail())&amp;&amp;<span class="built_in">this</span>.getPoetCode().equals(ad.getPoetCode()))&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.detail.hashCode()+<span class="built_in">this</span>.postCode.hashCode();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写不可变类的时候，只需要提供 getter 方法，不提供 setter 方法就可以了。但是对引用传递一定要注意。因为引用传递传的是尼玛指针。下面就是一个失败的例子。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> Name name;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Name name)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Name <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span>&#123;</span><br><span class="line">       <span class="type">Name</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Name</span>(<span class="string">&quot;Brady&quot;</span>，<span class="string">&quot;Gao&quot;</span>);</span><br><span class="line">       <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(n);</span><br><span class="line">       System.out.println(p.getName().getFirstName());</span><br><span class="line">       n.setFirstName(<span class="string">&quot;heihei&quot;</span>);</span><br><span class="line">       System.out.println(p.getName().getFirstName());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Name</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Name</span><span class="params">(String firstName，String lastName)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">       <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirstName</span><span class="params">(String firstName)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想解决这个，就要做到，避免引用传递带来的指针的直接传递。<br>重写 Person 的构造方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span> <span class="params">(Name name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="keyword">new</span> <span class="title class_">Name</span>(name.getFirstName()，name.getLastName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>番茄博客-final 修饰符（原链接失效）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Core Java】读书笔记</title>
      <link href="/2016/05/06/core-java-reading-notes/"/>
      <url>/2016/05/06/core-java-reading-notes/</url>
      
        <content type="html"><![CDATA[<p>自己是第一次把一本厚厚的的技术类书读一遍。不过 7、8、9、10 章讲的是关于图形的就是翻了翻，没怎么看。第 4 章 对象与类，里面有很多非常基础，可以补充一些知识细节。第 14 章 多线程，是自己最陌生的，慕课网上有节课 <a href="http://www.imooc.com/view/202">深入浅出 Java 多线程</a> 讲到的例子就是书上例子的变形，可以对照理解。第二遍阅读做做笔记。</p><p>本文总结的是书中的：第 3 章 Java 的基本程序设计结构、第 4 章 对象与类。</p><span id="more"></span><h2 id="3-Java-的基础程序设计结构"><a href="#3-Java-的基础程序设计结构" class="headerlink" title="3 Java 的基础程序设计结构"></a>3 Java 的基础程序设计结构</h2><h3 id="3-3-数据类型"><a href="#3-3-数据类型" class="headerlink" title="3.3 数据类型"></a>3.3 数据类型</h3><ul><li>Java 是一种强类型语音。在 Java 中，一共有 8 中基本类型（primitive type），其中有 4 种整型、2 种浮点类型、1 种用于表示 Unicode 编码的字符单元的字符类型 char 和 1 种用于表示真值的 boolean 类型。</li><li>Java7 开始，还可以为数字字面量加下划线，如用 1_000_000 表示一百万。这些下划线只是为了让人更易读。Java 编译器会去除这些下划线。</li><li>浮点数值不适用于出现舍入误差的金融计算中。其主要原因时浮点数值采用二进制系统表示，而在二进制系统中无法精确的表示分数 1&#x2F;10。这就好像十进制无法精确地表示 1&#x2F;3 一样。如果需要在数值计算中不含有任何舍入误差，就应该使用 BigDecimal 类。</li></ul><h3 id="3-4-变量"><a href="#3-4-变量" class="headerlink" title="3.4 变量"></a>3.4 变量</h3><ul><li>尽管$是一个合法的 Java 字符，但不要在自己的代码中使用这个字符。它只用在 Java 编译器或其他工具生成的名字中。</li></ul><h3 id="3-6-字符串"><a href="#3-6-字符串" class="headerlink" title="3.6 字符串"></a>3.6 字符串</h3><ul><li>由于不能修改 Java 字符串中的字符，所以在 Java 文档中将 String 类对象称为不可变字符串。</li><li>如果虚拟机始终将相同的字符串共享，就可以使用 &#x3D;&#x3D; 运算符检测是否相等。但实际上只有字符串常量是共享的，而 + 或者 substring 等操作产生的结果并不是共享的。因此，千万不要使用 &#x3D;&#x3D; 运算符测试字符串的相等性，以免在程序中出现糟糕的 bug。从表面上看，这种 bug 很像随机产生的间歇性错误。</li></ul><h3 id="3-10-数组"><a href="#3-10-数组" class="headerlink" title="3.10 数组"></a>3.10 数组</h3><ul><li>在 Java 中，允许将一个数组变量拷贝给另一个数组变量。这时，两个变量将引用同一个数组：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] luckyNumbers = smallPrimes;</span><br><span class="line">luckNumbers[<span class="number">5</span>] = <span class="number">12</span>; <span class="comment">// now smallPrimes[5] is also 12</span></span><br></pre></td></tr></table></figure><ul><li>如果希望将一个数组的所用值拷贝到一个新的数组中去，就要使用 Arrays 类的 copyOf 方法：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length);</span><br></pre></td></tr></table></figure><h2 id="4-对象与类"><a href="#4-对象与类" class="headerlink" title="4 对象与类"></a>4 对象与类</h2><h3 id="4-1-面向对象程序设计概述"><a href="#4-1-面向对象程序设计概述" class="headerlink" title="4.1 面向对象程序设计概述"></a>4.1 面向对象程序设计概述</h3><ul><li>类之间的关系<br>依赖（uses-a）<br>聚合（has-a）<br>继承（is-a）</li><li>依赖（dependence），即 uses-a 关系。例如，Order 类使用 Account 类是因为 Order 对象需要访问 Account 对象查看信用状态。因此，如果一个类的方法操纵另一个类的对象，我们就说一个类依赖于另一个类。<br>应该尽可能的将相互依赖的类减至最少。我们如果 A 不知道 B 的存在，他就不会关心 B 的任何改变（这意味着 B 的改变不会导致 A 产生任何 bug）。用软件工程的术语来说，就是让类之间的耦合度最小。</li><li>聚合（aggressive），即 has-a 关系。例如，一个 Order 对象包含一些 Item 对象。聚合关系意味着类 A 的对象包含类 B 的对象。</li><li>继承（inheritance），即 is-a 关系。例如，RushOrder 类由 Order 类继承而来。在具有特殊性的 RushOrder 类中包含了一些用于优先处理的特殊方法，以及一个计算运费的不同方法；而其他的方法从 Order 类继承了来的。一般而言，如果类 A 扩展类 B，类 A 不但包含从类 B 继承的方法，还会拥有一些额外的功能。</li></ul><h3 id="4-2-使用预定义类"><a href="#4-2-使用预定义类" class="headerlink" title="4.2 使用预定义类"></a>4.2 使用预定义类</h3><ul><li>在对象与对象变量之间存在着一个重要的区别。例如：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date deadline; <span class="comment">// deadline doesn&#x27;t refer to any object</span></span><br></pre></td></tr></table></figure><ul><li>定义了一个对象变量 deadline，它可以引用 Date 类型的对象。但是，一定要认识到：变量 deading 不是一个对象，实际上也没有引用对象。此时，不能将任何 Date 方法应用与这个变量上。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s = deadline.toString(); <span class="comment">// not yet</span></span><br></pre></td></tr></table></figure><ul><li>必须首先初始化变量 deadline，可以用新构造的对象初始化这个变量，也可以让这个变量引用一个已存在的对象。</li><li>一定要认识到：一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。</li><li>在 Java 中，任何对象变量的值都时对存储在另一个地方的一个对象的引用。new 操作符的返回值也是一个引用。</li><li>可显示地将对象变量设置为 null，表明这个对象变量目前没有引用任何对象。</li></ul><h3 id="4-3-用户自定义类"><a href="#4-3-用户自定义类" class="headerlink" title="4.3 用户自定义类"></a>4.3 用户自定义类</h3><ul><li>类文件必须与 public 类的名字相匹配。在一个原文件中，只能有一个共有类，但可以有任意数目的非共有类。</li><li>可以用 public 标记实例域，但这是一种极为不提倡的做法。public 数据域允许程序中的任何方法对其进行读取和修改。这就完全破坏了封装。这里强烈建议将实例域标记为 private。</li><li>构造器：<br>构造器与类同名<br>每个类可以有一个以上的构造器<br>构造器可以有 0 个、1 个或多个参数<br>构造器没有返回值<br>构造器总是伴随着 new 操作一起调用</li><li>类：<br>私有的数据域<br>公有的域服务器方法<br>公有的域改变方法</li><li>不要编写返回引用可变对象的访问器方法。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> Date hireDay;</span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getHireDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Date hireDay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样会破坏封装性！代码：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">harry</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> harry.getHireDay();</span><br><span class="line"><span class="type">doule</span> <span class="variable">tenYearsInMilliSeconds</span> <span class="operator">=</span> <span class="number">10</span> * <span class="number">365.25</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">d.setTime(d.getTime() - (<span class="type">long</span>)tenYearsInMilliSeconds);</span><br><span class="line"><span class="comment">// let&#x27;s give Harry ten years of added seniority</span></span><br></pre></td></tr></table></figure><ul><li>出错的原因很微妙。d 和 harry.hireDay 引用同一个对象。对 d 调用更改器方法就可以自动地改变这个雇员的私有状态！</li><li>如果需要返回一个可变对象的引用，应该首先对它进行克隆（clone）。对象 clone 是指存放在另一个位置上的对象副本。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Date <span class="title function_">getHireDay</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Date hireDay.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Employee 类的方法可以访问 Emloyee 类的任何一个对象的**私有域 ** 。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> boolen <span class="title function_">equals</span><span class="params">(Employee other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name.equals(other.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>final 修饰符大都应用于基本（primitive）类型域，或不可变（immutable）类的域（如果类中的每个方法都是不会改变其对象，这中类就是不可变的类。例如，String 类就是一个不可变的类）。对于可变的类，使用 final 修饰符可能会对读者造成混乱。代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Date hiredate;</span><br></pre></td></tr></table></figure><ul><li>仅仅意味着存储子 hiredate 变量中的对象引用在对象构造之后不能被改变，而并不意味着 hiredate 对象是一个常量。任何方法都可以对 hiredate 引用的对象调用 setTime 更改器。</li></ul><h3 id="4-4-静态域与静态方法"><a href="#4-4-静态域与静态方法" class="headerlink" title="4.4 静态域与静态方法"></a>4.4 静态域与静态方法</h3><ul><li>每一个雇员对象都有一个自己的 id 域，但这个类的所有实例将共享一个 nextId 域。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">nextId</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>换句话说，如果有 1000 个 Employee 类的对象，则有 1000 个实例域 id。但是，这有一个静态域 nextId。即使没有一个雇员对象，静态域 nextId 也是存在。它属于类，而不属于任何独立的对象。</li><li>可以使用对象调用静态方法。例如，如果 harry 是一个 Employee 对象，可以用 harry.getNextId() 代替 Employee.getNextId()。不过这中方式很容易造成混淆，其原因是 getNextId 方法计算的结果与 harry 毫无关系。我们建议使用类名来调用静态方法。</li><li>每一个类可以有一个 main 方法。这是一个常用于对类进行单元测试的技巧。</li></ul><h3 id="4-5-参数方法"><a href="#4-5-参数方法" class="headerlink" title="4.5 参数方法"></a>4.5 参数方法</h3><ul><li>Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝。</li><li>Java 程序设计语言中方法参数的使用情况：<br>一个方法不能修改一个基本数据类型的参数。<br>一个方法可以改变一个对象参数的状态。<br>一个方法不能让对象参数引用一个新的状态。</li></ul><h3 id="4-6-对象构造"><a href="#4-6-对象构造" class="headerlink" title="4.6 对象构造"></a>4.6 对象构造</h3><ul><li>要完整的描述一个方法需要指出方法以及参数类型，这叫做方法的签名（signature）。</li><li>返回类型不是方法签名的一部分。也就是说，不能有两个名字相同、参数类型也相同却返回不同类型值的方法。</li><li>如果在编写一个类时没有编写构造器，那么系统就会提供一个无参数构造器。这个构造器将所有的实例域设置为默认值。实例域中的数值类型数据设置为 0、布尔型数值设置为 false、所有对象变量将设置为 null。</li><li>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。</li><li>对每一个实例域都可以被设置为一个有意义的初值，这是一种很好的设计习惯。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-类设计技巧"><a href="#4-10-类设计技巧" class="headerlink" title="4.10 类设计技巧"></a>4.10 类设计技巧</h3><ul><li>一定要保证数据私有。绝对不要破坏封装性。</li><li>一定要对数据初始化。</li><li>不要在类中使用过多的基本类型。就是说，用其他的类代替多个相关的基本类型的使用。</li><li>不是所有的域都需要独立的域访问器和域更改器。</li><li>将职责过多的类进行分解。</li><li>类名和方法名要能够体现它们的职责。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Core Java】对象与类-方法参数传递</title>
      <link href="/2016/04/19/core-java-method-parameter/"/>
      <url>/2016/04/19/core-java-method-parameter/</url>
      
        <content type="html"><![CDATA[<p>提问：Java 对象采用的是值传递还是引用传递？</p><p>有些程序员认为 Java 对象采用的是引用调用，实际上，这种理解是不对的。下面给出一个反例来详细的阐述一下这一问题。</p><p>首先，编写一个交换两个雇员对象的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Employee x, Employee y)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">Employee</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line">   x = y;</span><br><span class="line">   y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>如果 Java 程序时引用调用，那么这个方法就应该能都实现交换实际的效果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;\nTesting swap:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Employee</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">70000</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">60000</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Before: a=&quot;</span> + a.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;Before: b=&quot;</span> + b.getName());</span><br><span class="line"></span><br><span class="line">swap(a, b);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;After: a=&quot;</span> + a.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;After: b=&quot;</span> + b.getName());</span><br></pre></td></tr></table></figure><p>但是结果 a 仍然时 Alice，b 是 Bob。对象引用进行的是值传递。</p><p>其实不必取扣是值传递还是引用传递的字眼，理解其中的原因是最好。</p><p><img src="https://user-images.githubusercontent.com/9289792/80198302-72d19700-8652-11ea-9ddf-595a2be198b5.jpg" alt="160419-core-java-method-parameter-001"></p><p>在调用 swap 时，a 将一个 <strong>引用的副本</strong> 传递给了 x，让 x 也指向了，相同与 a 指向的内存单元中的 Employee 对象 Alice，b 将一个引用的副本传递给了 y，让 y 也指向了，相同与 b 指向的内存单元中的 Employee 对象 Bob。</p><p>这时执行 swap 方法内部的内容，交换了 x，y 的引用指向，这是 x 指向的时 Bob，y 是 Alice，但是在方法结束后，方法外的 a，b 的指向是仍然没有变化，a 是 Alice，b 是 Bob。</p><h2 id="书上总结"><a href="#书上总结" class="headerlink" title="书上总结"></a>书上总结</h2><p>一个方法不能修改一个基本数据类型的参数。<br>一个方法可以改变一个对象参数的状态。<br>一个方法不能让对象参数引用一个新的对象。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Core Java】彩票选取中奖数字-数组例子</title>
      <link href="/2016/03/23/core-java-array-dome/"/>
      <url>/2016/03/23/core-java-array-dome/</url>
      
        <content type="html"><![CDATA[<p>从 1,2,3…h 中随机取 k 个中奖号码。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> im.zyf.javacore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LotteryDrawing</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;how many numbers do you need?&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;what is the highest number?&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] harr = <span class="keyword">new</span> <span class="title class_">int</span>[h];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">            harr[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] karr = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">random</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * h);</span><br><span class="line">            karr[i] = harr[random];</span><br><span class="line">            <span class="comment">//将数组最后的值，代替掉被取走的值</span></span><br><span class="line">            harr[random] = harr[h - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//数组长度减1</span></span><br><span class="line">            h--;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(karr);</span><br><span class="line">        System.out.println(Arrays.toString(karr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">how many numbers <span class="keyword">do</span> you need?</span><br><span class="line">3</span><br><span class="line">what is the highest number?</span><br><span class="line">4444444</span><br><span class="line">[433177, 827621, 2607294]</span><br></pre></td></tr></table></figure><p>有几个点：</p><ul><li>取过的数不能再取</li><li>取后升序排列</li></ul><p>关键点：</p><ul><li>每次取的都是下标，而不是实际的值。下标指向包含尚未抽取的数组元素</li></ul><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试着写东西</title>
      <link href="/2016/03/18/try-to-write-something/"/>
      <url>/2016/03/18/try-to-write-something/</url>
      
        <content type="html"><![CDATA[<p>现在是大四下从学校出来实习。在面试一家公司时，面试官看到我的邮箱（168#yifans.com）是自己的域名后说：</p><blockquote><p>问：“有自己的网站吗？”<br>“没有。”<br>问：“域名都买了不自己搭个网站?”<br>“……”</p></blockquote><span id="more"></span><p>其实这也不是自己要搭博客的根本原因。</p><p>在大学里，学了些做了些东西，可思考的不多。现在越发觉的一个人的强大在于思想。看书写些东西我想是提高一个人思想的方法吧。文字写下来了也方便交流。</p><p>出来了换了一个环境，遇到新的人，新的事，可以换个角度看人看事。原来我理解的一些技术博客，就是解决问题后的笔记本，有问题从中找，而且觉得很多网上的技术博客里的内容都是来回的转来转去，很多解决方案都是过时的，没什么的。可最近在浏览博客园、csdn 发现了很多精华的前人分享自己所理解的知识、技术中走的弯路，阅读后很受益。</p><p>想想自己，很多事、很多情况下就是这样：没见多少就下结论，管中窥豹，too young.</p><p>其中有这样的一个签名:</p><blockquote><p>我不能保证写的每个地方都是对的，但是至少能保证不复制、不黏贴，保证每一句话、每一行代码都经过了认真的推敲、仔细的斟酌。每一篇文章的背后，希望都能看到自己对于技术、对于生活的态度。<br>我相信乔布斯说的，只有那些疯狂到认为自己可以改变世界的人才能真正地改变世界。面对压力，我可以挑灯夜战、不眠不休；面对困难，我愿意迎难而上、永不退缩。<br>其实我想说的是，我只是一个程序员，这就是我现在纯粹人生的全部。</p></blockquote><p>再认同不过了。</p><p>– EOF –</p>]]></content>
      
      
      
        <tags>
            
            <tag> thinking </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
