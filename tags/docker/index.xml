<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on ZYF.IM BLOG</title>
    <link>https://zyf.im/tags/docker/</link>
    <description>Recent content in Docker on ZYF.IM BLOG</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Nov 2022 22:24:01 +0000</lastBuildDate>
    <atom:link href="https://zyf.im/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laradock 学习笔记</title>
      <link>https://zyf.im/2022/11/09/explore-laradock/</link>
      <pubDate>Wed, 09 Nov 2022 22:24:01 +0000</pubDate>
      <guid>https://zyf.im/2022/11/09/explore-laradock/</guid>
      <description>&lt;h2 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h2&gt;
&lt;h3 id=&#34;debian_frontend&#34;&gt;DEBIAN_FRONTEND&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;noninteractive
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DEBIAN_FRONTEND 环境变量，告知操作系统应该从哪儿获得用户输入。&lt;/p&gt;
&lt;p&gt;如果设置为 &amp;ldquo;noninteractive&amp;rdquo;，你就可以直接运行命令，而无需向用户请求输入（所有操作都是非交互式的）。&lt;/p&gt;
&lt;p&gt;这在运行 apt-get 命令的时候格外有用，因为它会不停地提示用户进行到了哪步并且需要不断确认。&lt;/p&gt;
&lt;p&gt;非交互模式会选择默认的选项并以最快的速度完成构建。请确保只在 Dockerfile 中调用的 RUN 命令中设置了该选项，而不是使用 ENV 命令进行全局的设置。&lt;/p&gt;
&lt;p&gt;因为 ENV 命令在整个容器运行过程中都会生效，所以当你通过 BASH 和容器进行交互时，如果进行了全局设置那就会出问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/bollen/p/7137200.html&#34;&gt;https://www.cnblogs.com/bollen/p/7137200.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;install-swoole&#34;&gt;install swoole&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.swoole.com/#/environment?id=pecl&#34;&gt;https://wiki.swoole.com/#/environment?id=pecl&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/swoole/swoole-src/blob/v4.5.11/package.xml&#34;&gt;https://github.com/swoole/swoole-src/blob/v4.5.11/package.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在安装过程中它会询问是否要启用某些功能，这也可以在运行安装之前提供：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# php7.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; pecl -q install --configureoptions &lt;span class=&#34;s1&#34;&gt;&amp;#39;enable-openssl=&amp;#34;yes&amp;#34; enable-mysqlnd=&amp;#34;yes&amp;#34; enable-swoole-curl=&amp;#34;yes&amp;#34;&amp;#39;&lt;/span&gt; swoole-4.5.11&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;enable-openssl&lt;/code&gt; 验证方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;php -r &lt;span class=&#34;s2&#34;&gt;&amp;#34;new swoole_server(&amp;#39;0.0.0.0&amp;#39;, 443, SWOOLE_PROCESS, SWOOLE_SOCK_TCP | SWOOLE_SSL);&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;docker-composeryml&#34;&gt;docker-composer.yml&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;extra_hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;dockerhost:${DOCKER_HOST_IP}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会在启动后的服务容器中 /etc/hosts 文件中添加：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-host&#34; data-lang=&#34;host&#34;&gt;10.0.75.1 dockerhost
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;php-extensions&#34;&gt;PHP Extensions&lt;/h2&gt;
&lt;h3 id=&#34;pcov&#34;&gt;pcov&lt;/h3&gt;
&lt;p&gt;PCOV - CodeCoverage compatible driver for PHP.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/krakjoe/pcov&#34;&gt;https://github.com/krakjoe/pcov&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker UFW 失效</title>
      <link>https://zyf.im/2018/04/24/docker-ufw-not-work/</link>
      <pubDate>Tue, 24 Apr 2018 14:00:00 +0000</pubDate>
      <guid>https://zyf.im/2018/04/24/docker-ufw-not-work/</guid>
      <description>&lt;p&gt;今日遇到 Docker 中的项目绕过了宿主机 UFW 的配置，可以被任意 IP 访问，甚是奇怪。查找资料发现：&lt;/p&gt;
&lt;p&gt;如果你在 Linux 使用 Docker，很可能你的系统防火墙降级为 Uncomplicated Firewall (UFW)。如果是这样的话，你有一点可能不知道，Docker 和 UFW 的组合带来了一些安全问题。为什么呢？因为 Docker 实际上绕过了 UFW 并直接修改了 iptables，所以一个容器可以绑定一个端口。这就意味着，所有你设置的 UFW 规则都将在 Docker 容器中失效。&lt;/p&gt;
&lt;p&gt;如何修复：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vi /etc/default/docker
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# add the following line:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;DOCKER_OPTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;--iptables=false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Restart the docker daemon:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl restart docker
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker/etc/init.d/docker restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;When a problem arises, it only takes a bit of digging to discover the solution was already there, waiting for you to make it so. Don&amp;rsquo;t let this issue with Docker stop you from using this incredible technology.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
