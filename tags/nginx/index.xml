<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nginx on ZYF.IM BLOG</title>
    <link>https://zyf.im/tags/nginx/</link>
    <description>Recent content in Nginx on ZYF.IM BLOG</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Jun 2025 10:12:12 +0800</lastBuildDate>
    <atom:link href="https://zyf.im/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NGINX 启用 HTTP/3</title>
      <link>https://zyf.im/2025/06/27/nginx-enable-http3/</link>
      <pubDate>Fri, 27 Jun 2025 10:12:12 +0800</pubDate>
      <guid>https://zyf.im/2025/06/27/nginx-enable-http3/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;HTTP/2 解决了“多路复用、头部压缩、优先级”等 HTTP/1.x 的瓶颈，但仍受 TCP 先天限制。&lt;/p&gt;
&lt;p&gt;HTTP/3 则把同样的语义搬到 QUIC（UDP） 之上，在连接建立、丢包处理、迁移能力等方面进一步优化。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;层级&lt;/th&gt;
          &lt;th&gt;HTTP/2&lt;/th&gt;
          &lt;th&gt;HTTP/3&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;传输&lt;/td&gt;
          &lt;td&gt;TCP (必)+ TLS1.2/1.3（多数场景）&lt;/td&gt;
          &lt;td&gt;QUIC (UDP 之上)+ TLS1.3（强制）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;流（Stream）&lt;/td&gt;
          &lt;td&gt;Mux 在 TCP 里的逻辑流&lt;/td&gt;
          &lt;td&gt;Mux 在 QUIC 原生流&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;头压缩&lt;/td&gt;
          &lt;td&gt;HPACK&lt;/td&gt;
          &lt;td&gt;QPACK（避免队头阻塞）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Mux multiplex 多路复用&lt;/li&gt;
&lt;li&gt;HTTP/2 必须顺序传输，而 HTTP/3 支持乱序&lt;/li&gt;
&lt;li&gt;如果沿用 HPACK，丢一个 UDP 包就会让所有流的头部解码卡住，因此 IETF 为 HTTP/3 设计了 QPACK 来“避开队头阻塞 (Head-of-Line Blocking, HoL)”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;启用 HTTP/3 需要使用 HTTPS，请先参考 &lt;a href=&#34;https://zyf.im/2025/06/26/use-https-in-local-environment/&#34;&gt;在本地环境使用 HTTPS ｜ ZYF.IM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;修改 NGINX default.conf 配置文件，启用 HTTP/3：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# vi default.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# for better compatibility it&amp;#39;s recommended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# to use the same port for http/3 and https&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 浏览器首次只能走 TCP，因此必须提供一个 HTTPS 入口，再通过 `Alt-Svc` 升级到 HTTP/3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    listen &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; ssl&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Quick UDP Internet Connections&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# quic 关键字表示使用 UDP 监听，承载 QUIC/HTTP-3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# reuseport 关键字表示复用端口，允许多个 NGINX 实例共享同一端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    listen &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt; quic reuseport&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    http2 on&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 启用 HTTP/3，默认是 on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    http3 on&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    server_name localhost&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ssl_certificate /etc/ssl/certs/localhost.pem&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ssl_certificate_key /etc/ssl/certs/localhost-key.pem&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 启用 TLS 允许 0-RTT（Early Data），允许客户端在 TLS 1.3 的重连阶段携带早期数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 对 HTTP/3 非必需，但 QUIC 天生支持 0-RTT；此处保持一致&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ssl_early_data on&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 仅启用 TLSv1.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ssl_protocols TLSv1.3&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ssl_ciphers HIGH:!aNULL:!MD5&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ssl_prefer_server_ciphers on&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 添加 Alt-Svc 头，向客户端声明可升级到 HTTP/3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Alt-Svc 头告诉浏览器“该资源在同一主机的 UDP/8443 上能用 h3 协议”，浏览器会自动重试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 因为使用了 docker 的端口映射，所以这里需要使用 8443 端口，默认是 443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# ma max-age 缓存时间，86400 秒 = 1 天&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# always 关键字保证即使发生 4xx/5xx 也发送 Alt-Svc，便于调试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    add_header Alt-Svc &lt;span class=&#34;s1&#34;&gt;&amp;#39;h3=&amp;#34;:8443&amp;#34;; ma=86400&amp;#39;&lt;/span&gt; always&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    location / &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        root /usr/share/nginx/html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        index  index.html index.htm&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# docker rm -f nginx-ssl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加监听 UDP 端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -d --name nginx-ssl &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -p 8443:443 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -p 8443:443/udp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -v ./default.conf:/etc/nginx/conf.d/default.conf:ro &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -v ./localhost.pem:/etc/ssl/certs/localhost.pem:ro &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -v ./localhost-key.pem:/etc/ssl/certs/localhost-key.pem:ro &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -v ./html/:/usr/share/nginx/html/:ro &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  nginx:alpine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# docker container restart nginx-ssl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;h3 id=&#34;curl&#34;&gt;curl&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用支持 HTTP/3 的 curl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# docker run -ti --rm alpine/curl-http3 curl -V&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -ti --network host --rm alpine/curl-http3 curl -I --http3 https://localhost:8443/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/3 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: nginx/1.29.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Fri, &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; 03:26:09 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: text/html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;656&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;last-modified: Fri, &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; Jun &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; 03:17:07 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;etag: &lt;span class=&#34;s2&#34;&gt;&amp;#34;685e0d33-290&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;alt-svc: &lt;span class=&#34;nv&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:8443&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ma&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;86400&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;accept-ranges: bytes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;游览器&#34;&gt;游览器&lt;/h3&gt;
&lt;p&gt;无法验证！理论结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>在本地环境使用 HTTPS</title>
      <link>https://zyf.im/2025/06/26/use-https-in-local-environment/</link>
      <pubDate>Thu, 26 Jun 2025 12:00:00 +0800</pubDate>
      <guid>https://zyf.im/2025/06/26/use-https-in-local-environment/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;HTTPS（HyperText Transfer Protocol Secure）是在 HTTP 之上通过 TLS/SSL 实现加密的安全通信协议，用来保护浏览器与服务器之间的数据机密性、完整性与身份可信性。&lt;/p&gt;
&lt;h3 id=&#34;为什么需要-https&#34;&gt;为什么需要 HTTPS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;信息加密。防止明文传输被窃听（如 Wi-Fi 嗅探、运营商劫持）。&lt;/li&gt;
&lt;li&gt;身份认证。通过数字证书确保访问的是&amp;quot;真正的&amp;quot;服务器，避免中间人攻击（MITM）。&lt;/li&gt;
&lt;li&gt;数据完整性。TLS 具有 MAC（消息验证码）机制，能检测并阻止篡改。&lt;/li&gt;
&lt;li&gt;SEO 与浏览器政策。谷歌等搜索引擎对 HTTPS 站点给予权重提升；现代浏览器在地址栏对 HTTP 标红或弹警告。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;握手过程&#34;&gt;握手过程&lt;/h3&gt;
&lt;p&gt;TLS 1.2 为例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
  participant Client
  participant Server
  Client-&amp;gt;&amp;gt;Server: ClientHello&amp;lt;br/&amp;gt;– 支持的 TLS 版本、随机数、加密套件
  Server--&amp;gt;&amp;gt;Client: ServerHello&amp;lt;br/&amp;gt;– 选定版本/套件、随机数
  Server--&amp;gt;&amp;gt;Client: Certificate
  Server--&amp;gt;&amp;gt;Client: ServerHelloDone
  Client-&amp;gt;&amp;gt;Server: ClientKeyExchange&amp;lt;br/&amp;gt;– 预主密钥 (用公钥加密)
  Client-&amp;gt;&amp;gt;Server: ChangeCipherSpec
  Client-&amp;gt;&amp;gt;Server: Finished (用对称密钥加密)
  Server--&amp;gt;&amp;gt;Client: ChangeCipherSpec
  Server--&amp;gt;&amp;gt;Client: Finished
  note over Client,Server: 之后开始对称加密的数据传输
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;双方首先协商算法与随机数；&lt;/li&gt;
&lt;li&gt;客户端用服务器公钥加密预主密钥；&lt;/li&gt;
&lt;li&gt;双方基于随机数与预主密钥生成会话密钥；&lt;/li&gt;
&lt;li&gt;后续通信全部使用对称加密，提高效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;证书类型&#34;&gt;证书类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DV（Domain Validation）证书仅验证域名所有权，通过自动化流程颁发，价格低廉甚至免费（如 Let&amp;rsquo;s Encrypt）。&lt;/li&gt;
&lt;li&gt;OV（Organization Validation）证书需要验证组织实体信息，在浏览器证书详情中可查看公司名称。&lt;/li&gt;
&lt;li&gt;EV（Extended Validation）证书验证最为严格，地址栏会显示公司名称，但多数现代浏览器已弱化此功能的 UI 展示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tls-13&#34;&gt;TLS 1.3&lt;/h3&gt;
&lt;p&gt;TLS 1.3（RFC 8446）是在 2018 年 8 月正式发布的最新版本，相比 TLS 1.2 做了深度“瘦身+加速+强化安全”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NGINX 前后端分离配置</title>
      <link>https://zyf.im/2020/03/17/nginx-front-back-end-config/</link>
      <pubDate>Tue, 17 Mar 2020 11:33:24 +0800</pubDate>
      <guid>https://zyf.im/2020/03/17/nginx-front-back-end-config/</guid>
      <description>&lt;p&gt;前后端分离的开发已是主流，本文主要是记录前后端分离项目的 NGINX 配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端 Vue web 入口 &lt;code&gt;host.test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后端 PHP Yii service 入口 &lt;code&gt;host.test/api&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;server {
  listen 80;
  server_name host.test;
  root /data/project/web/dist/;
  index index.html index.php;

  location ^~/api {
    root           /data/project/service/web/;

    access_log     logs/service-access.log;
    error_log      logs/service-error.log;

    fastcgi_pass   127.0.0.1:9000;
    include        fastcgi.conf;
    fastcgi_param  SCRIPT_FILENAME   /data/project/service/web/index.php;
    fastcgi_param  SCRIPT_NAME       /api/index.php;
  }

  location /index.html {
    add_header Cache-Control &amp;#34;no-cache, no-store&amp;#34;;
  }

  location ^~ / {
    alias /data/project/web/dist/;
    access_log logs/web-access.log;
    error_log logs/web-error.log;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;负载均衡场景&#34;&gt;负载均衡场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前端 Vue web 入口 &lt;code&gt;host.test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后端 PHP Yii service 入口 &lt;code&gt;host.test/api&lt;/code&gt; 代理到 &lt;code&gt;api.host.test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web&#34;&gt;WEB&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;server {
  listen 80;
  server_name host.test;
  root /data/project/web/dist/;

  access_log logs/web-access.log;
  error_log logs/web-error.log;

  location /index.html {
    add_header Cache-Control &amp;#34;no-cache, no-store&amp;#34;;
  }

  location / {
    index index.php index.html index.htm;
    try_files $uri $uri/ /index.html;
  }

  location ^~/api/ {
    proxy_set_header Host             api.host.test;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy    true;
    proxy_pass http://api.host.test/;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;service&#34;&gt;SERVICE&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;server {
  listen 80;
  server_name api.host.test;
  root /data/project/service/web/;

  location / {
    access_log logs/service-access.log;
    error_log logs/service-error.log;

    index index.php index.html;
    try_files $uri $uri/ /index.php$is_args$args;
  }

  location ~ \.php$ {
    fastcgi_pass    127.0.0.1:10071;

    fastcgi_index   index.php;
    include         fastcgi_params;
    fastcgi_param   SCRIPT_FILENAME   $document_root$fastcgi_script_name;
    fastcgi_param   SERVER_NAME       $http_host;
    fastcgi_ignore_client_abort       on;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nginx-配置转发&#34;&gt;NGINX 配置转发&lt;/h2&gt;
&lt;p&gt;location 进行的是模糊匹配。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 Certbot 获取 Let’s Encrypt 颁发的 TLS 证书</title>
      <link>https://zyf.im/2018/04/26/lets-encrypt-wildcard-certificates/</link>
      <pubDate>Thu, 26 Apr 2018 16:00:00 +0800</pubDate>
      <guid>https://zyf.im/2018/04/26/lets-encrypt-wildcard-certificates/</guid>
      <description>&lt;h2 id=&#34;certbot-和-lets-encrypt-的关系&#34;&gt;Certbot 和 Let’s Encrypt 的关系&lt;/h2&gt;
&lt;h3 id=&#34;lets-encrypt&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个免费、自动化、开放的公共证书颁发机构（CA）。&lt;/li&gt;
&lt;li&gt;通过 ACME（Automatic Certificate Management Environment）协议向域名所有者颁发 DV（Domain Validation）TLS/SSL 证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;certbot&#34;&gt;Certbot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由 Electronic Frontier Foundation (EFF) 维护的开源 ACME 客户端。&lt;/li&gt;
&lt;li&gt;主要目标是简化与 Let&amp;rsquo;s Encrypt 之间的交互：
&lt;ul&gt;
&lt;li&gt;自动化域名验证（HTTP-01、DNS-01、TLS-ALPN-01 等）&lt;/li&gt;
&lt;li&gt;安装并续期证书&lt;/li&gt;
&lt;li&gt;更新 Web 服务器配置（Apache、Nginx、Lighttpd 等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Certbot 也能与任何兼容 ACME 的 CA 通信，不限于 Let&amp;rsquo;s Encrypt。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;典型工作流程&#34;&gt;典型工作流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;解析参数并检测服务器类型。&lt;/li&gt;
&lt;li&gt;选择并执行挑战（例如在 /.well-known/acme-challenge/ 下写入 token）。&lt;/li&gt;
&lt;li&gt;Let’s Encrypt 回访验证域名归属。&lt;/li&gt;
&lt;li&gt;验证通过后签发证书；Certbot 下载并安装到本地。&lt;/li&gt;
&lt;li&gt;创建定时任务 certbot renew 自动续期。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;开始实验&#34;&gt;开始实验&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;实验环境：Amazon Linux 2023 (AL2023)&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;知识补充&#34;&gt;知识补充&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dnf（Dandified YUM）&lt;/code&gt; 是 RPM-系 Linux 发行版的下一代包管理器。它在功能上取代了传统的 &lt;code&gt;yum&lt;/code&gt;，两者命令参数几乎保持兼容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RPM&lt;/code&gt; 一开始叫 Red Hat Package Manager，后来改名为递归含义的 RPM Package Manager。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RPM-系发行版&lt;/code&gt; 是把 RPM 作为原生软件包格式与核心包管理工具链的那一族 Linux 发行版。常听到的 Fedora / RHEL / CentOS / AlmaLinux / Rocky Linux / openSUSE / SUSE Linux Enterprise / Amazon Linux 2023 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dnf&lt;/code&gt; 不是对 &lt;code&gt;rpm&lt;/code&gt; CLI 的简单封装，而是调用 &lt;code&gt;librpm&lt;/code&gt; 完成最终操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;包管理器&lt;/th&gt;
          &lt;th&gt;代表发行版&lt;/th&gt;
          &lt;th&gt;归属&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;dnf / yum&lt;/td&gt;
          &lt;td&gt;Fedora, RHEL, CentOS&lt;/td&gt;
          &lt;td&gt;RPM&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;zypper&lt;/td&gt;
          &lt;td&gt;openSUSE, SLE&lt;/td&gt;
          &lt;td&gt;RPM&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;apt / apt-get&lt;/td&gt;
          &lt;td&gt;Debian, Ubuntu&lt;/td&gt;
          &lt;td&gt;DEB&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;pacman&lt;/td&gt;
          &lt;td&gt;Arch Linux&lt;/td&gt;
          &lt;td&gt;tar.xz&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;apk&lt;/td&gt;
          &lt;td&gt;Alpine&lt;/td&gt;
          &lt;td&gt;.apk&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snap&lt;/code&gt; 是一种由 Canonical（Ubuntu 的开发公司）推出的跨发行版应用打包和分发格式，也指围绕它的一整套生态系统。
&lt;ul&gt;
&lt;li&gt;跨发行版。同一个 snap 包可以在几十种发行版上直接安装运行，不依赖各自的 RPM/Deb 系统仓库。&lt;/li&gt;
&lt;li&gt;自包含（bundled）依赖。snap 包内部包含所有依赖，无需外部安装。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://snapcraft.io/&#34;&gt;https://snapcraft.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;launch-an-instance&#34;&gt;Launch an instance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Instance type: t2.nano&lt;/li&gt;
&lt;li&gt;Username: ec2-user&lt;/li&gt;
&lt;li&gt;Security Groups: Allow HTTP and HTTPS&lt;/li&gt;
&lt;li&gt;Public IPv4: 35.86.90.4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置-nginx&#34;&gt;配置 nginx&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo dnf update -y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo dnf install -y nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nginx -v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# nginx version: nginx/1.28.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl start nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl status nginx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Started nginx.service - The nginx HTTP and reverse proxy server.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接通过 &lt;a href=&#34;http://35.86.90.4&#34;&gt;http://35.86.90.4&lt;/a&gt;，会看到默认的 nginx 欢迎页面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NGINX 启用 HTTP/2</title>
      <link>https://zyf.im/2017/06/06/nginx-enable-http2/</link>
      <pubDate>Tue, 06 Jun 2017 21:00:00 +0800</pubDate>
      <guid>https://zyf.im/2017/06/06/nginx-enable-http2/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;HTTP/2（RFC 7540，2015 年发布）是自 1999 年 HTTP/1.1 以来的第一次重大升级，目标是在 不改变应用语义 的前提下，改善延迟、并发和网络效率。浏览器端基本只在 TLS 上启用（h2），明文版本 h2c 仅用于内部服务间通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;h2：HTTP/2 over TLS（最常见，浏览器只支持这一种）&lt;/li&gt;
&lt;li&gt;h2c：HTTP/2 over TCP（无加密）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设计背景&#34;&gt;设计背景&lt;/h3&gt;
&lt;p&gt;移动端和富媒体时代，请求量激增，HTTP/1.1 的队头阻塞、多个 TCP 连接并行带来的 慢启动/拥塞竞争 成为瓶颈。&lt;/p&gt;
&lt;p&gt;谷歌的 SPDY 原型验证了“单连接、多路复用、压缩头部”等思路；IETF 在 SPDY 3.1 基础上标准化为 HTTP/2。&lt;/p&gt;
&lt;h3 id=&#34;核心特性&#34;&gt;核心特性&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;二进制分帧 (Binary Framing)&lt;/td&gt;
          &lt;td&gt;把 HTTP 报文拆成小型 Frame；机器易解析、可并行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;多路复用 (Multiplexing)&lt;/td&gt;
          &lt;td&gt;多个请求/响应 共享一个 TCP 连接，互不阻塞&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;流与优先级 (Stream &amp;amp; Priority)&lt;/td&gt;
          &lt;td&gt;每个请求是双向 Stream，可指定权重与依赖&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;头部压缩 (HPACK)&lt;/td&gt;
          &lt;td&gt;静态 Huffman + 动态表，大幅减少重复的 Header 字节&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;服务器推送 (Server Push)&lt;/td&gt;
          &lt;td&gt;服务器可在请求外预送资源 (已被多数浏览器弱化/关闭)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;流量控制&lt;/td&gt;
          &lt;td&gt;端到端窗口，避免单个大文件占满带宽&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;启用 HTTP/2 需要使用 HTTPS，请先参考 &lt;a href=&#34;https://zyf.im/2025/06/26/use-https-in-local-environment/&#34;&gt;在本地环境使用 HTTPS ｜ ZYF.IM&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PHP 中获取 Nginx 使用反向代理或 CDN 后的客户端真实 IP</title>
      <link>https://zyf.im/2017/06/02/php-get-real-ip-after-nginx-using-reverse-proxy-or-cdn/</link>
      <pubDate>Fri, 02 Jun 2017 16:00:00 +0800</pubDate>
      <guid>https://zyf.im/2017/06/02/php-get-real-ip-after-nginx-using-reverse-proxy-or-cdn/</guid>
      <description>&lt;p&gt;获取 Nginx 反向代理后的客户端 IP，基本是按一定顺序检测以下参数中的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP_CLIENT_IP&lt;/li&gt;
&lt;li&gt;HTTP_X_REAL_FORWARDED_FOR&lt;/li&gt;
&lt;li&gt;HTTP_X_FORWARDED_FOR&lt;/li&gt;
&lt;li&gt;REMOTE_ADDR&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在未使用-cdn-和反向代理情况下&#34;&gt;在未使用 CDN 和反向代理情况下&lt;/h2&gt;
&lt;p&gt;当业务服务器直接暴露在公网上，并且未使用 CDN 和反向代理服务器时，可以直接使用 &lt;code&gt;remote_addr&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$_SERVER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候 &lt;code&gt;HTTP_X_FORWARDED_FOR&lt;/code&gt; 和 &lt;code&gt;HTTP_X_REAL_IP&lt;/code&gt; 都是可以被伪造的，但 &lt;code&gt;REMOTE_ADDR&lt;/code&gt; 是客户端和服务器的握手 IP，即 client 的出口 IP，伪造不了。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;在使用-cdn-和反向代理情况下&#34;&gt;在使用 CDN 和反向代理情况下&lt;/h2&gt;
&lt;h3 id=&#34;铁律&#34;&gt;铁律&lt;/h3&gt;
&lt;p&gt;当多层代理或使用 CDN 时，如果代理服务器不把用户的真实 IP 传递下去，那么业务服务器将永远不可能获取到用户的真实 IP。&lt;/p&gt;
&lt;p&gt;如果 WEB 服务器上层也是使用 Nginx 做代理或负载均衡，则需要在代理层的 Nginx 配置中明确 XFF 参数，累加传递上一个请求方的 IP 到 header 请求中。以下是代理层的 Nginx 配置参数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header Host $http_host;
proxy_set_header X-NginX-Proxy true;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;只有一层代理的情况&#34;&gt;只有一层代理的情况&lt;/h3&gt;
&lt;p&gt;我们按上面的配置发起一个伪造请求，10.100.11.25 是我电脑的 IP，链路为：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
