<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>全力以赴</title>
  
  <subtitle>Yifans_Z&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zyf.im/"/>
  <updated>2021-09-15T11:23:19.592Z</updated>
  <id>https://zyf.im/</id>
  
  <author>
    <name>Yifans_Z</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Yii2 源码阅读 04 - Application</title>
    <link href="https://zyf.im/2021/09/15/reading-yii2-source-code-04/"/>
    <id>https://zyf.im/2021/09/15/reading-yii2-source-code-04/</id>
    <published>2021-09-15T08:28:36.000Z</published>
    <updated>2021-09-15T11:23:19.592Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文 <code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><h2 id="yii-base-Application"><a href="#yii-base-Application" class="headerlink" title="yii\base\Application"></a>yii\base\Application</h2><p>Application is the base class for all application classes.</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-applications" target="_blank" rel="noopener">应用（Applications）</a></p></blockquote><p><img src="https://www.yiiframework.com/doc/guide/2.0/zh-cn/images/application-lifecycle.png"></p><p>路径属性：</p><ul><li><code>@property string $basePath</code> The root directory of the application.</li><li><code>@property string $runtimePath</code> The directory that stores runtime files. Defaults to the “runtime” subdirectory under <code>basePath</code>.</li><li><code>@property string $vendorPath</code> The directory that stores vendor files. Defaults to “vendor” directory under <code>basePath</code>.</li></ul><p>配置属性：</p><ul><li><code>@property-write array $container</code> Values given in terms of name-value pairs. This property is write-only.</li><li><code>@property string $timeZone</code> The time zone used by this application.</li><li><code>@property-read string $uniqueId</code> The unique ID of the module.</li></ul><p>组件属性：</p><ul><li>\yii\web\AssetManager $assetManager</li><li>\yii\rbac\ManagerInterface $authManager</li><li>\yii\caching\CacheInterface $cache</li><li>\yii\db\Connection $db</li><li>\yii\web\ErrorHandler|\yii\console\ErrorHandler $errorHandler</li><li>\yii\i18n\Formatter $formatter</li><li>\yii\i18n\I18N $i18n</li><li>\yii\log\Dispatcher $log</li><li>\yii\mail\MailerInterface $mailer</li><li>\yii\web\Request|\yii\console\Request $request</li><li>\yii\web\Response|\yii\console\Response $response</li><li>\yii\base\Security $security</li><li>\yii\web\UrlManager $urlManager</li><li>View|\yii\web\View $view</li></ul><p>$state：</p><ul><li>STATE_BEGIN 0</li><li>STATE_INIT 1</li><li>STATE_BEFORE_REQUEST 2</li><li>STATE_HANDLING_REQUEST 3</li><li>STATE_AFTER_REQUEST 4</li><li>STATE_SENDING_RESPONSE 5</li><li>STATE_END 6</li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructor.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config name-value pairs that will be used to initialize the object properties.</span></span><br><span class="line"><span class="comment"> * Note that the configuration must contain both [[id]] and [[basePath]].</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if either [[id]] or [[basePath]] configuration is missing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 绑定 app</span></span><br><span class="line">    Yii::$app = <span class="keyword">$this</span>;</span><br><span class="line">    <span class="comment">// 设置当前请求这个 module class 的实例。</span></span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</span><br><span class="line">    <span class="comment">// 设置状态为 begin 0</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_BEGIN;</span><br><span class="line">    <span class="comment">// 验证 id basePath 必填，设置配置，注册核心 components</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;preInit($config);</span><br><span class="line">    <span class="comment">// 注册异常处理</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerErrorHandler($config);</span><br><span class="line">    <span class="comment">// BaseObject construct</span></span><br><span class="line">    Component::__construct($config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置当前请求这个 module class 的实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Module|null $instance the currently requested instance of this module class.</span></span><br><span class="line"><span class="comment"> * If it is `null`, the instance of the calling class will be removed, if any.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setInstance</span><span class="params">($instance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($instance === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">unset</span>(Yii::$app-&gt;loadedModules[get_called_class()]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// loadedModules: list of loaded modules indexed by their class names.</span></span><br><span class="line">        Yii::$app-&gt;loadedModules[get_class($instance)] = $instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pre-initializes the application.</span></span><br><span class="line"><span class="comment"> * 调用此方法开始的 application 的构造函数。</span></span><br><span class="line"><span class="comment"> * 它初始化一些重要的 application properties。</span></span><br><span class="line"><span class="comment"> * 如果你重写这个方法,请确保你调用父实现。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config the application configuration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if either [[id]] or [[basePath]] configuration is missing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">preInit</span><span class="params">(&amp;$config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// id 必填</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'id'</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'The "id" configuration for the Application is required.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// basePath 必填</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'basePath'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setBasePath($config[<span class="string">'basePath'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'basePath'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'The "basePath" configuration for the Application is required.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'vendorPath'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setVendorPath($config[<span class="string">'vendorPath'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'vendorPath'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// set "@vendor"</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getVendorPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'runtimePath'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setRuntimePath($config[<span class="string">'runtimePath'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'runtimePath'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// set "@runtime"</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getRuntimePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'timeZone'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setTimeZone($config[<span class="string">'timeZone'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'timeZone'</span>]);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!ini_get(<span class="string">'date.timezone'</span>)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setTimeZone(<span class="string">'UTC'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'container'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setContainer($config[<span class="string">'container'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'container'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merge core components with custom components</span></span><br><span class="line">    <span class="comment">// coreComponents:</span></span><br><span class="line">    <span class="comment">// [</span></span><br><span class="line">    <span class="comment">//   'log' =&gt; ['class' =&gt; 'yii\log\Dispatcher'],</span></span><br><span class="line">    <span class="comment">//   'view' =&gt; ['class' =&gt; 'yii\web\View'],</span></span><br><span class="line">    <span class="comment">//   'formatter' =&gt; ['class' =&gt; 'yii\i18n\Formatter'],</span></span><br><span class="line">    <span class="comment">//   'i18n' =&gt; ['class' =&gt; 'yii\i18n\I18N'],</span></span><br><span class="line">    <span class="comment">//   'mailer' =&gt; ['class' =&gt; 'yii\swiftmailer\Mailer'],</span></span><br><span class="line">    <span class="comment">//   'urlManager' =&gt; ['class' =&gt; 'yii\web\UrlManager'],</span></span><br><span class="line">    <span class="comment">//   'assetManager' =&gt; ['class' =&gt; 'yii\web\AssetManager'],</span></span><br><span class="line">    <span class="comment">//   'security' =&gt; ['class' =&gt; 'yii\base\Security'],</span></span><br><span class="line">    <span class="comment">// ];</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;coreComponents() <span class="keyword">as</span> $id =&gt; $component) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'components'</span>][$id])) &#123;</span><br><span class="line">            $config[<span class="string">'components'</span>][$id] = $component;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($config[<span class="string">'components'</span>][$id]) &amp;&amp; !<span class="keyword">isset</span>($config[<span class="string">'components'</span>][$id][<span class="string">'class'</span>])) &#123;</span><br><span class="line">            $config[<span class="string">'components'</span>][$id][<span class="string">'class'</span>] = $component[<span class="string">'class'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册 errorHandler 组件作为一个 PHP 错误处理程序。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config application config</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerErrorHandler</span><span class="params">(&amp;$config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在 BaseYii 中 默认是 true</span></span><br><span class="line">    <span class="keyword">if</span> (YII_ENABLE_ERROR_HANDLER) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>][<span class="string">'class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Error: no errorHandler component is configured.\n"</span>;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'errorHandler'</span>, $config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="comment">// \yii\web\ErrorHandler|\yii\console\ErrorHandler</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getErrorHandler()-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理 ErrorHandler：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register this error handler.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.32 this will not do anything if the error handler was already registered</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_registered) &#123;</span><br><span class="line">        ini_set(<span class="string">'display_errors'</span>, <span class="keyword">false</span>);</span><br><span class="line">        set_exception_handler([<span class="keyword">$this</span>, <span class="string">'handleException'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (defined(<span class="string">'HHVM_VERSION'</span>)) &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleHhvmError'</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleError'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;memoryReserveSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_memoryReserve = str_repeat(<span class="string">'x'</span>, <span class="keyword">$this</span>-&gt;memoryReserveSize);</span><br><span class="line">        &#125;</span><br><span class="line">        register_shutdown_function([<span class="keyword">$this</span>, <span class="string">'handleFatalError'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_registered = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_INIT;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化扩展并执行引导组件。</span></span><br><span class="line"><span class="comment"> * This method is called by [[init()]] after the application has been fully configured.</span></span><br><span class="line"><span class="comment"> * If you override this method, make sure you also call the parent implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 注册绑定 extensions</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;extensions === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// @vendor/yiisoft/extensions.php:</span></span><br><span class="line">        <span class="comment">// return array (</span></span><br><span class="line">        <span class="comment">//   'yiisoft/yii2-bootstrap4' =&gt;</span></span><br><span class="line">        <span class="comment">//   array (</span></span><br><span class="line">        <span class="comment">//     'name' =&gt; 'yiisoft/yii2-bootstrap4',</span></span><br><span class="line">        <span class="comment">//     'version' =&gt; '2.0.10.0',</span></span><br><span class="line">        <span class="comment">//     'alias' =&gt;</span></span><br><span class="line">        <span class="comment">//     array (</span></span><br><span class="line">        <span class="comment">//       '@yii/bootstrap4' =&gt; $vendorDir . '/yiisoft/yii2-bootstrap4/src',</span></span><br><span class="line">        <span class="comment">//     ),</span></span><br><span class="line">        <span class="comment">//   ),</span></span><br><span class="line">        <span class="comment">//   'yiisoft/yii2-faker' =&gt;</span></span><br><span class="line">        <span class="comment">//   array (</span></span><br><span class="line">        <span class="comment">//     'name' =&gt; 'yiisoft/yii2-faker',</span></span><br><span class="line">        <span class="comment">//     'version' =&gt; '2.0.5.0',</span></span><br><span class="line">        <span class="comment">//     'alias' =&gt;</span></span><br><span class="line">        <span class="comment">//     array (</span></span><br><span class="line">        <span class="comment">//       '@yii/faker' =&gt; $vendorDir . '/yiisoft/yii2-faker/src',</span></span><br><span class="line">        <span class="comment">//     ),</span></span><br><span class="line">        <span class="comment">//   ),</span></span><br><span class="line">        <span class="comment">//   ...</span></span><br><span class="line">        <span class="comment">// );</span></span><br><span class="line">        $file = Yii::getAlias(<span class="string">'@vendor/yiisoft/extensions.php'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;extensions = is_file($file) ? <span class="keyword">include</span> $file : [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;extensions <span class="keyword">as</span> $extension) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($extension[<span class="string">'alias'</span>])) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($extension[<span class="string">'alias'</span>] <span class="keyword">as</span> $name =&gt; $path) &#123;</span><br><span class="line">                Yii::setAlias($name, $path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($extension[<span class="string">'bootstrap'</span>])) &#123;</span><br><span class="line">            $component = Yii::createObject($extension[<span class="string">'bootstrap'</span>]);</span><br><span class="line">            <span class="comment">// 此 $component 如果实现了 BootstrapInterface 执行 bootstrap 方法</span></span><br><span class="line">            <span class="keyword">if</span> ($component <span class="keyword">instanceof</span> BootstrapInterface) &#123;</span><br><span class="line">                Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component) . <span class="string">'::bootstrap()'</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">                $component-&gt;bootstrap(<span class="keyword">$this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component), <span class="keyword">__METHOD__</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $this-&gt;bootstrap: list of components that should be run during the application [[bootstrap()|bootstrapping process]].</span></span><br><span class="line">    <span class="comment">// 允许你用数组指定启动阶段 bootstrapping process 需要运行的组件。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// configuration adjustments for 'dev' environment</span></span><br><span class="line">    <span class="comment">// $config['bootstrap'][] = 'debug';</span></span><br><span class="line">    <span class="comment">// $config['modules']['debug'] = 'yii\debug\Module';</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 注意：启动太多的组件会降低系统性能，因为每次请求都需要重新运行启动组件， 因此谨慎配置启动组件。</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;bootstrap <span class="keyword">as</span> $mixed) &#123;</span><br><span class="line">        $component = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ($mixed <span class="keyword">instanceof</span> \Closure) &#123;</span><br><span class="line">            Yii::debug(<span class="string">'Bootstrap with Closure'</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">            <span class="keyword">if</span> (!$component = call_user_func($mixed, <span class="keyword">$this</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_string($mixed)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;has($mixed)) &#123;</span><br><span class="line">                $component = <span class="keyword">$this</span>-&gt;get($mixed);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;hasModule($mixed)) &#123;</span><br><span class="line">                $component = <span class="keyword">$this</span>-&gt;getModule($mixed);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (strpos($mixed, <span class="string">'\\'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Unknown bootstrapping component ID: $mixed"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($component)) &#123;</span><br><span class="line">            $component = Yii::createObject($mixed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此 $component 如果实现了 BootstrapInterface 执行 bootstrap 方法</span></span><br><span class="line">        <span class="keyword">if</span> ($component <span class="keyword">instanceof</span> BootstrapInterface) &#123;</span><br><span class="line">            Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component) . <span class="string">'::bootstrap()'</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">            $component-&gt;bootstrap(<span class="keyword">$this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component), <span class="keyword">__METHOD__</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the application.</span></span><br><span class="line"><span class="comment"> * This is the main entrance of an application.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int the exit status (0 means normal, non-zero values mean abnormal)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_BEFORE_REQUEST;</span><br><span class="line">        <span class="comment">// 执行 beforeRequest</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_BEFORE_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_HANDLING_REQUEST;</span><br><span class="line">        <span class="comment">// abstract: Handles the specified request.</span></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;handleRequest(<span class="keyword">$this</span>-&gt;getRequest());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_AFTER_REQUEST;</span><br><span class="line">        <span class="comment">// 执行 afterRequest</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_AFTER_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_SENDING_RESPONSE;</span><br><span class="line">        <span class="comment">// 发送 response</span></span><br><span class="line">        $response-&gt;send();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_END;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 response 退出状态</span></span><br><span class="line">        <span class="keyword">return</span> $response-&gt;exitStatus;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExitException $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;end($e-&gt;statusCode, <span class="keyword">isset</span>($response) ? $response : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> $e-&gt;statusCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止 application.</span></span><br><span class="line"><span class="comment"> * 该方法替换 `exit()` 函数，确保完成应用程序生命周期终止应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $status 退出状态(0表示正常退出，其他表示异常退出)。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Response $response the response to be sent. If not set, the default application [[response]] component will be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ExitException if the application is in testing mode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span><span class="params">($status = <span class="number">0</span>, $response = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前状态是 STATE_BEFORE_REQUEST | STATE_HANDLING_REQUEST</span></span><br><span class="line">    <span class="comment">// 执行 STATE_AFTER_REQUEST</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;state === <span class="keyword">self</span>::STATE_BEFORE_REQUEST || <span class="keyword">$this</span>-&gt;state === <span class="keyword">self</span>::STATE_HANDLING_REQUEST) &#123;</span><br><span class="line">        <span class="comment">// 设置为 STATE_AFTER_REQUEST</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_AFTER_REQUEST;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_AFTER_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前状态不是 STATE_SENDING_RESPONSE | STATE_END</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;state !== <span class="keyword">self</span>::STATE_SENDING_RESPONSE &amp;&amp; <span class="keyword">$this</span>-&gt;state !== <span class="keyword">self</span>::STATE_END) &#123;</span><br><span class="line">        <span class="comment">// 设置为 STATE_END</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_END;</span><br><span class="line">        $response = $response ?: <span class="keyword">$this</span>-&gt;getResponse();</span><br><span class="line">        $response-&gt;send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是 env test，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (YII_ENV_TEST) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExitException($status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>($status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-web-Application"><a href="#yii-web-Application" class="headerlink" title="yii\web\Application"></a>yii\web\Application</h2><blockquote><p>Application is the base class for all web application classes.</p></blockquote><p>属性：</p><ul><li><code>@property-read ErrorHandler $errorHandler</code> The error handler application component.</li><li><code>@property string $homeUrl</code> The homepage URL.</li><li><code>@property-read Request $request</code> The request component.</li><li><code>@property-read Response $response</code> The response component.</li><li><code>@property-read Session $session</code> The session component.</li><li><code>@property-read User $user</code> The user component.</li></ul><p>属性：</p><ul><li><code>public $defaultRoute = &#39;site&#39;;</code> the default route of this application.</li><li><code>public $catchAll;</code> 它指定一个要处理所有用户请求的 控制器方法， 通常在维护模式下使用，同一个方法处理所有用户请求。该配置为一个数组，第一项指定动作的路由，剩下的数组项 (key-value 成对) 指定传递给动作的参数。</li><li><code>public $controller;</code> the currently active controller instance</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'catchAll'</span> =&gt; [</span><br><span class="line">        <span class="string">'offline/notice'</span>,</span><br><span class="line">        <span class="string">'param1'</span> =&gt; <span class="string">'value1'</span>,</span><br><span class="line">        <span class="string">'param2'</span> =&gt; <span class="string">'value2'</span>,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $request = <span class="keyword">$this</span>-&gt;getRequest();</span><br><span class="line">    <span class="comment">// /pc/site/yii-app/web</span></span><br><span class="line">    Yii::setAlias(<span class="string">'@webroot'</span>, dirname($request-&gt;getScriptFile()));</span><br><span class="line">    <span class="comment">// /</span></span><br><span class="line">    Yii::setAlias(<span class="string">'@web'</span>, $request-&gt;getBaseUrl());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parent</span>::bootstrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="handleRequest"><a href="#handleRequest" class="headerlink" title="handleRequest"></a>handleRequest</h3><p>核心方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles the specified request.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Request $request the request to be handled</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Response the resulting response</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NotFoundHttpException if the requested route is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取 route params</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;catchAll)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">list</span>($route, $params) = $request-&gt;resolve();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UrlNormalizerRedirectException $e) &#123;</span><br><span class="line">            $url = $e-&gt;url;</span><br><span class="line">            <span class="keyword">if</span> (is_array($url)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>($url[<span class="number">0</span>])) &#123;</span><br><span class="line">                    <span class="comment">// ensure the route is absolute</span></span><br><span class="line">                    $url[<span class="number">0</span>] = <span class="string">'/'</span>.ltrim($url[<span class="number">0</span>], <span class="string">'/'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                $url += $request-&gt;getQueryParams();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getResponse()-&gt;redirect(Url::to($url, $e-&gt;scheme), $e-&gt;statusCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 'catchAll' =&gt; [</span></span><br><span class="line">        <span class="comment">//     'offline/notice',</span></span><br><span class="line">        <span class="comment">//     'param1' =&gt; 'value1',</span></span><br><span class="line">        <span class="comment">//     'param2' =&gt; 'value2',</span></span><br><span class="line">        <span class="comment">// ],</span></span><br><span class="line">        <span class="comment">// 约定 idx 0 是路由</span></span><br><span class="line">        $route = <span class="keyword">$this</span>-&gt;catchAll[<span class="number">0</span>];</span><br><span class="line">        $params = <span class="keyword">$this</span>-&gt;catchAll;</span><br><span class="line">        <span class="keyword">unset</span>($params[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Yii::debug(<span class="string">"Route requested: '$route'"</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">        <span class="comment">// 绑定路由</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;requestedRoute = $route;</span><br><span class="line">        <span class="comment">// 执行 Module-&gt;runAction</span></span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;runAction($route, $params);</span><br><span class="line">        <span class="comment">// 如果结果是 Response 则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> ($result <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则获取 Response，将结果绑定到 $response-&gt;data</span></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;getResponse();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $result) &#123;</span><br><span class="line">            $response-&gt;data = $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $response;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidRouteException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException(Yii::t(<span class="string">'yii'</span>, <span class="string">'Page not found.'</span>), $e-&gt;getCode(), $e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="coreComponents"><a href="#coreComponents" class="headerlink" title="coreComponents"></a>coreComponents</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">coreComponents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_merge(<span class="keyword">parent</span>::coreComponents(), [</span><br><span class="line">        <span class="string">'request'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\Request'</span>],</span><br><span class="line">        <span class="string">'response'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\Response'</span>],</span><br><span class="line">        <span class="string">'session'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\Session'</span>],</span><br><span class="line">        <span class="string">'user'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\User'</span>],</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\ErrorHandler'</span>],</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书接上文 &lt;code&gt;yii\web\Application&lt;/code&gt; 类的层级结构：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yii\b
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
      <category term="yii2" scheme="https://zyf.im/tags/yii2/"/>
    
  </entry>
  
  <entry>
    <title>分组聚合 OVER PARTITION BY</title>
    <link href="https://zyf.im/2021/09/14/sql-over-partition-by/"/>
    <id>https://zyf.im/2021/09/14/sql-over-partition-by/</id>
    <published>2021-09-14T03:58:42.000Z</published>
    <updated>2021-09-15T02:24:26.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在-HIVE-中"><a href="#在-HIVE-中" class="headerlink" title="在 HIVE 中"></a>在 HIVE 中</h2><p>最近在使用 HIVE，需要统计 <code>当年累计和</code> 这样的指标，请教同事后发现了 <code>OVER(PARTITION BY)</code> 开窗函数。</p><p>分析函数用于计算基于组的某种聚合值，它和聚合函数的不同之处是：对于每个组返回多行，而聚合函数对于每个组只返回一行。</p><p>开窗函数指定了分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化。</p><p>测试语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.test_over_partition (</span><br><span class="line">  <span class="string">`fdate`</span> <span class="built_in">Date</span>,</span><br><span class="line">  <span class="string">`year`</span> <span class="built_in">Int</span>,</span><br><span class="line">  <span class="string">`month`</span> <span class="built_in">Int</span>,</span><br><span class="line">  <span class="string">`category1`</span> <span class="keyword">String</span>,</span><br><span class="line">  <span class="string">`category2`</span> <span class="keyword">String</span>,</span><br><span class="line">  <span class="string">`income`</span> <span class="keyword">Double</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hdp_fin_dash_ods.test_over_partition (<span class="string">`fdate`</span>,<span class="string">`year`</span>,<span class="string">`month`</span>,<span class="string">`category1`</span>,<span class="string">`category2`</span>,<span class="string">`income`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'2020-01-01'</span>,<span class="number">2020</span>,<span class="number">1</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1010'</span>),</span><br><span class="line">(<span class="string">'2020-01-01'</span>,<span class="number">2020</span>,<span class="number">1</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1011'</span>),</span><br><span class="line">(<span class="string">'2020-02-01'</span>,<span class="number">2020</span>,<span class="number">2</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1012'</span>),</span><br><span class="line">(<span class="string">'2020-02-01'</span>,<span class="number">2020</span>,<span class="number">2</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1013'</span>),</span><br><span class="line">(<span class="string">'2020-03-01'</span>,<span class="number">2020</span>,<span class="number">3</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1014'</span>),</span><br><span class="line">(<span class="string">'2020-03-01'</span>,<span class="number">2020</span>,<span class="number">3</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1015'</span>),</span><br><span class="line">(<span class="string">'2021-04-01'</span>,<span class="number">2021</span>,<span class="number">4</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1016'</span>),</span><br><span class="line">(<span class="string">'2021-04-01'</span>,<span class="number">2021</span>,<span class="number">4</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1017'</span>),</span><br><span class="line">(<span class="string">'2021-05-01'</span>,<span class="number">2021</span>,<span class="number">5</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1018'</span>),</span><br><span class="line">(<span class="string">'2021-05-01'</span>,<span class="number">2021</span>,<span class="number">5</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1019'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每年每 category2 日累计 income</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`fdate`</span>,<span class="string">`year`</span>,<span class="string">`month`</span>,<span class="string">`category1`</span>,<span class="string">`category2`</span>,<span class="string">`income`</span></span><br><span class="line">,<span class="keyword">SUM</span>(income) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="string">`year`</span>,<span class="string">`category1`</span>,<span class="string">`category2`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> fdate) <span class="keyword">AS</span> ttl_year_income</span><br><span class="line"><span class="keyword">FROM</span> hdp_fin_dash_ods.test_over_partition;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9289792/133225004-be0d2c88-e713-407b-b41d-da44e16ac960.png"></p><h2 id="在-MySQL-中"><a href="#在-MySQL-中" class="headerlink" title="在 MySQL 中"></a>在 MySQL 中</h2><blockquote><p>Before MySQL 8.0 you can’t use window functions like ROW_NUMBER.</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/zhwbqd/p/4205821.html" target="_blank" rel="noopener">Mysql 分组聚合实现 over partition by 功能 | cnblogs</a></li><li><a href="https://stackoverflow.com/questions/58645949/emulating-partition-over-with-mysql-5-7" target="_blank" rel="noopener">Emulating PARTITION OVER with MySQL 5.7 | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在-HIVE-中&quot;&gt;&lt;a href=&quot;#在-HIVE-中&quot; class=&quot;headerlink&quot; title=&quot;在 HIVE 中&quot;&gt;&lt;/a&gt;在 HIVE 中&lt;/h2&gt;&lt;p&gt;最近在使用 HIVE，需要统计 &lt;code&gt;当年累计和&lt;/code&gt; 这样的指标，请教同事后
      
    
    </summary>
    
    
      <category term="hive" scheme="https://zyf.im/tags/hive/"/>
    
      <category term="sql" scheme="https://zyf.im/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 03 - ServiceLocator Module</title>
    <link href="https://zyf.im/2021/07/28/reading-yii2-source-code-03/"/>
    <id>https://zyf.im/2021/07/28/reading-yii2-source-code-03/</id>
    <published>2021-07-28T07:52:11.000Z</published>
    <updated>2021-08-24T10:11:59.649Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文 <code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><h2 id="yii-di-ServiceLocator"><a href="#yii-di-ServiceLocator" class="headerlink" title="yii\di\ServiceLocator"></a>yii\di\ServiceLocator</h2><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-service-locator" target="_blank" rel="noopener">服务定位器（Service Locator）</a></p></blockquote><p>ServiceLocator implements a <a href="http://en.wikipedia.org/wiki/Service_locator_pattern" target="_blank" rel="noopener">service locator</a>.</p><p>在首次请求某个服务时，服务定位器在 JNDI 中查找服务，并缓存该服务对象。当再次请求相同的服务时，服务定位器会在它的缓存中查找，这样可以在很大程度上提高应用程序的性能。</p><p>要使用 ServiceLocator，首先需要通过调用 set() 或 setComponents() 将 component IDs 注册到定位器的相应组件定义中。</p><p>然后可以调用 get() 来检索具有指定 ID 的 component。定位器将根据定义自动实例化和配置 component。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$locator = <span class="keyword">new</span> \yii\di\ServiceLocator;</span><br><span class="line">$locator-&gt;setComponents([</span><br><span class="line">  <span class="string">'db'</span> =&gt; [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'sqlite:path/to/file.db'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'cache'</span> =&gt; [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\caching\DbCache'</span>,</span><br><span class="line">    <span class="string">'db'</span> =&gt; <span class="string">'db'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'search'</span> =&gt; SolrServiceBuilder::build(<span class="string">'127.0.0.1'</span>),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$db = $locator-&gt;get(<span class="string">'db'</span>);  <span class="comment">// or $locator-&gt;db</span></span><br><span class="line">$cache = $locator-&gt;get(<span class="string">'cache'</span>);  <span class="comment">// or $locator-&gt;cache</span></span><br></pre></td></tr></table></figure><p>因为 \yii\base\Module 继承自 ServiceLocator，所以 modules 和 application 都是 service locators。</p><ul><li><code>@property array $components</code> 组件定义或已加载的组件实例的列表 (ID =&gt; definition or instance).</li><li><code>private array $_components</code> 单例组件 <strong>实例</strong> 的 id 索引。</li><li><code>private array $_definitions</code> 组件 <strong>定义</strong> 的 id 索引。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 向此定位器注册组件定义。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * For example,</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // a class name</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('cache', 'yii\caching\FileCache');</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // a configuration array</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('db', [</span></span><br><span class="line"><span class="comment">  *     'class' =&gt; 'yii\db\Connection',</span></span><br><span class="line"><span class="comment">  *     'dsn' =&gt; 'mysql:host=127.0.0.1;dbname=demo',</span></span><br><span class="line"><span class="comment">  *     'username' =&gt; 'root',</span></span><br><span class="line"><span class="comment">  *     'password' =&gt; '',</span></span><br><span class="line"><span class="comment">  *     'charset' =&gt; 'utf8',</span></span><br><span class="line"><span class="comment">  * ]);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // an anonymous function</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('cache', function ($params) &#123;</span></span><br><span class="line"><span class="comment">  *     return new \yii\caching\FileCache;</span></span><br><span class="line"><span class="comment">  * &#125;);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // an instance</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('cache', new \yii\caching\FileCache);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * If a component definition with the same ID already exists, it will be overwritten.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $id         component ID (e.g. `db`).</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> mixed  $definition 要注册到此定位器的组件定义。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> InvalidConfigException if the definition is an invalid configuration array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($id, $definition)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 移除之前的 component 实例</span></span><br><span class="line">    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_components[$id]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($definition === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 移除之前的 component 定义</span></span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_definitions[$id]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_object($definition) || is_callable($definition, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="comment">// an object, a class name, or a PHP callable</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_definitions[$id] = $definition;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_array($definition)) &#123;</span><br><span class="line">        <span class="comment">// a configuration array</span></span><br><span class="line">        <span class="comment">// 数组中必须有 class</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($definition[<span class="string">'__class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_definitions[$id] = $definition;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_definitions[$id][<span class="string">'class'</span>] = $definition[<span class="string">'__class'</span>];</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_definitions[$id][<span class="string">'__class'</span>]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>($definition[<span class="string">'class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_definitions[$id] = $definition;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"The configuration for the \"$id\" component must contain a \"class\" element."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Unexpected configuration type for the \"$id\" component: "</span> . gettype($definition));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：</p><p><code>is_callable($definition, true)</code> 也就是第二个参数为 true 时，只检查格式（字符串或者数组），不检测内容（是否真的存在，是否真的可被调用）。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(is_callable(<span class="string">'不是方法名的字符串'</span>, <span class="keyword">false</span>)); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(is_callable(<span class="string">'不是方法名的字符串'</span>, <span class="keyword">true</span>));  <span class="comment">// bool(true)</span></span><br><span class="line"></span><br><span class="line">var_dump(is_callable([<span class="string">'随便写，不是对象'</span>, <span class="string">'随便写，不是对象的方法名'</span>], <span class="keyword">false</span>)); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(is_callable([<span class="string">'随便写，不是对象'</span>, <span class="string">'随便写，不是对象的方法名'</span>], <span class="keyword">true</span>));  <span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a set of component definitions in this locator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setComponents</span><span class="params">($components)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($components <span class="keyword">as</span> $id =&gt; $component) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set($id, $component);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回具有指定 ID 的组件实例。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $id             component ID (e.g. `db`).</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> bool   $throwException whether to throw an exception if `$id` is not registered with the locator before</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> object|null the component of the specified ID. If `$throwException` is false and `$id` is not registered before, null will be returned.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> InvalidConfigException if `$id` refers to a nonexistent component ID</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> has()</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> set()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($id, $throwException = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 已实例化过</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_components[$id])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_components[$id];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_definitions[$id])) &#123;</span><br><span class="line">        <span class="comment">// 已定义 未实例化</span></span><br><span class="line">        $definition = <span class="keyword">$this</span>-&gt;_definitions[$id];</span><br><span class="line">        <span class="keyword">if</span> (is_object($definition) &amp;&amp; !$definition <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">            <span class="comment">// 是对象 &amp; 非闭包 直接赋值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_components[$id] = $definition;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 实例化核心方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_components[$id] = Yii::createObject($definition);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($throwException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Unknown component ID: $id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Yii 应用程序本质上是一个模块树。</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-service-locator#tree-traversal" target="_blank" rel="noopener">遍历树（Tree traversal）</a></p></blockquote><h2 id="yii-base-Module"><a href="#yii-base-Module" class="headerlink" title="yii\base\Module"></a>yii\base\Module</h2><p>Module 是模块和应用程序类的基类。</p><p>Module 代表一个子应用程序，它本身包含 MVC 元素，如模型、视图、控制器等。</p><p>一个模块可以由 <code>modules|sub-modules</code> 组成。</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-modules" target="_blank" rel="noopener">模块</a></p></blockquote><ul><li>@property-write array $aliases 被定义的别名数组</li><li>@property string $basePath module 的根目录</li><li>@property string $layoutPath 布局文件的根目录 默认值 {viewPath}/layouts</li><li>@property array $modules 模块（索引是 IDs）</li><li>@property-read string $uniqueId modules 的唯一 ID</li><li>@property string $version module 的版本</li><li>@property string $viewPath view files 的根目录 默认值 {basePath}/views</li></ul><p>属性：</p><ul><li>public $params = []; 自定义的模块参数 (name =&gt; value)</li><li>public string $id; 唯一 ID</li><li>public Module|null $module; 该模块的父模块。null 这个模块没有父模块。</li><li>public string|bool|null $layout;</li><li>public $controllerMap = [];</li><li>public string|null $controllerNamespace; if the namespace of this module is <code>foo\bar</code> default <code>foo\bar\controllers</code>。</li><li>public $defaultRoute = ‘default’; The route may consist of child module ID, controller ID, and/or action ID.</li><li>private $_version;</li></ul><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-autoloading" target="_blank" rel="noopener">类自动加载（Autoloading）</a></p></blockquote><p>事件：</p><ul><li>EVENT_BEFORE_ACTION before executing a controller action</li><li>EVENT_AFTER_ACTION after executing a controller action</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($id, $parent = null, $config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;module = $parent;</span><br><span class="line">    <span class="keyword">parent</span>::__construct($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：</p><p>方法重载（overload）是类的多态的一种实现。方法在被调用的时候，虽然方法名字相同，但根据参数的不同可以自动调用相应的函数。但是 PHP 并不直接支持，只用通过 <code>__call</code> 或者 <code>func_get_args()</code> <code>func_num_args()</code> + <code>call_user_func_array()</code> 实现。</p><p>方法重写（override）否重写父类方法只会根据方法名是否一致判断（5.3 以后重写父类方法参数个数必须一致）。访问级别只可以等于或者宽松于父类（private 的重写可以是 private protected public 佛是重新定义了一个方法）。final 修饰的类方法不可被子类重写。</p><p><code>__construct</code> 的参数子类可以与父类不同。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前请求的这个模块类的实例。</span></span><br><span class="line"><span class="comment"> * 如果当前未请求模块类，则返回 null。</span></span><br><span class="line"><span class="comment"> * 提供此方法是为了让您从模块内的任何位置访问模块实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> static|null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $class = get_called_class();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">isset</span>(Yii::$app-&gt;loadedModules[$class]) ? Yii::$app-&gt;loadedModules[$class] : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get_called_class();</code> PHP 5.5 后等于 <code>static::class</code> the “Late Static Binding” class name.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个 ID，该 ID 在当前应用程序的所有模块中唯一标识此模块。</span></span><br><span class="line"><span class="comment"> * 注意，如果模块是一个 application，将返回一个空字符串。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string the unique ID of the module.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUniqueId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否有父模块</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;module ? ltrim(<span class="keyword">$this</span>-&gt;module-&gt;getUniqueId() . <span class="string">'/'</span> . <span class="keyword">$this</span>-&gt;id, <span class="string">'/'</span>) : <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回模块的根目录。</span></span><br><span class="line"><span class="comment">  * 它默认是包含模块类文件的目录。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> string the root directory of the module.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBasePath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_basePath === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 反射</span></span><br><span class="line">        $class = <span class="keyword">new</span> \ReflectionClass(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="comment">// $class-&gt;getFileName() 获取类文件的全路径</span></span><br><span class="line">        <span class="comment">// dirname 获取文件的目录</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_basePath = dirname($class-&gt;getFileName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_basePath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置模块的根目录。</span></span><br><span class="line"><span class="comment"> * 此方法只能在 构造函数 的开头调用。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path the root directory of the module.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidArgumentException if the directory does not exist.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBasePath</span><span class="params">($path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $path = Yii::getAlias($path);</span><br><span class="line">    $p = strncmp($path, <span class="string">'phar://'</span>, <span class="number">7</span>) === <span class="number">0</span> ? $path : realpath($path);</span><br><span class="line">    <span class="keyword">if</span> (is_string($p) &amp;&amp; is_dir($p)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_basePath = $p;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">"The directory does not exist: $path"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$dir = <span class="string">'./../yii2-app-basic/../'</span>;</span><br><span class="line">var_dump(dirname($dir));</span><br><span class="line">var_dump(realpath($dir));</span><br><span class="line"></span><br><span class="line"><span class="comment">// realpath 返回规范化的绝对路径名</span></span><br><span class="line"><span class="comment">// string(19) "./../yii2-app-basic"</span></span><br><span class="line"><span class="comment">// string(23) "/Users/bob/web"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制安全的前 n 个字符的字符串比较</span></span><br><span class="line"><span class="comment">// strncmp($path, 'phar://', 7) === 0</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns current module version.</span></span><br><span class="line"><span class="comment"> * 如果version未显式设置，将使用 defaultVersion() 方法确定其值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string the version of this module.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getVersion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_version === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_version = <span class="keyword">$this</span>-&gt;defaultVersion();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断 _version 是否是标量</span></span><br><span class="line">        <span class="keyword">if</span> (!is_scalar(<span class="keyword">$this</span>-&gt;_version)) &#123;</span><br><span class="line">            <span class="comment">// 对闭包的支持</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_version = call_user_func(<span class="keyword">$this</span>-&gt;_version, <span class="keyword">$this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行由路指定的控制器动作。</span></span><br><span class="line"><span class="comment"> * 这个方法解析指定的路由，并创建相应的子模块、控制器和动作实例。</span></span><br><span class="line"><span class="comment"> * 然后调用 Controller::runAction() 以使用给定的参数运行操作。</span></span><br><span class="line"><span class="comment"> * 如果路由为空，该方法将使用 defaultRoute。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $route the route that specifies the action.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params the parameters to be passed to the action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed the result of the action.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidRouteException if the requested route cannot be resolved into an action successfully.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">runAction</span><span class="params">($route, $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ctrl 见下文</span></span><br><span class="line">    $parts = <span class="keyword">$this</span>-&gt;createController($route);</span><br><span class="line">    <span class="keyword">if</span> (is_array($parts)) &#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">@var</span> $controller Controller */</span></span><br><span class="line">        <span class="keyword">list</span>($controller, $actionID) = $parts;</span><br><span class="line">        <span class="comment">// 获取旧的</span></span><br><span class="line">        $oldController = Yii::$app-&gt;controller;</span><br><span class="line">        <span class="comment">// 绑定新的</span></span><br><span class="line">        Yii::$app-&gt;controller = $controller;</span><br><span class="line">        <span class="comment">// 运行 ctrl action</span></span><br><span class="line">        $result = $controller-&gt;runAction($actionID, $params);</span><br><span class="line">        <span class="comment">// 如果旧的不等于空，回绑定旧的</span></span><br><span class="line">        <span class="keyword">if</span> ($oldController !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            Yii::$app-&gt;controller = $oldController;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取标示</span></span><br><span class="line">    $id = <span class="keyword">$this</span>-&gt;getUniqueId();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRouteException(<span class="string">'Unable to resolve the request "'</span> . ($id === <span class="string">''</span> ? $route : $id . <span class="string">'/'</span> . $route) . <span class="string">'".'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于给定的路由创建一个控制器实例。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 路由应该是相对于这个模块的。该方法实现了以下算法来解析给定的路由:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 如果路由为空，则使用 defaultRoute;</span></span><br><span class="line"><span class="comment"> * 2. 如果在 controllerMap 中找到路由的第一个段，则根据 controllerMap 中找到的相应配置创建一个控制器;</span></span><br><span class="line"><span class="comment"> * 3. 如果路由的第一个片段是一个有效的模块 ID，如 modules 中声明的，用路由的其余部分调用模块的 createController();</span></span><br><span class="line"><span class="comment"> * 4. 给定的路由格式为 `abc/def/xyz`. 尝试 `abc\DefController` 或者 `abc\def\XyzController` class within the [[controllerNamespace|controller namespace]].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果上面的任何一个步骤解析为一个控制器，它将与路由的其余部分一起返回，后者将被视为动作 ID。否则，将返回 false。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $route the route consisting of module, controller and action IDs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array|bool 如果控制器创建成功，它将与请求的操作ID一起返回。否则将返回 false。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the controller class and its file do not match.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createController</span><span class="params">($route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($route === <span class="string">''</span>) &#123;</span><br><span class="line">        $route = <span class="keyword">$this</span>-&gt;defaultRoute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double slashes or leading/ending slashes may cause substr problem</span></span><br><span class="line">    $route = trim($route, <span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">if</span> (strpos($route, <span class="string">'//'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strpos($route, <span class="string">'/'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// abc/def/xyz</span></span><br><span class="line">        <span class="comment">// id: abc</span></span><br><span class="line">        <span class="comment">// route: def/xyz</span></span><br><span class="line">        <span class="keyword">list</span>($id, $route) = explode(<span class="string">'/'</span>, $route, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $id = $route;</span><br><span class="line">        $route = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// module and controller map take precedence</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;controllerMap[$id])) &#123;</span><br><span class="line">        <span class="comment">// 通过 controllerMap 创建</span></span><br><span class="line">        $controller = Yii::createObject(<span class="keyword">$this</span>-&gt;controllerMap[$id], [$id, <span class="keyword">$this</span>]);</span><br><span class="line">        <span class="keyword">return</span> [$controller, $route];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取父级模块</span></span><br><span class="line">    $module = <span class="keyword">$this</span>-&gt;getModule($id);</span><br><span class="line">    <span class="keyword">if</span> ($module !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过父级模块创建</span></span><br><span class="line">        <span class="keyword">return</span> $module-&gt;createController($route);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// id abc</span></span><br><span class="line">    <span class="comment">// route def/xyz</span></span><br><span class="line">    <span class="keyword">if</span> (($pos = strrpos($route, <span class="string">'/'</span>)) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        $id .= <span class="string">'/'</span> . substr($route, <span class="number">0</span>, $pos);</span><br><span class="line">        $route = substr($route, $pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// id abc/def</span></span><br><span class="line">    <span class="comment">// route xyz</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ctrl 见下文</span></span><br><span class="line">    $controller = <span class="keyword">$this</span>-&gt;createControllerByID($id);</span><br><span class="line">    <span class="keyword">if</span> ($controller === <span class="keyword">null</span> &amp;&amp; $route !== <span class="string">''</span>) &#123;</span><br><span class="line">        $controller = <span class="keyword">$this</span>-&gt;createControllerByID($id . <span class="string">'/'</span> . $route);</span><br><span class="line">        $route = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $controller === <span class="keyword">null</span> ? <span class="keyword">false</span> : [$controller, $route];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过给定的 controller ID 创建 controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 控制器 ID 与该模块相关。控制器类的命名空间应该在 controllerNamespace 下。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意，此方法不检查 modules 或 controllerMap。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $id the controller ID.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Controller|null 如果控制器 ID 无效，则为 null。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the controller class and its file name do not match. 此异常只会在 debug 模式抛出。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createControllerByID</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// id abc/def</span></span><br><span class="line">    $pos = strrpos($id, <span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">if</span> ($pos === <span class="keyword">false</span>) &#123;</span><br><span class="line">        $prefix = <span class="string">''</span>;</span><br><span class="line">        $className = $id;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $prefix = substr($id, <span class="number">0</span>, $pos + <span class="number">1</span>);</span><br><span class="line">        $className = substr($id, $pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// prefix abc</span></span><br><span class="line">    <span class="comment">// className def</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Checks if class name or prefix is incorrect</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isIncorrectClassNameOrPrefix($className, $prefix)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// https://www.pagecolumn.com/tool/pregtest.htm</span></span><br><span class="line">    <span class="comment">// 中划线转大驼峰</span></span><br><span class="line">    $className = preg_replace_callback(<span class="string">'%-([a-z0-9_])%i'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($matches)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ucfirst($matches[<span class="number">1</span>]);</span><br><span class="line">        &#125;, ucfirst($className)) . <span class="string">'Controller'</span>;</span><br><span class="line">    $className = ltrim(<span class="keyword">$this</span>-&gt;controllerNamespace . <span class="string">'\\'</span> . str_replace(<span class="string">'/'</span>, <span class="string">'\\'</span>, $prefix) . $className, <span class="string">'\\'</span>);</span><br><span class="line">    <span class="keyword">if</span> (strpos($className, <span class="string">'-'</span>) !== <span class="keyword">false</span> || !class_exists($className)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// one of its parents or implements it</span></span><br><span class="line">    <span class="comment">// 与 instanceof 的区别是：instanceof 可以是此类的实例，is_subclass_of 要是此类的子类</span></span><br><span class="line">    <span class="keyword">if</span> (is_subclass_of($className, <span class="string">'yii\base\Controller'</span>)) &#123;</span><br><span class="line">        $controller = Yii::createObject($className, [$id, <span class="keyword">$this</span>]);</span><br><span class="line">        <span class="keyword">return</span> get_class($controller) === $className ? $controller : <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (YII_DEBUG) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Controller class must extend from \\yii\\base\\Controller.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks if class name or prefix is incorrect</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $className</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">isIncorrectClassNameOrPrefix</span><span class="params">($className, $prefix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'%^[a-z][a-z0-9\\-_]*$%'</span>, $className)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($prefix !== <span class="string">''</span> &amp;&amp; !preg_match(<span class="string">'%^[a-z0-9_/]+$%i'</span>, $prefix)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/joyco773/p/6023180.html" target="_blank" rel="noopener">PHP 面向对象编程之深入理解方法重载与方法覆盖（多态）| cnblogs</a></li><li><a href="https://www.cnblogs.com/joyco773/p/6020334.html" target="_blank" rel="noopener">PHP 类方法重写原则 | cnblogs</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书接上文 &lt;code&gt;yii\web\Application&lt;/code&gt; 类的层级结构：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yii\b
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
      <category term="yii2" scheme="https://zyf.im/tags/yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 02 - Configurable BaseObject Component</title>
    <link href="https://zyf.im/2021/07/27/reading-yii2-source-code-02/"/>
    <id>https://zyf.im/2021/07/27/reading-yii2-source-code-02/</id>
    <published>2021-07-27T07:52:00.000Z</published>
    <updated>2021-08-10T09:25:07.629Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文 <code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><h2 id="yii-base-Configurable"><a href="#yii-base-Configurable" class="headerlink" title="yii\base\Configurable"></a>yii\base\Configurable</h2><p>是一个 <code>interface</code>。实现此接口意味着：这些类支持通过其 <code>__constructor</code> 的最后一个数组参数，设置其 <code>properties</code>。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constructor</span><span class="params">($param1, $param2, ..., $config = [])</span></span></span><br></pre></td></tr></table></figure><p>通过 <code>Yii::configure($this, $config);</code> 实现：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">($object, $properties)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($properties <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">        $object-&gt;$name = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口没有声明任何一个方法。主要给 <code>yii\di\Container</code> 使用，以便它可以将 对象配置 作为最后一个参数传递给实现类的构造函数，后文再研究。</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-configurations" target="_blank" rel="noopener">配置（Configurations）</a></p></blockquote><h2 id="yii-base-BaseObject"><a href="#yii-base-BaseObject" class="headerlink" title="yii\base\BaseObject"></a>yii\base\BaseObject</h2><p>是个基类；实现了 <code>property</code>、<code>初始化生命周期</code> 相关功能。</p><p>几乎每个 Yii 框架的核心类都继承自 <code>yii\base\BaseObject</code> 或其子类。</p><h3 id="property-属性"><a href="#property-属性" class="headerlink" title="property 属性"></a>property 属性</h3><p>通过重写 <code>__get</code> <code>__set</code> 实现属性由 getter/setter 定义。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> $_label;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLabel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLabel</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;_label = trim($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getter/setter 定义的 属性 与 类成员变量 区别是：当这种属性被读取时，对应的 getter 方法将被调用；而当属性被赋值时，对应的 setter 方法就调用。如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// equivalent to $label = $object-&gt;getLabel();</span></span><br><span class="line">$label = $object-&gt;label;</span><br><span class="line"></span><br><span class="line"><span class="comment">// equivalent to $object-&gt;setLabel('abc');</span></span><br><span class="line">$object-&gt;label = <span class="string">'abc'</span>;</span><br></pre></td></tr></table></figure><p>这里有个技巧，在类上可以通过注释帮助 IDE 提示属性：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span>-read Behavior[] $behaviors ..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">BaseObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个属性只有一个 getter 方法而没有 setter 方法，那么它就被认为是 <code>只读的</code>。在这种情况下，试图修改属性值将导致 <code>InvalidCallException</code>。</p><p>可以调用 <code>hasProperty()</code>、<code>canGetProperty()</code>、<code>canSetProperty()</code> 来检查属性是否存在。依托的方法 <code>method_exists</code>、<code>property_exists</code>。</p><p>通过 getter/setter 定义的 属性 也有一些特殊规则和限制：</p><ul><li>这类属性的名字是 <strong>不区分大小写 case-insensitive</strong> 的。如，<code>$object-&gt;label</code> 和 <code>$object-&gt;Label</code> 是同一个属性。 因为 PHP 方法名是不区分大小写的。（所以内部函数是下划线命名法？）</li><li>如果这类属性的名字和类成员变量相同，以后者为准。例如，假设以上 Foo 类有个 label 成员变量，然后给 <code>$object-&gt;label = &#39;abc&#39;</code> 赋值，将赋给成员变量而不是 setter setLabel() 方法。这是因为 <code>__set</code> 是在没有此成员变量是触发。</li><li>这些属性不支持可见性。如果属性是公共的、受保护的或私有的，它与定义的 getter/setter 方法没有区别。</li><li>这类属性只能由非静态 getter/setter 定义，静态方法不会以相同的方式处理。</li><li>对 property_exists() 的调用，无法判断魔法属性。应该调用 hasProperty()。</li></ul><p>🤔 思考：这里增强了类的属性的操作，是否不利于面向对象编程与理解，因为看起来方便的直接的属性操作是否破坏了封装性？</p><blockquote><p>详细参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-properties" target="_blank" rel="noopener">属性（Properties）</a></p></blockquote><h3 id="initialization-life-cycle"><a href="#initialization-life-cycle" class="headerlink" title="initialization life cycle"></a>initialization life cycle</h3><p>实现了对象初始化的生命周期 <code>initialization life cycle</code>：</p><ol><li><code>__construct</code> 被调用。</li><li>对象属性将根据 <a href="#yii\base\Configurable">Configurable</a> 被初始化。</li><li><code>init()</code> 被调用。</li></ol><p>2、3 发生在构造函数的尾部，推荐在 <code>init()</code> 再进行相关初始化操作，因为此时对象属性已经完成了设置。</p><p>为保证以上生命周期，BaseObject 的子类应该像如下方式重新构造方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($param1, $param2, ..., $config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">parent</span>::__construct($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-base-Component"><a href="#yii-base-Component" class="headerlink" title="yii\base\Component"></a>yii\base\Component</h2><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-components" target="_blank" rel="noopener">组件（Components）</a></p></blockquote><p>是个基类；除了在父类 <a href="#yii\base\BaseObject">BaseObject</a> 中实现的 <code>property</code> 特性外，还提供了 <code>event</code>、<code>behavior</code> 特性。</p><ul><li><code>private $_events</code> the attached event handlers (event name =&gt; handlers)</li><li><code>private $_eventWildcards</code> (event name wildcard =&gt; handlers)</li><li><code>private $_behaviors</code> the attached behaviors (behavior name =&gt; behavior). This is <code>null</code> when not initialized.</li></ul><h3 id="Events-事件"><a href="#Events-事件" class="headerlink" title="Events 事件"></a>Events 事件</h3><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events" target="_blank" rel="noopener">事件（Events）</a></p></blockquote><p>Event is a way to “inject” custom code into existing code at certain places.</p><p>事件称标识在定义它的类中应该是唯一的。事件名称 <strong>区分大小写 case-sensitive</strong>。</p><p>调用 <code>on()</code> 附加到一个事件。一个或多个 PHP 回调函数，称为 <em>event handlers 事件处理器</em>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches an event handler to an event.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The event handler must be a valid PHP callback.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * function ($event) &#123; ... &#125;         // anonymous function</span></span><br><span class="line"><span class="comment"> * [$object, 'handleClick']          // $object-&gt;handleClick()</span></span><br><span class="line"><span class="comment"> * ['Page', 'handleClick']           // Page::handleClick()</span></span><br><span class="line"><span class="comment"> * 'handleClick'                     // global function handleClick()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 事件处理程序必须使用以下签名定义，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * function ($event)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Since 2.0.14 you can specify event name as a wildcard pattern:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $component-&gt;on('event.group.*', function ($event) &#123;</span></span><br><span class="line"><span class="comment"> *     Yii::trace($event-&gt;name . ' is triggered.');</span></span><br><span class="line"><span class="comment"> * &#125;);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $name the event name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable $handler the event handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $data 事件触发时要传递给事件处理程序的数据。</span></span><br><span class="line"><span class="comment"> *                    当事件处理器被调用时，可以通过 event::data 访问该数据。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool $append 是否将 新的事件处理程序 追加到现有处理程序列表的 末尾。</span></span><br><span class="line"><span class="comment"> *                     如果为 false，新的处理程序 将插入到现有处理程序列表的开头。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> off()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">($name, $handler, $data = null, $append = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 确保在 behaviors() 中声明的行为被附加到这个组件。</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strpos($name, <span class="string">'*'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 通配符模式</span></span><br><span class="line">        <span class="keyword">if</span> ($append || <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;_eventWildcards[$name])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_eventWildcards[$name][] = [$handler, $data];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            array_unshift(<span class="keyword">$this</span>-&gt;_eventWildcards[$name], [$handler, $data]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($append || <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;_events[$name])) &#123;</span><br><span class="line">        <span class="comment">// append = true 插入尾部</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_events[$name][] = [$handler, $data];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 插入头部</span></span><br><span class="line">        array_unshift(<span class="keyword">$this</span>-&gt;_events[$name], [$handler, $data]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>trigger()</code> 来 raise 一个事件：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Triggers an event.</span></span><br><span class="line"><span class="comment"> * 它调用事件的所有附加处理程序，包括 class-level 处理程序。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $name the event name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Event $event the event parameter. 如果不设置，将创建一个默认的 Event 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">($name, Event $event = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line"></span><br><span class="line">    $eventHandlers = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_eventWildcards <span class="keyword">as</span> $wildcard =&gt; $handlers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringHelper::matchWildcard($wildcard, $name)) &#123;</span><br><span class="line">            $eventHandlers = array_merge($eventHandlers, $handlers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;_events[$name])) &#123;</span><br><span class="line">        $eventHandlers = array_merge($eventHandlers, <span class="keyword">$this</span>-&gt;_events[$name]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($eventHandlers)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($event === <span class="keyword">null</span>) &#123;</span><br><span class="line">            $event = <span class="keyword">new</span> Event();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($event-&gt;sender === <span class="keyword">null</span>) &#123;</span><br><span class="line">            $event-&gt;sender = <span class="keyword">$this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $event-&gt;handled = <span class="keyword">false</span>;</span><br><span class="line">        $event-&gt;name = $name;</span><br><span class="line">        <span class="keyword">foreach</span> ($eventHandlers <span class="keyword">as</span> $handler) &#123;</span><br><span class="line">            <span class="comment">// $handler is [callable $handler, $data]</span></span><br><span class="line">            $event-&gt;data = $handler[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 调用</span></span><br><span class="line">            call_user_func($handler[<span class="number">0</span>], $event);</span><br><span class="line">            <span class="comment">// 如果事件 handled = true，停止进一步的处理</span></span><br><span class="line">            <span class="keyword">if</span> ($event-&gt;handled) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 class-level attached 处理程序</span></span><br><span class="line">    <span class="comment">// static $_eventWildcards and $_events</span></span><br><span class="line">    <span class="comment">// 待研究</span></span><br><span class="line">    Event::trigger(<span class="keyword">$this</span>, $name, $event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用类常量来表示事件名：</p><ol><li>它可以防止拼写错误并支持 IDE 的自动完成。</li><li>只要简单检查常量声明就能了解一个类支持哪些事件。</li></ol><p>类级别的事件处理器：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches an event handler to a class-level event.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When a class-level event is triggered, event handlers attached</span></span><br><span class="line"><span class="comment"> * to that class and all parent classes will be invoked.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string   $class   the fully qualified class name to which the event handler needs to attach</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string   $name    the event name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable $handler the event handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed    $data    事件触发时要传递给事件处理程序的数据。</span></span><br><span class="line"><span class="comment"> *                          When the event handler is invoked, this data can be accessed via [[Event::data]].</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool     $append  whether to append new event handler to the end of the existing</span></span><br><span class="line"><span class="comment"> *                          handler list. If `false`, the new handler will be inserted at the beginning of the existing handler list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> off()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">($class, $name, $handler, $data = null, $append = true)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> ($append || <span class="keyword">empty</span>(<span class="keyword">self</span>::$_events[$name][$class])) &#123;</span><br><span class="line">        <span class="keyword">self</span>::$_events[$name][$class][] = [$handler, $data];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        array_unshift(<span class="keyword">self</span>::$_events[$name][$class], [$handler, $data]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Event::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_INSERT, <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123;</span><br><span class="line">    Yii::trace(get_class($event-&gt;sender) . <span class="string">' is inserted.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Since 2.0.14 you can specify either class name or event name as a wildcard pattern:</span></span><br><span class="line"></span><br><span class="line">Event::on(<span class="string">'app\models\db\*'</span>, <span class="string">'*Insert'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123;</span><br><span class="line">    Yii::trace(get_class($event-&gt;sender) . <span class="string">' is inserted.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每当 <code>ActiveRecord</code> 或其子类的实例触发 <code>EVENT_AFTER_INSERT</code> 事件时， 这个事件处理器都会执行。在这个处理器中，可以通过 <code>$event-&gt;sender</code> 获取触发事件的对象。</p><p>You can also attach a handler to an event when configuring a component with a configuration array.<br>The syntax is like the following:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">'on add'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123; ... &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>where <code>on add</code> stands for attaching an event to the <code>add</code> event.</p><p>其他官方文档：</p><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events#interface-level-event-handlers" target="_blank" rel="noopener">使用接口事件（Events using interfaces）</a></li><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events#global-events" target="_blank" rel="noopener">全局事件（Global Events）</a></li><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events#wildcard-events" target="_blank" rel="noopener">通配符事件（Wildcard Events）</a></li></ul><h3 id="Behaviors-行为"><a href="#Behaviors-行为" class="headerlink" title="Behaviors 行为"></a>Behaviors 行为</h3><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-behaviors" target="_blank" rel="noopener">行为（Behaviors）</a></p></blockquote><p>行为是 <code>yii\base\Behavior</code> 或其子类的实例。行为，也称为 <code>mixins</code>，可以无须改变类继承关系即可增强一个已有的 <code>Component</code> 类功能。</p><p>它可以将自己的方法和属性 注入 到组件中，并通过组件直接访问它们。它还可以响应组件中触发的事件，从而拦截正常的代码执行。</p><p>定义行为，<code>yii\base\Behavior</code>：</p><ul><li><code>public $owner</code> Component|null，行为的所有者。</li><li><code>private $_attachedEvents</code> Attached events handlers。</li></ul><p><code>yii\base\Behavior</code> 为 owner 的 events 声明事件处理器：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为 owner 的 events 声明事件处理器。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 子类可以重写这个方法 来声明哪些 PHP 回调函数应该附加到 owner 组件的事件上。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The callbacks can be any of the following:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - method in this behavior: `'handleClick'`, equivalent to `[$this, 'handleClick']`</span></span><br><span class="line"><span class="comment"> * - object method: `[$object, 'handleClick']`</span></span><br><span class="line"><span class="comment"> * - static method: `['Page', 'handleClick']`</span></span><br><span class="line"><span class="comment"> * - anonymous function: `function ($event) &#123; ... &#125;`</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The following is an example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *     Model::EVENT_BEFORE_VALIDATE =&gt; 'myBeforeValidate',</span></span><br><span class="line"><span class="comment"> *     Model::EVENT_AFTER_VALIDATE =&gt; 'myAfterValidate',</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array 事件名 (array keys) and 相应的事件处理器方法 (array values).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">events</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\base\Component</code> 访问行为中的 <strong>属性</strong> 的逻辑：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">// behavior property</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_behaviors <span class="keyword">as</span> $behavior) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($behavior-&gt;canGetProperty($name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $behavior-&gt;$name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\base\Component</code> 访问行为中的 <strong>方法</strong> 的逻辑：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_behaviors <span class="keyword">as</span> $object) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($object-&gt;hasMethod($name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([$object, $name], $params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnknownMethodException(<span class="string">'Calling unknown method: '</span>.get_class(<span class="keyword">$this</span>).<span class="string">"::$name()"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\base\Component</code> 附加行为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches a behavior to this component.</span></span><br><span class="line"><span class="comment"> * This method will create the behavior object based on the given</span></span><br><span class="line"><span class="comment"> * configuration. After that, the behavior object will be attached to</span></span><br><span class="line"><span class="comment"> * this component by calling the [[Behavior::attach()]] method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string                $name     the name of the behavior</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|array|Behavior $behavior the behavior configuration.</span></span><br><span class="line"><span class="comment"> * This can be one of the following:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  - a [[Behavior]] object</span></span><br><span class="line"><span class="comment"> *  - a string specifying the behavior class</span></span><br><span class="line"><span class="comment"> *  - an object configuration array that will be passed to [[Yii::createObject()]] to create the behavior object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Behavior the behavior object</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> detachBehavior()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attachBehavior</span><span class="params">($name, $behavior)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;attachBehaviorInternal($name, $behavior);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Makes sure that the behaviors declared in [[behaviors()]] are attached to this component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ensureBehaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如属性的注释，This is `null` when not initialized.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_behaviors === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 未初始化</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_behaviors = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;behaviors() <span class="keyword">as</span> $name =&gt; $behavior) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;attachBehaviorInternal($name, $behavior);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches a behavior to this component.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|int $name the name of the behavior. 如果这是一个整数，这意味着该行为是匿名的。</span></span><br><span class="line"><span class="comment"> *                         否则，该行为是命名行为，任何具有相同名称的现有行为将首先分离。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|array|Behavior $behavior the behavior to be attached</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Behavior the attached behavior.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">attachBehaviorInternal</span><span class="params">($name, $behavior)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!($behavior <span class="keyword">instanceof</span> Behavior)) &#123;</span><br><span class="line">        <span class="comment">// 当是 string or array 时</span></span><br><span class="line">        $behavior = Yii::createObject($behavior);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is_int($name)) &#123;</span><br><span class="line">        <span class="comment">// name 是数字</span></span><br><span class="line">        <span class="comment">// 1. 绑定 behavior 的 owner 为 $this</span></span><br><span class="line">        <span class="comment">// 2. 在 events 里 声明附加事件处理器</span></span><br><span class="line">        $behavior-&gt;attach(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="comment">// 注册</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_behaviors[] = $behavior;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_behaviors[$name])) &#123;</span><br><span class="line">            <span class="comment">// 已经存在，解绑</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_behaviors[$name]-&gt;detach();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绑定</span></span><br><span class="line">        $behavior-&gt;attach(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="comment">// 注册</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_behaviors[$name] = $behavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $behavior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-behaviors#comparison-with-traits" target="_blank" rel="noopener">比较行为与 Traits</a></li></ul><p><code>yii\behaviors</code> 层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Behavior</span><br><span class="line">|---- AttributeBehavior</span><br><span class="line">      |---- BlameableBehavior 自动使用当前用户 ID 填充指定的属性。</span><br><span class="line">      |---- OptimisticLockBehavior 乐观锁 使用列名自动升级模型的锁版本。</span><br><span class="line">      |---- SluggableBehavior 自动用一个值填充指定的属性，该值可以在URL中使用。</span><br><span class="line">      |---- TimestampBehavior 自动用当前时间戳填充指定的属性。</span><br><span class="line"></span><br><span class="line">|---- AttributesBehavior</span><br><span class="line">|---- AttributeTypecastBehavior 提供自动模型属性类型转换的能力。</span><br><span class="line">|---- CacheableWidgetBehavior 可缓存小部件行为根据指定的持续时间和依赖关系自动缓存小部件内容。</span><br></pre></td></tr></table></figure><p><code>yii\behaviors\AttributeBehavior</code> 当特定事件发生时，自动将指定的值赋给 ActiveRecord 对象的一个或多个属性。</p><ul><li><code>public $attributes = [];</code> 要用 value 指定的值自动填充的属性列表。</li><li><code>public $value;</code> 将分配给当前属性的值。这可以是匿名函数。</li><li><code>public $skipUpdateOnClean = true;</code> 是否在 $owner 未被修改时跳过此行为。</li><li><code>public $preserveNonEmptyValues = false;</code> 是否保留原来非空属性值。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Evaluates 属性值并将其分配给当前属性。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Event $event</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evaluateAttributes</span><span class="params">($event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;skipUpdateOnClean</span><br><span class="line">        &amp;&amp; $event-&gt;name == ActiveRecord::EVENT_BEFORE_UPDATE</span><br><span class="line">        <span class="comment">// 返回自最近加载或保存以来已被修改的属性值 如果没有修改返回 []</span></span><br><span class="line">        &amp;&amp; <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;owner-&gt;dirtyAttributes)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $event-&gt;name eg ActiveRecord::EVENT_BEFORE_INSERT</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;attributes[$event-&gt;name])) &#123;</span><br><span class="line">        <span class="comment">// str -&gt; [str]</span></span><br><span class="line">        $attributes = (<span class="keyword">array</span>) <span class="keyword">$this</span>-&gt;attributes[$event-&gt;name];</span><br><span class="line">        $value = <span class="keyword">$this</span>-&gt;getValue($event);</span><br><span class="line">        <span class="keyword">foreach</span> ($attributes <span class="keyword">as</span> $attribute) &#123;</span><br><span class="line">            <span class="comment">// ignore attribute names which are not string (e.g. when set by TimestampBehavior::updatedAtAttribute)</span></span><br><span class="line">            <span class="comment">// 确保 attribute 是字符串</span></span><br><span class="line">            <span class="keyword">if</span> (is_string($attribute)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;preserveNonEmptyValues &amp;&amp; !<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;owner-&gt;$attribute)) &#123;</span><br><span class="line">                    <span class="comment">// 保留原来非空属性值</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;owner-&gt;$attribute = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AttributeBehavior</code> 使用例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'class'</span> =&gt; AttributeBehavior::class,</span><br><span class="line">      <span class="string">'attributes'</span> =&gt; [</span><br><span class="line">          ActiveRecord::EVENT_BEFORE_INSERT =&gt; <span class="string">'attribute1'</span>,</span><br><span class="line">          ActiveRecord::EVENT_BEFORE_UPDATE =&gt; <span class="string">'attribute2'</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'value'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'some value'</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\behaviors\OptimisticLockBehavior</code> 乐观锁 使用列名自动升级模型的锁版本。</p><p>乐观锁定允许多个用户访问同一记录进行编辑，从而避免潜在的冲突。如果用户试图在一些过期数据上保存记录（因为另一个用户修改了数据），则会抛出 <code>StaleObjectException</code> 异常，并跳过更新或删除操作。</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书接上文 &lt;code&gt;yii\web\Application&lt;/code&gt; 类的层级结构：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yii\b
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
      <category term="yii2" scheme="https://zyf.im/tags/yii2/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 01 - index.php</title>
    <link href="https://zyf.im/2021/07/26/reading-yii2-source-code-01/"/>
    <id>https://zyf.im/2021/07/26/reading-yii2-source-code-01/</id>
    <published>2021-07-26T07:27:13.000Z</published>
    <updated>2021-07-29T07:52:43.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-index"><a href="#web-index" class="headerlink" title="web/index"></a>web/index</h2><p>步骤：</p><ol><li>defined const</li><li>composer vendor/autoload</li><li>require Yii.php</li><li>require config web.php</li><li>new Application and run()</li></ol><h3 id="Yii-php"><a href="#Yii-php" class="headerlink" title="Yii.php"></a>Yii.php</h3><p>1、2 比较简单，从 3 开始，进入 <code>/../vendor/yiisoft/yii2/Yii.php&#39;</code> 首行：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/BaseYii.php'</span>;</span><br></pre></td></tr></table></figure><p>进入 <code>BaseYii.php</code>：</p><p>头部仍是 defined const，<code>YII_DEBUG false</code> <code>YII_ENV prod</code>；</p><p><code>YII_ENABLE_ERROR_HANDLER true</code> 默认启用错误处理，在 <code>yii\base\Application::registerErrorHandler</code> 中使用：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Registers the errorHandler component as a PHP error handler.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $config application config</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerErrorHandler</span><span class="params">(&amp;$config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (YII_ENABLE_ERROR_HANDLER) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>][<span class="string">'class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Error: no errorHandler component is configured.\n"</span>;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'errorHandler'</span>, $config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;getErrorHandler()-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$this-&gt;set</code> 调用的 <code>yii\di\ServiceLocator::set</code> 注册 component 定义定位器，后文再分析。</p><p>获取 error handler 注册 <code>yii\base\ErrorHandler</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register this error handler.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.32 this will not do anything if the error handler was already registered</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_registered) &#123;</span><br><span class="line">        ini_set(<span class="string">'display_errors'</span>, <span class="keyword">false</span>);</span><br><span class="line">        set_exception_handler([<span class="keyword">$this</span>, <span class="string">'handleException'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (defined(<span class="string">'HHVM_VERSION'</span>)) &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleHhvmError'</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleError'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;memoryReserveSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_memoryReserve = str_repeat(<span class="string">'x'</span>, <span class="keyword">$this</span>-&gt;memoryReserveSize);</span><br><span class="line">        &#125;</span><br><span class="line">        register_shutdown_function([<span class="keyword">$this</span>, <span class="string">'handleFatalError'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_registered = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误处理：</p><ul><li>set_exception_handler 自定义异常处理</li><li>set_error_handler 设置用户自定义的错误处理函数</li><li>register_shutdown_function 定义 PHP 程序执行完成后执行的函数</li></ul><p>在 <code>handleError</code> 里最后，将抛出 <code>yii\base\ErrorException</code>，将处理交给 <code>handleException</code>。</p><blockquote><p>更详细的 异常处理 将在后文再分析，此处不展开。</p></blockquote><p><code>BaseYii</code> is the core helper class for the Yii framework.</p><p>返回 <code>Yii</code> 类：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yii</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">BaseYii</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有再添加额外的属性或方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自动加载的执行方法 Yii::autoload</span></span><br><span class="line">spl_autoload_register([<span class="string">'Yii'</span>, <span class="string">'autoload'</span>], <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $classMap 是 Yii 自动加载机制使用的 类映射</span></span><br><span class="line"><span class="comment">// 数组键是类名(不带前导反斜杠)，数组值是相应的类文件路径(或[路径别名])</span></span><br><span class="line"><span class="comment">// 主要被用于 Yii::autoload</span></span><br><span class="line">Yii::$classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/classes.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Container the dependency injection (DI) container used by createObject()</span></span><br><span class="line"><span class="comment">// 可以使用 Container::set() 来设置类所需的依赖项及其初始属性值</span></span><br><span class="line">Yii::$container = <span class="keyword">new</span> yii\di\Container();</span><br></pre></td></tr></table></figure><p>分析下 <code>Yii::autoload($className)</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class autoload loader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当 PHP 遇到未知类时，将自动调用此方法。</span></span><br><span class="line"><span class="comment"> * 该方法将按照以下过程尝试 include 类文件:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. Search in [[classMap]];</span></span><br><span class="line"><span class="comment"> * 2. If the class is namespaced (e.g. `yii\base\Component`),</span></span><br><span class="line"><span class="comment"> *    它将尝试包含与相应路径 别名 相关联的文件 (e.g. `<span class="doctag">@yii</span>/base/Component.php`);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This autoloader allows loading classes that follow the [PSR-4 standard](http://www.php-fig.org/psr/psr-4/)</span></span><br><span class="line"><span class="comment"> * and have its top-level namespace or sub-namespaces defined as path aliases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $className 不带前导反斜杠 "\" 的完全限定类名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownClassException if the class does not exist in the class file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$classMap[$className])) &#123;</span><br><span class="line">        <span class="comment">// 1. Search in [[classMap]];</span></span><br><span class="line">        <span class="comment">// 框架的类</span></span><br><span class="line">        $classFile = <span class="keyword">static</span>::$classMap[$className];</span><br><span class="line">        <span class="keyword">if</span> (strpos($classFile, <span class="string">'@'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 可以利用这里重写框架里的类 非常巧妙</span></span><br><span class="line">            <span class="comment">// When aliases `@yii` and `@yii/bootstrap` are defined, classes in the `yii\bootstrap` namespace</span></span><br><span class="line">            <span class="comment">// will be loaded using the `@yii/bootstrap` alias which points to the directory where bootstrap extension</span></span><br><span class="line">            <span class="comment">// files are installed and all classes from other `yii` namespaces will be loaded from the yii framework directory.</span></span><br><span class="line">            $classFile = <span class="keyword">static</span>::getAlias($classFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (strpos($className, <span class="string">'\\'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 含 \</span></span><br><span class="line">        <span class="comment">// 走到这里的类，也就是自己写的类，非框架的</span></span><br><span class="line">        <span class="comment">// eg. yii\console\Controller</span></span><br><span class="line">        <span class="comment">//     @yii/console/Controller.php</span></span><br><span class="line">        <span class="comment">//     /var/www/service/vendor/yiisoft/yii2/console/Controller.php</span></span><br><span class="line">        <span class="comment">// PSR4 规则</span></span><br><span class="line">        $classFile = <span class="keyword">static</span>::getAlias(<span class="string">'@'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $className) . <span class="string">'.php'</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> ($classFile === <span class="keyword">false</span> || !is_file($classFile)) &#123;</span><br><span class="line">            <span class="comment">// 处理不了，交给 composer 尝试处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有命名空间？什么时候会触发呢？</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心</span></span><br><span class="line">    <span class="keyword">include</span> $classFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (YII_DEBUG &amp;&amp; !class_exists($className, <span class="keyword">false</span>) &amp;&amp; !interface_exists($className, <span class="keyword">false</span>) &amp;&amp; !trait_exists($className, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="comment">// if the class does not exist in the class file</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownClassException(<span class="string">"Unable to find '$className' in file: $classFile. Namespace missing?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更详细的 <code>yii\di\Container</code> 将在后文再分析，此处不展开。</p></blockquote><h3 id="yii-web-Application"><a href="#yii-web-Application" class="headerlink" title="yii\web\Application"></a>yii\web\Application</h3><p>再返回 <code>index.php</code>，第 5 步：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> yii\web\Application($config))-&gt;run();</span><br></pre></td></tr></table></figure><p><code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the application.</span></span><br><span class="line"><span class="comment"> * This is the main entrance of an application.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int the exit status (0 means normal, non-zero values mean abnormal)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_BEFORE_REQUEST;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_BEFORE_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_HANDLING_REQUEST;</span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;handleRequest(<span class="keyword">$this</span>-&gt;getRequest());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_AFTER_REQUEST;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_AFTER_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_SENDING_RESPONSE;</span><br><span class="line">        $response-&gt;send();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_END;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $response-&gt;exitStatus;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExitException $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;end($e-&gt;statusCode, <span class="keyword">isset</span>($response) ? $response : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> $e-&gt;statusCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Application state</th><th>value</th><th>desc</th></tr></thead><tbody><tr><td>STATE_BEGIN</td><td>0</td><td>just started 在 base\Application __construct</td></tr><tr><td>STATE_INIT</td><td>1</td><td>initializing 在 base\Application init</td></tr><tr><td>STATE_BEFORE_REQUEST</td><td>2</td><td>triggering EVENT_BEFORE_REQUEST 在 base\Application run</td></tr><tr><td>STATE_HANDLING_REQUEST</td><td>3</td><td>handling 在 base\Application run</td></tr><tr><td>STATE_AFTER_REQUEST</td><td>4</td><td>triggering EVENT_AFTER_REQUEST 在 base\Application run</td></tr><tr><td>STATE_SENDING_RESPONSE</td><td>5</td><td>send response 在 base\Application run</td></tr><tr><td>STATE_END</td><td>6</td><td>has ended 在 base\Application run</td></tr></tbody></table><p>这里就涉及很多核心概念了，下节见。</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;web-index&quot;&gt;&lt;a href=&quot;#web-index&quot; class=&quot;headerlink&quot; title=&quot;web/index&quot;&gt;&lt;/a&gt;web/index&lt;/h2&gt;&lt;p&gt;步骤：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;defined const&lt;/li&gt;&lt;li&gt;compo
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
      <category term="yii2" scheme="https://zyf.im/tags/yii2/"/>
    
  </entry>
  
  <entry>
    <title>PHP __invoke 使用</title>
    <link href="https://zyf.im/2021/07/20/php-invoke-is-anybody-using-it/"/>
    <id>https://zyf.im/2021/07/20/php-invoke-is-anybody-using-it/</id>
    <published>2021-07-20T06:58:33.000Z</published>
    <updated>2021-07-29T06:25:33.436Z</updated>
    
    <content type="html"><![CDATA[<p>why they are magic? Because they are magically called by PHP when specific actions happen.</p><p>The <code>__invoke()</code> method is called when a script tries to call an object as a function.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump($x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> CallableClass;</span><br><span class="line">$obj(<span class="number">5</span>);</span><br><span class="line">var_dump(is_callable($obj));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(5)</span><br><span class="line">bool(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="使用明显的操作方法初始化"><a href="#使用明显的操作方法初始化" class="headerlink" title="使用明显的操作方法初始化"></a>使用明显的操作方法初始化</h2><p>例如，当我们有一个提供者时，就会发生这种情况。</p><p><a href="https://github.com/aws/aws-sdk-php/blob/master/src/Endpoint/PatternEndpointProvider.php" target="_blank" rel="noopener">aws-sdk-php/src/Endpoint/PatternEndpointProvider.php</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">(array $args = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $service = <span class="keyword">isset</span>($args[<span class="string">'service'</span>]) ? $args[<span class="string">'service'</span>] : <span class="string">''</span>;</span><br><span class="line">    $region = <span class="keyword">isset</span>($args[<span class="string">'region'</span>]) ? $args[<span class="string">'region'</span>] : <span class="string">''</span>;</span><br><span class="line">    $keys = [<span class="string">"&#123;$region&#125;/&#123;$service&#125;"</span>, <span class="string">"&#123;$region&#125;/*"</span>, <span class="string">"*/&#123;$service&#125;"</span>, <span class="string">"*/*"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($keys <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;patterns[$key])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;expand(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;patterns[$key],</span><br><span class="line">                <span class="keyword">isset</span>($args[<span class="string">'scheme'</span>]) ? $args[<span class="string">'scheme'</span>] : <span class="string">'https'</span>,</span><br><span class="line">                $service,</span><br><span class="line">                $region</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它使用 invoke 使用一些参数提供端点。我们如何使用这个类？</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testReturnsNullWhenUnresolved</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $e = <span class="keyword">new</span> PatternEndpointProvider([<span class="string">'foo'</span> =&gt; [<span class="string">'rules'</span> =&gt; []]]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertNull($e([<span class="string">'service'</span> =&gt; <span class="string">'foo'</span>, <span class="string">'region'</span> =&gt; <span class="string">'bar'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尝试使用单动作控制器？"><a href="#尝试使用单动作控制器？" class="headerlink" title="尝试使用单动作控制器？"></a>尝试使用单动作控制器？</h2><p>控制器应该大而广泛？他们不应该。我们应该有瘦控制器和胖服务。</p><p>在这里，invoke 可以帮助我们，因为我们可以定义一个只处理单个动作的控制器，并在其上放置单个 invoke 方法。</p><p>这也有助于我们实现单一职责原则，即 SOLID 中的 S，这是前五个面向对象设计 (OOD) 原则的首字母缩写词。</p><blockquote><p>A class should have one and only one reason to change, meaning that a class should have only one job.</p></blockquote><p>在 Laravel 中的例子：<a href="https://laravel.com/docs/5.7/controllers#single-action-controllers" target="_blank" rel="noopener">Single Action Controllers | laravel</a>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowProfile</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the profile for the given user.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'user.profile'</span>, [<span class="string">'user'</span> =&gt; User::findOrFail($id)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在注册路由时，我们不需要指定方法名称。只有类名。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="string">'ShowProfile'</span>);</span><br></pre></td></tr></table></figure><p>This way we can have Single Action Controllers.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://luis-barros-nobrega.medium.com/php-invoke-is-anybody-using-it-1933c64d17f1" target="_blank" rel="noopener">PHP invoke: is anybody using it? | medium</a></li><li><a href="https://www.php.net/manual/en/language.oop5.magic.php#object.invoke" target="_blank" rel="noopener">__invoke() | php</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;why they are magic? Because they are magically called by PHP when specific actions happen.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;__invoke()&lt;/code&gt; method is ca
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP strict_types 严格模式</title>
    <link href="https://zyf.im/2021/07/19/php-strict-types/"/>
    <id>https://zyf.im/2021/07/19/php-strict-types/</id>
    <published>2021-07-19T11:58:26.000Z</published>
    <updated>2021-07-22T06:46:10.549Z</updated>
    
    <content type="html"><![CDATA[<ul><li>严格模式的声明 _必须_ 放在文件的顶部。</li><li>严格模式不仅作用于函数参数的类型声明，也作用于函数的返回值类型。</li></ul><p>声明 PHP 文件作为严格模式的一个好事是，实际上只适用于当前文件。这确保了这个文件是严格类型，但是他没有影响到整个项目中的其他文件。这允许你一步一步的迁移非严格模式的代码。</p><p>使用提示类型没有 strict_types 可能导致微妙的错误。</p><p>严格类型之前，<code>int $x</code> 意味着 <code>$x must have a value coercible to an int</code>。</p><ul><li>a float (example: 13.1459 -&gt; 13)</li><li>a bool (example: true -&gt; 1)</li><li>a null (example: null -&gt; 0)</li><li>a string with leading digits (example: “15 Trees” -&gt; 15)</li></ul><p>设置严格模式后，you tell the engine that <code>int $x</code> means <code>$x must only be an int proper, no type coercion allowed</code>。</p><p>谁给更关心 <code>strict_type</code> 这行？is more for the reader than for the writer. Why? Bacause it will explicitly tell the reader:</p><p>The types in this current scope are treated strictly.</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行输出 <code>int(3)</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the <span class="built_in">type</span> int, <span class="built_in">float</span> given, ...</span><br></pre></td></tr></table></figure><h2 id="声明位置"><a href="#声明位置" class="headerlink" title="声明位置"></a>声明位置</h2><p>必须在脚本最前。不能写在脚本的中间，如下写法是错误的：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  strict_types declaration must be the very first statement <span class="keyword">in</span> the script <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><p>不得使用 block mode 进行声明：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>) &#123;</span><br><span class="line">  var_dump(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  strict_types declaration must not use block mode <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><h2 id="多文件场景"><a href="#多文件场景" class="headerlink" title="多文件场景"></a>多文件场景</h2><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><p><code>A.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 严格模式</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>B.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 非严格模式</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'A.php'</span>;</span><br><span class="line"><span class="comment">// 违反了 A 的定义</span></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php B.php</span><br><span class="line"></span><br><span class="line">int(3)</span><br></pre></td></tr></table></figure><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><p><code>A.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 非严格模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>B.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 严格模式</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">'A.php'</span>;</span><br><span class="line"><span class="comment">// 违反了 A 的定义</span></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php B.php</span><br><span class="line"></span><br><span class="line">PHP Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the <span class="built_in">type</span> int, <span class="built_in">float</span> given, called <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>函数定义时的严格模式，行为并不会出现什么不同。</li><li>函数执行时的，严格模式会出现差异。</li><li><code>declare(strict_types=1);</code> 的声明本身在 A.php 文件中完成。被 B.php 文件 require，而 B.php 并没有定义严格模式，那么执行 require 的 B.php 文件不会变成严格模式。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只有在写 declare 的文件的执行部分才会执行严格模式，该文件中调用的其它函数（其它文件中的函数）也会被影响。</p><p>若果想完全使用严格模式，比较简单的方法是在所有 php 文件都写上 <code>declare(strict_types=1);</code>。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>推荐自动格式化工具：<a href="https://github.com/symplify/easy-coding-standard" target="_blank" rel="noopener">symplify/easy-coding-standard</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://segmentfault.com/a/1190000018389227" target="_blank" rel="noopener">关于 declare(strict_types=1) 的有效范围 | segmentfault</a></li><li><a href="https://chemaclass.medium.com/strict-types-in-php-d4166bd25394" target="_blank" rel="noopener">Strict Types in PHP | medium</a></li><li><a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.scalar-type-declarations" target="_blank" rel="noopener">Scalar type declarations | php</a></li><li><a href="https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict" target="_blank" rel="noopener">Strict typing | php</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;&lt;li&gt;严格模式的声明 _必须_ 放在文件的顶部。&lt;/li&gt;&lt;li&gt;严格模式不仅作用于函数参数的类型声明，也作用于函数的返回值类型。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;声明 PHP 文件作为严格模式的一个好事是，实际上只适用于当前文件。这确保了这个文件是严格类型，但是他没有影响到整
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Git and GitHub Secrets</title>
    <link href="https://zyf.im/2021/07/12/git-and-github-secrets/"/>
    <id>https://zyf.im/2021/07/12/git-and-github-secrets/</id>
    <published>2021-07-12T02:40:15.000Z</published>
    <updated>2021-07-19T10:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h2><p>Git 记住密码配置后，不用每次 pull、push 都需要输入密码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>会在 <code>cat ~/.gitconfig</code> 看到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure><h2 id="快速检出上一个分支"><a href="#快速检出上一个分支" class="headerlink" title="快速检出上一个分支"></a>快速检出上一个分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h2 id="提交空改动"><a href="#提交空改动" class="headerlink" title="提交空改动"></a>提交空改动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"empty commit"</span> --allow-empty</span><br></pre></td></tr></table></figure><p>在如下几种情况下是有意义：</p><ul><li>标记一批工作或一个新功能的开始。</li><li>记录你对项目进行了跟代码无关的改动。</li><li>跟使用你仓库的其他人交流。</li><li>作为仓库的第一次提交，因为第一次提交日后是不能被 rebase 的：<code>git commit -m &quot;init repo&quot; --allow-empty</code>。</li></ul><h2 id="更直观的-status"><a href="#更直观的-status" class="headerlink" title="更直观的 status"></a>更直观的 status</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status -sb</span><br></pre></td></tr></table></figure><h2 id="更直观的-log"><a href="#更直观的-log" class="headerlink" title="更直观的 log"></a>更直观的 log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset'</span> --abbrev-commit --date=relative</span><br></pre></td></tr></table></figure><h2 id="提交信息查询"><a href="#提交信息查询" class="headerlink" title="提交信息查询"></a>提交信息查询</h2><p>找到其中和搜索条件相匹配的最近的一条。query （区别大小写）是你想要搜索的词语。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show :/query</span><br></pre></td></tr></table></figure><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p>显示所有已经合并到你当前分支的分支列表：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --merged</span><br></pre></td></tr></table></figure><p>相反地：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --no-merged</span><br></pre></td></tr></table></figure><h2 id="gitconfig"><a href="#gitconfig" class="headerlink" title=".gitconfig"></a>.gitconfig</h2><p>打开编辑：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><p>命令修改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.co <span class="string">'checkout'</span></span><br><span class="line">git config --global alias.ac <span class="string">'add -A . &amp;&amp; commit'</span></span><br><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="整行高亮"><a href="#整行高亮" class="headerlink" title="整行高亮"></a>整行高亮</h3><p>多行高亮也可以，比如用 #L53-L60 选择范围，或者按住 shift 键，然后再点击选择的两行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb<span class="comment">#L53-L60</span></span><br></pre></td></tr></table></figure><h3 id="用-commit-信息关闭-issue"><a href="#用-commit-信息关闭-issue" class="headerlink" title="用 commit 信息关闭 issue"></a>用 commit 信息关闭 issue</h3><p>如果某个提交修复了一个 Issue，当提交到 master 分支时，提交信息里可以使用 fix/fixes/fixed , close/closes/closed 或者 resolve/resolves/resolved 等关键词，后面再跟上 Issue 号，这样就会关闭这个 Issue。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"Fix screwup, fixes #12"</span></span><br></pre></td></tr></table></figure><h3 id="链接其他仓库的-Issue"><a href="#链接其他仓库的-Issue" class="headerlink" title="链接其他仓库的 Issue"></a>链接其他仓库的 Issue</h3><p>如果你想引用到同一个仓库中的一个 Issue，只需使用井号 # 加上 Issue 号，这样就会自动创建到此 Issue 的链接。</p><p>要链接到其他仓库的 Issue，就使用 <code>user_name/repo_name#ISSUE_NUMBER</code> 的方式，例如 <code>tiimgreen/toc#12</code>。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://speakerdeck.com/holman/git-and-github-secrets" target="_blank" rel="noopener">Git and GitHub Secrets | speakerdeck</a></li><li><a href="https://speakerdeck.com/holman/more-git-and-github-secrets" target="_blank" rel="noopener">More Git and GitHub Secrets | speakerdeck</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记住密码&quot;&gt;&lt;a href=&quot;#记住密码&quot; class=&quot;headerlink&quot; title=&quot;记住密码&quot;&gt;&lt;/a&gt;记住密码&lt;/h2&gt;&lt;p&gt;Git 记住密码配置后，不用每次 pull、push 都需要输入密码：&lt;/p&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="git" scheme="https://zyf.im/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>如何做好技术协同及管理</title>
    <link href="https://zyf.im/2021/07/08/how-to-do-technical-management/"/>
    <id>https://zyf.im/2021/07/08/how-to-do-technical-management/</id>
    <published>2021-07-08T13:08:08.000Z</published>
    <updated>2021-07-22T06:48:18.475Z</updated>
    
    <content type="html"><![CDATA[<p>《如何做好技术协同及管理 —— 合作伙伴篇》一次沙龙后的笔记。</p><h2 id="招人"><a href="#招人" class="headerlink" title="招人"></a>招人</h2><ul><li>注重招人环节；在这一步要卡严，因为入职后再折腾就更费时费力了。</li><li>要关注的点：基础水平（工程能力）、离职原因（是否能长久）、个人性格（气场是否相合）。</li></ul><h2 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h2><ul><li>主动沟通是重要的特质。还有责任心、可塑性、执行力。</li><li>前紧后松；前期要做 code review，养成好习惯。</li><li>关注测试同学以及其他同学对其的反馈。了解工作状态、质量。</li><li>在突破底线后应该当机立断，无需心存幻想。</li></ul><h2 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h2><ul><li>没有归宿感；owner 意识。</li><li>每一位都是组内的一员。</li></ul><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><ul><li>早会；任务安排，跟踪进度。不能不闻不问，最后容易抓瞎。</li><li>超过 30min 解决不了的问题，直接沟通，避免团队时间的浪费。</li><li>读书会，组内分享；打造一个好的技术氛围，这里不只是工作，还能成长。</li><li>要对任务的工作量有判断；并且明确开发规模，并且进行核对，防止 “大事小做，小题大做”。</li><li>通过先编写好单元测试、框架结构、interface，控制需求实现、代码质量。</li><li>在无法进行横向对比的情况下，可以对比加入前后是否释放自身生产力来进行判断。</li><li>三个卡点：需求评审、技术实现评审、测试用例评审，把关质量。</li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《如何做好技术协同及管理 —— 合作伙伴篇》一次沙龙后的笔记。&lt;/p&gt;&lt;h2 id=&quot;招人&quot;&gt;&lt;a href=&quot;#招人&quot; class=&quot;headerlink&quot; title=&quot;招人&quot;&gt;&lt;/a&gt;招人&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;注重招人环节；在这一步要卡严，因为入职后再折腾就更费时
      
    
    </summary>
    
    
      <category term="thinking" scheme="https://zyf.im/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式之美】笔记 Part 2</title>
    <link href="https://zyf.im/2021/02/06/the-beauty-of-design-patterns-reading-notes-part2/"/>
    <id>https://zyf.im/2021/02/06/the-beauty-of-design-patterns-reading-notes-part2/</id>
    <published>2021-02-06T03:00:41.000Z</published>
    <updated>2021-07-22T06:49:38.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>领域驱动设计（Domain Driven Design，简称 DDD）。</p><h3 id="什么是基于贫血模型的传统开发模式？"><a href="#什么是基于贫血模型的传统开发模式？" class="headerlink" title="什么是基于贫血模型的传统开发模式？"></a>什么是基于贫血模型的传统开发模式？</h3><p>UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，UserVo 和 UserController 在这里属于接口层。</p><p>Service 层的数据和业务逻辑，被分割为 BO 和 Service 两个类中。像 UserBo 这样，只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）。</p><p>这种贫血模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。</p><h3 id="什么是基于充血模型的-DDD-开发模式？"><a href="#什么是基于充血模型的-DDD-开发模式？" class="headerlink" title="什么是基于充血模型的 DDD 开发模式？"></a>什么是基于充血模型的 DDD 开发模式？</h3><p>领域驱动设计，即 DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。</p><p>基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。</p><h3 id="为什么基于贫血模型的传统开发模式如此受欢迎？"><a href="#为什么基于贫血模型的传统开发模式如此受欢迎？" class="headerlink" title="为什么基于贫血模型的传统开发模式如此受欢迎？"></a>为什么基于贫血模型的传统开发模式如此受欢迎？</h3><ul><li>系统业务可能都比较简单，简单到就是基于 SQL 的 CRUD 操作</li><li>充血模型的设计要比贫血模型更加有难度。我们从一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑。而不是像贫血模型那样，我们只需要定义数据，之后有什么功能开发需求，我们就在 Service 层定义什么操作，不需要事先做太多设计。</li><li>思维已固化，转型有成本。</li></ul><h3 id="什么项目应该考虑使用基于充血模型的-DDD-开发模式？"><a href="#什么项目应该考虑使用基于充血模型的-DDD-开发模式？" class="headerlink" title="什么项目应该考虑使用基于充血模型的 DDD 开发模式？"></a>什么项目应该考虑使用基于充血模型的 DDD 开发模式？</h3><p>适合业务复杂的系统开发。比如，包含各种利息计算模型、还款模型等复杂业务的金融系统。</p><p>两种不同的开发模式会导致不同的开发流程。基于充血模型的 DDD 开发模式的开发流程，在应对复杂业务系统的开发的时候更加有优势。</p><p>DDD 这种开发模式下，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。</p><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><h3 id="一个虚拟钱包系统"><a href="#一个虚拟钱包系统" class="headerlink" title="一个虚拟钱包系统"></a>一个虚拟钱包系统</h3><p>充值、提现、支付、查询余额、查询交易流水。甚至还有冻结、透支、转赠等。</p><p>整个钱包系统一部分单纯跟应用内的虚拟钱包账户打交道，另一部分单纯跟银行账户打交道。我们基于这样一个业务划分，给系统解耦，将整个钱包系统拆分为两个子系统：虚拟钱包系统和三方支付系统。</p><p><img src="https://user-images.githubusercontent.com/9289792/107135323-ba50b780-6934-11eb-8b85-1738440f42bc.png" alt="image"></p><p>不保证数据的强一致性，只实现数据的最终一致性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualWalletService</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 通过构造函数或者 IOC 框架注入</span></span><br><span class="line">  <span class="keyword">private</span> VirtualWalletRepository walletRepo;</span><br><span class="line">  <span class="keyword">private</span> VirtualWalletTransactionRepository transactionRepo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> VirtualWallet <span class="title">getVirtualWallet</span><span class="params">(Long walletId )</span> </span>&#123;</span><br><span class="line">    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);</span><br><span class="line">    VirtualWallet wallet = convert(walletEntity);</span><br><span class="line">    <span class="keyword">return</span> wallet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">(Long walletId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> virtualWalletRepo.getBalance(walletId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debit</span><span class="params">(Long walletId, BigDecimal amount)</span> </span>&#123;</span><br><span class="line">    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 贫血型</span></span><br><span class="line">    <span class="comment">// BigDecimal balance = walletEntity.getBalance();</span></span><br><span class="line">    <span class="comment">// if (balance.compareTo(amount) &lt; 0) &#123;</span></span><br><span class="line">    <span class="comment">//   throw new NoSufficientBalanceException(...);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// walletRepo.updateBalance(walletId, balance.subtract(amount));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// DDD</span></span><br><span class="line">    VirtualWallet wallet = convert(walletEntity);</span><br><span class="line">    wallet.debit(amount);</span><br><span class="line">    walletRepo.updateBalance(walletId, wallet.balance());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">credit</span><span class="params">(Long walletId, BigDecimal amount)</span> </span>&#123;</span><br><span class="line">    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 贫血型</span></span><br><span class="line">    <span class="comment">// BigDecimal balance = walletEntity.getBalance();</span></span><br><span class="line">    <span class="comment">// walletRepo.updateBalance(walletId, balance.add(amount));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// DDD</span></span><br><span class="line">    VirtualWallet wallet = convert(walletEntity);</span><br><span class="line">    wallet.credit(amount);</span><br><span class="line">    walletRepo.updateBalance(walletId, wallet.balance());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Long fromWalletId, Long toWalletId, BigDecimal amount)</span> </span>&#123;</span><br><span class="line">    VirtualWalletTransactionEntity transactionEntity = <span class="keyword">new</span> VirtualWalletTransactionEntity();</span><br><span class="line">    transactionEntity.setAmount(amount);</span><br><span class="line">    transactionEntity.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    transactionEntity.setFromWalletId(fromWalletId);</span><br><span class="line">    transactionEntity.setToWalletId(toWalletId);</span><br><span class="line">    transactionEntity.setStatus(Status.TO_BE_EXECUTED);</span><br><span class="line">    Long transactionId = transactionRepo.saveTransaction(transactionEntity);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      debit(fromWalletId, amount);</span><br><span class="line">      credit(toWalletId, amount);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InsufficientBalanceException e) &#123;</span><br><span class="line">      transactionRepo.updateStatus(transactionId, Status.CLOSED);</span><br><span class="line">      <span class="comment">// ...rethrow exception e...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      transactionRepo.updateStatus(transactionId, Status.FAILED);</span><br><span class="line">      <span class="comment">// ...rethrow exception e...</span></span><br><span class="line">    &#125;</span><br><span class="line">    transactionRepo.updateStatus(transactionId, Status.EXECUTED);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>领域模型 VirtualWallet 类很单薄，包含的业务逻辑很简单。相对于原来的贫血模型的设计思路，这种充血模型的设计思路，貌似并没有太大优势。这也是大部分业务系统都使用基于贫血模型开发的原因。不过，如果虚拟钱包系统需要支持更复杂的业务逻辑，那充血模型的优势就显现出来了。比如，我们要支持透支一定额度和冻结部分余额的功能。这个时候，我们重新来看一下 VirtualWallet 类的实现代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualWallet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> Long createTime = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">private</span> BigDecimal balance = BigDecimal.ZERO;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isAllowedOverdraft = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> BigDecimal overdraftAmount = BigDecimal.ZERO;</span><br><span class="line">  <span class="keyword">private</span> BigDecimal frozenAmount = BigDecimal.ZERO;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">VirtualWallet</span><span class="params">(Long preAllocatedId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = preAllocatedId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">balance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getAvaliableBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigDecimal totalAvaliableBalance = <span class="keyword">this</span>.balance.subtract(<span class="keyword">this</span>.frozenAmount);</span><br><span class="line">    <span class="keyword">if</span> (isAllowedOverdraft) &#123;</span><br><span class="line">      totalAvaliableBalance += <span class="keyword">this</span>.overdraftAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> totalAvaliableBalance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debit</span><span class="params">(BigDecimal amount)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">credit</span><span class="params">(BigDecimal amount)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">freeze</span><span class="params">(BigDecimal amount)</span> </span>&#123; ... &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unfreeze</span><span class="params">(BigDecimal amount)</span> </span>&#123; ...&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increaseOverdraftAmount</span><span class="params">(BigDecimal amount)</span> </span>&#123; ... &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decreaseOverdraftAmount</span><span class="params">(BigDecimal amount)</span> </span>&#123; ... &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeOverdraft</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openOverdraft</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果功能继续演进，我们可以增加更加细化的冻结策略、透支策略、支持钱包账号（VirtualWallet id 字段）自动生成的逻辑（不是通过构造函数经外部传入 ID，而是通过分布式 ID 生成算法来自动生成 ID）等等。</p><h3 id="辩证思考与灵活应用"><a href="#辩证思考与灵活应用" class="headerlink" title="辩证思考与灵活应用"></a>辩证思考与灵活应用</h3><p>两种代码设计与实现中，并没有完全将 Service 类去掉，这是为什么？或者说，Service 类在这种情况下担当的职责是什么？哪些功能逻辑会放到 Service 类中？</p><ol><li>Service 类负责与 Repository 交流。获取数据库中的数据，转化成领域模型 VirtualWallet，然后由领域模型 VirtualWallet 来完成业务逻辑，最后调用 Repository 类的方法，将数据存回数据库。之所以让 VirtualWalletService 类与 Repository 打交道，而不是让领域模型 VirtualWallet 与 Repository 打交道，那是因为我们想保持领域模型的独立性，不与任何其他层的代码（Repository 层的代码）或开发框架（比如 Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从 DB 中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用。</li><li>Service 类负责跨领域模型的业务聚合功能。VirtualWalletService 类中的 transfer() 转账函数会涉及两个钱包的操作，因此这部分业务逻辑无法放到 VirtualWallet 类中，所以，我们暂且把转账业务放到 VirtualWalletService 类中了。当然，虽然功能演进，使得转账业务变得复杂起来之后，我们也可以将转账业务抽取出来，设计成一个独立的领域模型。</li><li>Service 类负责一些非功能性及与三方系统交互的工作。比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等，都可以放到 Service 类中。</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，主要区别在 Service 层。在基于充血模型的开发模式下，我们将部分原来在 Service 类中的业务逻辑移动到了一个充血的 Domain 领域模型中，让 Service 类的实现依赖这个 Domain 类。</p><p>在基于充血模型的 DDD 开发模式下，Service 类并不会完全移除，而是负责一些不适合放在 Domain 类中的功能。比如，负责与 Repository 层打交道、跨领域模型的业务聚合功能、幂等事务等非功能性的工作。</p><p>基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，Controller 层和 Repository 层的代码基本上相同。这是因为，Repository 层的 Entity 生命周期有限，Controller 层的 VO 只是单纯作为一种 DTO。两部分的业务逻辑都不会太复杂。业务逻辑主要集中在 Service 层。所以，Repository 层和 Controller 层继续沿用贫血模型的设计思路是没有问题的。</p><p>遗留问题：Entity 与 Domain 的转换应该放在哪里？</p><h2 id="13-如何对接口鉴权这样一个功能开发做面向对象分析？"><a href="#13-如何对接口鉴权这样一个功能开发做面向对象分析？" class="headerlink" title="13 如何对接口鉴权这样一个功能开发做面向对象分析？"></a>13 如何对接口鉴权这样一个功能开发做面向对象分析？</h2><p>面向对象分析（OOA）、面向对象设计（OOD）、面向对象编程（OOP），是面向对象开发的三个主要环节。</p><p>我们需要通过沟通、挖掘、分析、假设、梳理，搞清楚具体的需求有哪些，哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑做的。</p><blockquote><p>加密之后的密码及 AppID，可能被 <strong>重放攻击</strong>。</p></blockquote><p>调用方将请求接口的 URL 跟 AppID、密码拼接在一起，然后进行加密，生成一个 token。</p><p><img src="https://user-images.githubusercontent.com/9289792/107141538-3ca4a000-6964-11eb-903f-404295e31ebf.png" alt="image"></p><p>这样的设计仍然存在重放攻击的风险。</p><p>为了解决这个问题，我们可以进一步优化 token 生成算法，引入一个随机变量，让每次接口请求生成的 token 都不一样。</p><p>微服务端在收到这些数据之后，会验证当前时间戳跟传递过来的时间戳，是否在一定的时间窗口内（比如一分钟）。</p><p><img src="https://user-images.githubusercontent.com/9289792/107141588-ba68ab80-6964-11eb-8cc4-c84ddf91a6d4.png" alt="image"></p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><ol><li>把 URL、AppID、密码、时间戳拼接为一个字符串；</li><li>对字符串通过加密算法加密生成 token；</li><li>将 token、AppID、时间戳拼接到 URL 中，形成新的 URL；</li><li>解析 URL，得到 token、AppID、时间戳等信息；</li><li>从存储中取出 AppID 和对应的密码；</li><li>根据时间戳判断 token 是否过期失效；</li><li>验证两个 token 是否匹配；</li></ol><p>1、2、6、7 都是跟 token 有关，负责 token 的生成、验证；3、4 都是在处理 URL，负责 URL 的拼接、解析；5 是操作 AppID 和密码，负责从存储中读取 AppID 和密码。AuthToken、Url、CredentialStorage。</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;11&quot;&gt;&lt;a href=&quot;#11&quot; class=&quot;headerlink&quot; title=&quot;11&quot;&gt;&lt;/a&gt;11&lt;/h2&gt;&lt;p&gt;领域驱动设计（Domain Driven Design，简称 DDD）。&lt;/p&gt;&lt;h3 id=&quot;什么是基于贫血模型的传统开发模式？&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="design-patterns" scheme="https://zyf.im/tags/design-patterns/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式之美】笔记 Part 1</title>
    <link href="https://zyf.im/2021/02/05/the-beauty-of-design-patterns-reading-notes-part1/"/>
    <id>https://zyf.im/2021/02/05/the-beauty-of-design-patterns-reading-notes-part1/</id>
    <published>2021-02-05T03:00:41.000Z</published>
    <updated>2021-07-22T06:49:00.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00"><a href="#00" class="headerlink" title="00"></a>00</h2><p>KISS 原则（Keep It Simple and Stupid），这个原则理解起来很简单，一看貌似就懂了，那我问你，怎样的代码才算是足够简单呢？怎样才算不够简单需要优化呢？</p><p>“Talk is cheap, show me the code.”</p><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>为什么要学习设计模式：应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。</p><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>灵活性（flexibility）、可扩展性（extensibility）、可维护性（maintainability）、可读性（readability）、可理解性（understandability）、易修改性（changeability）、可复用（reusability）、可测试性（testability）、模块化（modularity）、高内聚低耦合（high cohesion loose coupling）、高效（high effciency）、高性能（highperformance）、安全性（security）、兼容性（compatibility）、易用性（usability）、整洁（clean）、清晰（clarity）、简单（simple）、直接（straightforward）、少即是多（less code is more）、文档详尽（well-documented）、分层清晰（well-layered）、正确性（correctness、bug free）、健壮性（robustness）、鲁棒性（robustness）、可用性（reliability）、可伸缩性（scalability）、稳定性（stability）、优雅（elegant）、好（good）、坏（bad）</p><p>我们并不能通过单一的维度去评价一段代码写的好坏。比如，即使一段代码的可扩展性很好，但可读性很差，那我们也不能说这段代码质量高。</p><p>如果用数字来量化代码的可读性的话，它应该是一个连续的区间值，而非 0、1 这样的离散值。</p><p>代码质量的评价有很强的主观性。</p><p>有些词语过于笼统、抽象，比较偏向对于整体的描述，比如优雅、好、坏、整洁、清晰等；有些过于细节、偏重方法论，比如模块化、高内聚低耦合、文档详尽、分层清晰等；有些可能并不仅仅局限于编码，跟架构设计等也有关系，比如可伸缩性、可用性、稳定性等。</p><h3 id="可维护性（maintainability）"><a href="#可维护性（maintainability）" class="headerlink" title="可维护性（maintainability）"></a>可维护性（maintainability）</h3><p>破坏原有代码设计、不引入新的 bug 的情况下，能够快速地修改或者添加代码。与之相反，修改或者添加代码需要冒着极大的引入新 bug 的风险，并且需要花费很长的时间才能完成。</p><p>码分层清晰、模块化好、高内聚低耦合、遵从基于接口而非实现编程的设计原则等等，那就可能意味着代码易维护。</p><h3 id="可读性（readability）"><a href="#可读性（readability）" class="headerlink" title="可读性（readability）"></a>可读性（readability）</h3><p>“任何傻瓜都会编写计算机能理解的代码。好的程序员能够编写人能够理解的代码。”</p><p>是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等等。</p><p>code review 是一个很好的测验代码可读性的手段。如果你的同事可以轻松地读懂你写的代码，那说明你的代码可读性很好；如果同事在读你的代码时，有很多疑问，那就说明你的代码可读性有待提高了。</p><h3 id="可扩展性（extensibility）"><a href="#可扩展性（extensibility）" class="headerlink" title="可扩展性（extensibility）"></a>可扩展性（extensibility）</h3><p>我们在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码。说直白点就是，代码预留了一些功能扩展点，你可以把新功能代码，直接插到扩展点上，而不需要因为要添加一个功能而大动干戈，改动大量的原始代码。</p><p>“对修改关闭，对扩展开放”。</p><h3 id="灵活性（flexibility）"><a href="#灵活性（flexibility）" class="headerlink" title="灵活性（flexibility）"></a>灵活性（flexibility）</h3><p>如果一段代码易扩展、易复用或者易用，我们都可以称这段代码写得比较灵活。</p><ul><li>当我们添加一个新的功能代码的时候，原有的代码已经预留好了扩展点，我们不需要修改原有的代码，只要在扩展点上添加新的代码即可。这个时候，我们除了可以说代码易扩展，还可以说代码写得好灵活。</li><li>当我们要实现一个功能的时候，发现原有代码中，已经抽象出了很多底层可以复用的模块、类等代码，我们可以拿来直接使用。这个时候，我们除了可以说代码易复用之外，还可以说代码写得好灵活。</li><li>当我们使用某组接口的时候，如果这组接口可以应对各种使用场景，满足各种不同的需求，我们除了可以说接口易用之外，还可以说这个接口设计得好灵活或者代码写得好灵活。</li></ul><h3 id="简洁性（simplicity）"><a href="#简洁性（simplicity）" class="headerlink" title="简洁性（simplicity）"></a>简洁性（simplicity）</h3><p>尽量保持代码简单。代码简单、逻辑清晰，也就意味着易读、易维护。我们在编写代码的时候，往往也会把简单、清晰放到首位。</p><p>KISS 原则，思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。这也是一个编程老手跟编程新手的本质区别之一。</p><h3 id="可复用性（reusability）"><a href="#可复用性（reusability）" class="headerlink" title="可复用性（reusability）"></a>可复用性（reusability）</h3><p>尽量减少重复代码的编写，复用已有的代码。</p><p>当讲到面向对象特性的时候，我们会讲到继承、多态存在的目的之一，就是为了提高代码的可复用性；当讲到设计原则的时候，我们会讲到单一职责原则也跟代码的可复用性相关；当讲到重构技巧的时候，我们会讲到解耦、高内聚、模块化等都能提高代码的可复用性。可见，可复用性也是一个非常重要的代码评价标准，是很多设计原则、思想、模式等所要达到的最终效果。</p><p>DRY（Don’t Repeat Yourself）设计原则。</p><h3 id="可测试性（testability）"><a href="#可测试性（testability）" class="headerlink" title="可测试性（testability）"></a>可测试性（testability）</h3><p>代码可测试性的好坏，能从侧面上非常准确地反应代码质量的好坏。代码的可测试性差，比较难写单元测试，那基本上就能说明代码设计得有问题。</p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>面向对象的四大特性：封装、抽象、继承、多态面</li><li>向对象编程与面向过程编程的区别和联系</li><li>面向对象分析、面向对象设计、面向对象编程</li><li>接口和抽象类的区别以及各自的应用场景</li><li>基于接口而非实现编程的设计思想</li><li>多用组合少用继承的设计思想</li><li>面向过程的贫血模型和面向对象的充血模型</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>指导我们代码设计的一些经验总结。</p><ul><li>SOLID 原则 SRP 单一职责原则</li><li>SOLID 原则 OCP 开闭原则</li><li>SOLID 原则 SP 里式替换原则</li><li>SOLID 原则 ISP 接口隔离原则</li><li>SOLID 原则 DIP 依赖倒置原则</li><li>DRY 原则、KISS 原则、YAGNI 原则、LOD 法则</li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。</p><p>大部分设计模式要解决的都是代码的可扩展性问题。</p><ol><li>创建型 常用的有：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式。不常用的有：原型模式。</li><li>结构型 常用的有：代理模式、桥接模式、装饰者模式、适配器模式。不常用的有：门面模式、组合模式、享元模式。</li><li>行为型 常用的有：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式。不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、中介模式。</li></ol><h3 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h3><p>主要解决的是代码的可读性问题。</p><h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><p>在软件开发中，只要软件在不停地迭代，就没有一劳永逸的设计。</p><p>在开发初期，除非特别必须，我们一定不要过度设计，应用复杂的设计模式。而是当代码出现问题的时候，我们再针对问题，应用原则和模式进行重构。这样就能有效避免前期的过度设计。</p><ul><li>重构的目的（why）、对象（what）、时机（when）、方法（how）；</li><li>保证重构不出错的技术手段：单元测试和代码的可测试性；</li><li>两种不同规模的重构：大重构（大规模高层次）和小重构（小规模低层次）。</li></ul><h3 id="五者联系"><a href="#五者联系" class="headerlink" title="五者联系"></a>五者联系</h3><p>面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。</p><p>设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。比如，“开闭原则”是很多设计模式（策略、模板等）的指导原则。</p><p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行。</p><p>编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节、更加能落地。持续的小重构依赖的理论基础主要就是编程规范。</p><p>重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。</p><p><img src="https://user-images.githubusercontent.com/9289792/106997160-59eb3a00-67bd-11eb-8f71-db5336d3e77f.png" alt="image"></p><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><p>面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石。</p><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h3><p>封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部仅能通过类提供的方式来访问内部信息或者数据。</p><p>封装特性存在的意义，一方面是保护数据不被随意修改，提高代码的可维护性；另一方面是仅暴露有限的必要接口，提高类的易用性。</p><h3 id="抽象（Abstraction）"><a href="#抽象（Abstraction）" class="headerlink" title="抽象（Abstraction）"></a>抽象（Abstraction）</h3><p>抽象可以通过接口类或者抽象类来实现，但也并不需要特殊的语法机制来支持。</p><p>抽象存在的意义，一方面是提高代码的可扩展性、维护性，修改实现不需要改变定义，减少代码的改动范围；另一方面，它也是处理复杂系统的有效手段，能有效地过滤掉不必要关注的信息。</p><p>提供“函数”这一非常基础的语法机制，就可以实现抽象特性、所以，它没有很强的“特异性”，有时候并不被看作面向对象编程的特性之一。</p><p>在定义（或者叫命名）类的方法的时候，也要有抽象思维，不要在方法定义中，暴露太多的实现细节，以保证在某个时间点需要改变方法的实现逻辑的时候，不用去修改其定义。getPictureUrl 好于 getAliyunPictureUrl。</p><h3 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h3><p>继承是用来表示类之间的 is-a 关系。继承主要是用来解决代码复用的问题。</p><p>多用组合少用继承。</p><h3 id="多态（Polymorphism）"><a href="#多态（Polymorphism）" class="headerlink" title="多态（Polymorphism）"></a>多态（Polymorphism）</h3><p>多态是指子类可以替换父类，在实际的代码运行过程中，调用子类的方法实现。</p><p>多态这种特性也需要编程语言提供特殊的语法机制来实现，比如继承、接口类、duck-typing。多态可以提高代码的扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。</p><p>只要两个类具有相同的方法，就可以实现多态，并不要求两个类之间有任何关系，这就是所谓的 duck-typing，是一些动态语言所特有的语法机制。</p><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><p>相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。</p><p>面向对象编程相比面向过程编程有哪些优势？</p><ul><li>对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。</li><li>面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。</li><li>从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。</li></ul><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><h3 id="滥用-getter、setter-方法"><a href="#滥用-getter、setter-方法" class="headerlink" title="滥用 getter、setter 方法"></a>滥用 getter、setter 方法</h3><p>尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器（比如例子中的 List 容器），也要防范集合内部数据被修改的危险。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ... 省略其他代码...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ShoppingCartItem&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(<span class="keyword">this</span>.items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnmodifiableList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">UnmodifiableCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滥用全局变量和全局方法"><a href="#滥用全局变量和全局方法" class="headerlink" title="滥用全局变量和全局方法"></a>滥用全局变量和全局方法</h3><p>Constants 类、Utils 类的设计尽量能做到职责单一，定义一些细化的小类。</p><p>静态成员变量归属于类上的数据，被所有的实例化对象所共享，也相当于一定程度上的全局变量。</p><p>静态方法将方法与数据分离，破坏了封装特性，是典型的面向过程风格。</p><p>只包含静态方法不包含任何属性的 Utils 类，是彻彻底底的面向过程的编程风格。要尽量避免滥用，不要不加思考地随意去定义 Utils 类。</p><h3 id="定义数据和方法分离的类"><a href="#定义数据和方法分离的类" class="headerlink" title="定义数据和方法分离的类"></a>定义数据和方法分离的类</h3><p>Controller 层负责暴露接口给前端调用，Service 层负责核心业务逻辑，Repository 层负责数据读写。</p><p>而在每一层中，我们又会定义相应的 VO（View Object）、BO（Business Object）、Entity。一般情况下，VO、BO、Entity 中只会定义数据，不会定义方法，所有操作这些数据的业务逻辑都定义在对应的 Controller 类、Service 类、Repository 类中。这就是典型的面向过程的编程风格。</p><blockquote><p>实际上，这种开发模式叫作基于 <code>贫血模型的开发模式</code>，也是我们现在非常常用的一种 Web 项目的开发模式。看到这里，你内心里应该有很多疑惑吧？既然这种开发模式明显违背面向对象的编程风格，为什么大部分 Web 项目都是基于这种开发模式来开发呢？</p></blockquote><h3 id="在面向对象编程中，为什么容易写出面向过程风格的代码？"><a href="#在面向对象编程中，为什么容易写出面向过程风格的代码？" class="headerlink" title="在面向对象编程中，为什么容易写出面向过程风格的代码？"></a>在面向对象编程中，为什么容易写出面向过程风格的代码？</h3><p>面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。它是一种自底向上的思考方式。</p><p>它不是先去按照执行流程来分解任务，而是将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按照流程将类组装起来，完成整个任务。</p><p>在面向对象编程中，类的设计还是挺需要技巧，挺需要一定设计经验的。你要去思考如何封装合适的数据和方法到一个类里，如何设计类之间的关系，如何设计类之间的交互等等诸多设计问题。</p><h3 id="面向过程编程及面向过程编程语言就真的无用武之地了吗？"><a href="#面向过程编程及面向过程编程语言就真的无用武之地了吗？" class="headerlink" title="面向过程编程及面向过程编程语言就真的无用武之地了吗？"></a>面向过程编程及面向过程编程语言就真的无用武之地了吗？</h3><p>如果我们开发的是微小程序，或者是一个数据处理相关的代码，以算法为主，数据为辅，那脚本式的面向过程的编程风格就更适合一些。</p><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><h3 id="抽象类和接口的语法特性"><a href="#抽象类和接口的语法特性" class="headerlink" title="抽象类和接口的语法特性"></a>抽象类和接口的语法特性</h3><p>抽象类不允许被实例化，只能被继承。它可以包含属性和方法。方法既可以包含代码实现，也可以不包含代码实现。不包含代码实现的方法叫作抽象方法。子类继承抽象类，必须实现抽象类中的所有抽象方法。接口不能包含属性，只能声明方法，方法不能包含代码实现。类实现接口的时候，必须实现接口中声明的所有方法。</p><h3 id="抽象类和接口存在的意义"><a href="#抽象类和接口存在的意义" class="headerlink" title="抽象类和接口存在的意义"></a>抽象类和接口存在的意义</h3><p>抽象类是对成员变量和方法的抽象，是一种 is-a 关系，是为了解决代码复用问题。接口仅仅是对方法的抽象，是一种 has-a 关系，表示具有某一组行为特性，是为了解决解耦问题，隔离接口和具体的实现，提高代码的扩展性。</p><p>从类的继承层次上来看，抽象类是一种自下而上的设计思路，先有子类的代码重复，然后再抽象成上层的父类（也就是抽象类）。而接口正好相反，它是一种自上而下的设计思路。</p><h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><p>“Program to an interface, not animplementation”。“基于抽象而非实现编程”。</p><p>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。</p><p>“细节是魔鬼”。</p><ol><li>函数的命名不能暴露任何实现细节。</li><li>封装具体的实现细节。</li><li>为实现类定义抽象的接口。</li></ol><p>抽象意识、封装意识、接口意识。</p><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>继承层次过深、过复杂，也会影响到代码的可维护性。</p><p>鸟 -&gt; 会飞、不会飞、会叫、不会叫、会下蛋、不会下蛋。</p><p>利用组合（composition）、接口、委托（delegation 解决。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提高复用性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyAbility</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">implements</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 组合</span></span><br><span class="line">  <span class="keyword">private</span> FlyAbility flyAbility = <span class="keyword">new</span> FlyAbility();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 委托</span></span><br><span class="line">    flyAbility.fly();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承改写成组合意味着要做更细粒度的类的拆分。这也就意味着，我们要定义更多的类和接口。类和接口的增多也就或多或少地增加代码的复杂程度和维护成本。</p><p>组合并不完美，继承也不是一无是处。</p><p>如果类之间的继承结构稳定，层次比较浅，关系不复杂，我们就可以大胆地使用继承。反之，我们就尽量使用组合来替代继承。除此之外，还有一些设计模式、特殊的应用场景，会固定使用继承（模板模式（template pattern））或者组合（装饰者模式（decoratorpattern）、策略模式（strategy pattern）、组合模式（composite pattern））。</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;00&quot;&gt;&lt;a href=&quot;#00&quot; class=&quot;headerlink&quot; title=&quot;00&quot;&gt;&lt;/a&gt;00&lt;/h2&gt;&lt;p&gt;KISS 原则（Keep It Simple and Stupid），这个原则理解起来很简单，一看貌似就懂了，那我问你，怎样的代码才算是足够
      
    
    </summary>
    
    
      <category term="design-patterns" scheme="https://zyf.im/tags/design-patterns/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Code Snippet</title>
    <link href="https://zyf.im/2021/01/29/mysql-code-snippet/"/>
    <id>https://zyf.im/2021/01/29/mysql-code-snippet/</id>
    <published>2021-01-29T10:08:00.000Z</published>
    <updated>2021-07-19T11:32:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看优化后的-SQL"><a href="#查看优化后的-SQL" class="headerlink" title="查看优化后的 SQL"></a>查看优化后的 SQL</h2><p>在联表查询时比较有效果。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPLAIN &lt;你的 SQL&gt;;</span><br><span class="line">SHOW WARNINGS;</span><br></pre></td></tr></table></figure><h2 id="ON-vs-USING"><a href="#ON-vs-USING" class="headerlink" title="ON vs USING"></a>ON vs USING</h2><p><a href="https://stackoverflow.com/questions/11366006/mysql-on-vs-using" target="_blank" rel="noopener">MySQL ON vs USING? | stackoverflow</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.standbyside.com/2019/06/19/tips-of-coding-3/" target="_blank" rel="noopener">编程小技巧（3）：查看优化后的 SQL</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看优化后的-SQL&quot;&gt;&lt;a href=&quot;#查看优化后的-SQL&quot; class=&quot;headerlink&quot; title=&quot;查看优化后的 SQL&quot;&gt;&lt;/a&gt;查看优化后的 SQL&lt;/h2&gt;&lt;p&gt;在联表查询时比较有效果。&lt;/p&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://zyf.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP 月份加减问题</title>
    <link href="https://zyf.im/2021/01/27/php-strtotime-month/"/>
    <id>https://zyf.im/2021/01/27/php-strtotime-month/</id>
    <published>2021-01-27T10:18:24.000Z</published>
    <updated>2021-02-04T09:50:14.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="看现象"><a href="#看现象" class="headerlink" title="看现象"></a>看现象</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"+1 month"</span>, strtotime(<span class="string">"2020-07-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2020-08-31" 符合预期</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"+1 month"</span>, strtotime(<span class="string">"2020-05-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2020-07-01" 不符合预期，预期 2020-06-30</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"-1 month"</span>, strtotime(<span class="string">"2020-02-29"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2020-01-29" 符合预期</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"-1 month"</span>, strtotime(<span class="string">"2020-03-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2020-03-02" 不符合预期，预期 2020-02-29</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Carbon\Carbon</span></span><br><span class="line">Carbon::parse(<span class="string">"2020-07-31"</span>)-&gt;addMonth()-&gt;toDateString();</span><br><span class="line"><span class="comment">// "2020-08-31"</span></span><br><span class="line">Carbon::parse(<span class="string">"2020-05-31"</span>)-&gt;addMonth()-&gt;toDateString();</span><br><span class="line"><span class="comment">// "2020-07-01"</span></span><br><span class="line">Carbon::parse(<span class="string">"2020-02-29"</span>)-&gt;subMonth()-&gt;toDateString();</span><br><span class="line"><span class="comment">// "2020-01-29"</span></span><br><span class="line">Carbon::parse(<span class="string">"2020-03-31"</span>)-&gt;subMonth()-&gt;toDateString();</span><br><span class="line"><span class="comment">// "2020-03-02"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果与 strtotime 一致。</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"+1 month"</span>, strtotime(<span class="string">"2020-05-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2020-07-01"</span></span><br></pre></td></tr></table></figure><p>date 内部的处理逻辑：</p><ol><li><code>2020-05-31</code> 做 <code>+1 month</code> 也就是 <code>2020-06-31</code>。</li><li>再做日期规范化，因为没有 <code>06-31</code>，所以 <code>06-31</code> 就等于了 <code>07-01</code>。</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"2020-06-31"</span>)));</span><br><span class="line"><span class="comment">// string(10) "2017-07-01"</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"next month"</span>, strtotime(<span class="string">"2017-01-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2017-03-03"</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"last month"</span>, strtotime(<span class="string">"2017-03-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2017-03-03"</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"last day of -1 month"</span>, strtotime(<span class="string">"2017-03-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2017-02-28"</span></span><br><span class="line"></span><br><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"first day of +1 month"</span>, strtotime(<span class="string">"2017-08-31"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2017-09-01"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但要注意短语的含义：</span></span><br><span class="line">var_dump(date(<span class="string">"Y-m-d"</span>, strtotime(<span class="string">"last day of -1 month"</span>, strtotime(<span class="string">"2017-03-01"</span>))));</span><br><span class="line"><span class="comment">// string(10) "2017-02-28"</span></span><br></pre></td></tr></table></figure><p>如果使用 <code>Carbon\Carbon</code> 可以用 <code>subMonthNoOverflow</code> 与 <code>addMonthNoOverflow</code> 防止进位：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Carbon::parse(<span class="string">'2020-03-31'</span>)-&gt;subMonthNoOverflow()-&gt;toDateString();</span><br><span class="line"><span class="comment">// "2020-02-29"</span></span><br><span class="line"></span><br><span class="line">Carbon::parse(<span class="string">"2020-05-31"</span>)-&gt;addMonthNoOverflow()-&gt;toDateString();</span><br><span class="line"><span class="comment">// "2020-06-30"</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/briannesbitt/Carbon/issues/428" target="_blank" rel="noopener">Why does subMonth not work correctly? | github</a></li><li><a href="https://www.laruence.com/2018/07/31/3207.html" target="_blank" rel="noopener">令人困惑的 strtotime | laruence</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;看现象&quot;&gt;&lt;a href=&quot;#看现象&quot; class=&quot;headerlink&quot; title=&quot;看现象&quot;&gt;&lt;/a&gt;看现象&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 Code Snippet</title>
    <link href="https://zyf.im/2021/01/19/yii2-code-snippet/"/>
    <id>https://zyf.im/2021/01/19/yii2-code-snippet/</id>
    <published>2021-01-19T04:08:13.000Z</published>
    <updated>2021-01-27T09:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gii-CLI"><a href="#gii-CLI" class="headerlink" title="gii CLI"></a>gii CLI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php yii <span class="built_in">help</span> gii/mode</span><br><span class="line"></span><br><span class="line">php yii gii/model --generateLabelsFromComments=1 --overwrite=1 --standardizeCapitals=1 --ns=<span class="string">'app\models\gii'</span> --tableName=<span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多数据库</span></span><br><span class="line">php yii gii/model --generateLabelsFromComments=1 --overwrite=1 --standardizeCapitals=1 --db=<span class="string">"hub_db"</span> --ns=<span class="string">'app\models\hub\gii'</span> --tableName=<span class="string">"*"</span></span><br></pre></td></tr></table></figure><h2 id="连接数据库时设置时区"><a href="#连接数据库时设置时区" class="headerlink" title="连接数据库时设置时区"></a>连接数据库时设置时区</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line"><span class="string">'dsn'</span> =&gt; <span class="string">'mysql:host=mysql;port=3306;dbname=hub'</span>,</span><br><span class="line"><span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'password'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line"><span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭日志记录，防止被 logs 平台拿走</span></span><br><span class="line"><span class="string">'enableLogging'</span> =&gt; YII_DEBUG ? <span class="keyword">true</span> : <span class="keyword">false</span>,</span><br><span class="line"><span class="string">'enableProfiling'</span> =&gt; YII_DEBUG ? <span class="keyword">true</span> : <span class="keyword">false</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置时区</span></span><br><span class="line"><span class="string">'on afterOpen'</span> =&gt; <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// set 'Asia/Bangkok' timezone</span></span><br><span class="line">  $event-&gt;sender-&gt;createCommand(<span class="string">"SET time_zone='+08:00';"</span>)-&gt;execute();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="ActiveRecord-one"><a href="#ActiveRecord-one" class="headerlink" title="ActiveRecord one"></a>ActiveRecord one</h2><blockquote><p><code>yii\db\ActiveRecord::findOne()</code> 和 <code>yii\db\ActiveQuery::one()</code> 都不会添加 LIMIT 1 到 生成的 SQL 语句中。如果你的查询会返回很多行的数据， 你明确的应该加上 <code>limit(1)</code> 来提高性能，比如 <code>Customer::find()-&gt;limit(1)-&gt;one()</code>。</p></blockquote><h2 id="DB-where"><a href="#DB-where" class="headerlink" title="DB where"></a>DB where</h2><ul><li>字符串格式，例如：<code>&#39;status=1&#39;</code></li><li>哈希格式，例如： <code>[&#39;status&#39; =&gt; 1, &#39;type&#39; =&gt; 2]</code></li><li>操作符格式，例如：<code>[&#39;like&#39;, &#39;name&#39;, &#39;test&#39;]</code></li><li>对象格式，例如：<code>new LikeCondition(&#39;name&#39;, &#39;LIKE&#39;, &#39;test&#39;)</code></li></ul><h3 id="简单条件"><a href="#简单条件" class="headerlink" title="简单条件"></a>简单条件</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: (type = 1) AND (status = 2).</span></span><br><span class="line">$cond = [<span class="string">'type'</span> =&gt; <span class="number">1</span>, <span class="string">'status'</span> =&gt; <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: (id IN (1, 2, 3)) AND (status = 2)</span></span><br><span class="line">$cond = [<span class="string">'id'</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'status'</span> =&gt; <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: status IS NULL</span></span><br><span class="line">$cond = [<span class="string">'status'</span> =&gt; <span class="keyword">null</span>]</span><br></pre></td></tr></table></figure><h3 id="AND-OR"><a href="#AND-OR" class="headerlink" title="AND OR"></a>AND OR</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: `id=1 AND id=2`</span></span><br><span class="line">$cond = [<span class="string">'and'</span>, <span class="string">'id=1'</span>, <span class="string">'id=2'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `type=1 AND (id=1 OR id=2)`</span></span><br><span class="line">$cond = [<span class="string">'and'</span>, <span class="string">'type=1'</span>, [<span class="string">'or'</span>, <span class="string">'id=1'</span>, <span class="string">'id=2'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `type=1 AND (id=1 OR id=2)`</span></span><br><span class="line"><span class="comment">// 此写法 '=' 可以换成其他操作符，例：in like != &gt;= 等</span></span><br><span class="line">$cond = [</span><br><span class="line">    <span class="string">'and'</span>,</span><br><span class="line">    [<span class="string">'='</span>, <span class="string">'type'</span>, <span class="number">1</span>],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">'or'</span>,</span><br><span class="line">        [<span class="string">'='</span>, <span class="string">'id'</span>, <span class="string">'1'</span>],</span><br><span class="line">        [<span class="string">'='</span>, <span class="string">'id'</span>, <span class="string">'2'</span>],</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: `NOT (attribute IS NULL)`</span></span><br><span class="line">$cond = [<span class="string">'not'</span>, [<span class="string">'attribute'</span> =&gt; <span class="keyword">null</span>]]</span><br></pre></td></tr></table></figure><h3 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// not between 用法相同</span></span><br><span class="line"><span class="comment">// SQL: `id BETWEEN 1 AND 10`</span></span><br><span class="line">$cond = [<span class="string">'between'</span>, <span class="string">'id'</span>, <span class="number">1</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// not in 用法相同</span></span><br><span class="line"><span class="comment">// SQL: `id IN (1, 2, 3)`</span></span><br><span class="line">$cond = [<span class="string">'between'</span>, <span class="string">'id'</span>, <span class="number">1</span>, <span class="number">10</span>]</span><br><span class="line">$cond = [<span class="string">'id'</span> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// IN 条件也适用于多字段</span></span><br><span class="line"><span class="comment">// SQL: (`id`, `name`) IN ((1, 'foo'), (2, 'bar'))</span></span><br><span class="line">$cond = [<span class="string">'in'</span>, [<span class="string">'id'</span>, <span class="string">'name'</span>], [[<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'foo'</span>], [<span class="string">'id'</span> =&gt; <span class="number">2</span>, <span class="string">'name'</span> =&gt; <span class="string">'bar'</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也适用于内嵌 SQL 语句</span></span><br><span class="line">$cond = [<span class="string">'in'</span>, <span class="string">'user_id'</span>, (<span class="keyword">new</span> Query())-&gt;select(<span class="string">'id'</span>)-&gt;from(<span class="string">'users'</span>)-&gt;where([<span class="string">'active'</span> =&gt; <span class="number">1</span>])]</span><br></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQL: `name LIKE '%tester%'`</span></span><br><span class="line">$cond = [<span class="string">'like'</span>, <span class="string">'name'</span>, <span class="string">'tester'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `name LIKE '%test%' AND name LIKE '%sample%'`</span></span><br><span class="line">$cond = [<span class="string">'like'</span>, <span class="string">'name'</span>, [<span class="string">'test'</span>, <span class="string">'sample'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL: `name LIKE '%tester'`</span></span><br><span class="line">$cond = [<span class="string">'like'</span>, <span class="string">'name'</span>, <span class="string">'%tester'</span>, <span class="keyword">false</span>]</span><br></pre></td></tr></table></figure><h3 id="EXIST"><a href="#EXIST" class="headerlink" title="EXIST"></a>EXIST</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// not exists用法类似</span></span><br><span class="line"><span class="comment">// SQL: EXISTS (SELECT "id" FROM "users" WHERE "active"=1)</span></span><br><span class="line">$cond = [<span class="string">'exists'</span>, (<span class="keyword">new</span> Query())-&gt;select(<span class="string">'id'</span>)-&gt;from(<span class="string">'users'</span>)-&gt;where([<span class="string">'active'</span> =&gt; <span class="number">1</span>])]</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/db-query-builder" target="_blank" rel="noopener">查询构建器 | yiiframework</a></li><li><a href="https://blog.csdn.net/u013697959/article/details/79687746" target="_blank" rel="noopener">YII where 条件 | csdn</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;gii-CLI&quot;&gt;&lt;a href=&quot;#gii-CLI&quot; class=&quot;headerlink&quot; title=&quot;gii CLI&quot;&gt;&lt;/a&gt;gii CLI&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
      <category term="yii2" scheme="https://zyf.im/tags/yii2/"/>
    
      <category term="code-snippet" scheme="https://zyf.im/tags/code-snippet/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 Vue 跨域问题</title>
    <link href="https://zyf.im/2021/01/10/yii2-vue-cors/"/>
    <id>https://zyf.im/2021/01/10/yii2-vue-cors/</id>
    <published>2021-01-10T04:00:00.000Z</published>
    <updated>2021-07-29T07:45:54.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="旧的解决办法"><a href="#旧的解决办法" class="headerlink" title="旧的解决办法"></a>旧的解决办法</h2><p>在控制器的 behaviors 方法中增加下面的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $behaviors = <span class="keyword">parent</span>::behaviors();</span><br><span class="line">    <span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">        <span class="comment">// add CORS filter</span></span><br><span class="line">        $behaviors[<span class="string">'corsFilter'</span>] = [</span><br><span class="line">            <span class="string">'class'</span> =&gt; Cors::class,</span><br><span class="line">            <span class="string">'cors'</span> =&gt; [</span><br><span class="line">                <span class="string">'Origin'</span> =&gt; [<span class="string">'http://localhost:8080'</span>],</span><br><span class="line">                <span class="string">'Access-Control-Request-Method'</span> =&gt; [<span class="string">'GET'</span>, <span class="string">'POST'</span>, <span class="string">'PUT'</span>, <span class="string">'PATCH'</span>, <span class="string">'DELETE'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>],</span><br><span class="line">                <span class="string">'Access-Control-Request-Headers'</span> =&gt; [<span class="string">'*'</span>],</span><br><span class="line">                <span class="string">'Access-Control-Allow-Credentials'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">                <span class="string">'Access-Control-Max-Age'</span> =&gt; <span class="number">86400</span>,</span><br><span class="line">                <span class="string">'Access-Control-Expose-Headers'</span> =&gt; [],</span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $behaviors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边配置的解释：</p><ul><li><code>Origin</code> 即 <code>Access-Control-Allow-Origin</code> 表示：响应头指定了该响应的资源是否被允许与给定的 origin 共享。</li><li><code>Access-Control-Request-Method</code> 用于通知服务器在真正的请求中会采用哪种 HTTP 方法。因为预检请求所使用的方法总是 <code>OPTIONS</code> ，与实际请求所使用的方法不一样，所以这个请求头是必要的。</li><li><code>Access-Control-Request-Headers</code> 用于通知服务器在真正的请求中会采用哪些请求头。</li><li><code>Access-Control-Allow-Credentials</code> 表示是否可以将对请求的响应暴露给页面。返回 true 则可以，其他值均不可以。</li><li><code>Access-Control-Max-Age</code> 表示返回结果（即 <code>Access-Control-Allow-Methods</code> 和 <code>Access-Control-Allow-Headers</code> 提供的信息） 可以被缓存多久。</li><li><code>Access-Control-Expose-Headers</code> 列出了哪些首部可以作为响应的一部分暴露给外部。</li></ul><p>注意：</p><p>如果设置 <code>Origin</code> 为 <code>[&#39;*&#39;]</code>，即所有的前端跨域请求可以接受，同时把 <code>Access-Control-Allow-Credentials</code> 设置为 <code>true</code>，Yii 会直接报错：<strong>Allowing credentials for wildcard origins is insecure. Please specify more restrictive origins or set ‘credentials’ to false in your CORS configuration.</strong>。</p><p>告诉你使用通配符的凭证是不安全的，让你设置更严格的 <code>Origin</code> 或者把 <code>Access-Control-Allow-Credentials</code> 设置为 <code>false</code>。</p><p>也就是说不能 <code>Access-Control-Allow-Credentials</code> 为 <code>true</code> 并且 <code>Access-Control-Allow-Origin</code> 为 <code>*</code>。</p><p>因为 <code>Access-Control-Allow-Credentials</code> 的意思就是允许跨域请求在请求头中携带凭证，比如 <code>cookie</code>，做身份识别，但是你又把 <code>Access-Control-Allow-Origin</code> 设置为 <code>*</code>，这是说不通的，是相悖的。</p><p>具体可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials" target="_blank" rel="noopener">Reason: Credential is not supported if the CORS header ‘Access-Control-Allow-Origin’ is ‘*‘ | mozilla</a></p><h2 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h2><p>上面的理论上解决了跨域问题，但是新版 Chrome 根据 Cookie 的 SameSite 属性，仍然会阻止 Cookie 的发送 <code>network</code> <code>show filtered out request cookies</code>。</p><p>参考：</p><ul><li><a href="https://medium.com/faun/whats-new-in-devtools-chrome-79-1b2df6cdd759" target="_blank" rel="noopener">What’s New In DevTools (Chrome 79) | medium</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html" target="_blank" rel="noopener">Cookie 的 SameSite 属性 | ruanyifeng</a></li></ul><p>在开发环境根治跨域问题，使用 <code>webpack-dev-server</code> 代理。</p><p>前端：abc.test<br>后端：abc-api.test<br>代理：<code>abc.test/web-api</code> -&gt; <code>abc-api.test</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">  <span class="string">'/web-api/'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://abc-api.test/'</span>,</span><br><span class="line">    pathRewrite: &#123; <span class="string">'^/web-api'</span>: <span class="string">''</span> &#125;,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>, <span class="comment">// 默认情况下，代理时会保留主机头的来源，您可以将 changeOrigin 设置为true 来覆盖此行为。</span></span><br><span class="line">    secure: <span class="literal">false</span>, <span class="comment">// 接受在 HTTPS 上运行带有无效证书的后端服务器。</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://webpack.js.org/configuration/dev-server/#devserverproxy" target="_blank" rel="noopener">dev-server devserverproxy | webpack</a></p><blockquote><p>是否可以 jwt 来解决待研究。</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.shiqidu.com/d/846" target="_blank" rel="noopener">解决 Yii2 + Vue 前后台分离时跨域的问题 | shiqidu</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">跨源资源共享（CORS） | mozilla</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;旧的解决办法&quot;&gt;&lt;a href=&quot;#旧的解决办法&quot; class=&quot;headerlink&quot; title=&quot;旧的解决办法&quot;&gt;&lt;/a&gt;旧的解决办法&lt;/h2&gt;&lt;p&gt;在控制器的 behaviors 方法中增加下面的代码：&lt;/p&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
      <category term="yii2" scheme="https://zyf.im/tags/yii2/"/>
    
      <category term="vue" scheme="https://zyf.im/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>优化 PHP-FPM</title>
    <link href="https://zyf.im/2020/12/30/optimization-of-php-fpm/"/>
    <id>https://zyf.im/2020/12/30/optimization-of-php-fpm/</id>
    <published>2020-12-30T11:10:03.000Z</published>
    <updated>2021-02-04T09:51:53.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li><a href="https://www.php.net/manual/zh/install.fpm.configuration.php" target="_blank" rel="noopener">php-fpm.conf | php.net</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat php-fpm.conf | grep <span class="string">'^[^;]'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[www]</span><br><span class="line">user &#x3D; nobody</span><br><span class="line">group &#x3D; nobody</span><br><span class="line">listen &#x3D; 127.0.0.1:10071</span><br><span class="line"></span><br><span class="line">#php-fpm进程启动模式，pm可以设置为static和dynamic和ondemand</span><br><span class="line">#如果选择static，则进程数就数固定的，由pm.max_children指定固定的子进程数。</span><br><span class="line">pm &#x3D; dynamic</span><br><span class="line"></span><br><span class="line">#如果选择dynamic，则进程数是动态变化的,由以下参数决定：</span><br><span class="line">#子进程最大数</span><br><span class="line">pm.max_children &#x3D; 50</span><br><span class="line">#启动时的进程数，默认值为: min_spare_servers + (max_spare_servers - min_spare_servers) &#x2F; 2</span><br><span class="line">pm.start_servers &#x3D; 2</span><br><span class="line"># 保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</span><br><span class="line">pm.min_spare_servers &#x3D; 1</span><br><span class="line"># 保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</span><br><span class="line">pm.max_spare_servers &#x3D; 3</span><br></pre></td></tr></table></figure><h2 id="static-还是-dynamic"><a href="#static-还是-dynamic" class="headerlink" title="static 还是 dynamic"></a>static 还是 dynamic</h2><p>很多人恐惧症来袭，不知道选什么好？</p><p>一般原则是：动态适合小内存机器，灵活分配进程，省内存。静态适用于大内存机器，动态创建回收进程对服务器资源也是一种消耗。</p><p>如果你的内存很大，有 8-20G，按照一个 php-fpm 进程 20M 算，100 个就 2G 内存了，那就可以开启 static 模式。如果你的内存很小，比如才 256M，那就要小心设置了，因为你的机器里面的其他的进程也算需要占用内存的，所以设置成 dynamic 是最好的，比如：pm.max_chindren = 8, 占用内存 160M 左右，而且可以随时变化，对于一半访问量的网站足够了。</p><h2 id="慢日志查询"><a href="#慢日志查询" class="headerlink" title="慢日志查询"></a>慢日志查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 慢请求的记录日志,配合request_slowlog_timeout使用，默认关闭</span><br><span class="line">slowlog &#x3D; log&#x2F;$pool.log.slow</span><br><span class="line"></span><br><span class="line"># 当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 &#39;0&#39; 表示 &#39;Off&#39;</span><br><span class="line">request_slowlog_timeout &#x3D; 10s</span><br><span class="line"></span><br><span class="line"># 设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的&#39;max_execution_time&#39;因为某些特殊原因没有中止运行的脚本有用. 设置为 &#39;0&#39; 表示 &#39;Off&#39;.当经常出现502错误时可以尝试更改此选项。</span><br><span class="line">request_terminate_timeout &#x3D; 0</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/db-query-builder" target="_blank" rel="noopener">查询构建器 | yiiframework</a></li><li><a href="https://blog.csdn.net/u013697959/article/details/79687746" target="_blank" rel="noopener">YII where 条件 | csdn</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/zh/install.fpm.co
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 空格问题</title>
    <link href="https://zyf.im/2020/11/28/mysql-blank-space/"/>
    <id>https://zyf.im/2020/11/28/mysql-blank-space/</id>
    <published>2020-11-28T03:11:59.000Z</published>
    <updated>2021-02-04T09:47:29.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="看现象"><a href="#看现象" class="headerlink" title="看现象"></a>看现象</h2><p>创建一个测试数据库表，插入测试数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blank_space`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uniq_key`</span> (<span class="string">`uid`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space`</span>(<span class="string">`id`</span>, <span class="string">`uid`</span>, <span class="string">`desc`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'abc '</span>, <span class="string">'末尾1个'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space`</span>(<span class="string">`id`</span>, <span class="string">`uid`</span>, <span class="string">`desc`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">' abc'</span>, <span class="string">'开头1个'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space`</span>(<span class="string">`id`</span>, <span class="string">`uid`</span>, <span class="string">`desc`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'  abc'</span>, <span class="string">'开头2个'</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>uid</th><th>desc</th></tr></thead><tbody><tr><td>1</td><td>abc_</td><td>末尾 1 个</td></tr><tr><td>2</td><td>_abc</td><td>开头 1 个</td></tr><tr><td>3</td><td>__abc</td><td>开头 2 个</td></tr></tbody></table><blockquote><p>uid 实际上没有 <code>_</code>，这样写是为了看到空格。</p></blockquote><p>执行操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid = <span class="string">'abc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid = <span class="string">'abc '</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid = <span class="string">'abc   '</span>;</span><br></pre></td></tr></table></figure><p>都可以查询出：</p><table><thead><tr><th>id</th><th>uid</th><th>desc</th></tr></thead><tbody><tr><td>1</td><td>abc_</td><td>末尾 1 个</td></tr></tbody></table><p>执行操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space`</span>(<span class="string">`uid`</span>, <span class="string">`desc`</span>) <span class="keyword">VALUES</span> (<span class="string">'abc'</span>, <span class="string">'无空格'</span>);</span><br><span class="line"><span class="comment">-- 1062 - Duplicate entry 'abc' for key 'uniq_key', Time: 0.322000s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space`</span>(<span class="string">`uid`</span>, <span class="string">`desc`</span>) <span class="keyword">VALUES</span> (<span class="string">'abc  '</span>, <span class="string">'末位两个'</span>);</span><br><span class="line"><span class="comment">-- 1062 - Duplicate entry 'abc' for key 'uniq_key', Time: 0.322000s</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>MySQL 校对规则属于 PADSPACE，会忽略尾部空格。针对的是 varchar char text 等文本类的数据类型。此为 SQL 标准化行为。无需要设置也无法改变。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid = <span class="built_in">BINARY</span> <span class="string">'abc'</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid = <span class="built_in">BINARY</span> <span class="string">'abc '</span>;</span><br><span class="line"><span class="comment">-- 1 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid = <span class="built_in">BINARY</span> <span class="string">'abc   '</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="keyword">like</span> <span class="string">'abc'</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="keyword">like</span> <span class="string">'abc '</span>;</span><br><span class="line"><span class="comment">-- 1 records</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> blank_space <span class="keyword">WHERE</span> uid <span class="keyword">like</span> <span class="string">'abc   '</span>;</span><br><span class="line"><span class="comment">-- 0 records</span></span><br></pre></td></tr></table></figure><blockquote><p>BINARY 不是函数，是类型转换运算符，它用来强制它后面的字符串为一个二进制字符串，可以理解成精确匹配。</p></blockquote><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p><strong>需要在非严格模式下。</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blank_space_attack`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space_attack`</span>(<span class="string">`id`</span>, <span class="string">`uid`</span>, <span class="string">`pwd`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'admin'</span>, <span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space_attack`</span>(<span class="string">`id`</span>, <span class="string">`uid`</span>, <span class="string">`pwd`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'tim'</span>, <span class="string">'234'</span>);</span><br></pre></td></tr></table></figure><p>攻击：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`blank_space_attack`</span>(<span class="string">`uid`</span>, <span class="string">`pwd`</span>) <span class="keyword">VALUES</span> (<span class="string">'admin      1'</span>, <span class="string">'easy'</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blank_space_attack <span class="keyword">where</span> uid = <span class="string">"admin"</span> <span class="keyword">and</span> pwd = <span class="string">"easy"</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>uid</th><th>desc</th></tr></thead><tbody><tr><td>3</td><td>admin_____</td><td>easy</td></tr></tbody></table><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><ul><li>服务端没有对用户名长度进行限制。如果服务端限制了用户名长度就不能导致数据库截断，也就没有利用条件。</li><li>登陆验证的 SQL 语句必须是用户名和密码一起验证。如果是验证流程是先根据用户名查找出对应的密码，然后再比对密码的话，那么也不能进行利用。因为当使用 admin 为用户名来查询密码的话，数据库此时就会返回两条记录，而一般取第一条则是目标用户的记录，那么你传输的密码肯定是和目标用户密码匹配不上的。</li><li>验证成功后返回的必须是用户传递进来的用户名，而不是从数据库取出的用户名。因为当我们以用户 admin 和密码 easy 登陆时，其实数据库返回的是我们自己的用户信息，而我们的用户名其实是 <code>admin_____</code>，如果此后的业务逻辑以该用户名为准，那么就不能达到越权的目的了。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.v0n.top/2019/08/05/SQL%E7%BA%A6%E6%9D%9F%E6%94%BB%E5%87%BB/" target="_blank" rel="noopener">SQL 约束攻击 | v0n</a></li><li><a href="https://iluoy.com/articles/295" target="_blank" rel="noopener">记一次数据库空格问题 | iluoy</a></li><li><a href="https://www.cnblogs.com/xjnotxj/p/9019866.html" target="_blank" rel="noopener">Mysql 查询条件中字符串尾部有空格也能匹配上的问题 | xjnotxj</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;看现象&quot;&gt;&lt;a href=&quot;#看现象&quot; class=&quot;headerlink&quot; title=&quot;看现象&quot;&gt;&lt;/a&gt;看现象&lt;/h2&gt;&lt;p&gt;创建一个测试数据库表，插入测试数据：&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://zyf.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>在 Laravel 之外使用 illuminate 组件</title>
    <link href="https://zyf.im/2020/09/11/use-illuminate-components-without-laravel/"/>
    <id>https://zyf.im/2020/09/11/use-illuminate-components-without-laravel/</id>
    <published>2020-09-11T07:00:39.000Z</published>
    <updated>2021-02-04T09:52:21.326Z</updated>
    
    <content type="html"><![CDATA[<p>当代框架基本都是有组件构成，这使得框架变得更加灵活。<a href="https://github.com/illuminate" target="_blank" rel="noopener">The Laravel Components | github</a> Laravel 中有不少优质组件，那如何在 Laravel 之外使用 illuminate 组件呢？</p><h2 id="illuminate-validation"><a href="#illuminate-validation" class="headerlink" title="illuminate/validation"></a>illuminate/validation</h2><p>以 <a href="https://github.com/illuminate/validation" target="_blank" rel="noopener">illuminate/validation</a> 为例，validation 有丰富的数据验证功能。</p><p>在项目的 <code>composer.json</code> 文件中添加：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    "require": &#123;</span><br><span class="line">      ...</span><br><span class="line">      "illuminate/validation": "^5.8",</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从 <a href="https://github.com/Laravel-Lang/lang/tree/master/src/zh_CN" target="_blank" rel="noopener">Laravel-Lang/lang</a> 项目中复制需要的语言文件放到自己的项目中。</p><p>例如：在 Yii2 项目中，复制对应语言文件到项目中的 <code>assets/lang/zh-CN/validation.php</code>。</p><p>创建 <code>common/Validator.php</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">common</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Filesystem</span>\<span class="title">Filesystem</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Translation</span>\<span class="title">FileLoader</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Translation</span>\<span class="title">Translator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">Factory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> $instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span>: <span class="title">Factory</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">static</span>::$instance) &#123;</span><br><span class="line">      $translationPath = get_alias(<span class="string">'@assets/lang'</span>);</span><br><span class="line">      $translationLocale = <span class="string">'zh-CN'</span>;</span><br><span class="line">      $transFileLoader = <span class="keyword">new</span> FileLoader(<span class="keyword">new</span> Filesystem(), $translationPath);</span><br><span class="line">      $translator = <span class="keyword">new</span> Translator($transFileLoader, $translationLocale);</span><br><span class="line">      <span class="keyword">static</span>::$instance = <span class="keyword">new</span> Factory($translator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全局函数文件添加：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://learnku.com/docs/laravel/5.8/validation/3899#manually-creating-validators</span></span><br><span class="line"><span class="comment">// $rules = [</span></span><br><span class="line"><span class="comment">//   'name' =&gt; 'required|string|min:2|max:5',</span></span><br><span class="line"><span class="comment">//   'code' =&gt; 'required|string|min:2|max:5',</span></span><br><span class="line"><span class="comment">// ];</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span><span class="params">(array $data, array $rules, array $messages = [], array $customAttributes = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> \app\common\Validator::getInstance()-&gt;make($data, $rules, $messages, $customAttributes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试使用：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$rules = [<span class="string">'name'</span> =&gt; <span class="string">'required|numeric'</span>];</span><br><span class="line">$customAttributes = [<span class="string">'name'</span> =&gt; <span class="string">'My name'</span>];</span><br><span class="line">$messages = [<span class="string">'name.required'</span> =&gt; <span class="string">'A name is required'</span>,];</span><br><span class="line"></span><br><span class="line">$validator = validator($data, $rules, $customAttributes, $messages);</span><br><span class="line"><span class="keyword">if</span> ($validator-&gt;fails()) &#123;</span><br><span class="line">    $errors = $validator-&gt;errors()-&gt;all();</span><br><span class="line">    Response::error(Errors::ParamsInvalid, implode(<span class="string">','</span>, $errors), $errors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当代框架基本都是有组件构成，这使得框架变得更加灵活。&lt;a href=&quot;https://github.com/illuminate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Laravel Components | github&lt;/a&gt; Lara
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Redis 正则批量删除 key</title>
    <link href="https://zyf.im/2020/08/17/redis-matching-a-pattern-delete-keys/"/>
    <id>https://zyf.im/2020/08/17/redis-matching-a-pattern-delete-keys/</id>
    <published>2020-08-17T11:34:29.000Z</published>
    <updated>2021-02-04T09:49:04.132Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">"return redis.call('del', 'defaultKey', unpack(redis.call('keys', ARGV[1])))"</span> <span class="number">0</span> prefix:*</span><br></pre></td></tr></table></figure><p>循环删除：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">"local keys = redis.call('keys', ARGV[1]) \n for i=1,#keys,5000 do \n redis.call('del', unpack(keys, i, math.min(i+4999, #keys))) \n end \n return keys"</span> <span class="number">0</span> prefix:*</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://stackoverflow.com/questions/4006324/how-to-atomically-delete-keys-matching-a-pattern-using-redis" target="_blank" rel="noopener">How to atomically delete keys matching a pattern using Redis | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EVAL &lt;span class=&quot;string&quot;&gt;&quot;return redis.call(&#39;del&#39;, &#39;defau
      
    
    </summary>
    
    
      <category term="redis" scheme="https://zyf.im/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL JSON 数据类型</title>
    <link href="https://zyf.im/2020/08/14/mysql-json-data-type/"/>
    <id>https://zyf.im/2020/08/14/mysql-json-data-type/</id>
    <published>2020-08-14T11:39:55.000Z</published>
    <updated>2021-02-04T09:48:13.844Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://dev.mysql.com/doc/refman/5.7/en/json.html" target="_blank" rel="noopener">The JSON Data Type | mysql</a></p><blockquote><p>As of MySQL 5.7.8, MySQL supports a native JSON data type</p></blockquote><p><a href="https://dev.mysql.com/doc/refman/5.7/en/json-function-reference.html" target="_blank" rel="noopener">JSON Function Reference | mysql</a></p><p>A JSON column cannot have a non-NULL default value.</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>设置虚拟列 -&gt; 虚拟列建立索引</p><p>在 MySQL 5.7 中，支持两种 Generated Column，即 Virtual Generated Column 和 Stored Generated Column，前者只将 Generated Column 保存在数据字典中（表的元数据），并不会将这一列数据持久化到磁盘上；后者会将 Generated Column 持久化到磁盘上，而不是每次读取的时候计算所得。很明显，后者存放了可以通过已有数据计算而得的数据，需要更多的磁盘空间，与 Virtual Column 相比并没有优势，因此，MySQL 5.7 中，不指定 Generated Column 的类型，默认是 Virtual Column。</p><p>如果需要 Stored Generated Golumn 的话，可能在 Virtual Generated Column 上建立索引更加合适，一般情况下，都使用 Virtual Generated Column，这也是 MySQL 默认的方式。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Sally"</span>,</span><br><span class="line">  <span class="attr">"games_played"</span>: &#123;</span><br><span class="line">    <span class="attr">"Battlefield"</span>: &#123;</span><br><span class="line">      <span class="attr">"weapon"</span>: <span class="string">"sniper rifle"</span>,</span><br><span class="line">      <span class="attr">"rank"</span>: <span class="string">"Sergeant V"</span>,</span><br><span class="line">      <span class="attr">"level"</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`players`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`player_and_games`</span> <span class="keyword">JSON</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`names_virtual`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">GENERATED</span> <span class="keyword">ALWAYS</span> <span class="keyword">AS</span> (<span class="string">`player_and_games`</span> -&gt;&gt; <span class="string">'$.name'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="在-Yii2-中的使用"><a href="#在-Yii2-中的使用" class="headerlink" title="在 Yii2 中的使用"></a>在 Yii2 中的使用</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$query = <span class="keyword">static</span>::find()</span><br><span class="line">    -&gt;andWhere([<span class="string">'='</span>, <span class="keyword">new</span> Expression(<span class="string">"`json_value` -&gt; '$.source'"</span>), <span class="keyword">new</span> JsonExpression($array_param)]);</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.lnmp.cn/mysql-57-new-features-json.html" target="_blank" rel="noopener">MySQL 5.7 新特性 JSON 的创建，插入，查询，更新</a></li><li><a href="http://mysql.taobao.org/monthly/2017/12/09/" target="_blank" rel="noopener">MySQL · 最佳实践 · 如何索引 JSON 字段</a></li><li><a href="https://www.cnblogs.com/waterystone/p/5626098.html" target="_blank" rel="noopener">MySQL 常用 Json 函数 | cnblogs</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/json.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The JSON Data Type | mysql&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://zyf.im/tags/mysql/"/>
    
  </entry>
  
</feed>
