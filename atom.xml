<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>全力以赴</title>
  
  <subtitle>Yifans_Z&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zyf.im/"/>
  <updated>2022-08-12T10:40:47.253Z</updated>
  <id>https://zyf.im/</id>
  
  <author>
    <name>Yifans_Z</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell Code Snippet</title>
    <link href="https://zyf.im/2022/07/28/shell-code-snippet/"/>
    <id>https://zyf.im/2022/07/28/shell-code-snippet/</id>
    <published>2022-07-28T03:51:46.000Z</published>
    <updated>2022-08-12T10:40:47.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul><li><a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html" target="_blank" rel="noopener">The Set Builtin | gnu</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html" target="_blank" rel="noopener">Bash 脚本 set 命令教程 | ruanyifeng</a></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit <span class="comment">#等价 set -e。只要发生错误，就终止执行。认为非0就是错误。</span></span><br><span class="line"><span class="built_in">set</span> +o nounset <span class="comment"># 等价 set +u。遇到不存在的变量不报错。默认如此。</span></span><br><span class="line"><span class="built_in">set</span> -o pipefail <span class="comment"># 只要一个子命令失败，整个管道命令就失败，脚本就会终止执行。</span></span><br><span class="line"><span class="built_in">set</span> -o xtrace <span class="comment"># 等价 set -x。在运行结果之前，先输出执行的那一行命令，调试复杂的脚本是很有用。</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"><span class="built_in">set</span> -o xtrace</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4合1</span></span><br><span class="line"><span class="built_in">set</span> -euxo pipefail</span><br><span class="line"><span class="comment">## 写法二</span></span><br><span class="line"><span class="built_in">set</span> -eux</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者执行命令时</span></span><br><span class="line">bash -euxo pipefail script.sh</span><br></pre></td></tr></table></figure><p>如果脚本里面有运行失败的命令（返回值非 0），Bash 默认会继续执行后面的命令。</p><p>实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。这时，一般采用下面的写法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>上面的写法表示只要 command 有非零返回值，脚本就会停止执行。</p><p>如果停止执行之前需要完成多个操作，就要采用下面三种写法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line"><span class="built_in">command</span> || &#123; <span class="built_in">echo</span> <span class="string">"command failed"</span>; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"command failed"</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"$?"</span> -ne 0 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"command failed"</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>如果两个命令有继承关系，只有第一个命令成功了，才能继续执行第二个命令，那么就要采用下面的写法：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure><h2 id="CDPATH"><a href="#CDPATH" class="headerlink" title="CDPATH"></a>CDPATH</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Unset CDPATH so that path interpolation can work correctly</span></span><br><span class="line"><span class="built_in">unset</span> CDPATH</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CDPATH=/etc</span><br><span class="line"><span class="built_in">cd</span> mail</span><br><span class="line">/etc/mail</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-命令行下设置时区"><a href="#Ubuntu-命令行下设置时区" class="headerlink" title="Ubuntu 命令行下设置时区"></a>Ubuntu 命令行下设置时区</h2><ul><li>Ubuntu 16.04</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><p>按提示进行选择完成。</p><p>设置完成后发现在 <code>crontab</code> 仍然是按 UTC 执行的，应该是需要重启下系统或者：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/rsyslog restart</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-命令行下打开-PDF"><a href="#Ubuntu-命令行下打开-PDF" class="headerlink" title="Ubuntu 命令行下打开 PDF"></a>Ubuntu 命令行下打开 PDF</h2><p>一个文件夹中存放了大量的文件后，在窗口打开中被打开时是非常耗时的。当我们已经明确知道文件名时，可以直接在 Terminal 中使用命令，调用应用打开文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">evince filename.pdf</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://askubuntu.com/questions/323131/setting-timezone-from-terminal" target="_blank" rel="noopener">setting timezone from terminal - Ask Ubuntu</a></li><li><a href="https://askubuntu.com/questions/54364/how-do-you-set-the-timezone-for-crontab" target="_blank" rel="noopener">cron - How do you set the timezone for crontab? - Ask Ubuntu</a></li><li><p><a href="http://blog.csdn.net/bigmarco/article/details/6555582" target="_blank" rel="noopener">Ubuntu 命令行打开 PDF 文件 - bigmarco 的专栏</a></p><p>– EOF –</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Set Builtin | gnu&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/11/bash-set.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bash 脚本 set 命令教程 | ruanyifeng&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="code-snippet" scheme="https://zyf.im/categories/code-snippet/"/>
    
    
  </entry>
  
  <entry>
    <title>Front-end Code Snippet</title>
    <link href="https://zyf.im/2022/07/26/front-end-code-snippet/"/>
    <id>https://zyf.im/2022/07/26/front-end-code-snippet/</id>
    <published>2022-07-26T03:51:46.000Z</published>
    <updated>2022-07-28T11:35:30.627Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="库推荐"><a href="#库推荐" class="headerlink" title="库推荐"></a>库推荐</h2><h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p><a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">Pana/nrm</a></p><p>nrm can help you easy and fast switch between different npm registries, now include: npm, cnpm, taobao, nj(nodejitsu).</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line"></span><br><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">nrm use tencent</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;h2 id=&quot;库推荐&quot;&gt;&lt;a href=&quot;#库推荐&quot; class=&quot;headerlink&quot; title=&quot;库推荐&quot;&gt;&lt;/a&gt;库推荐&lt;/h2&gt;&lt;h3 id=&quot;nrm&quot;&gt;&lt;a href=&quot;#nrm&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="code-snippet" scheme="https://zyf.im/categories/code-snippet/"/>
    
    
  </entry>
  
  <entry>
    <title>读《JavaScript 教程 | 网道》笔记</title>
    <link href="https://zyf.im/2022/06/09/javascript-wangdoc-reading-notes/"/>
    <id>https://zyf.im/2022/06/09/javascript-wangdoc-reading-notes/</id>
    <published>2022-06-09T06:59:09.000Z</published>
    <updated>2022-06-09T06:59:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://wangdoc.com/javascript/index.html" target="_blank" rel="noopener">JavaScript 教程 | 网道（WangDoc.com）</a></p></blockquote><a id="more"></a><h2 id="JavaScript-语言的历史"><a href="#JavaScript-语言的历史" class="headerlink" title="JavaScript 语言的历史"></a>JavaScript 语言的历史</h2><p>ECMAScript 只用来标准化 JavaScript 这种语言的基本语法结构，与部署环境相关的标准都由其他标准规定，比如 DOM 的标准就是由 W3C 组织（World Wide Web Consortium）制定的。</p><p>2011 年 6 月，ECMAScript 5.1 版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。到了 2012 年底，所有主要浏览器都支持 ECMAScript 5.1 版的全部功能。</p><p>2015 年 6 月，ECMAScript 6 正式发布，并且更名为“ECMAScript 2015”。这是因为 TC39 委员会计划，以后每年发布一个 ECMAScript 的版本，下一个版本在 2016 年发布，称为“ECMAScript 2016”，2017 年发布“ECMAScript 2017”，以此类推。</p><h2 id="JavaScript-的基本语法"><a href="#JavaScript-的基本语法" class="headerlink" title="JavaScript 的基本语法"></a>JavaScript 的基本语法</h2><p>如果只是声明变量而没有赋值，则该变量的值是 undefined。undefined 是一个特殊的值，表示“无定义”。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p>如果使用 var 重新声明一个已经存在的变量，是无效的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台（console）显示变量a的值。这时变量a还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>标识符命名规则如下：</p><ul><li>第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。</li><li>第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字 0-9。</li></ul><p>对于 var 命令来说，JavaScript 的区块不构成单独的作用域（scope）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>else 代码块总是与离自己最近的那个 if 语句配对。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m !== <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m !== <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"world"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句后面的表达式，与 case 语句后面的表示式比较运行结果时，采用的是严格相等运算符（===），而不是相等运算符（==），这意味着比较时不会发生类型转换。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (x) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"x 发生类型转换"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"x 没有发生类型转换"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x 没有发生类型转换</span></span><br></pre></td></tr></table></figure><p>for 语句的三个部分（initialize、test、increment），可以省略任何一个，也可以全部省略。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码省略了 for 语句表达式的三个部分，结果就导致了一个无限循环。</p><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p><p>标签通常与 break 语句和 continue 语句配合使用，跳出特定的循环。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">top: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">1</span> &amp;&amp; j === <span class="number">1</span>) <span class="keyword">break</span> top;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"i="</span> + i + <span class="string">", j="</span> + j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i=0, j=0</span></span><br><span class="line"><span class="comment">// i=0, j=1</span></span><br><span class="line"><span class="comment">// i=0, j=2</span></span><br><span class="line"><span class="comment">// i=1, j=0</span></span><br><span class="line"></span><br><span class="line">top: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">1</span> &amp;&amp; j === <span class="number">1</span>) <span class="keyword">continue</span> top;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"i="</span> + i + <span class="string">", j="</span> + j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i=0, j=0</span></span><br><span class="line"><span class="comment">// i=0, j=1</span></span><br><span class="line"><span class="comment">// i=0, j=2</span></span><br><span class="line"><span class="comment">// i=1, j=0</span></span><br><span class="line"><span class="comment">// i=2, j=0</span></span><br><span class="line"><span class="comment">// i=2, j=1</span></span><br><span class="line"><span class="comment">// i=2, j=2</span></span><br></pre></td></tr></table></figure><h2 id="数据类型概述"><a href="#数据类型概述" class="headerlink" title="数据类型概述"></a>数据类型概述</h2><p>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。）</p><ul><li>数值（number）：整数和小数（比如 1 和 3.14）。</li><li>字符串（string）：文本（比如 Hello World）。</li><li>布尔值（boolean）：表示真伪的两个特殊值，即 true（真）和 false（假）。</li><li>undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值。</li><li>null：表示空值，即此处的值为空。</li><li>对象（object）：各种值组成的集合。</li></ul><p>通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。</p><p>对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。</p><p>至于 undefined 和 null，一般将它们看成两个特殊值。</p><p>对象是最复杂的数据类型，又可以分成三个子类型。</p><ul><li>狭义的对象（object）</li><li>数组（array）</li><li>函数（function）</li></ul><p>函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。</p><p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p><ul><li>typeof 运算符</li><li>instanceof 运算符</li><li>Object.prototype.toString 方法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// "number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">"123"</span>; <span class="comment">// "string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>; <span class="comment">// "boolean"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f;</span><br><span class="line"><span class="comment">// "function"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure><p>利用这一点，typeof 可以用来检查一个没有声明的变量，而不报错。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v;</span><br><span class="line"><span class="comment">// ReferenceError: v is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> v;</span><br><span class="line"><span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">if</span> (v) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ReferenceError: v is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> v === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">window</span>; <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure><p>上面代码中，空数组（[]）的类型也是 object，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。instanceof 运算符可以区分数组和对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>null 的类型是 object，这是由于历史原因造成的。1995 年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑 null，只把它当作 object 的一种特殊值。后来 null 独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null 返回 object 就没法改变了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure><h2 id="null-undefined-和布尔值"><a href="#null-undefined-和布尔值" class="headerlink" title="null, undefined 和布尔值"></a>null, undefined 和布尔值</h2><p>null 与 undefined 都可以表示“没有”，含义非常相似。将一个变量赋值为 undefined 或 null，语法效果几乎没区别。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"undefined is false"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined is false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"null is false"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// null is false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>1995 年 JavaScript 诞生时，最初像 Java 一样，只设置了 null 表示”无”。根据 C 语言的传统，null 可以自动转为 0。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">null</span>; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，null 就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果 null 自动转为 0，很不容易发现错误。</p><p>因此，他又设计了一个 undefined。区别是这样的：null 是一个表示“空”的对象，转为数值时为 0；undefined 是一个表示”此处无定义”的原始值，转为数值时为 NaN。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="number">5</span> + <span class="literal">undefined</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><ul><li>null 表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入 null，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入 null，表示未发生错误。</li><li>undefined 表示“未定义”，下面是返回 undefined 的典型场景。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量声明了，但没有赋值</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象没有赋值的属性</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.p; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数没有返回值时，默认返回 undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">f(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为 false，其他值都视为 true。</p><ul><li>undefined</li><li>null</li><li>false</li><li>0</li><li>NaN</li><li>“”或’’（空字符串）</li></ul><p>注意，空数组（[]）和空对象（{}）对应的布尔值，都是 true。</p><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><p>JavaScript 内部，所有数字都是以 64 位浮点数形式储存，即使整数也是如此。所以，1 与 1.0 是相同的，是同一个数。</p><p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64 位浮点数）。</p><blockquote><p>容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把 64 位浮点数，转成 32 位整数，然后再进行运算。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">1.0</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>;</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.3</span> /</span><br><span class="line">  <span class="number">0.1</span>(</span><br><span class="line">    <span class="comment">// 2.9999999999999996</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0.3</span> - <span class="number">0.2</span></span><br><span class="line">  ) ===</span><br><span class="line">  <span class="number">0.2</span> - <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>根据国际标准 IEEE 754，JavaScript 浮点数的 64 个二进制位，从最左边开始，是这样组成的。</p><ul><li>第 1 位：符号位，0 表示正数，1 表示负数</li><li>第 2 位到第 12 位（共 11 位）：指数部分</li><li>第 13 位到第 64 位（共 52 位）：小数部分（即有效数字）</li></ul><p>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>);</span><br><span class="line"><span class="comment">// 9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多出的三个有效数字，将无法保存</span></span><br><span class="line"><span class="number">9007199254740992111</span>;</span><br><span class="line"><span class="comment">// 9007199254740992000</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">1024</span>); <span class="comment">// Infinity “正向溢出”</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-1075</span>); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.MAX_VALUE; <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_VALUE; <span class="comment">// 5e-324</span></span><br><span class="line"></span><br><span class="line"><span class="number">123e3</span>; <span class="comment">// 123000</span></span><br><span class="line"><span class="number">123e-3</span>; <span class="comment">// 0.123</span></span><br><span class="line"><span class="number">-3.1e12</span>;</span><br><span class="line"><span class="number">0.1e-23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数点前的数字多于21位。</span></span><br><span class="line"><span class="number">1234567890123456789012</span>;</span><br><span class="line"><span class="comment">// 1.2345678901234568e+21</span></span><br><span class="line"></span><br><span class="line"><span class="number">123456789012345678901</span>;</span><br><span class="line"><span class="comment">// 123456789012345680000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数点后的零多于5个。</span></span><br><span class="line"><span class="comment">// 小数点后紧跟5个以上的零，就自动转为科学计数法</span></span><br><span class="line"><span class="number">0.0000003</span>; <span class="comment">// 3e-7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则，就保持原来的字面形式</span></span><br><span class="line"><span class="number">0.000003</span>; <span class="comment">// 0.000003</span></span><br></pre></td></tr></table></figure><ul><li>十进制：没有前导 0 的数值。</li><li>八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。</li><li>十六进制：有前缀 0x 或 0X 的数值。</li><li>二进制：有前缀 0b 或 0B 的数值。</li></ul><p>有前导 0 的数值会被视为八进制，但是如果前导 0 后面有数字 8 和 9，则该数值被视为十进制。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0888</span>; <span class="comment">// 888</span></span><br><span class="line"><span class="number">0777</span>; <span class="comment">// 511</span></span><br></pre></td></tr></table></figure><p>JavaScript 的 64 位浮点数之中，有一个二进制位是符号位。这意味着，任何一个数都有一个对应的负值，就连 0 也不例外。</p><p>JavaScript 内部实际上存在 2 个 0：一个是 +0，一个是 -0，区别就是 64 位浮点数表示法的符号位不同。它们是等价的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">-0</span> === +<span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> === <span class="number">-0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> === +<span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">+<span class="number">0</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="number">-0</span>; <span class="comment">// 0</span></span><br><span class="line">(<span class="number">-0</span>).toString(); <span class="comment">// '0'</span></span><br><span class="line">(+<span class="number">0</span>).toString(); <span class="comment">// '0'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> / +<span class="number">0</span> === <span class="number">1</span> / <span class="number">-0</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// +Infinity !== -Infinity</span></span><br></pre></td></tr></table></figure><p>NaN 是 JavaScript 的特殊值，表示“非数字” Not a Number，主要出现在将字符串解析成数字出错的场合。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> - <span class="string">"x"</span>; <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.acos(<span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">-1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">-1</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>NaN 不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于 Number。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>; <span class="comment">// 'number'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> + <span class="number">32</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">NaN</span> - <span class="number">32</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">NaN</span> * <span class="number">32</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">NaN</span> / <span class="number">32</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 场景一</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景二</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> === -<span class="literal">Infinity</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> / <span class="number">-0</span>; <span class="comment">// -Infinity</span></span><br><span class="line"><span class="number">1</span> / <span class="number">-0</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> &gt; <span class="number">1000</span>; <span class="comment">// true</span></span><br><span class="line">-<span class="literal">Infinity</span> &lt; <span class="number">-1000</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> &gt; <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line">-<span class="literal">Infinity</span> &gt; <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> &lt; <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line">-<span class="literal">Infinity</span> &lt; <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> * <span class="literal">Infinity</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">5</span> - <span class="literal">Infinity</span>; <span class="comment">// -Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> / <span class="number">5</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">5</span> / <span class="literal">Infinity</span>; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> * <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="number">0</span> / <span class="literal">Infinity</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="literal">Infinity</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> + <span class="literal">Infinity</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> * <span class="literal">Infinity</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> - <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">Infinity</span> / <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> * <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">null</span> / <span class="literal">Infinity</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="literal">Infinity</span> / <span class="literal">null</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> + <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">undefined</span> - <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">undefined</span> * <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">undefined</span> / <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">Infinity</span> / <span class="literal">undefined</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="与数值相关的全局方法"><a href="#与数值相关的全局方法" class="headerlink" title="与数值相关的全局方法"></a>与数值相关的全局方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"123"</span>); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果字符串头部有空格，空格会被自动去除。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"   81"</span>); <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果parseInt的参数不是字符串，则会先转为字符串再转换。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">1.23</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1.23"</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"8a"</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"12**"</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"12.34"</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"15e2"</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"15px"</span>); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回NaN。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"abc"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">".3"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">""</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"+"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"+1"</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt的返回值只有两种可能，要么是一个十进制整数，要么是NaN。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"0x10"</span>); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"011"</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于那些会自动转为科学计数法的数字，parseInt会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">1000000000000000000000.5</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1e+21"</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0.0000008</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"8e-7"</span>); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1000"</span>, <span class="number">2</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1000"</span>, <span class="number">6</span>); <span class="comment">// 216</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1000"</span>, <span class="number">8</span>); <span class="comment">// 512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数是0、undefined和null，则直接忽略。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">37</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">0</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="literal">null</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="literal">undefined</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1546"</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"546"</span>, <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果parseInt的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0x11</span>, <span class="number">36</span>); <span class="comment">// 43</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0x11</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">0x11</span>), <span class="number">36</span>); <span class="comment">// 43</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">0x11</span>), <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"17"</span>, <span class="number">36</span>); <span class="comment">// 43</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"17"</span>, <span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 上面代码中，十六进制的0x11会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串17，最后返回结果43和1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">011</span>, <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">011</span>), <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">String</span>(<span class="number">9</span>), <span class="number">2</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://wangdoc.com/javascript/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 教程 | 网道（WangDoc.com）&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://zyf.im/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>GROUP_CONCAT 截断</title>
    <link href="https://zyf.im/2022/01/10/group-concat-max-len/"/>
    <id>https://zyf.im/2022/01/10/group-concat-max-len/</id>
    <published>2022-01-10T07:53:16.000Z</published>
    <updated>2022-07-28T06:38:45.612Z</updated>
    
    <content type="html"><![CDATA[<p>今日在生产环境发生了：因为 <code>GROUP_CONCAT</code> 聚合的数据列发生截断导致异常，原来 <code>GROUP_CONCAT</code> 是有大小限制的。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@GROUP_CONCAT_MAX_LEN;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1024 bytes</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len" target="_blank" rel="noopener">group_concat_max_len | mysql</a></p></blockquote><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日在生产环境发生了：因为 &lt;code&gt;GROUP_CONCAT&lt;/code&gt; 聚合的数据列发生截断导致异常，原来 &lt;code&gt;GROUP_CONCAT&lt;/code&gt; 是有大小限制的。&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://zyf.im/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>回顾 2021</title>
    <link href="https://zyf.im/2021/12/30/review-2021/"/>
    <id>https://zyf.im/2021/12/30/review-2021/</id>
    <published>2021-12-30T12:16:41.000Z</published>
    <updated>2022-07-28T07:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://music.163.com/#/song?id=25638375" target="_blank" rel="noopener">直到对的人来 · 追星族乐队</a></p><blockquote><p>我想跟他说：那家餐厅太美了，我一定要和你去一次。但是那个菜其实很一般的，那个老板娘戴的耳环特别漂亮。</p></blockquote><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://music.163.com/#/song?id=25638375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;直到对的人来 · 追星族乐队&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;我想跟他说：那家餐厅太美了，我一定要
      
    
    </summary>
    
      <category term="report" scheme="https://zyf.im/categories/report/"/>
    
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 10 - Event</title>
    <link href="https://zyf.im/2021/11/28/reading-yii2-source-code-10/"/>
    <id>https://zyf.im/2021/11/28/reading-yii2-source-code-10/</id>
    <published>2021-11-28T08:19:36.000Z</published>
    <updated>2022-08-12T10:15:19.092Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- yii\base\BaseObject</span><br><span class="line">    |--- Behavior</span><br><span class="line">        |--- ActionFilter</span><br><span class="line">    |</span><br><span class="line">    |--- Component</span><br><span class="line">        |--- Action</span><br><span class="line">            |--- InlineAction</span><br><span class="line">        |</span><br><span class="line">        |--- Controller</span><br><span class="line">        |--- ErrorHandler</span><br><span class="line">        |--- Model</span><br><span class="line">            |--- DynamicModel</span><br><span class="line">        |</span><br><span class="line">        |--- Request</span><br><span class="line">        |--- Response</span><br><span class="line">        |--- Security</span><br><span class="line">        |--- Theme</span><br><span class="line">        |--- View</span><br><span class="line">        |--- Widget</span><br><span class="line">        |--- yii\di\ServiceLocator</span><br><span class="line">            |--- Module</span><br><span class="line">                |--- Application</span><br><span class="line">    |</span><br><span class="line">    |--- Event                       &lt;-- 本节</span><br><span class="line">        |--- ActionEvent</span><br><span class="line">        |--- ModelEvent</span><br><span class="line">        |--- ViewEvent</span><br><span class="line">        |--- WidgetEvent</span><br><span class="line">    |</span><br><span class="line">    |--- Exception</span><br><span class="line">    |--- ExitException</span><br><span class="line">    |--- InvalidParamException</span><br><span class="line">    |--- InvalidValueException</span><br></pre></td></tr></table></figure><p>TODO</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|--- yii\base\BaseObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 09 - Behavior</title>
    <link href="https://zyf.im/2021/11/27/reading-yii2-source-code-09/"/>
    <id>https://zyf.im/2021/11/27/reading-yii2-source-code-09/</id>
    <published>2021-11-27T08:19:36.000Z</published>
    <updated>2022-08-12T10:15:13.617Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- yii\base\BaseObject</span><br><span class="line">    |--- Behavior                  &lt;-- 本节</span><br><span class="line">        |--- ActionFilter</span><br><span class="line">    |</span><br><span class="line">    |--- Component</span><br><span class="line">        |--- Action</span><br><span class="line">            |--- InlineAction</span><br><span class="line">        |</span><br><span class="line">        |--- Controller</span><br><span class="line">        |--- ErrorHandler</span><br><span class="line">        |--- Model</span><br><span class="line">            |--- DynamicModel</span><br><span class="line">        |</span><br><span class="line">        |--- Request</span><br><span class="line">        |--- Response</span><br><span class="line">        |--- Security</span><br><span class="line">        |--- Theme</span><br><span class="line">        |--- View</span><br><span class="line">        |--- Widget</span><br><span class="line">        |--- yii\di\ServiceLocator</span><br><span class="line">            |--- Module</span><br><span class="line">                |--- Application</span><br><span class="line">    |</span><br><span class="line">    |--- Event</span><br><span class="line">        |--- ActionEvent</span><br><span class="line">        |--- ModelEvent</span><br><span class="line">        |--- ViewEvent</span><br><span class="line">        |--- WidgetEvent</span><br><span class="line">    |</span><br><span class="line">    |--- Exception</span><br><span class="line">    |--- ExitException</span><br><span class="line">    |--- InvalidParamException</span><br><span class="line">    |--- InvalidValueException</span><br></pre></td></tr></table></figure><h2 id="Behavior"><a href="#Behavior" class="headerlink" title="Behavior"></a>Behavior</h2><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-behaviors" target="_blank" rel="noopener">行为（Behavior）</a></p></blockquote><p>Behavior 行为，也称为 mixins。 可以无须改变类继承关系即可增强一个已有的 组件 类功能。 当行为附加到组件后，它将“注入”它的方法和属性到组件， 然后可以像访问组件内定义的方法和属性一样访问它们。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 behavior 对象附加到 component。</span></span><br><span class="line"><span class="comment"> * The default implementation will set the [[owner]] property</span></span><br><span class="line"><span class="comment"> * and attach event handlers as declared in [[events]].</span></span><br><span class="line"><span class="comment"> * 如果重写此方法，请确保调用父实现。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 此方法在 Component::attachBehaviorInternal 被调用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Component $owner 要附加此 behavior 的 component</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">($owner)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;owner = $owner;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;events() <span class="keyword">as</span> $event =&gt; $handler) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_attachedEvents[$event] = $handler;</span><br><span class="line">        <span class="comment">// 将 events 通过 on 绑在 Component 上</span></span><br><span class="line">        $owner-&gt;on($event, is_string($handler) ? [<span class="keyword">$this</span>, $handler] : $handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-behaviors"><a href="#yii-behaviors" class="headerlink" title="yii behaviors"></a>yii behaviors</h2><p><code>namespace yii\behaviors;</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\behaviors</span><br><span class="line">|--- AttributeBehavior</span><br><span class="line">    |--- BlameableBehavior</span><br><span class="line">    |        使用当前用户 ID 自动填充指定的属性</span><br><span class="line">    |--- OptimisticLockBehavior</span><br><span class="line">    |        使用返回的列名自动升级模型的乐观锁版本</span><br><span class="line">    |--- SluggableBehavior</span><br><span class="line">    |        将指定属性转换为 slug 并存储</span><br><span class="line">    |--- TimestampBehavior</span><br><span class="line">    |        自动填充指定属性为当前时间戳</span><br><span class="line">|</span><br><span class="line">|--- AttributesBehavior</span><br><span class="line">|        当某些事件发生时，自动为ActiveRecord对象的一个或多个属性分配指定的值</span><br><span class="line">|--- AttributeTypecastBehavior</span><br><span class="line">|        提供了自动模型属性类型转换的能力</span><br><span class="line">|--- CacheableWidgetBehavior</span><br><span class="line">|        可缓存小部件行为根据指定的持续时间和依赖关系自动缓存小部件内容</span><br></pre></td></tr></table></figure><h2 id="base-ActionFilter"><a href="#base-ActionFilter" class="headerlink" title="base ActionFilter"></a>base ActionFilter</h2><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-filters" target="_blank" rel="noopener">过滤器（Filters）</a></p></blockquote><p>过滤器本质上是一类特殊的 行为，所以使用 filter 和使用 behavior 一样。</p><p><code>namespace yii\filters;</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Behavior</span><br><span class="line">|--- ActionFilter</span><br><span class="line">|</span><br><span class="line">    |--- auth\AuthMethod</span><br><span class="line">    | 预置了一些验证方法</span><br><span class="line">        |--- CompositeAuth</span><br><span class="line">        |  组合多种 AuthMethod 验证方式</span><br><span class="line">        |--- HttpBasicAuth</span><br><span class="line">        |  Www-Authenticate: Basic realm=<span class="string">"api"</span></span><br><span class="line">        |--- HttpHeaderAuth</span><br><span class="line">        |  header X-Api-Key</span><br><span class="line">            |--- HttpBearerAuth</span><br><span class="line">            |  header Authorization</span><br><span class="line">        |--- QueryParamAuth</span><br><span class="line">        |  get access-token</span><br><span class="line">    |--- AccessControl</span><br><span class="line">    |</span><br><span class="line">    |--- AjaxFilter</span><br><span class="line">    |  仅允许 ajax 请求</span><br><span class="line">    |--- ContentNegotiator</span><br><span class="line">    |  支持 ContentType 和 Language 的谈判</span><br><span class="line">    |--- Cors</span><br><span class="line">    |  Cross Origin Resource Sharing</span><br><span class="line">    |--- HostControl</span><br><span class="line">    |  控制请求域名</span><br><span class="line">    |--- HttpCache</span><br><span class="line">    |  客户端缓存</span><br><span class="line">    |--- PageCache</span><br><span class="line">    |  服务端缓存</span><br><span class="line">    |--- RateLimiter</span><br><span class="line">    |  漏斗限流</span><br><span class="line">|--- VerbFilter</span><br><span class="line">|  过滤 HTTP methods</span><br><span class="line"></span><br><span class="line">AccessRule 访问规则，配合 AccessControl 使用</span><br></pre></td></tr></table></figure><h3 id="RateLimiter-详解"><a href="#RateLimiter-详解" class="headerlink" title="RateLimiter 详解"></a>RateLimiter 详解</h3><p>TODO</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|--- yii\base\BaseObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 08 - Action</title>
    <link href="https://zyf.im/2021/11/26/reading-yii2-source-code-08/"/>
    <id>https://zyf.im/2021/11/26/reading-yii2-source-code-08/</id>
    <published>2021-11-26T08:19:36.000Z</published>
    <updated>2022-08-04T10:13:59.567Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- yii\base\BaseObject</span><br><span class="line">    |--- Behavior</span><br><span class="line">        |--- ActionFilter</span><br><span class="line">    |</span><br><span class="line">    |--- Component</span><br><span class="line">        |--- Action                &lt;-- 本节</span><br><span class="line">            |--- InlineAction</span><br><span class="line">        |</span><br><span class="line">        |--- Controller</span><br><span class="line">        |--- ErrorHandler</span><br><span class="line">        |--- Model</span><br><span class="line">            |--- DynamicModel</span><br><span class="line">        |</span><br><span class="line">        |--- Request</span><br><span class="line">        |--- Response</span><br><span class="line">        |--- Security</span><br><span class="line">        |--- Theme</span><br><span class="line">        |--- View</span><br><span class="line">        |--- Widget</span><br><span class="line">        |--- yii\di\ServiceLocator</span><br><span class="line">            |--- Module</span><br><span class="line">                |--- Application</span><br><span class="line">    |</span><br><span class="line">    |--- Event</span><br><span class="line">        |--- ActionEvent</span><br><span class="line">        |--- ModelEvent</span><br><span class="line">        |--- ViewEvent</span><br><span class="line">        |--- WidgetEvent</span><br><span class="line">    |</span><br><span class="line">    |--- Exception</span><br><span class="line">    |--- ExitException</span><br><span class="line">    |--- InvalidParamException</span><br><span class="line">    |--- InvalidValueException</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- \ErrorException</span><br><span class="line">    |--- ErrorException</span><br><span class="line"></span><br><span class="line">|--- \Exception</span><br><span class="line">    |--- Exception</span><br><span class="line">        |--- InvalidConfigException</span><br><span class="line">        |--- UserException</span><br><span class="line">            |--- InvalidRouteException</span><br><span class="line"></span><br><span class="line">        |--- NotSupportedException</span><br><span class="line">        |--- UnknownClassException</span><br><span class="line">        |--- UnknownPropertyException</span><br><span class="line"></span><br><span class="line">    |--- ExitException</span><br><span class="line"></span><br><span class="line">|--- \BadMethodCallException</span><br><span class="line">    |--- InvalidParamException</span><br><span class="line">        |--- InvalidArgumentException</span><br><span class="line">            |--- ViewNotFoundException</span><br><span class="line"></span><br><span class="line">    |--- InvalidCallException</span><br><span class="line">    |--- UnknownMethodException</span><br><span class="line"></span><br><span class="line">|--- \UnexpectedValueException</span><br><span class="line">    |--- InvalidValueException</span><br></pre></td></tr></table></figure><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base</span><br><span class="line">|--- Action.php</span><br><span class="line">    |--- ActionEvent.php</span><br></pre></td></tr></table></figure><blockquote><p>Action is the base class for all controller action classes.</p></blockquote><p>Action 提供了一种重用 action method 的方法。即：Action 类中的 action 方法可以在多个控制器或不同的项目中使用。</p><p>派生类必须实现名为 <code>run()</code> 的方法。这个方法将在请求动作时被控制器调用。</p><p><code>run()</code> 方法可以具有参数，这些参数将根据其名称自动填充用户输入值。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($id, $type = <span class="string">'book'</span>)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>属性：</p><ul><li><code>@property-read string $uniqueId</code> 此 action 在整个应用程序中的唯一 ID。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs this action with the specified parameters.</span></span><br><span class="line"><span class="comment"> * 此方法主要由控制器调用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params 被绑定到 run() 方法的参数。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed the result of the action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException 如果这个 action 没有 run() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">runWithParams</span><span class="params">($params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 检查是否有 run 方法</span></span><br><span class="line">    <span class="keyword">if</span> (!method_exists(<span class="keyword">$this</span>, <span class="string">'run'</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(get_class(<span class="keyword">$this</span>) . <span class="string">' must define a "run()" method.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// yii\web\Controller::bindActionParams</span></span><br><span class="line">    <span class="comment">// yii\console\Controller::bindActionParams</span></span><br><span class="line">    <span class="comment">// 参考 07 - Controller</span></span><br><span class="line">    $args = <span class="keyword">$this</span>-&gt;controller-&gt;bindActionParams(<span class="keyword">$this</span>, $params);</span><br><span class="line">    Yii::debug(<span class="string">'Running action: '</span> . get_class(<span class="keyword">$this</span>) . <span class="string">'::run(), invoked by '</span>  . get_class(<span class="keyword">$this</span>-&gt;controller), <span class="keyword">__METHOD__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只查到赋值 没有查到取值使用</span></span><br><span class="line">    <span class="keyword">if</span> (Yii::$app-&gt;requestedParams === <span class="keyword">null</span>) &#123;</span><br><span class="line">        Yii::$app-&gt;requestedParams = $args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hook</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;beforeRun()) &#123;</span><br><span class="line">        $result = call_user_func_array([<span class="keyword">$this</span>, <span class="string">'run'</span>], $args);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;afterRun();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|--- yii\base\BaseObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 07 - Controller</title>
    <link href="https://zyf.im/2021/11/25/reading-yii2-source-code-07/"/>
    <id>https://zyf.im/2021/11/25/reading-yii2-source-code-07/</id>
    <published>2021-11-25T03:32:03.000Z</published>
    <updated>2022-08-04T10:14:36.900Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- yii\base\BaseObject</span><br><span class="line">    |--- Behavior</span><br><span class="line">        |--- ActionFilter</span><br><span class="line">    |</span><br><span class="line">    |--- Component</span><br><span class="line">        |--- Action</span><br><span class="line">            |--- InlineAction</span><br><span class="line">        |</span><br><span class="line">        |--- Controller            &lt;-- 本节</span><br><span class="line">        |--- ErrorHandler</span><br><span class="line">        |--- Model</span><br><span class="line">            |--- DynamicModel</span><br><span class="line">        |</span><br><span class="line">        |--- Request</span><br><span class="line">        |--- Response</span><br><span class="line">        |--- Security</span><br><span class="line">        |--- Theme</span><br><span class="line">        |--- View</span><br><span class="line">        |--- Widget</span><br><span class="line">        |--- yii\di\ServiceLocator</span><br><span class="line">            |--- Module</span><br><span class="line">                |--- Application</span><br><span class="line">    |</span><br><span class="line">    |--- Event</span><br><span class="line">        |--- ActionEvent</span><br><span class="line">        |--- ModelEvent</span><br><span class="line">        |--- ViewEvent</span><br><span class="line">        |--- WidgetEvent</span><br><span class="line">    |</span><br><span class="line">    |--- Exception</span><br><span class="line">    |--- ExitException</span><br><span class="line">    |--- InvalidParamException</span><br><span class="line">    |--- InvalidValueException</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- yii\base\Controller</span><br><span class="line">    |--- yii\web\Controller</span><br><span class="line">        |--- yii\rest\Controller</span><br><span class="line">            |--- ActiveController</span><br><span class="line"></span><br><span class="line">    |--- yii\console\Controller</span><br><span class="line">        |--- AssetController</span><br><span class="line">        |--- BaseMigrateController</span><br><span class="line">            |--- MigrateController</span><br><span class="line"></span><br><span class="line">        |--- CacheController</span><br><span class="line">        |--- FixtureController</span><br><span class="line">        |--- HelpController</span><br><span class="line">        |--- ServeController</span><br></pre></td></tr></table></figure><h2 id="yii-base-Controller"><a href="#yii-base-Controller" class="headerlink" title="yii\base\Controller"></a>yii\base\Controller</h2><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-controllers" target="_blank" rel="noopener">控制器（Controllers）</a></p></blockquote><p>属性：</p><ul><li><code>@property-read Module[] $modules</code> 此控制器所在的所有祖先模块。</li><li><code>@property-read string $route</code> 当前请求的路由(module ID, controller ID and action ID)。</li><li><code>@property-read string $uniqueId</code> 以模块 ID(如果有)作为前缀的控制器 ID。可以理解为路由路径。</li><li><code>@property View|\yii\web\View $view</code> 可以用来呈现视图或视图文件的视图对象。</li><li><code>@property string $viewPath</code> 包含此控制器的视图文件的目录。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">Component</span> <span class="keyword">implements</span> <span class="title">ViewContextInterface</span></span></span><br></pre></td></tr></table></figure><p>ViewContextInterface 是那些想要 support relative view names 的类应该实现的接口。</p><ul><li><code>public function getViewPath();</code> 返回以相对视图名作为前缀的视图路径。</li></ul><p>属性：</p><ul><li><code>string $id</code> controller ID。</li><li><code>Module $module controller</code> 所属 module。</li><li><code>string $defaultAction</code> 当请求中没有指定 action ID 时使用的 action ID。默认 ‘index’。</li><li><code>null|string|false $layout</code> 要应用于此控制器视图的布局的名称。此属性主要影响 <code>render()</code> 的行为。默认为 null，意味着实际的布局值应该从 <code>module</code> 的布局值继承。如果为 false，将不应用布局。</li><li><code>Action|null $action</code> 当前正在执行的 action。当 Application 调用该属性来运行一个 action 时，<code>run()</code> 将设置该属性。</li><li><code>Request|array|string $request</code></li><li><code>Response|array|string $response</code></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为控制器声明外部 actions。</span></span><br><span class="line"><span class="comment"> * 这个方法应该被覆盖以声明控制器的外部操作。</span></span><br><span class="line"><span class="comment"> * 它应该返回一个数组，其中数组键是操作id，数组值是对应的操作类名或操作配置数组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Yii::createObject() 稍后将使用这里提供的配置来创建请求的操作。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'action1'</span> =&gt; <span class="string">'app\components\Action1'</span>,</span><br><span class="line">    <span class="string">'action2'</span> =&gt; [</span><br><span class="line">      <span class="string">'class'</span> =&gt; <span class="string">'app\components\Action2'</span>,</span><br><span class="line">      <span class="string">'property1'</span> =&gt; <span class="string">'value1'</span>,</span><br><span class="line">      <span class="string">'property2'</span> =&gt; <span class="string">'value2'</span>,</span><br><span class="line">    ],</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用指定的 action ID 和参数在该控制器中运行一个 action。</span></span><br><span class="line"><span class="comment"> * 如果 action ID 为空，该方法将使用 defaultAction。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $id 需要执行的 action ID。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params 要传递给 action 的参数(名称-值对 name-value pairs)。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed the result of the action.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidRouteException 如果请求的 action ID 不能成功解析为 action。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> createAction()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">runAction</span><span class="params">($id, $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 根据 ID 得到一个 Action 对象</span></span><br><span class="line">    $action = <span class="keyword">$this</span>-&gt;createAction($id);</span><br><span class="line">    <span class="keyword">if</span> ($action === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRouteException(<span class="string">'Unable to resolve the request: '</span> . <span class="keyword">$this</span>-&gt;getUniqueId() . <span class="string">'/'</span> . $id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Yii::debug(<span class="string">'Route to run: '</span> . $action-&gt;getUniqueId(), <span class="keyword">__METHOD__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录当前 Action</span></span><br><span class="line">    <span class="keyword">if</span> (Yii::$app-&gt;requestedAction === <span class="keyword">null</span>) &#123;</span><br><span class="line">        Yii::$app-&gt;requestedAction = $action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取上一个 Action</span></span><br><span class="line">    $oldAction = <span class="keyword">$this</span>-&gt;action;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;action = $action;</span><br><span class="line"></span><br><span class="line">    $modules = [];</span><br><span class="line">    $runAction = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call beforeAction on modules</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getModules() <span class="keyword">as</span> $module) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// $event = new ActionEvent($action);</span></span><br><span class="line">        <span class="comment">// $this-&gt;trigger(self::EVENT_BEFORE_ACTION, $event);</span></span><br><span class="line">        <span class="comment">// return $event-&gt;isValid;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> ($module-&gt;beforeAction($action)) &#123;</span><br><span class="line">            <span class="comment">// 在数组开头插入</span></span><br><span class="line">            array_unshift($modules, $module);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $runAction = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和 $module-&gt;beforeAction($action) 实现一样</span></span><br><span class="line">    <span class="keyword">if</span> ($runAction &amp;&amp; <span class="keyword">$this</span>-&gt;beforeAction($action)) &#123;</span><br><span class="line">        <span class="comment">// run the action</span></span><br><span class="line">        <span class="comment">// 这里有点疑问 为什么不直接调用 $action-&gt;run 呢?</span></span><br><span class="line">        <span class="comment">// 现在理解可能是为了对 run 在进行封装操作，提交 action 的 beforeRun &amp; afterRun</span></span><br><span class="line">        $result = $action-&gt;runWithParams($params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// $event = new ActionEvent($action);</span></span><br><span class="line">        <span class="comment">// $event-&gt;result = $result;</span></span><br><span class="line">        <span class="comment">// $this-&gt;trigger(self::EVENT_AFTER_ACTION, $event);</span></span><br><span class="line">        <span class="comment">// return $event-&gt;result;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;afterAction($action, $result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// call afterAction on modules</span></span><br><span class="line">        <span class="keyword">foreach</span> ($modules <span class="keyword">as</span> $module) &#123;</span><br><span class="line">            <span class="comment">/* <span class="doctag">@var</span> $module Module */</span></span><br><span class="line">            $result = $module-&gt;afterAction($action, $result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($oldAction !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;action = $oldAction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据给定的 action ID 创建 action。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法首先检查 action ID 是否在 actions() 中声明。</span></span><br><span class="line"><span class="comment"> * 如果是，它将使用声明的配置来创建 action 对象。</span></span><br><span class="line"><span class="comment"> * 如果不是，它将寻找一个名称为 actionXyz 格式的控制器方法，其中 xyz 是 action ID。</span></span><br><span class="line"><span class="comment"> *   如果找到，表示该方法的 InlineAction 将被创建并返回，否则返回 null。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $id the action ID.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Action|null 新创建的操作实例。如果 ID 没有分解为任何操作，则为空。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createAction</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($id === <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="comment">// 设置默认 action id index</span></span><br><span class="line">      $id = <span class="keyword">$this</span>-&gt;defaultAction;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $actionMap = <span class="keyword">$this</span>-&gt;actions();</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($actionMap[$id])) &#123;</span><br><span class="line">      <span class="comment">// 存在于 actions()</span></span><br><span class="line">      <span class="keyword">return</span> Yii::createObject($actionMap[$id], [$id, <span class="keyword">$this</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="string">'/^(?:[a-z0-9_]+-)*[a-z0-9_]+$/'</span>, $id)) &#123;</span><br><span class="line">      <span class="comment">// xyz-abc =&gt; actionXyzAbc</span></span><br><span class="line">      <span class="comment">// 中划线转大驼峰</span></span><br><span class="line">      $methodName = <span class="string">'action'</span> . str_replace(<span class="string">' '</span>, <span class="string">''</span>, ucwords(str_replace(<span class="string">'-'</span>, <span class="string">' '</span>, $id)));</span><br><span class="line">      <span class="comment">// 验证方法是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, $methodName)) &#123;</span><br><span class="line">          $method = <span class="keyword">new</span> \ReflectionMethod(<span class="keyword">$this</span>, $methodName);</span><br><span class="line">          <span class="keyword">if</span> ($method-&gt;isPublic() &amp;&amp; $method-&gt;getName() === $methodName) &#123;</span><br><span class="line">              <span class="comment">// method 需要 public &amp;&amp; method name 相等</span></span><br><span class="line">              <span class="comment">// 内联 Action</span></span><br><span class="line">              <span class="comment">// 将 ctrl 中的方法封装成了一个 InlineAction 对象</span></span><br><span class="line">              <span class="comment">// InlineAction runWithParams 就是调用这个 ctrl 的这个方法</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> InlineAction($id, <span class="keyword">$this</span>, $methodName);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 运行根据路由指定的请求。</span></span><br><span class="line"><span class="comment">  * 路由可以是该控制器内某个 action ID，也可以是由模块ID、控制器ID和动作ID组成的完整路由。</span></span><br><span class="line"><span class="comment">  * 如果路由以斜线 '/' 开头，则解析该路由将从应用程序开始；</span></span><br><span class="line"><span class="comment">  * 否则，它将从该控制器的父模块开始。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $route the route to be handled, e.g., 'view', 'comment/view', '/admin/comment/view'.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $params the parameters to be passed to the action.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> mixed the result of the action.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> runAction()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($route, $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $pos = strpos($route, <span class="string">'/'</span>);</span><br><span class="line">  <span class="keyword">if</span> ($pos === <span class="keyword">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 没有 /，从 ctrl 下开始</span></span><br><span class="line">      <span class="comment">// 'view'</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runAction($route, $params);</span><br><span class="line">  &#125; <span class="keyword">elseif</span> ($pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 包含 /，从模块下开始</span></span><br><span class="line">      <span class="comment">// 'comment/view'</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;module-&gt;runAction($route, $params);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果路由以斜线 '/' 开头，则解析该路由将从应用程序开始</span></span><br><span class="line">  <span class="comment">// '/admin/comment/view'</span></span><br><span class="line">  <span class="keyword">return</span> Yii::$app-&gt;runAction(ltrim($route, <span class="string">'/'</span>), $params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据动作方法签名中的类型和名称填充参数。</span></span><br><span class="line"><span class="comment">  * Fills parameters based on types and names in action method signature.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> \ReflectionType $type 动作参数的反射类型。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $name The name of the parameter.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array &amp;$args 动作的参数数组，此函数可以将项目附加到它。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array &amp;$requestedParams 具有请求参数的数组，此函数可能会向其写入特定键。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> ErrorException when we cannot load a required service.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> InvalidConfigException Thrown when there is an error in the DI configuration.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> NotInstantiableException 在容器中没有正确定义的情况下无法将定义解析为具体类（例如接口类型提示）时抛出。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@since</span> 2.0.36</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bindInjectedParams</span><span class="params">(\ReflectionType $type, $name, &amp;$args, &amp;$requestedParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Since it is not a builtin type it must be DI injection.</span></span><br><span class="line">    <span class="comment">// 由于它不是内置类型，因此必须是 DI 注入。</span></span><br><span class="line">    $typeName = $type-&gt;getName();</span><br><span class="line">    <span class="keyword">if</span> (($component = <span class="keyword">$this</span>-&gt;module-&gt;get($name, <span class="keyword">false</span>)) <span class="keyword">instanceof</span> $typeName) &#123;</span><br><span class="line">        $args[] = $component;</span><br><span class="line">        $requestedParams[$name] = <span class="string">"Component: "</span> . get_class($component) . <span class="string">" \$$name"</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;module-&gt;has($typeName) &amp;&amp; ($service = <span class="keyword">$this</span>-&gt;module-&gt;get($typeName)) <span class="keyword">instanceof</span> $typeName) &#123;</span><br><span class="line">        $args[] = $service;</span><br><span class="line">        $requestedParams[$name] = <span class="string">'Module '</span> . get_class(<span class="keyword">$this</span>-&gt;module) . <span class="string">" DI: $typeName \$$name"</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (\Yii::$container-&gt;has($typeName) &amp;&amp; ($service = \Yii::$container-&gt;get($typeName)) <span class="keyword">instanceof</span> $typeName) &#123;</span><br><span class="line">        $args[] = $service;</span><br><span class="line">        $requestedParams[$name] = <span class="string">"Container DI: $typeName \$$name"</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($type-&gt;allowsNull()) &#123;</span><br><span class="line">        $args[] = <span class="keyword">null</span>;</span><br><span class="line">        $requestedParams[$name] = <span class="string">"Unavailable service: $name"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Could not load required service: '</span> . $name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法还不清楚作用，是在 web/Controller console/Controller 中被调用。</span></span><br></pre></td></tr></table></figure><h2 id="yii-web-Controller"><a href="#yii-web-Controller" class="headerlink" title="yii\web\Controller"></a>yii\web\Controller</h2><p>属性：</p><ul><li><code>bool $enableCsrfValidation</code> 是否对该控制器中的 actions 启用 CSRF 验证。只有当这个 property 和 <code>yii\web\Request::enableCsrfValidation</code> 都为 true 时，CSRF 验证才被启用。</li><li><code>array $actionParams</code> 绑定到当前 action 的参数。</li></ul><p>方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应 AJAX 请求呈现视图。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个方法类似于 renderPartial()，不同的是它会用 JS/CSS 脚本和注册在视图中的文件注入到渲染结果中。</span></span><br><span class="line"><span class="comment"> * 出于这个原因，您应该使用此方法而不是 renderPartial() 来呈现一个视图以响应 AJAX 请求。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $view the view name. Please refer to [[render()]] on how to specify a view name.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params the parameters (name-value pairs) that should be made available in the view.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string the rendering result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderAjax</span><span class="params">($view, $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getView()-&gt;renderAjax($view, $params, <span class="keyword">$this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法没有使用过 还不清楚作用</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Send data formatted as JSON.</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">asJson</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;response-&gt;format = Response::FORMAT_JSON;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;response-&gt;data = $data;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return $this-&gt;asJson($data);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Send data formatted as XML.</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">asXml</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;response-&gt;format = Response::FORMAT_XML;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;response-&gt;data = $data;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return $this-&gt;asXml($data);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两个方法异曲同工，操作 response 的 format 类型。框架已内置的方法。</span></span><br></pre></td></tr></table></figure><p>非常核心的方法，在 Action 中的 runWithParams 里调用：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将参数绑定到 action。</span></span><br><span class="line"><span class="comment"> * 当 \yii\base\Action 以给定的参数开始运行时，该方法被 \yii\base\Action 调用。</span></span><br><span class="line"><span class="comment"> * 该方法将检查操作需要的参数名称，并根据需求返回他提供的参数。</span></span><br><span class="line"><span class="comment"> * 如果有任何丢失的参数，就会抛出异常。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> \yii\base\Action $action 要用参数绑定的 action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params 要绑定到 action 的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array action 可以使用的有效参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BadRequestHttpException if there are missing or invalid parameters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bindActionParams</span><span class="params">($action, $params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取 action 要执行的方法</span></span><br><span class="line">    <span class="keyword">if</span> ($action <span class="keyword">instanceof</span> InlineAction) &#123;</span><br><span class="line">        $method = <span class="keyword">new</span> \ReflectionMethod(<span class="keyword">$this</span>, $action-&gt;actionMethod);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $method = <span class="keyword">new</span> \ReflectionMethod($action, <span class="string">'run'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $args = [];</span><br><span class="line">    $missing = [];</span><br><span class="line">    $actionParams = [];</span><br><span class="line">    $requestedParams = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量方法参数</span></span><br><span class="line">    <span class="keyword">foreach</span> ($method-&gt;getParameters() <span class="keyword">as</span> $param) &#123;</span><br><span class="line">        <span class="comment">// 参数名</span></span><br><span class="line">        $name = $param-&gt;getName();</span><br><span class="line">        <span class="comment">// 验证参数类型</span></span><br><span class="line">        <span class="keyword">if</span> (array_key_exists($name, $params)) &#123;</span><br><span class="line">            $isValid = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (PHP_VERSION_ID &gt;= <span class="number">80000</span>) &#123;</span><br><span class="line">                $isArray = ($type = $param-&gt;getType()) <span class="keyword">instanceof</span> \ReflectionNamedType &amp;&amp; $type-&gt;getName() === <span class="string">'array'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $isArray = $param-&gt;isArray();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($isArray) &#123;</span><br><span class="line">                <span class="comment">// 参数是数组</span></span><br><span class="line">                $params[$name] = (<span class="keyword">array</span>)$params[$name];</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (is_array($params[$name])) &#123;</span><br><span class="line">                $isValid = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (</span><br><span class="line">                PHP_VERSION_ID &gt;= <span class="number">70000</span></span><br><span class="line">                &amp;&amp; ($type = $param-&gt;getType()) !== <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; $type-&gt;isBuiltin()</span><br><span class="line">                &amp;&amp; ($params[$name] !== <span class="keyword">null</span> || !$type-&gt;allowsNull())</span><br><span class="line">            ) &#123;</span><br><span class="line">                $typeName = PHP_VERSION_ID &gt;= <span class="number">70100</span> ? $type-&gt;getName() : (string)$type;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ($params[$name] === <span class="string">''</span> &amp;&amp; $type-&gt;allowsNull()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ($typeName !== <span class="string">'string'</span>) &#123; <span class="comment">// for old string behavior compatibility</span></span><br><span class="line">                        $params[$name] = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">switch</span> ($typeName) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'int'</span>:</span><br><span class="line">                            $params[$name] = filter_var($params[$name], FILTER_VALIDATE_INT, FILTER_NULL_ON_FAILURE);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'float'</span>:</span><br><span class="line">                            $params[$name] = filter_var($params[$name], FILTER_VALIDATE_FLOAT, FILTER_NULL_ON_FAILURE);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'bool'</span>:</span><br><span class="line">                            $params[$name] = filter_var($params[$name], FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ($params[$name] === <span class="keyword">null</span>) &#123;</span><br><span class="line">                        $isValid = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!$isValid) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestHttpException(</span><br><span class="line">                    Yii::t(<span class="string">'yii'</span>, <span class="string">'Invalid data received for parameter "&#123;param&#125;".'</span>, [<span class="string">'param'</span> =&gt; $name])</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            $args[] = $actionParams[$name] = $params[$name];</span><br><span class="line">            <span class="keyword">unset</span>($params[$name]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (PHP_VERSION_ID &gt;= <span class="number">70100</span> &amp;&amp; ($type = $param-&gt;getType()) !== <span class="keyword">null</span> &amp;&amp; !$type-&gt;isBuiltin()) &#123;</span><br><span class="line">            <span class="comment">// !$type-&gt;isBuiltin() 不是内建类型</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;bindInjectedParams($type, $name, $args, $requestedParams);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (HttpException $e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> $e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServerErrorHttpException($e-&gt;getMessage(), <span class="number">0</span>, $e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($param-&gt;isDefaultValueAvailable()) &#123;</span><br><span class="line">            $args[] = $actionParams[$name] = $param-&gt;getDefaultValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $missing[] = $name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($missing)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestHttpException(</span><br><span class="line">            Yii::t(<span class="string">'yii'</span>, <span class="string">'Missing required parameters: &#123;params&#125;'</span>, [<span class="string">'params'</span> =&gt; implode(<span class="string">', '</span>, $missing)])</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;actionParams = $actionParams;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We use a different array here, specifically one that doesn't contain service instances but descriptions instead.</span></span><br><span class="line">    <span class="keyword">if</span> (Yii::$app-&gt;requestedParams === <span class="keyword">null</span>) &#123;</span><br><span class="line">        Yii::$app-&gt;requestedParams = array_merge($actionParams, $requestedParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-console-Controller"><a href="#yii-console-Controller" class="headerlink" title="yii\console\Controller"></a>yii\console\Controller</h2><p><code>yii &lt;route&gt; [--param1=value1 --param2 ...]</code></p><p>属性：</p><ul><li>@property-read string $help</li><li>@property-read string $helpSummary</li><li>@property-read array $passedOptionValues 与传递的选项对应的属性。</li><li>@property-read array $passedOptions 执行期间传递的选项的名称。</li><li>public $interactive = true; 是否以交互方式运行命令。</li><li>public $silentExitOnException; 如果为真 - 脚本以 <code>ExitCode::OK</code> 结束，以防出现异常。Default: <code>YII_ENV_TEST</code>.</li></ul><p>方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用指定的操作 ID 和参数运行操作。</span></span><br><span class="line"><span class="comment">  * 如果动作 ID 为空，该方法将使用 [[defaultAction]]。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $id the ID of the action to be executed.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $params the parameters (name-value pairs) to be passed to the action.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> int the status of the action execution. 0 means normal, other values mean abnormal.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> InvalidRouteException if the requested action ID cannot be resolved into an action successfully.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception if there are unknown options or missing arguments</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> createAction</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">runAction</span><span class="params">($id, $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($params)) &#123;</span><br><span class="line">        <span class="comment">// 在此处填充选项，以便它们在 beforeAction() 中可用。</span></span><br><span class="line">        $options = <span class="keyword">$this</span>-&gt;options($id === <span class="string">''</span> ? <span class="keyword">$this</span>-&gt;defaultAction : $id);</span><br><span class="line">        <span class="comment">// 是否设置了别名</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($params[<span class="string">'_aliases'</span>])) &#123;</span><br><span class="line">            $optionAliases = <span class="keyword">$this</span>-&gt;optionAliases();</span><br><span class="line">            <span class="keyword">foreach</span> ($params[<span class="string">'_aliases'</span>] <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array_key_exists($name, $optionAliases)) &#123;</span><br><span class="line">                    $params[$optionAliases[$name]] = $value;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $message = Yii::t(<span class="string">'yii'</span>, <span class="string">'Unknown alias: -&#123;name&#125;'</span>, [<span class="string">'name'</span> =&gt; $name]);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">empty</span>($optionAliases)) &#123;</span><br><span class="line">                        $aliasesAvailable = [];</span><br><span class="line">                        <span class="keyword">foreach</span> ($optionAliases <span class="keyword">as</span> $alias =&gt; $option) &#123;</span><br><span class="line">                            $aliasesAvailable[] = <span class="string">'-'</span> . $alias . <span class="string">' (--'</span> . $option . <span class="string">')'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        $message .= <span class="string">'. '</span> . Yii::t(<span class="string">'yii'</span>, <span class="string">'Aliases available: &#123;aliases&#125;'</span>, [</span><br><span class="line">                            <span class="string">'aliases'</span> =&gt; implode(<span class="string">', '</span>, $aliasesAvailable)</span><br><span class="line">                        ]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>($message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">unset</span>($params[<span class="string">'_aliases'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历参数</span></span><br><span class="line">        <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            <span class="comment">// 允许在 kebab-case 中输入 camelCase 选项</span></span><br><span class="line">            <span class="keyword">if</span> (!in_array($name, $options, <span class="keyword">true</span>) &amp;&amp; strpos($name, <span class="string">'-'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">                $kebabName = $name;</span><br><span class="line">                $altName = lcfirst(Inflector::id2camel($kebabName));</span><br><span class="line">                <span class="keyword">if</span> (in_array($altName, $options, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                    $name = $altName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($name, $options, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                $default = <span class="keyword">$this</span>-&gt;$name;</span><br><span class="line">                <span class="keyword">if</span> (is_array($default) &amp;&amp; is_string($value)) &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;$name = preg_split(<span class="string">'/\s*,\s*(?![^()]*\))/'</span>, $value);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> ($default !== <span class="keyword">null</span>) &#123;</span><br><span class="line">                    settype($value, gettype($default));</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;$name = $value;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;$name = $value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_passedOptions[] = $name;</span><br><span class="line">                <span class="keyword">unset</span>($params[$name]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>($kebabName)) &#123;</span><br><span class="line">                    <span class="keyword">unset</span>($params[$kebabName]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (!is_int($name)) &#123;</span><br><span class="line">                $message = Yii::t(<span class="string">'yii'</span>, <span class="string">'Unknown option: --&#123;name&#125;'</span>, [<span class="string">'name'</span> =&gt; $name]);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">empty</span>($options)) &#123;</span><br><span class="line">                    $message .= <span class="string">'. '</span> . Yii::t(<span class="string">'yii'</span>, <span class="string">'Options available: &#123;options&#125;'</span>, [<span class="string">'options'</span> =&gt; <span class="string">'--'</span> . implode(<span class="string">', --'</span>, $options)]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>($message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;help) &#123;</span><br><span class="line">        <span class="comment">// 没有参数 &amp; 开启帮助时执行到</span></span><br><span class="line">        <span class="comment">// yii\console\controllers\HelpController</span></span><br><span class="line">        $route = <span class="keyword">$this</span>-&gt;getUniqueId() . <span class="string">'/'</span> . $id;</span><br><span class="line">        <span class="keyword">return</span> Yii::$app-&gt;runAction(<span class="string">'help'</span>, [$route]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">parent</span>::runAction($id, $params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-rest-Controller"><a href="#yii-rest-Controller" class="headerlink" title="yii\rest\Controller"></a>yii\rest\Controller</h2><ol><li>Resolving response format (see <code>ContentNegotiator</code>);</li><li>Validating request method (see <code>verbs()</code>).</li><li>Authenticating user (see <code>\yii\filters\auth\AuthInterface</code>);</li><li>Rate limiting (see <code>RateLimiter</code>);</li><li>Formatting response data (see <code>serializeData()</code>).</li></ol><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|--- yii\base\BaseObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP 安装 gRPC</title>
    <link href="https://zyf.im/2021/10/13/php-install-grpc/"/>
    <id>https://zyf.im/2021/10/13/php-install-grpc/</id>
    <published>2021-10-13T07:48:41.000Z</published>
    <updated>2021-10-13T08:49:58.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br><span class="line"></span><br><span class="line">CentOS Linux release 7.2 (Final)</span><br><span class="line"></span><br><span class="line">uname -a</span><br><span class="line">Linux xxx-xxx 3.10.107-1-tlinux2_kvm_guest-0052 <span class="comment">#1 SMP Wed Jan 15 18:42:19 CST 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h2 id="PECL"><a href="#PECL" class="headerlink" title="PECL"></a>PECL</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pecl install grpc</span><br></pre></td></tr></table></figure><p>如果遇到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Connection to `ssl://pecl.php.net:443′ failed:</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="/2020/08/07/deploy-swoft-framework/">PHP Swoft 框架环境配置 | ZYF.IM</a></p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><h3 id="通用手动安装-PECL-扩展"><a href="#通用手动安装-PECL-扩展" class="headerlink" title="通用手动安装 PECL 扩展"></a>通用手动安装 PECL 扩展</h3><p>For this to work, you’ll need to have root access to your server, and you’ll most probably need developer tools installed as well.</p><blockquote><p><a href="https://pecl.php.net/" target="_blank" rel="noopener">https://pecl.php.net/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建临时目录</span></span><br><span class="line">mkdir /tmp/download/ &amp;&amp; <span class="built_in">cd</span> /tmp/download/</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://pecl.php.net/get/[extension].tgz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf [extension].tgz</span><br><span class="line"><span class="built_in">cd</span> [extension]</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">phpize</span><br><span class="line"><span class="comment"># 查看参数</span></span><br><span class="line">./configure --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 设置参考 以实际情况为准</span></span><br><span class="line">./configure --<span class="built_in">enable</span>-[extension]</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make &amp;&amp; make <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 查看 ini 路径</span></span><br><span class="line">php --ini</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">vi [php-ini].ini</span><br><span class="line">extension=[extension].so</span><br></pre></td></tr></table></figure><h3 id="gcc-is-currently-not-installed"><a href="#gcc-is-currently-not-installed" class="headerlink" title="gcc is currently not installed"></a>gcc is currently not installed</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line">...already installed and latest version...</span><br><span class="line"></span><br><span class="line">gcc</span><br><span class="line"></span><br><span class="line">...gcc is currently not installed.</span><br><span class="line"></span><br><span class="line">yum reinstall gcc</span><br><span class="line"><span class="comment"># 重新安装后解决</span></span><br></pre></td></tr></table></figure><h3 id="GrpcLb-TokenAndClientStatsAttribute-ToString-const"><a href="#GrpcLb-TokenAndClientStatsAttribute-ToString-const" class="headerlink" title="GrpcLb::TokenAndClientStatsAttribute::ToString() const"></a>GrpcLb::TokenAndClientStatsAttribute::ToString() const</h3><p>原因：gcc 版本过低。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl</span><br><span class="line"></span><br><span class="line">yum install devtoolset-8-gcc*</span><br><span class="line"></span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-8 bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /opt/rh/devtoolset-8/<span class="built_in">enable</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://cloud.google.com/php/grpc" target="_blank" rel="noopener">安装适用于 PHP 的 gRPC | cloud.google</a></li><li><a href="https://www.jianshu.com/p/387b7a46d9fd" target="_blank" rel="noopener">PHP 安装 grpc 扩展报错 | jianshu</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ENV&quot;&gt;&lt;a href=&quot;#ENV&quot; class=&quot;headerlink&quot; title=&quot;ENV&quot;&gt;&lt;/a&gt;ENV&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 06 - DI</title>
    <link href="https://zyf.im/2021/09/17/reading-yii2-source-code-06/"/>
    <id>https://zyf.im/2021/09/17/reading-yii2-source-code-06/</id>
    <published>2021-09-17T06:20:07.000Z</published>
    <updated>2022-02-11T08:39:47.395Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\di</span><br><span class="line">|--- Container.php</span><br><span class="line">|--- Instance.php</span><br><span class="line">|--- NotInstantiableException.php</span><br><span class="line">|--- ServiceLocator.php</span><br></pre></td></tr></table></figure><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-di-container" target="_blank" rel="noopener">依赖注入容器（Dependency Injection Container）</a></p></blockquote><h2 id="Instance"><a href="#Instance" class="headerlink" title="Instance"></a>Instance</h2><p>Instance 代表 依赖注入(DI)容器 或 服务定位器 中已命名对象的一个引用。</p><p>可以使用 get() 来获取 id 引用的实际对象。</p><p>Instance 主要用于两个地方：</p><ul><li>在配置依赖项注入容器时，使用 Instance 引用类名、接口名或别名。容器可以稍后将引用解析为实际对象。</li><li><p>在使用服务定位器来获取依赖对象的类中。</p></li><li><p><code>public $id;</code> the component ID, class name, interface name or alias name</p></li><li><code>public $optional;</code> 如果应该返回 null 而不是抛出异常</li></ul><h3 id="ensure"><a href="#ensure" class="headerlink" title="ensure"></a>ensure</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将指定的 引用 解析为 实际对象，并确保它属于指定的类型。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 引用可以指定为字符串或实例对象。如果是前者，它将被视为组件ID、类/接口名称或别名，这取决于容器类型。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果不指定 container，该方法将首先尝试 `Yii::$app`，然后是 `Yii::$container`。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object|string|array|static $reference 一个对象或对所需对象的引用。</span></span><br><span class="line"><span class="comment"> * You may specify a reference in terms of a component ID or an Instance object.</span></span><br><span class="line"><span class="comment"> * Starting from version 2.0.2, you may also pass in a configuration array for creating the object.</span></span><br><span class="line"><span class="comment"> * If the "class" value is not specified in the configuration array, it will use the value of `$type`.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $type the class/interface name to be checked. 如果是 null 将不进行检查</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ServiceLocator|Container $container the container. This will be passed to [[get()]].</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object the object referenced by the Instance, or `$reference` itself if it is an object.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the reference is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">ensure</span><span class="params">($reference, $type = null, $container = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($reference)) &#123;</span><br><span class="line">        <span class="comment">// $reference is array</span></span><br><span class="line">        $class = <span class="keyword">isset</span>($reference[<span class="string">'class'</span>]) ? $reference[<span class="string">'class'</span>] : $type;</span><br><span class="line">        <span class="keyword">if</span> (!$container <span class="keyword">instanceof</span> Container) &#123;</span><br><span class="line">            <span class="comment">// 如果 $container 不是 Container，则赋值 Yii::$container</span></span><br><span class="line">            $container = Yii::$container;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">unset</span>($reference[<span class="string">'class'</span>]);</span><br><span class="line">        <span class="comment">// 从容器中获取</span></span><br><span class="line">        $component = $container-&gt;get($class, [], $reference);</span><br><span class="line">        <span class="keyword">if</span> ($type === <span class="keyword">null</span> || $component <span class="keyword">instanceof</span> $type) &#123;</span><br><span class="line">            <span class="comment">// $type is null 或者 $component 是 $type 的实例</span></span><br><span class="line">            <span class="comment">// 检查 type</span></span><br><span class="line">            <span class="keyword">return</span> $component;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Invalid data type: '</span> . $class . <span class="string">'. '</span> . $type . <span class="string">' is expected.'</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="keyword">empty</span>($reference)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'The required component is not specified.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_string($reference)) &#123;</span><br><span class="line">        <span class="comment">// $reference is string</span></span><br><span class="line">        $reference = <span class="keyword">new</span> <span class="keyword">static</span>($reference);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($type === <span class="keyword">null</span> || $reference <span class="keyword">instanceof</span> $type) &#123;</span><br><span class="line">        <span class="comment">// $reference is object</span></span><br><span class="line">        <span class="keyword">return</span> $reference;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($reference <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// $reference is Instance</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 从 Instance 中获取，见下</span></span><br><span class="line">            $component = $reference-&gt;get($container);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\ReflectionException $e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Failed to instantiate component or class "'</span> . $reference-&gt;id . <span class="string">'".'</span>, <span class="number">0</span>, $e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($type === <span class="keyword">null</span> || $component <span class="keyword">instanceof</span> $type) &#123;</span><br><span class="line">            <span class="comment">// to be checked</span></span><br><span class="line">            <span class="keyword">return</span> $component;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'"'</span> . $reference-&gt;id . <span class="string">'" refers to a '</span> . get_class($component) . <span class="string">" component. $type is expected."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $type 不符合预期</span></span><br><span class="line">    $valueType = is_object($reference) ? get_class($reference) : gettype($reference);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Invalid data type: $valueType. $type is expected."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">Connection</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// returns Yii::$app-&gt;db</span></span><br><span class="line">$db = Instance::ensure(<span class="string">'db'</span>, Connection::class);</span><br><span class="line"><span class="comment">// returns an instance of Connection using the given configuration</span></span><br><span class="line">$db = Instance::ensure([<span class="string">'dsn'</span> =&gt; <span class="string">'sqlite:path/to/my.db'</span>], Connection::class);</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回这个 Instance 对象引用的实际对象。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ServiceLocator|Container $container the container used to locate the referenced object.</span></span><br><span class="line"><span class="comment">  * If null, the method will first try `Yii::$app` then `Yii::$container`.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> object the actual object referenced by this Instance object.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($container = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($container) &#123;</span><br><span class="line">            <span class="keyword">return</span> $container-&gt;get(<span class="keyword">$this</span>-&gt;id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不指定 container，该方法将首先尝试 `Yii::$app`，然后是 `Yii::$container`</span></span><br><span class="line">        <span class="keyword">if</span> (Yii::$app &amp;&amp; Yii::$app-&gt;has(<span class="keyword">$this</span>-&gt;id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Yii::$app-&gt;get(<span class="keyword">$this</span>-&gt;id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Yii::$container-&gt;get(<span class="keyword">$this</span>-&gt;id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;optional) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> $e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="var-export"><a href="#var-export" class="headerlink" title="var_export"></a>var_export</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Restores class state after using `var_export()`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $state</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException when $state property does not contain `id` parameter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> var_export()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__set_state</span><span class="params">($state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($state[<span class="string">'id'</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Failed to instantiate class "Instance". Required parameter "id" is missing'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">self</span>($state[<span class="string">'id'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p>Container implements a <a href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener">dependency injection</a> container.</p><p>依赖注入(DI)容器是：一个知道如何实例化和配置对象的对象它们的所有依赖对象。</p><p>For more information about DI, please refer to <a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="noopener">Martin Fowler’s article</a>.</p><p>要使用 Container，首先需要通过调用 <code>set()</code> 设置类依赖项。然后调用 <code>get()</code> 来创建一个新的类对象。</p><p>Container 将自动实例化依赖对象，将它们注入正在创建的对象，配置并最终返回新创建的对象。</p><p>默认情况下，<code>\Yii::$container</code> 引用一个被 <code>\Yii::createObject()</code> 使用的 container 实例。</p><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><ul><li><code>@property-read array $definitions</code> The list of the object definitions or the loaded shared objects (type or ID =&gt; definition or instance).</li><li><code>@property-write bool $resolveArrays</code> Whether to attempt to resolve elements in array dependencies.</li><li><code>private $_singletons = [];</code> singleton objects indexed by their types.</li><li><code>private $_definitions = [];</code> equal $definitions.</li><li><code>private $$_params = [];</code> constructor parameters indexed by object types.</li><li><code>private $_reflections = [];</code> cached ReflectionClass objects indexed by class/interface names.</li><li><code>private $_dependencies = [];</code> cached dependencies indexed by class/interface names. 每个类名都与构造函数参数类型或默认值的列表相关联。</li><li><code>private $_resolveArrays = false;</code> whether to attempt to resolve elements in array dependencies.</li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a class definition with this container.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If a class definition with the same name already exists, it will be overwritten with the new one.</span></span><br><span class="line"><span class="comment"> * You may use [[has()]] to check if a class definition already exists.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $class class name, interface name or alias name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $definition 相关的定义 `$class`. It can be one of the following:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - a PHP callable: The callable will be executed when [[get()]] is invoked. The signature of the callable</span></span><br><span class="line"><span class="comment"> *   should be `function ($container, $params, $config)`, where `$params` stands for the list of constructor</span></span><br><span class="line"><span class="comment"> *   parameters, `$config` the object configuration, and `$container` the container object. The return value</span></span><br><span class="line"><span class="comment"> *   of the callable will be returned by [[get()]] as the object instance requested.</span></span><br><span class="line"><span class="comment"> * - a configuration array: the array contains name-value pairs that will be used to initialize the property</span></span><br><span class="line"><span class="comment"> *   values of the newly created object when [[get()]] is called. The `class` element stands for the</span></span><br><span class="line"><span class="comment"> *   the class of the object to be created. If `class` is not specified, `$class` will be used as the class name.</span></span><br><span class="line"><span class="comment"> * - a string: a class name, an interface name or an alias name.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params the list of constructor parameters. The parameters will be passed to the class</span></span><br><span class="line"><span class="comment"> * constructor when [[get()]] is called.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> $this the container itself</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($class, $definition = [], array $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 记录定义</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_definitions[$class] = <span class="keyword">$this</span>-&gt;normalizeDefinition($class, $definition);</span><br><span class="line">    <span class="comment">// 记录参数</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_params[$class] = $params;</span><br><span class="line">    <span class="comment">// 清理单例中的定义</span></span><br><span class="line">    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_singletons[$class]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规范化 the class definition.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $class class name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|array|callable $definition the class definition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array the normalized class definition（返回值还有可能是 callable or object）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the definition is invalid.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeDefinition</span><span class="params">($class, $definition)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($definition)) &#123;</span><br><span class="line">        <span class="comment">// $definition 为空时</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'class'</span> =&gt; $class];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_string($definition)) &#123;</span><br><span class="line">        <span class="comment">// $definition definition is string</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'class'</span> =&gt; $definition];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($definition <span class="keyword">instanceof</span> Instance) &#123;</span><br><span class="line">        <span class="comment">// $definition is Instance</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'class'</span> =&gt; $definition-&gt;id];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_callable($definition, <span class="keyword">true</span>) || is_object($definition)) &#123;</span><br><span class="line">        <span class="comment">// $definition is is_callable or is_object</span></span><br><span class="line">        <span class="keyword">return</span> $definition;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_array($definition)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($definition[<span class="string">'class'</span>]) &amp;&amp; <span class="keyword">isset</span>($definition[<span class="string">'__class'</span>])) &#123;</span><br><span class="line">            <span class="comment">// 存在 __class，没有 class，class 设置为 __class</span></span><br><span class="line">            $definition[<span class="string">'class'</span>] = $definition[<span class="string">'__class'</span>];</span><br><span class="line">            <span class="keyword">unset</span>($definition[<span class="string">'__class'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($definition[<span class="string">'class'</span>])) &#123;</span><br><span class="line">            <span class="comment">// $definition 没有 class</span></span><br><span class="line">            <span class="keyword">if</span> (strpos($class, <span class="string">'\\'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="comment">// $class 包含 \</span></span><br><span class="line">                $definition[<span class="string">'class'</span>] = $class;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'A class definition requires a "class" member.'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $definition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Unsupported definition type for \"$class\": "</span> . gettype($definition));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用这个容器注册一个类定义，并将该类标记为单例类 a singleton class。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个方法类似于 set()，只是通过这个方法注册的类只有一个实例。</span></span><br><span class="line"><span class="comment"> * 每次调用 get() 时，都会返回指定类的同一个实例。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $class class name, interface name or alias name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $definition the definition associated with `$class`. See [[set()]] for more details.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params the list of constructor parameters. The parameters will be passed to the class</span></span><br><span class="line"><span class="comment"> * constructor when [[get()]] is called.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> $this the container itself</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> set()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSingleton</span><span class="params">($class, $definition = [], array $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_definitions[$class] = <span class="keyword">$this</span>-&gt;normalizeDefinition($class, $definition);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_params[$class] = $params;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_singletons[$class] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// register a class name as is. This can be skipped.</span></span><br><span class="line">$container-&gt;set(<span class="string">'yii\db\Connection'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register an interface</span></span><br><span class="line"><span class="comment">// When a class depends on the interface, the corresponding class</span></span><br><span class="line"><span class="comment">// will be instantiated as the dependent object</span></span><br><span class="line">$container-&gt;set(<span class="string">'yii\mail\MailInterface'</span>, <span class="string">'yii\swiftmailer\Mailer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register an alias name. You can use $container-&gt;get('foo')</span></span><br><span class="line"><span class="comment">// to create an instance of Connection</span></span><br><span class="line">$container-&gt;set(<span class="string">'foo'</span>, <span class="string">'yii\db\Connection'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register a class with configuration. The configuration</span></span><br><span class="line"><span class="comment">// will be applied when the class is instantiated by get()</span></span><br><span class="line">$container-&gt;set(<span class="string">'yii\db\Connection'</span>, [</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'mysql:host=127.0.0.1;dbname=demo'</span>,</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register an alias name with class configuration</span></span><br><span class="line"><span class="comment">// In this case, a "class" element is required to specify the class</span></span><br><span class="line">$container-&gt;set(<span class="string">'db'</span>, [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'mysql:host=127.0.0.1;dbname=demo'</span>,</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register a PHP callable</span></span><br><span class="line"><span class="comment">// The callable will be executed when $container-&gt;get('db') is called</span></span><br><span class="line">$container-&gt;set(<span class="string">'db'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($container, $params, $config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> \yii\db\Connection($config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回被请求类的实例。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You may provide constructor parameters (`$params`) and object configurations (`$config`)</span></span><br><span class="line"><span class="comment"> * that will be used during the creation of the instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the class implements [[\yii\base\Configurable]], the `$config` parameter will be passed as the last</span></span><br><span class="line"><span class="comment"> * parameter to the class constructor; Otherwise, the configuration will be applied *after* the object is</span></span><br><span class="line"><span class="comment"> * instantiated.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that if the class is declared to be singleton by calling [[setSingleton()]],</span></span><br><span class="line"><span class="comment"> * the same instance of the class will be returned each time this method is called.</span></span><br><span class="line"><span class="comment"> * In this case, the constructor parameters and object configurations will be used</span></span><br><span class="line"><span class="comment"> * only if the class is instantiated the first time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|Instance $class the class Instance, name or an alias name (e.g. `foo`) that was previously</span></span><br><span class="line"><span class="comment"> * registered via [[set()]] or [[setSingleton()]].</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params a list of constructor parameter values. Use one of two definitions:</span></span><br><span class="line"><span class="comment"> *  - Parameters as name-value pairs, for example: `['posts' =&gt; PostRepository::class]`.</span></span><br><span class="line"><span class="comment"> *  - Parameters in the order they appear in the constructor declaration. If you want to skip some parameters,</span></span><br><span class="line"><span class="comment"> *    you should index the remaining ones with the integers that represent their positions in the constructor</span></span><br><span class="line"><span class="comment"> *    parameter list.</span></span><br><span class="line"><span class="comment"> *    Dependencies indexed by name and by position in the same array are not allowed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config a list of name-value pairs that will be used to initialize the object properties.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object an instance of the requested class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the class cannot be recognized or correspond to an invalid definition</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NotInstantiableException If resolved to an abstract class or an interface (since 2.0.9)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($class, $params = [], $config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($class <span class="keyword">instanceof</span> Instance) &#123;</span><br><span class="line">        <span class="comment">// Instance</span></span><br><span class="line">        $class = $class-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_singletons[$class])) &#123;</span><br><span class="line">        <span class="comment">// singleton</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_singletons[$class];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_definitions[$class])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;build($class, $params, $config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $definition = <span class="keyword">$this</span>-&gt;_definitions[$class];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_callable($definition, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        $params = <span class="keyword">$this</span>-&gt;resolveDependencies(<span class="keyword">$this</span>-&gt;mergeParams($class, $params));</span><br><span class="line">        $object = call_user_func($definition, <span class="keyword">$this</span>, $params, $config);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_array($definition)) &#123;</span><br><span class="line">        $concrete = $definition[<span class="string">'class'</span>];</span><br><span class="line">        <span class="keyword">unset</span>($definition[<span class="string">'class'</span>]);</span><br><span class="line"></span><br><span class="line">        $config = array_merge($definition, $config);</span><br><span class="line">        $params = <span class="keyword">$this</span>-&gt;mergeParams($class, $params);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($concrete === $class) &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;build($class, $params, $config);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;get($concrete, $params, $config);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_object($definition)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_singletons[$class] = $definition;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Unexpected object definition type: '</span> . gettype($definition));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (array_key_exists($class, <span class="keyword">$this</span>-&gt;_singletons)) &#123;</span><br><span class="line">        <span class="comment">// singleton</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_singletons[$class] = $object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建指定类的实例。</span></span><br><span class="line"><span class="comment"> * 此方法将解析指定类的依赖项，实例化它们，并将它们注入指定类的新实例中。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $class the class name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params constructor parameters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config configurations to be applied to the new instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object the newly created instance of the specified class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NotInstantiableException If resolved to an abstract class or an interface (since 2.0.9)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">($class, $params, $config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* <span class="doctag">@var</span> $reflection ReflectionClass */</span></span><br><span class="line">    <span class="keyword">list</span>($reflection, $dependencies) = <span class="keyword">$this</span>-&gt;getDependencies($class);</span><br><span class="line"></span><br><span class="line">    $addDependencies = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'__construct()'</span>])) &#123;</span><br><span class="line">        $addDependencies = $config[<span class="string">'__construct()'</span>];</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'__construct()'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $index =&gt; $param) &#123;</span><br><span class="line">        $addDependencies[$index] = $param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;validateDependencies($addDependencies);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($addDependencies &amp;&amp; is_int(key($addDependencies))) &#123;</span><br><span class="line">        $dependencies = array_values($dependencies);</span><br><span class="line">        $dependencies = <span class="keyword">$this</span>-&gt;mergeDependencies($dependencies, $addDependencies);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $dependencies = <span class="keyword">$this</span>-&gt;mergeDependencies($dependencies, $addDependencies);</span><br><span class="line">        $dependencies = array_values($dependencies);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $dependencies = <span class="keyword">$this</span>-&gt;resolveDependencies($dependencies, $reflection);</span><br><span class="line">    <span class="keyword">if</span> (!$reflection-&gt;isInstantiable()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotInstantiableException($reflection-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($config)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $reflection-&gt;newInstanceArgs($dependencies);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $config = <span class="keyword">$this</span>-&gt;resolveDependencies($config);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($dependencies) &amp;&amp; $reflection-&gt;implementsInterface(<span class="string">'yii\base\Configurable'</span>)) &#123;</span><br><span class="line">        <span class="comment">// set $config as the last parameter (existing one will be overwritten)</span></span><br><span class="line">        $dependencies[count($dependencies) - <span class="number">1</span>] = $config;</span><br><span class="line">        <span class="keyword">return</span> $reflection-&gt;newInstanceArgs($dependencies);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $object = $reflection-&gt;newInstanceArgs($dependencies);</span><br><span class="line">    <span class="keyword">foreach</span> ($config <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">        $object-&gt;$name = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the dependencies of the specified class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $class class name, interface name or alias name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array the dependencies of the specified class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NotInstantiableException if a dependency cannot be resolved or if a dependency cannot be fulfilled.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getDependencies</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_reflections[$class])) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">$this</span>-&gt;_reflections[$class], <span class="keyword">$this</span>-&gt;_dependencies[$class]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $dependencies = [];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $reflection = <span class="keyword">new</span> ReflectionClass($class);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\ReflectionException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotInstantiableException(</span><br><span class="line">            $class,</span><br><span class="line">            <span class="string">'Failed to instantiate component or class "'</span> . $class . <span class="string">'".'</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            $e</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $constructor = $reflection-&gt;getConstructor();</span><br><span class="line">    <span class="keyword">if</span> ($constructor !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($constructor-&gt;getParameters() <span class="keyword">as</span> $param) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; $param-&gt;isVariadic()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (PHP_VERSION_ID &gt;= <span class="number">80000</span>) &#123;</span><br><span class="line">                $c = $param-&gt;getType();</span><br><span class="line">                $isClass = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> ($c <span class="keyword">instanceof</span> ReflectionNamedType) &#123;</span><br><span class="line">                    $isClass = !$c-&gt;isBuiltin();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    $c = $param-&gt;getClass();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ReflectionException $e) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;isNulledParam($param)) &#123;</span><br><span class="line">                        $notInstantiableClass = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (PHP_VERSION_ID &gt;= <span class="number">70000</span>) &#123;</span><br><span class="line">                            $type = $param-&gt;getType();</span><br><span class="line">                            <span class="keyword">if</span> ($type <span class="keyword">instanceof</span> ReflectionNamedType) &#123;</span><br><span class="line">                                $notInstantiableClass = $type-&gt;getName();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NotInstantiableException(</span><br><span class="line">                            $notInstantiableClass,</span><br><span class="line">                            $notInstantiableClass === <span class="keyword">null</span> ? <span class="string">'Can not instantiate unknown class.'</span> : <span class="keyword">null</span></span><br><span class="line">                        );</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $c = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                $isClass = $c !== <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $className = $isClass ? $c-&gt;getName() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ($className !== <span class="keyword">null</span>) &#123;</span><br><span class="line">                $dependencies[$param-&gt;getName()] = Instance::of($className, <span class="keyword">$this</span>-&gt;isNulledParam($param));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $dependencies[$param-&gt;getName()] = $param-&gt;isDefaultValueAvailable()</span><br><span class="line">                    ? $param-&gt;getDefaultValue()</span><br><span class="line">                    : <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_reflections[$class] = $reflection;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_dependencies[$class] = $dependencies;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [$reflection, $dependencies];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserFinderInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFinder</span> <span class="keyword">extends</span> <span class="title">BaseObject</span> <span class="keyword">implements</span> <span class="title">UserFinderInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Connection $db, $config = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserLister</span> <span class="keyword">extends</span> <span class="title">BaseObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $finder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(UserFinderInterface $finder, $config = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;finder = $finder;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$container = <span class="keyword">new</span> Container;</span><br><span class="line">$container-&gt;set(<span class="string">'yii\db\Connection'</span>, [</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'...'</span>,</span><br><span class="line">]);</span><br><span class="line">$container-&gt;set(<span class="string">'app\models\UserFinderInterface'</span>, [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'app\models\UserFinder'</span>,</span><br><span class="line">]);</span><br><span class="line">$container-&gt;set(<span class="string">'userLister'</span>, <span class="string">'app\models\UserLister'</span>);</span><br><span class="line">$lister = $container-&gt;get(<span class="string">'userLister'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// which is equivalent to:</span></span><br><span class="line"></span><br><span class="line">$db = <span class="keyword">new</span> \yii\db\Connection([<span class="string">'dsn'</span> =&gt; <span class="string">'...'</span>]);</span><br><span class="line">$finder = <span class="keyword">new</span> UserFinder($db);</span><br><span class="line">$lister = <span class="keyword">new</span> UserLister($finder);</span><br></pre></td></tr></table></figure><blockquote><p>Yii 在依赖住入（DI）容器之上实现了它的服务定位器。当一个服务定位器尝试创建一个新的对象实例时，它会把调用转发到 DI 容器。后者将会像前文所述那样自动解决依赖关系。</p></blockquote><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yii\di&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--- Container.php&lt;/s
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 05 - BaseYii Yii</title>
    <link href="https://zyf.im/2021/09/16/reading-yii2-source-code-05/"/>
    <id>https://zyf.im/2021/09/16/reading-yii2-source-code-05/</id>
    <published>2021-09-16T12:01:45.000Z</published>
    <updated>2022-02-11T08:39:50.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BaseYii"><a href="#BaseYii" class="headerlink" title="BaseYii"></a>BaseYii</h2><blockquote><p>BaseYii is the core helper class for the Yii framework.</p></blockquote><h3 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h3><ul><li>YII_BEGIN_TIME <code>microtime(true)</code></li><li>YII2_PATH <code>__DIR__</code></li><li>YII_DEBUG <code>false</code></li><li>YII_ENV <code>prod</code>（dev test staging）</li><li>YII_ENV_PROD</li><li>YII_ENV_DEV</li><li>YII_ENV_TEST</li><li>YII_ENABLE_ERROR_HANDLER <code>true</code></li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><code>public static $classMap = [];</code> [class names =&gt; array] @see autoload()</li><li><code>public static $app;</code></li><li><code>public static $aliases = [&#39;@yii&#39; =&gt; __DIR__];</code></li><li><code>public static $container;</code> @see createObject()</li></ul><h3 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h3><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-aliases" target="_blank" rel="noopener">别名（Aliases）</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a path alias.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 路径别名必须以字符 '@' 开头，这样就可以很容易地与非别名路径区分开来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意，此方法不检查给定路径是否存在。它所做的只是将别名与路径关联起来。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 给定路径中的任何尾随 '/' 和 '\' 字符将被修剪。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $alias the alias name (e.g. "<span class="doctag">@yii</span>"). It must start with a '@' character.</span></span><br><span class="line"><span class="comment"> * It may contain the forward slash '/' which serves as boundary character when performing</span></span><br><span class="line"><span class="comment"> * alias translation by [[getAlias()]].</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path the path corresponding to the alias. If this is null, the alias will</span></span><br><span class="line"><span class="comment"> * be removed. Trailing '/' and '\' characters will be trimmed. This can be</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - a directory or a file path (e.g. `/tmp`, `/tmp/main.txt`)</span></span><br><span class="line"><span class="comment"> * - a URL (e.g. `http://www.yiiframework.com`)</span></span><br><span class="line"><span class="comment"> * - a path alias (e.g. `<span class="doctag">@yii</span>/base`). In this case, the path alias will be converted into the</span></span><br><span class="line"><span class="comment"> *   actual path first by calling [[getAlias()]].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidArgumentException if $path is an invalid alias.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> getAlias()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setAlias</span><span class="params">($alias, $path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// strncmp: Binary safe string comparison of the first n characters</span></span><br><span class="line">    <span class="comment">// 0 if they are equal</span></span><br><span class="line">    <span class="keyword">if</span> (strncmp($alias, <span class="string">'@'</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="comment">// $alias 不是以 @ 开头，补充 @</span></span><br><span class="line">        $alias = <span class="string">'@'</span> . $alias;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $alias 获取根名</span></span><br><span class="line">    <span class="comment">// strpos: Find the position of the first occurrence of a substring in a string</span></span><br><span class="line">    $pos = strpos($alias, <span class="string">'/'</span>);</span><br><span class="line">    <span class="comment">// $alias 没有 /，直接当别名，否则截取第一段</span></span><br><span class="line">    $root = $pos === <span class="keyword">false</span> ? $alias : substr($alias, <span class="number">0</span>, $pos);</span><br><span class="line">    <span class="keyword">if</span> ($path !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// $path 不是以 @ 开头，则清理 \ /；以 @ 开头，直接获取别名</span></span><br><span class="line">        $path = strncmp($path, <span class="string">'@'</span>, <span class="number">1</span>) ? rtrim($path, <span class="string">'\\/'</span>) : <span class="keyword">static</span>::getAlias($path);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">            <span class="comment">// $alias 根名不存在于 aliases 时</span></span><br><span class="line">            <span class="keyword">if</span> ($pos === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="comment">// $alias 没有 / 时，设置 $path 为 $alias</span></span><br><span class="line">                <span class="keyword">static</span>::$aliases[$root] = $path;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果 $alias 有 / 时，使用数组保存</span></span><br><span class="line">                <span class="keyword">static</span>::$aliases[$root] = [$alias =&gt; $path];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_string(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">            <span class="comment">// $alias 根名已存在于 aliases 同时为字符串时</span></span><br><span class="line">            <span class="keyword">if</span> ($pos === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="comment">// $alias 没有 / 时，设置 $path 为 $alias</span></span><br><span class="line">                <span class="keyword">static</span>::$aliases[$root] = $path;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果 $alias 有 / 时，使用数组保存</span></span><br><span class="line">                <span class="comment">// 之前为字符串 转换为了数组方式保存</span></span><br><span class="line">                <span class="keyword">static</span>::$aliases[$root] = [</span><br><span class="line">                    <span class="comment">// 新数据</span></span><br><span class="line">                    $alias =&gt; $path,</span><br><span class="line">                    <span class="comment">// 之前的数据</span></span><br><span class="line">                    $root =&gt; <span class="keyword">static</span>::$aliases[$root],</span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// $alias 根名已存在于 aliases 同时为数组时</span></span><br><span class="line">            <span class="keyword">static</span>::$aliases[$root][$alias] = $path;</span><br><span class="line">            <span class="comment">// Sort an array by key in reverse order</span></span><br><span class="line">            <span class="comment">// 比较巧妙：实现最长的别名优先</span></span><br><span class="line">            krsort(<span class="keyword">static</span>::$aliases[$root]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">        <span class="comment">// $path is null 如果已设置 则释放</span></span><br><span class="line">        <span class="keyword">if</span> (is_array(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">static</span>::$aliases[$root][$alias]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($pos === <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">static</span>::$aliases[$root]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Yii::setAlias(<span class="string">'@my'</span>, <span class="string">'/a1/b2'</span>);</span><br><span class="line">VarDumper::dump(Yii::$aliases);</span><br><span class="line"><span class="comment">// '@my' =&gt; '/a1/b2'</span></span><br><span class="line"></span><br><span class="line">Yii::setAlias(<span class="string">'@my/c'</span>, <span class="string">'/a1/b2/c3'</span>);</span><br><span class="line">Yii::setAlias(<span class="string">'@my/e/f/'</span>, <span class="string">'/a1/b2/f6/'</span>);</span><br><span class="line">VarDumper::dump(Yii::$aliases);</span><br><span class="line"><span class="comment">// '@my' =&gt; [ '@my/e/f/' =&gt; '/a1/b2/f6' '@my/e' =&gt; '/a1/b2/e5' '@my' =&gt; '/a1/b2' ]</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将路径别名转换为实际的路径。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 按照以下处理完成转换:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 如果别名不是以 '@' 开头，将直接返回。</span></span><br><span class="line"><span class="comment"> * 2. 否则，寻找最长的注册别名匹配给定的开始部分别名。如果它存在，将匹配给定的别名的一部分替换为相应的注册路径。</span></span><br><span class="line"><span class="comment"> * 3. 抛出一个异常或返回false，取决于 `$throwException` 参数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如：</span></span><br><span class="line"><span class="comment"> * '<span class="doctag">@yii</span>' is registered as the alias to the Yii framework directory say '/path/to/yii'.</span></span><br><span class="line"><span class="comment"> * The alias '<span class="doctag">@yii</span>/web' would then be translated into '/path/to/yii/web'.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果已注册两个别名 '<span class="doctag">@foo</span>' 与 '<span class="doctag">@foo</span>/bar'。当转换 '<span class="doctag">@foo</span>/bar/config' 时，将替换 '<span class="doctag">@foo</span>/bar' 而不是 '<span class="doctag">@foo</span>' 的部分与之相应的注册路径。</span></span><br><span class="line"><span class="comment"> * 这是因为最长的别名优先。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 然而，当转换 '<span class="doctag">@foo</span>/barbar/config' 时，将替换 '<span class="doctag">@foo</span>' 而不是 '<span class="doctag">@foo</span>/bar'，因为 '/' 作为字符的边界。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意，此方法不会检查返回的路径是否存在。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $alias the alias to be translated.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool $throwException whether to throw an exception if the given alias is invalid.</span></span><br><span class="line"><span class="comment"> * If this is false and an invalid alias is given, false will be returned by this method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string|false the path corresponding to the alias, false if the root alias is not previously registered.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidArgumentException if the alias is invalid while $throwException is true.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> setAlias()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getAlias</span><span class="params">($alias, $throwException = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果别名不是以 '@' 开头，将直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (strpos($alias, <span class="string">'@'</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// not an alias</span></span><br><span class="line">        <span class="keyword">return</span> $alias;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $pos = strpos($alias, <span class="string">'/'</span>);</span><br><span class="line">    $root = $pos === <span class="keyword">false</span> ? $alias : substr($alias, <span class="number">0</span>, $pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找 $alias 根名</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">        <span class="comment">// 判断值是否为字符串，是字符串也说明只对应一个路径</span></span><br><span class="line">        <span class="keyword">if</span> (is_string(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">            <span class="keyword">return</span> $pos === <span class="keyword">false</span> ? <span class="keyword">static</span>::$aliases[$root] : <span class="keyword">static</span>::$aliases[$root] . substr($alias, $pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 寻找最长的注册别名</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">static</span>::$aliases[$root] <span class="keyword">as</span> $name =&gt; $path) &#123;</span><br><span class="line">            <span class="comment">// '/' 作为字符的边界</span></span><br><span class="line">            <span class="keyword">if</span> (strpos($alias . <span class="string">'/'</span>, $name . <span class="string">'/'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> $path . substr($alias, strlen($name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($throwException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">"Invalid path alias: $alias"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回根别名已定义的别名。</span></span><br><span class="line"><span class="comment">  * 根别名是前面通过 setAlias() 注册的别名。如果给定的别名匹配多个根别名，则返回最长的一个。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $alias the alias</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> string|false the root alias, or false if no root alias is found</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getRootAlias</span><span class="params">($alias)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $pos = strpos($alias, <span class="string">'/'</span>);</span><br><span class="line">    $root = $pos === <span class="keyword">false</span> ? $alias : substr($alias, <span class="number">0</span>, $pos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string(<span class="keyword">static</span>::$aliases[$root])) &#123;</span><br><span class="line">            <span class="keyword">return</span> $root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">static</span>::$aliases[$root] <span class="keyword">as</span> $name =&gt; $path) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos($alias . <span class="string">'/'</span>, $name . <span class="string">'/'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 返回定义的最长 key</span></span><br><span class="line">                <span class="keyword">return</span> $name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autoload"><a href="#Autoload" class="headerlink" title="Autoload"></a>Autoload</h3><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-autoloading" target="_blank" rel="noopener">类自动加载（Autoloading）</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class autoload loader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method is invoked automatically when PHP sees an unknown class.</span></span><br><span class="line"><span class="comment"> * The method will attempt to include the class file according to the following procedure:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. Search in [[classMap]];</span></span><br><span class="line"><span class="comment"> * 2. If the class is namespaced (e.g. `yii\base\Component`), it will attempt</span></span><br><span class="line"><span class="comment"> *    to include the file associated with the corresponding path alias</span></span><br><span class="line"><span class="comment"> *    (e.g. `<span class="doctag">@yii</span>/base/Component.php`);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This autoloader allows loading classes that follow the [PSR-4 standard](http://www.php-fig.org/psr/psr-4/)</span></span><br><span class="line"><span class="comment"> * and have its top-level namespace or sub-namespaces defined as path aliases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Example: When aliases `<span class="doctag">@yii</span>` and `<span class="doctag">@yii</span>/bootstrap` are defined, classes in the `yii\bootstrap` namespace</span></span><br><span class="line"><span class="comment"> * will be loaded using the `<span class="doctag">@yii</span>/bootstrap` alias which points to the directory where bootstrap extension</span></span><br><span class="line"><span class="comment"> * files are installed and all classes from other `yii` namespaces will be loaded from the yii framework directory.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $className the fully qualified class name without a leading backslash "\"</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownClassException if the class does not exist in the class file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// classes.php:</span></span><br><span class="line">    <span class="comment">// return [</span></span><br><span class="line">    <span class="comment">//   'yii\base\Action' =&gt; YII2_PATH . '/base/Action.php',</span></span><br><span class="line">    <span class="comment">//   'yii\base\ActionEvent' =&gt; YII2_PATH . '/base/ActionEvent.php',</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$classMap[$className])) &#123;</span><br><span class="line">        $classFile = <span class="keyword">static</span>::$classMap[$className];</span><br><span class="line">        <span class="comment">// 使用别名</span></span><br><span class="line">        <span class="keyword">if</span> (strpos($classFile, <span class="string">'@'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            $classFile = <span class="keyword">static</span>::getAlias($classFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (strpos($className, <span class="string">'\\'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 包含 \</span></span><br><span class="line">        $classFile = <span class="keyword">static</span>::getAlias(<span class="string">'@'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $className) . <span class="string">'.php'</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> ($classFile === <span class="keyword">false</span> || !is_file($classFile)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span> $classFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (YII_DEBUG &amp;&amp; !class_exists($className, <span class="keyword">false</span>) &amp;&amp; !interface_exists($className, <span class="keyword">false</span>) &amp;&amp; !trait_exists($className, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="comment">// YII_DEBUG &amp;&amp; class|interface|trait 不存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownClassException(<span class="string">"Unable to find '$className' in file: $classFile. Namespace missing?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new object using the given configuration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 你可能会认为这种方法是一个增强版的 `new` 操作符。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法支持基于类名、配置数组或匿名函数创建对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Using [[\yii\di\Container|dependency injection container]], this method can also identify</span></span><br><span class="line"><span class="comment"> * dependent objects, instantiate them and inject them into the newly created object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|array|callable $type the object type. This can be specified in one of the following forms:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - a string: 代表要创建的对象的类名</span></span><br><span class="line"><span class="comment"> * - a configuration array: the array must contain a `class` element which is treated as the object class,</span></span><br><span class="line"><span class="comment"> *   and the rest of the name-value pairs will be used to initialize the corresponding object properties</span></span><br><span class="line"><span class="comment"> * - a PHP callable: 匿名函数或表示类方法的数组 (`[$class or $object, $method]`)。可调用对象应该返回正在创建的对象的新实例。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params 构造函数的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object the created object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the configuration is invalid.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> \yii\di\Container</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createObject</span><span class="params">($type, array $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// string，从容器中获取</span></span><br><span class="line">    <span class="keyword">if</span> (is_string($type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$container-&gt;get($type, $params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callable</span></span><br><span class="line">    <span class="keyword">if</span> (is_callable($type, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$container-&gt;invoke($type, $params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不是数组</span></span><br><span class="line">    <span class="keyword">if</span> (!is_array($type)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Unsupported configuration type: '</span> . gettype($type));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// __class 作用用 class，优先于 class</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($type[<span class="string">'__class'</span>])) &#123;</span><br><span class="line">        $class = $type[<span class="string">'__class'</span>];</span><br><span class="line">        <span class="keyword">unset</span>($type[<span class="string">'__class'</span>], $type[<span class="string">'class'</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$container-&gt;get($class, $params, $type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($type[<span class="string">'class'</span>])) &#123;</span><br><span class="line">        $class = $type[<span class="string">'class'</span>];</span><br><span class="line">        <span class="keyword">unset</span>($type[<span class="string">'class'</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$container-&gt;get($class, $params, $type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Object configuration must be an array containing a "class" or "__class" element.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create an object using a class name</span></span><br><span class="line">$object = Yii::createObject(<span class="string">'yii\db\Connection'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an object using a configuration array</span></span><br><span class="line">$object = Yii::createObject([</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">    <span class="string">'dsn'</span> =&gt;   <span class="string">'mysql:host=127.0.0.1;dbname=demo'</span>,</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an object with two constructor parameters</span></span><br><span class="line">$object = \Yii::createObject(<span class="string">'MyClass'</span>, [$param1, $param2]);</span><br></pre></td></tr></table></figure><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><blockquote><p>后文分解。</p></blockquote><h3 id="I18N"><a href="#I18N" class="headerlink" title="I18N"></a>I18N</h3><blockquote><p>后文分解。</p></blockquote><h2 id="Yii"><a href="#Yii" class="headerlink" title="Yii"></a>Yii</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://php.net/manual/en/function.spl-autoload-register.php</span></span><br><span class="line"><span class="comment">// callback(string $class_name): void</span></span><br><span class="line">spl_autoload_register([<span class="string">'Yii'</span>, <span class="string">'autoload'</span>], <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// classes.php:</span></span><br><span class="line"><span class="comment">// return [</span></span><br><span class="line"><span class="comment">//   'yii\base\Action' =&gt; YII2_PATH . '/base/Action.php',</span></span><br><span class="line"><span class="comment">//   'yii\base\ActionEvent' =&gt; YII2_PATH . '/base/ActionEvent.php',</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Yii::$classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/classes.php'</span>;</span><br></pre></td></tr></table></figure><p>见上文的 <code>autoload()</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Yii::$container = <span class="keyword">new</span> yii\di\Container();</span><br></pre></td></tr></table></figure><p>下节见。</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BaseYii&quot;&gt;&lt;a href=&quot;#BaseYii&quot; class=&quot;headerlink&quot; title=&quot;BaseYii&quot;&gt;&lt;/a&gt;BaseYii&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;BaseYii is the core helper class for t
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 04 - Application</title>
    <link href="https://zyf.im/2021/09/15/reading-yii2-source-code-04/"/>
    <id>https://zyf.im/2021/09/15/reading-yii2-source-code-04/</id>
    <published>2021-09-15T08:28:36.000Z</published>
    <updated>2022-02-11T08:39:54.141Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文 <code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><h2 id="yii-base-Application"><a href="#yii-base-Application" class="headerlink" title="yii\base\Application"></a>yii\base\Application</h2><p>Application is the base class for all application classes.</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-applications" target="_blank" rel="noopener">应用（Applications）</a></p></blockquote><p><img src="https://www.yiiframework.com/doc/guide/2.0/zh-cn/images/application-lifecycle.png"></p><p>路径属性：</p><ul><li><code>@property string $basePath</code> The root directory of the application.</li><li><code>@property string $runtimePath</code> The directory that stores runtime files. Defaults to the “runtime” subdirectory under <code>basePath</code>.</li><li><code>@property string $vendorPath</code> The directory that stores vendor files. Defaults to “vendor” directory under <code>basePath</code>.</li></ul><p>配置属性：</p><ul><li><code>@property-write array $container</code> Values given in terms of name-value pairs. This property is write-only.</li><li><code>@property string $timeZone</code> The time zone used by this application.</li><li><code>@property-read string $uniqueId</code> The unique ID of the module.</li></ul><p>组件属性：</p><ul><li>\yii\web\AssetManager $assetManager</li><li>\yii\rbac\ManagerInterface $authManager</li><li>\yii\caching\CacheInterface $cache</li><li>\yii\db\Connection $db</li><li>\yii\web\ErrorHandler|\yii\console\ErrorHandler $errorHandler</li><li>\yii\i18n\Formatter $formatter</li><li>\yii\i18n\I18N $i18n</li><li>\yii\log\Dispatcher $log</li><li>\yii\mail\MailerInterface $mailer</li><li>\yii\web\Request|\yii\console\Request $request</li><li>\yii\web\Response|\yii\console\Response $response</li><li>\yii\base\Security $security</li><li>\yii\web\UrlManager $urlManager</li><li>View|\yii\web\View $view</li></ul><p>$state：</p><ul><li>STATE_BEGIN 0</li><li>STATE_INIT 1</li><li>STATE_BEFORE_REQUEST 2</li><li>STATE_HANDLING_REQUEST 3</li><li>STATE_AFTER_REQUEST 4</li><li>STATE_SENDING_RESPONSE 5</li><li>STATE_END 6</li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructor.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config name-value pairs that will be used to initialize the object properties.</span></span><br><span class="line"><span class="comment"> * Note that the configuration must contain both [[id]] and [[basePath]].</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if either [[id]] or [[basePath]] configuration is missing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 绑定 app</span></span><br><span class="line">    Yii::$app = <span class="keyword">$this</span>;</span><br><span class="line">    <span class="comment">// 设置当前请求这个 module class 的实例。</span></span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</span><br><span class="line">    <span class="comment">// 设置状态为 begin 0</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_BEGIN;</span><br><span class="line">    <span class="comment">// 验证 id basePath 必填，设置配置，注册核心 components</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;preInit($config);</span><br><span class="line">    <span class="comment">// 注册异常处理</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerErrorHandler($config);</span><br><span class="line">    <span class="comment">// BaseObject construct</span></span><br><span class="line">    Component::__construct($config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置当前请求这个 module class 的实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Module|null $instance the currently requested instance of this module class.</span></span><br><span class="line"><span class="comment"> * If it is `null`, the instance of the calling class will be removed, if any.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setInstance</span><span class="params">($instance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($instance === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">unset</span>(Yii::$app-&gt;loadedModules[get_called_class()]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// loadedModules: list of loaded modules indexed by their class names.</span></span><br><span class="line">        Yii::$app-&gt;loadedModules[get_class($instance)] = $instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pre-initializes the application.</span></span><br><span class="line"><span class="comment"> * 调用此方法开始的 application 的构造函数。</span></span><br><span class="line"><span class="comment"> * 它初始化一些重要的 application properties。</span></span><br><span class="line"><span class="comment"> * 如果你重写这个方法,请确保你调用父实现。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config the application configuration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if either [[id]] or [[basePath]] configuration is missing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">preInit</span><span class="params">(&amp;$config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// id 必填</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'id'</span>])) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'The "id" configuration for the Application is required.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// basePath 必填</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'basePath'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setBasePath($config[<span class="string">'basePath'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'basePath'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'The "basePath" configuration for the Application is required.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'vendorPath'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setVendorPath($config[<span class="string">'vendorPath'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'vendorPath'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// set "@vendor"</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getVendorPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'runtimePath'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setRuntimePath($config[<span class="string">'runtimePath'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'runtimePath'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// set "@runtime"</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getRuntimePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'timeZone'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setTimeZone($config[<span class="string">'timeZone'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'timeZone'</span>]);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!ini_get(<span class="string">'date.timezone'</span>)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setTimeZone(<span class="string">'UTC'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($config[<span class="string">'container'</span>])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setContainer($config[<span class="string">'container'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'container'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merge core components with custom components</span></span><br><span class="line">    <span class="comment">// coreComponents:</span></span><br><span class="line">    <span class="comment">// [</span></span><br><span class="line">    <span class="comment">//   'log' =&gt; ['class' =&gt; 'yii\log\Dispatcher'],</span></span><br><span class="line">    <span class="comment">//   'view' =&gt; ['class' =&gt; 'yii\web\View'],</span></span><br><span class="line">    <span class="comment">//   'formatter' =&gt; ['class' =&gt; 'yii\i18n\Formatter'],</span></span><br><span class="line">    <span class="comment">//   'i18n' =&gt; ['class' =&gt; 'yii\i18n\I18N'],</span></span><br><span class="line">    <span class="comment">//   'mailer' =&gt; ['class' =&gt; 'yii\swiftmailer\Mailer'],</span></span><br><span class="line">    <span class="comment">//   'urlManager' =&gt; ['class' =&gt; 'yii\web\UrlManager'],</span></span><br><span class="line">    <span class="comment">//   'assetManager' =&gt; ['class' =&gt; 'yii\web\AssetManager'],</span></span><br><span class="line">    <span class="comment">//   'security' =&gt; ['class' =&gt; 'yii\base\Security'],</span></span><br><span class="line">    <span class="comment">// ];</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;coreComponents() <span class="keyword">as</span> $id =&gt; $component) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'components'</span>][$id])) &#123;</span><br><span class="line">            $config[<span class="string">'components'</span>][$id] = $component;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($config[<span class="string">'components'</span>][$id]) &amp;&amp; !<span class="keyword">isset</span>($config[<span class="string">'components'</span>][$id][<span class="string">'class'</span>])) &#123;</span><br><span class="line">            $config[<span class="string">'components'</span>][$id][<span class="string">'class'</span>] = $component[<span class="string">'class'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册 errorHandler 组件作为一个 PHP 错误处理程序。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $config application config</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerErrorHandler</span><span class="params">(&amp;$config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在 BaseYii 中 默认是 true</span></span><br><span class="line">    <span class="keyword">if</span> (YII_ENABLE_ERROR_HANDLER) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>][<span class="string">'class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Error: no errorHandler component is configured.\n"</span>;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'errorHandler'</span>, $config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="comment">// \yii\web\ErrorHandler|\yii\console\ErrorHandler</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;getErrorHandler()-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理 ErrorHandler：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register this error handler.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.32 this will not do anything if the error handler was already registered</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_registered) &#123;</span><br><span class="line">        ini_set(<span class="string">'display_errors'</span>, <span class="keyword">false</span>);</span><br><span class="line">        set_exception_handler([<span class="keyword">$this</span>, <span class="string">'handleException'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (defined(<span class="string">'HHVM_VERSION'</span>)) &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleHhvmError'</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleError'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;memoryReserveSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_memoryReserve = str_repeat(<span class="string">'x'</span>, <span class="keyword">$this</span>-&gt;memoryReserveSize);</span><br><span class="line">        &#125;</span><br><span class="line">        register_shutdown_function([<span class="keyword">$this</span>, <span class="string">'handleFatalError'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_registered = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_INIT;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化扩展并执行引导组件。</span></span><br><span class="line"><span class="comment"> * This method is called by [[init()]] after the application has been fully configured.</span></span><br><span class="line"><span class="comment"> * If you override this method, make sure you also call the parent implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 注册绑定 extensions</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;extensions === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// @vendor/yiisoft/extensions.php:</span></span><br><span class="line">        <span class="comment">// return array (</span></span><br><span class="line">        <span class="comment">//   'yiisoft/yii2-bootstrap4' =&gt;</span></span><br><span class="line">        <span class="comment">//   array (</span></span><br><span class="line">        <span class="comment">//     'name' =&gt; 'yiisoft/yii2-bootstrap4',</span></span><br><span class="line">        <span class="comment">//     'version' =&gt; '2.0.10.0',</span></span><br><span class="line">        <span class="comment">//     'alias' =&gt;</span></span><br><span class="line">        <span class="comment">//     array (</span></span><br><span class="line">        <span class="comment">//       '@yii/bootstrap4' =&gt; $vendorDir . '/yiisoft/yii2-bootstrap4/src',</span></span><br><span class="line">        <span class="comment">//     ),</span></span><br><span class="line">        <span class="comment">//   ),</span></span><br><span class="line">        <span class="comment">//   'yiisoft/yii2-faker' =&gt;</span></span><br><span class="line">        <span class="comment">//   array (</span></span><br><span class="line">        <span class="comment">//     'name' =&gt; 'yiisoft/yii2-faker',</span></span><br><span class="line">        <span class="comment">//     'version' =&gt; '2.0.5.0',</span></span><br><span class="line">        <span class="comment">//     'alias' =&gt;</span></span><br><span class="line">        <span class="comment">//     array (</span></span><br><span class="line">        <span class="comment">//       '@yii/faker' =&gt; $vendorDir . '/yiisoft/yii2-faker/src',</span></span><br><span class="line">        <span class="comment">//     ),</span></span><br><span class="line">        <span class="comment">//   ),</span></span><br><span class="line">        <span class="comment">//   ...</span></span><br><span class="line">        <span class="comment">// );</span></span><br><span class="line">        $file = Yii::getAlias(<span class="string">'@vendor/yiisoft/extensions.php'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;extensions = is_file($file) ? <span class="keyword">include</span> $file : [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;extensions <span class="keyword">as</span> $extension) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($extension[<span class="string">'alias'</span>])) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($extension[<span class="string">'alias'</span>] <span class="keyword">as</span> $name =&gt; $path) &#123;</span><br><span class="line">                Yii::setAlias($name, $path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($extension[<span class="string">'bootstrap'</span>])) &#123;</span><br><span class="line">            $component = Yii::createObject($extension[<span class="string">'bootstrap'</span>]);</span><br><span class="line">            <span class="comment">// 此 $component 如果实现了 BootstrapInterface 执行 bootstrap 方法</span></span><br><span class="line">            <span class="keyword">if</span> ($component <span class="keyword">instanceof</span> BootstrapInterface) &#123;</span><br><span class="line">                Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component) . <span class="string">'::bootstrap()'</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">                $component-&gt;bootstrap(<span class="keyword">$this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component), <span class="keyword">__METHOD__</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $this-&gt;bootstrap: list of components that should be run during the application [[bootstrap()|bootstrapping process]].</span></span><br><span class="line">    <span class="comment">// 允许你用数组指定启动阶段 bootstrapping process 需要运行的组件。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// configuration adjustments for 'dev' environment</span></span><br><span class="line">    <span class="comment">// $config['bootstrap'][] = 'debug';</span></span><br><span class="line">    <span class="comment">// $config['modules']['debug'] = 'yii\debug\Module';</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 注意：启动太多的组件会降低系统性能，因为每次请求都需要重新运行启动组件， 因此谨慎配置启动组件。</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;bootstrap <span class="keyword">as</span> $mixed) &#123;</span><br><span class="line">        $component = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ($mixed <span class="keyword">instanceof</span> \Closure) &#123;</span><br><span class="line">            Yii::debug(<span class="string">'Bootstrap with Closure'</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">            <span class="keyword">if</span> (!$component = call_user_func($mixed, <span class="keyword">$this</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_string($mixed)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;has($mixed)) &#123;</span><br><span class="line">                $component = <span class="keyword">$this</span>-&gt;get($mixed);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;hasModule($mixed)) &#123;</span><br><span class="line">                $component = <span class="keyword">$this</span>-&gt;getModule($mixed);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (strpos($mixed, <span class="string">'\\'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Unknown bootstrapping component ID: $mixed"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($component)) &#123;</span><br><span class="line">            $component = Yii::createObject($mixed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此 $component 如果实现了 BootstrapInterface 执行 bootstrap 方法</span></span><br><span class="line">        <span class="keyword">if</span> ($component <span class="keyword">instanceof</span> BootstrapInterface) &#123;</span><br><span class="line">            Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component) . <span class="string">'::bootstrap()'</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">            $component-&gt;bootstrap(<span class="keyword">$this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Yii::debug(<span class="string">'Bootstrap with '</span> . get_class($component), <span class="keyword">__METHOD__</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the application.</span></span><br><span class="line"><span class="comment"> * This is the main entrance of an application.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int the exit status (0 means normal, non-zero values mean abnormal)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_BEFORE_REQUEST;</span><br><span class="line">        <span class="comment">// 执行 beforeRequest</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_BEFORE_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_HANDLING_REQUEST;</span><br><span class="line">        <span class="comment">// abstract: Handles the specified request.</span></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;handleRequest(<span class="keyword">$this</span>-&gt;getRequest());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_AFTER_REQUEST;</span><br><span class="line">        <span class="comment">// 执行 afterRequest</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_AFTER_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_SENDING_RESPONSE;</span><br><span class="line">        <span class="comment">// 发送 response</span></span><br><span class="line">        $response-&gt;send();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改状态</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_END;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 response 退出状态</span></span><br><span class="line">        <span class="keyword">return</span> $response-&gt;exitStatus;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExitException $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;end($e-&gt;statusCode, <span class="keyword">isset</span>($response) ? $response : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> $e-&gt;statusCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终止 application.</span></span><br><span class="line"><span class="comment"> * 该方法替换 `exit()` 函数，确保完成应用程序生命周期终止应用程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $status 退出状态(0表示正常退出，其他表示异常退出)。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Response $response the response to be sent. If not set, the default application [[response]] component will be used.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ExitException if the application is in testing mode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">end</span><span class="params">($status = <span class="number">0</span>, $response = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前状态是 STATE_BEFORE_REQUEST | STATE_HANDLING_REQUEST</span></span><br><span class="line">    <span class="comment">// 执行 STATE_AFTER_REQUEST</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;state === <span class="keyword">self</span>::STATE_BEFORE_REQUEST || <span class="keyword">$this</span>-&gt;state === <span class="keyword">self</span>::STATE_HANDLING_REQUEST) &#123;</span><br><span class="line">        <span class="comment">// 设置为 STATE_AFTER_REQUEST</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_AFTER_REQUEST;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_AFTER_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前状态不是 STATE_SENDING_RESPONSE | STATE_END</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;state !== <span class="keyword">self</span>::STATE_SENDING_RESPONSE &amp;&amp; <span class="keyword">$this</span>-&gt;state !== <span class="keyword">self</span>::STATE_END) &#123;</span><br><span class="line">        <span class="comment">// 设置为 STATE_END</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_END;</span><br><span class="line">        $response = $response ?: <span class="keyword">$this</span>-&gt;getResponse();</span><br><span class="line">        $response-&gt;send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是 env test，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (YII_ENV_TEST) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ExitException($status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>($status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-web-Application"><a href="#yii-web-Application" class="headerlink" title="yii\web\Application"></a>yii\web\Application</h2><blockquote><p>Application is the base class for all web application classes.</p></blockquote><p>属性：</p><ul><li><code>@property-read ErrorHandler $errorHandler</code> The error handler application component.</li><li><code>@property string $homeUrl</code> The homepage URL.</li><li><code>@property-read Request $request</code> The request component.</li><li><code>@property-read Response $response</code> The response component.</li><li><code>@property-read Session $session</code> The session component.</li><li><code>@property-read User $user</code> The user component.</li></ul><p>属性：</p><ul><li><code>public $defaultRoute = &#39;site&#39;;</code> the default route of this application.</li><li><code>public $catchAll;</code> 它指定一个要处理所有用户请求的 控制器方法， 通常在维护模式下使用，同一个方法处理所有用户请求。该配置为一个数组，第一项指定动作的路由，剩下的数组项 (key-value 成对) 指定传递给动作的参数。</li><li><code>public $controller;</code> the currently active controller instance</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'catchAll'</span> =&gt; [</span><br><span class="line">        <span class="string">'offline/notice'</span>,</span><br><span class="line">        <span class="string">'param1'</span> =&gt; <span class="string">'value1'</span>,</span><br><span class="line">        <span class="string">'param2'</span> =&gt; <span class="string">'value2'</span>,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $request = <span class="keyword">$this</span>-&gt;getRequest();</span><br><span class="line">    <span class="comment">// /pc/site/yii-app/web</span></span><br><span class="line">    Yii::setAlias(<span class="string">'@webroot'</span>, dirname($request-&gt;getScriptFile()));</span><br><span class="line">    <span class="comment">// /</span></span><br><span class="line">    Yii::setAlias(<span class="string">'@web'</span>, $request-&gt;getBaseUrl());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parent</span>::bootstrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="handleRequest"><a href="#handleRequest" class="headerlink" title="handleRequest"></a>handleRequest</h3><p>核心方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles the specified request.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Request $request the request to be handled</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Response the resulting response</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NotFoundHttpException if the requested route is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取 route params</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;catchAll)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">list</span>($route, $params) = $request-&gt;resolve();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UrlNormalizerRedirectException $e) &#123;</span><br><span class="line">            $url = $e-&gt;url;</span><br><span class="line">            <span class="keyword">if</span> (is_array($url)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>($url[<span class="number">0</span>])) &#123;</span><br><span class="line">                    <span class="comment">// ensure the route is absolute</span></span><br><span class="line">                    $url[<span class="number">0</span>] = <span class="string">'/'</span>.ltrim($url[<span class="number">0</span>], <span class="string">'/'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                $url += $request-&gt;getQueryParams();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getResponse()-&gt;redirect(Url::to($url, $e-&gt;scheme), $e-&gt;statusCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 'catchAll' =&gt; [</span></span><br><span class="line">        <span class="comment">//     'offline/notice',</span></span><br><span class="line">        <span class="comment">//     'param1' =&gt; 'value1',</span></span><br><span class="line">        <span class="comment">//     'param2' =&gt; 'value2',</span></span><br><span class="line">        <span class="comment">// ],</span></span><br><span class="line">        <span class="comment">// 约定 idx 0 是路由</span></span><br><span class="line">        $route = <span class="keyword">$this</span>-&gt;catchAll[<span class="number">0</span>];</span><br><span class="line">        $params = <span class="keyword">$this</span>-&gt;catchAll;</span><br><span class="line">        <span class="keyword">unset</span>($params[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Yii::debug(<span class="string">"Route requested: '$route'"</span>, <span class="keyword">__METHOD__</span>);</span><br><span class="line">        <span class="comment">// 绑定路由</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;requestedRoute = $route;</span><br><span class="line">        <span class="comment">// 执行 Module-&gt;runAction</span></span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;runAction($route, $params);</span><br><span class="line">        <span class="comment">// 如果结果是 Response 则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> ($result <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则获取 Response，将结果绑定到 $response-&gt;data</span></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;getResponse();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $result) &#123;</span><br><span class="line">            $response-&gt;data = $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $response;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidRouteException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException(Yii::t(<span class="string">'yii'</span>, <span class="string">'Page not found.'</span>), $e-&gt;getCode(), $e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="coreComponents"><a href="#coreComponents" class="headerlink" title="coreComponents"></a>coreComponents</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">coreComponents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_merge(<span class="keyword">parent</span>::coreComponents(), [</span><br><span class="line">        <span class="string">'request'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\Request'</span>],</span><br><span class="line">        <span class="string">'response'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\Response'</span>],</span><br><span class="line">        <span class="string">'session'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\Session'</span>],</span><br><span class="line">        <span class="string">'user'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\User'</span>],</span><br><span class="line">        <span class="string">'errorHandler'</span> =&gt; [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\ErrorHandler'</span>],</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书接上文 &lt;code&gt;yii\web\Application&lt;/code&gt; 类的层级结构：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yii\b
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>分组聚合 OVER PARTITION BY</title>
    <link href="https://zyf.im/2021/09/14/sql-over-partition-by/"/>
    <id>https://zyf.im/2021/09/14/sql-over-partition-by/</id>
    <published>2021-09-14T03:58:42.000Z</published>
    <updated>2022-07-28T06:40:49.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在-HIVE-中"><a href="#在-HIVE-中" class="headerlink" title="在 HIVE 中"></a>在 HIVE 中</h2><p>最近在使用 HIVE，需要统计 <code>当年累计和</code> 这样的指标，请教同事后发现了 <code>OVER(PARTITION BY)</code> 开窗函数。</p><p>分析函数用于计算基于组的某种聚合值，它和聚合函数的不同之处是：对于每个组返回多行，而聚合函数对于每个组只返回一行。</p><p>开窗函数指定了分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化。</p><p>测试语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> default.test_over_partition (</span><br><span class="line">  <span class="string">`fdate`</span> <span class="built_in">Date</span>,</span><br><span class="line">  <span class="string">`year`</span> <span class="built_in">Int</span>,</span><br><span class="line">  <span class="string">`month`</span> <span class="built_in">Int</span>,</span><br><span class="line">  <span class="string">`category1`</span> <span class="keyword">String</span>,</span><br><span class="line">  <span class="string">`category2`</span> <span class="keyword">String</span>,</span><br><span class="line">  <span class="string">`income`</span> <span class="keyword">Double</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hdp_fin_dash_ods.test_over_partition (<span class="string">`fdate`</span>,<span class="string">`year`</span>,<span class="string">`month`</span>,<span class="string">`category1`</span>,<span class="string">`category2`</span>,<span class="string">`income`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'2020-01-01'</span>,<span class="number">2020</span>,<span class="number">1</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1010'</span>),</span><br><span class="line">(<span class="string">'2020-01-01'</span>,<span class="number">2020</span>,<span class="number">1</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1011'</span>),</span><br><span class="line">(<span class="string">'2020-02-01'</span>,<span class="number">2020</span>,<span class="number">2</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1012'</span>),</span><br><span class="line">(<span class="string">'2020-02-01'</span>,<span class="number">2020</span>,<span class="number">2</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1013'</span>),</span><br><span class="line">(<span class="string">'2020-03-01'</span>,<span class="number">2020</span>,<span class="number">3</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1014'</span>),</span><br><span class="line">(<span class="string">'2020-03-01'</span>,<span class="number">2020</span>,<span class="number">3</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1015'</span>),</span><br><span class="line">(<span class="string">'2021-04-01'</span>,<span class="number">2021</span>,<span class="number">4</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1016'</span>),</span><br><span class="line">(<span class="string">'2021-04-01'</span>,<span class="number">2021</span>,<span class="number">4</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1017'</span>),</span><br><span class="line">(<span class="string">'2021-05-01'</span>,<span class="number">2021</span>,<span class="number">5</span>,<span class="string">'3C'</span>,<span class="string">'电脑'</span>,<span class="string">'1018'</span>),</span><br><span class="line">(<span class="string">'2021-05-01'</span>,<span class="number">2021</span>,<span class="number">5</span>,<span class="string">'3C'</span>,<span class="string">'手机'</span>,<span class="string">'1019'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每年每 category2 日累计 income</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`fdate`</span>,<span class="string">`year`</span>,<span class="string">`month`</span>,<span class="string">`category1`</span>,<span class="string">`category2`</span>,<span class="string">`income`</span></span><br><span class="line">,<span class="keyword">SUM</span>(income) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="string">`year`</span>,<span class="string">`category1`</span>,<span class="string">`category2`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> fdate) <span class="keyword">AS</span> ttl_year_income</span><br><span class="line"><span class="keyword">FROM</span> hdp_fin_dash_ods.test_over_partition;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/9289792/133225004-be0d2c88-e713-407b-b41d-da44e16ac960.png"></p><h2 id="在-MySQL-中"><a href="#在-MySQL-中" class="headerlink" title="在 MySQL 中"></a>在 MySQL 中</h2><blockquote><p>Before MySQL 8.0 you can’t use window functions like ROW_NUMBER.</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/zhwbqd/p/4205821.html" target="_blank" rel="noopener">Mysql 分组聚合实现 over partition by 功能 | cnblogs</a></li><li><a href="https://stackoverflow.com/questions/58645949/emulating-partition-over-with-mysql-5-7" target="_blank" rel="noopener">Emulating PARTITION OVER with MySQL 5.7 | stackoverflow</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在-HIVE-中&quot;&gt;&lt;a href=&quot;#在-HIVE-中&quot; class=&quot;headerlink&quot; title=&quot;在 HIVE 中&quot;&gt;&lt;/a&gt;在 HIVE 中&lt;/h2&gt;&lt;p&gt;最近在使用 HIVE，需要统计 &lt;code&gt;当年累计和&lt;/code&gt; 这样的指标，请教同事后
      
    
    </summary>
    
    
      <category term="sql" scheme="https://zyf.im/tags/sql/"/>
    
      <category term="hive" scheme="https://zyf.im/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 03 - ServiceLocator Module</title>
    <link href="https://zyf.im/2021/07/28/reading-yii2-source-code-03/"/>
    <id>https://zyf.im/2021/07/28/reading-yii2-source-code-03/</id>
    <published>2021-07-28T07:52:11.000Z</published>
    <updated>2022-02-11T08:39:57.483Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文 <code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><h2 id="yii-di-ServiceLocator"><a href="#yii-di-ServiceLocator" class="headerlink" title="yii\di\ServiceLocator"></a>yii\di\ServiceLocator</h2><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-service-locator" target="_blank" rel="noopener">服务定位器（Service Locator）</a></p></blockquote><p>ServiceLocator implements a <a href="http://en.wikipedia.org/wiki/Service_locator_pattern" target="_blank" rel="noopener">service locator</a>.</p><p>在首次请求某个服务时，服务定位器在 JNDI 中查找服务，并缓存该服务对象。当再次请求相同的服务时，服务定位器会在它的缓存中查找，这样可以在很大程度上提高应用程序的性能。</p><p>要使用 ServiceLocator，首先需要通过调用 set() 或 setComponents() 将 component IDs 注册到定位器的相应组件定义中。</p><p>然后可以调用 get() 来检索具有指定 ID 的 component。定位器将根据定义自动实例化和配置 component。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$locator = <span class="keyword">new</span> \yii\di\ServiceLocator;</span><br><span class="line">$locator-&gt;setComponents([</span><br><span class="line">  <span class="string">'db'</span> =&gt; [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\db\Connection'</span>,</span><br><span class="line">    <span class="string">'dsn'</span> =&gt; <span class="string">'sqlite:path/to/file.db'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'cache'</span> =&gt; [</span><br><span class="line">    <span class="string">'class'</span> =&gt; <span class="string">'yii\caching\DbCache'</span>,</span><br><span class="line">    <span class="string">'db'</span> =&gt; <span class="string">'db'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'search'</span> =&gt; SolrServiceBuilder::build(<span class="string">'127.0.0.1'</span>),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$db = $locator-&gt;get(<span class="string">'db'</span>);  <span class="comment">// or $locator-&gt;db</span></span><br><span class="line">$cache = $locator-&gt;get(<span class="string">'cache'</span>);  <span class="comment">// or $locator-&gt;cache</span></span><br></pre></td></tr></table></figure><p>因为 \yii\base\Module 继承自 ServiceLocator，所以 modules 和 application 都是 service locators。</p><ul><li><code>@property array $components</code> 组件定义或已加载的组件实例的列表 (ID =&gt; definition or instance).</li><li><code>private array $_components</code> 单例组件 <strong>实例</strong> 的 id 索引。</li><li><code>private array $_definitions</code> 组件 <strong>定义</strong> 的 id 索引。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 向此定位器注册组件定义。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * For example,</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // a class name</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('cache', 'yii\caching\FileCache');</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // a configuration array</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('db', [</span></span><br><span class="line"><span class="comment">  *     'class' =&gt; 'yii\db\Connection',</span></span><br><span class="line"><span class="comment">  *     'dsn' =&gt; 'mysql:host=127.0.0.1;dbname=demo',</span></span><br><span class="line"><span class="comment">  *     'username' =&gt; 'root',</span></span><br><span class="line"><span class="comment">  *     'password' =&gt; '',</span></span><br><span class="line"><span class="comment">  *     'charset' =&gt; 'utf8',</span></span><br><span class="line"><span class="comment">  * ]);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // an anonymous function</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('cache', function ($params) &#123;</span></span><br><span class="line"><span class="comment">  *     return new \yii\caching\FileCache;</span></span><br><span class="line"><span class="comment">  * &#125;);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * // an instance</span></span><br><span class="line"><span class="comment">  * $locator-&gt;set('cache', new \yii\caching\FileCache);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * If a component definition with the same ID already exists, it will be overwritten.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $id         component ID (e.g. `db`).</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> mixed  $definition 要注册到此定位器的组件定义。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> InvalidConfigException if the definition is an invalid configuration array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($id, $definition)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 移除之前的 component 实例</span></span><br><span class="line">    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_components[$id]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($definition === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 移除之前的 component 定义</span></span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_definitions[$id]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_object($definition) || is_callable($definition, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="comment">// an object, a class name, or a PHP callable</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_definitions[$id] = $definition;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_array($definition)) &#123;</span><br><span class="line">        <span class="comment">// a configuration array</span></span><br><span class="line">        <span class="comment">// 数组中必须有 class</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($definition[<span class="string">'__class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_definitions[$id] = $definition;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_definitions[$id][<span class="string">'class'</span>] = $definition[<span class="string">'__class'</span>];</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_definitions[$id][<span class="string">'__class'</span>]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>($definition[<span class="string">'class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_definitions[$id] = $definition;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"The configuration for the \"$id\" component must contain a \"class\" element."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Unexpected configuration type for the \"$id\" component: "</span> . gettype($definition));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：</p><p><code>is_callable($definition, true)</code> 也就是第二个参数为 true 时，只检查格式（字符串或者数组），不检测内容（是否真的存在，是否真的可被调用）。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(is_callable(<span class="string">'不是方法名的字符串'</span>, <span class="keyword">false</span>)); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(is_callable(<span class="string">'不是方法名的字符串'</span>, <span class="keyword">true</span>));  <span class="comment">// bool(true)</span></span><br><span class="line"></span><br><span class="line">var_dump(is_callable([<span class="string">'随便写，不是对象'</span>, <span class="string">'随便写，不是对象的方法名'</span>], <span class="keyword">false</span>)); <span class="comment">// bool(false)</span></span><br><span class="line">var_dump(is_callable([<span class="string">'随便写，不是对象'</span>, <span class="string">'随便写，不是对象的方法名'</span>], <span class="keyword">true</span>));  <span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a set of component definitions in this locator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setComponents</span><span class="params">($components)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($components <span class="keyword">as</span> $id =&gt; $component) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set($id, $component);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回具有指定 ID 的组件实例。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $id             component ID (e.g. `db`).</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> bool   $throwException whether to throw an exception if `$id` is not registered with the locator before</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> object|null the component of the specified ID. If `$throwException` is false and `$id` is not registered before, null will be returned.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> InvalidConfigException if `$id` refers to a nonexistent component ID</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> has()</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span> set()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($id, $throwException = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 已实例化过</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_components[$id])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_components[$id];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_definitions[$id])) &#123;</span><br><span class="line">        <span class="comment">// 已定义 未实例化</span></span><br><span class="line">        $definition = <span class="keyword">$this</span>-&gt;_definitions[$id];</span><br><span class="line">        <span class="keyword">if</span> (is_object($definition) &amp;&amp; !$definition <span class="keyword">instanceof</span> Closure) &#123;</span><br><span class="line">            <span class="comment">// 是对象 &amp; 非闭包 直接赋值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_components[$id] = $definition;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 实例化核心方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_components[$id] = Yii::createObject($definition);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($throwException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">"Unknown component ID: $id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Yii 应用程序本质上是一个模块树。</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-service-locator#tree-traversal" target="_blank" rel="noopener">遍历树（Tree traversal）</a></p></blockquote><h2 id="yii-base-Module"><a href="#yii-base-Module" class="headerlink" title="yii\base\Module"></a>yii\base\Module</h2><p>Module 是模块和应用程序类的基类。</p><p>Module 代表一个子应用程序，它本身包含 MVC 元素，如模型、视图、控制器等。</p><p>一个模块可以由 <code>modules|sub-modules</code> 组成。</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-modules" target="_blank" rel="noopener">模块</a></p></blockquote><ul><li>@property-write array $aliases 被定义的别名数组</li><li>@property string $basePath module 的根目录</li><li>@property string $layoutPath 布局文件的根目录 默认值 {viewPath}/layouts</li><li>@property array $modules 模块（索引是 IDs）</li><li>@property-read string $uniqueId modules 的唯一 ID</li><li>@property string $version module 的版本</li><li>@property string $viewPath view files 的根目录 默认值 {basePath}/views</li></ul><p>属性：</p><ul><li>public $params = []; 自定义的模块参数 (name =&gt; value)</li><li>public string $id; 唯一 ID</li><li>public Module|null $module; 该模块的父模块。null 这个模块没有父模块。</li><li>public string|bool|null $layout;</li><li>public $controllerMap = [];</li><li>public string|null $controllerNamespace; if the namespace of this module is <code>foo\bar</code> default <code>foo\bar\controllers</code>。</li><li>public $defaultRoute = ‘default’; The route may consist of child module ID, controller ID, and/or action ID.</li><li>private $_version;</li></ul><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-autoloading" target="_blank" rel="noopener">类自动加载（Autoloading）</a></p></blockquote><p>事件：</p><ul><li>EVENT_BEFORE_ACTION before executing a controller action</li><li>EVENT_AFTER_ACTION after executing a controller action</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($id, $parent = null, $config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;module = $parent;</span><br><span class="line">    <span class="keyword">parent</span>::__construct($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：</p><p>方法重载（overload）是类的多态的一种实现。方法在被调用的时候，虽然方法名字相同，但根据参数的不同可以自动调用相应的函数。但是 PHP 并不直接支持，只用通过 <code>__call</code> 或者 <code>func_get_args()</code> <code>func_num_args()</code> + <code>call_user_func_array()</code> 实现。</p><p>方法重写（override）否重写父类方法只会根据方法名是否一致判断（5.3 以后重写父类方法参数个数必须一致）。访问级别只可以等于或者宽松于父类（private 的重写可以是 private protected public 佛是重新定义了一个方法）。final 修饰的类方法不可被子类重写。</p><p><code>__construct</code> 的参数子类可以与父类不同。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前请求的这个模块类的实例。</span></span><br><span class="line"><span class="comment"> * 如果当前未请求模块类，则返回 null。</span></span><br><span class="line"><span class="comment"> * 提供此方法是为了让您从模块内的任何位置访问模块实例。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> static|null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $class = get_called_class();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">isset</span>(Yii::$app-&gt;loadedModules[$class]) ? Yii::$app-&gt;loadedModules[$class] : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get_called_class();</code> PHP 5.5 后等于 <code>static::class</code> the “Late Static Binding” class name.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个 ID，该 ID 在当前应用程序的所有模块中唯一标识此模块。</span></span><br><span class="line"><span class="comment"> * 注意，如果模块是一个 application，将返回一个空字符串。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string the unique ID of the module.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUniqueId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否有父模块</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;module ? ltrim(<span class="keyword">$this</span>-&gt;module-&gt;getUniqueId() . <span class="string">'/'</span> . <span class="keyword">$this</span>-&gt;id, <span class="string">'/'</span>) : <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回模块的根目录。</span></span><br><span class="line"><span class="comment">  * 它默认是包含模块类文件的目录。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> string the root directory of the module.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBasePath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_basePath === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 反射</span></span><br><span class="line">        $class = <span class="keyword">new</span> \ReflectionClass(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="comment">// $class-&gt;getFileName() 获取类文件的全路径</span></span><br><span class="line">        <span class="comment">// dirname 获取文件的目录</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_basePath = dirname($class-&gt;getFileName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_basePath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置模块的根目录。</span></span><br><span class="line"><span class="comment"> * 此方法只能在 构造函数 的开头调用。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $path the root directory of the module.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidArgumentException if the directory does not exist.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBasePath</span><span class="params">($path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $path = Yii::getAlias($path);</span><br><span class="line">    $p = strncmp($path, <span class="string">'phar://'</span>, <span class="number">7</span>) === <span class="number">0</span> ? $path : realpath($path);</span><br><span class="line">    <span class="keyword">if</span> (is_string($p) &amp;&amp; is_dir($p)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_basePath = $p;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">"The directory does not exist: $path"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$dir = <span class="string">'./../yii2-app-basic/../'</span>;</span><br><span class="line">var_dump(dirname($dir));</span><br><span class="line">var_dump(realpath($dir));</span><br><span class="line"></span><br><span class="line"><span class="comment">// realpath 返回规范化的绝对路径名</span></span><br><span class="line"><span class="comment">// string(19) "./../yii2-app-basic"</span></span><br><span class="line"><span class="comment">// string(23) "/Users/bob/web"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制安全的前 n 个字符的字符串比较</span></span><br><span class="line"><span class="comment">// strncmp($path, 'phar://', 7) === 0</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns current module version.</span></span><br><span class="line"><span class="comment"> * 如果version未显式设置，将使用 defaultVersion() 方法确定其值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string the version of this module.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getVersion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_version === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_version = <span class="keyword">$this</span>-&gt;defaultVersion();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断 _version 是否是标量</span></span><br><span class="line">        <span class="keyword">if</span> (!is_scalar(<span class="keyword">$this</span>-&gt;_version)) &#123;</span><br><span class="line">            <span class="comment">// 对闭包的支持</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_version = call_user_func(<span class="keyword">$this</span>-&gt;_version, <span class="keyword">$this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行由路指定的控制器动作。</span></span><br><span class="line"><span class="comment"> * 这个方法解析指定的路由，并创建相应的子模块、控制器和动作实例。</span></span><br><span class="line"><span class="comment"> * 然后调用 Controller::runAction() 以使用给定的参数运行操作。</span></span><br><span class="line"><span class="comment"> * 如果路由为空，该方法将使用 defaultRoute。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $route the route that specifies the action.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $params the parameters to be passed to the action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed the result of the action.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidRouteException if the requested route cannot be resolved into an action successfully.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">runAction</span><span class="params">($route, $params = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建 ctrl 见下文</span></span><br><span class="line">    $parts = <span class="keyword">$this</span>-&gt;createController($route);</span><br><span class="line">    <span class="keyword">if</span> (is_array($parts)) &#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">@var</span> $controller Controller */</span></span><br><span class="line">        <span class="keyword">list</span>($controller, $actionID) = $parts;</span><br><span class="line">        <span class="comment">// 获取旧的</span></span><br><span class="line">        $oldController = Yii::$app-&gt;controller;</span><br><span class="line">        <span class="comment">// 绑定新的</span></span><br><span class="line">        Yii::$app-&gt;controller = $controller;</span><br><span class="line">        <span class="comment">// 运行 ctrl action</span></span><br><span class="line">        $result = $controller-&gt;runAction($actionID, $params);</span><br><span class="line">        <span class="comment">// 如果旧的不等于空，回绑定旧的</span></span><br><span class="line">        <span class="keyword">if</span> ($oldController !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            Yii::$app-&gt;controller = $oldController;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取标示</span></span><br><span class="line">    $id = <span class="keyword">$this</span>-&gt;getUniqueId();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidRouteException(<span class="string">'Unable to resolve the request "'</span> . ($id === <span class="string">''</span> ? $route : $id . <span class="string">'/'</span> . $route) . <span class="string">'".'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于给定的路由创建一个控制器实例。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 路由应该是相对于这个模块的。该方法实现了以下算法来解析给定的路由:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 如果路由为空，则使用 defaultRoute;</span></span><br><span class="line"><span class="comment"> * 2. 如果在 controllerMap 中找到路由的第一个段，则根据 controllerMap 中找到的相应配置创建一个控制器;</span></span><br><span class="line"><span class="comment"> * 3. 如果路由的第一个片段是一个有效的模块 ID，如 modules 中声明的，用路由的其余部分调用模块的 createController();</span></span><br><span class="line"><span class="comment"> * 4. 给定的路由格式为 `abc/def/xyz`. 尝试 `abc\DefController` 或者 `abc\def\XyzController` class within the [[controllerNamespace|controller namespace]].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果上面的任何一个步骤解析为一个控制器，它将与路由的其余部分一起返回，后者将被视为动作 ID。否则，将返回 false。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $route the route consisting of module, controller and action IDs.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array|bool 如果控制器创建成功，它将与请求的操作ID一起返回。否则将返回 false。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the controller class and its file do not match.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createController</span><span class="params">($route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($route === <span class="string">''</span>) &#123;</span><br><span class="line">        $route = <span class="keyword">$this</span>-&gt;defaultRoute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double slashes or leading/ending slashes may cause substr problem</span></span><br><span class="line">    $route = trim($route, <span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">if</span> (strpos($route, <span class="string">'//'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strpos($route, <span class="string">'/'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// abc/def/xyz</span></span><br><span class="line">        <span class="comment">// id: abc</span></span><br><span class="line">        <span class="comment">// route: def/xyz</span></span><br><span class="line">        <span class="keyword">list</span>($id, $route) = explode(<span class="string">'/'</span>, $route, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $id = $route;</span><br><span class="line">        $route = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// module and controller map take precedence</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;controllerMap[$id])) &#123;</span><br><span class="line">        <span class="comment">// 通过 controllerMap 创建</span></span><br><span class="line">        $controller = Yii::createObject(<span class="keyword">$this</span>-&gt;controllerMap[$id], [$id, <span class="keyword">$this</span>]);</span><br><span class="line">        <span class="keyword">return</span> [$controller, $route];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取父级模块</span></span><br><span class="line">    $module = <span class="keyword">$this</span>-&gt;getModule($id);</span><br><span class="line">    <span class="keyword">if</span> ($module !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过父级模块创建</span></span><br><span class="line">        <span class="keyword">return</span> $module-&gt;createController($route);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// id abc</span></span><br><span class="line">    <span class="comment">// route def/xyz</span></span><br><span class="line">    <span class="keyword">if</span> (($pos = strrpos($route, <span class="string">'/'</span>)) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        $id .= <span class="string">'/'</span> . substr($route, <span class="number">0</span>, $pos);</span><br><span class="line">        $route = substr($route, $pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// id abc/def</span></span><br><span class="line">    <span class="comment">// route xyz</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ctrl 见下文</span></span><br><span class="line">    $controller = <span class="keyword">$this</span>-&gt;createControllerByID($id);</span><br><span class="line">    <span class="keyword">if</span> ($controller === <span class="keyword">null</span> &amp;&amp; $route !== <span class="string">''</span>) &#123;</span><br><span class="line">        $controller = <span class="keyword">$this</span>-&gt;createControllerByID($id . <span class="string">'/'</span> . $route);</span><br><span class="line">        $route = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $controller === <span class="keyword">null</span> ? <span class="keyword">false</span> : [$controller, $route];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过给定的 controller ID 创建 controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 控制器 ID 与该模块相关。控制器类的命名空间应该在 controllerNamespace 下。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意，此方法不检查 modules 或 controllerMap。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $id the controller ID.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Controller|null 如果控制器 ID 无效，则为 null。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidConfigException if the controller class and its file name do not match. 此异常只会在 debug 模式抛出。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createControllerByID</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// id abc/def</span></span><br><span class="line">    $pos = strrpos($id, <span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">if</span> ($pos === <span class="keyword">false</span>) &#123;</span><br><span class="line">        $prefix = <span class="string">''</span>;</span><br><span class="line">        $className = $id;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $prefix = substr($id, <span class="number">0</span>, $pos + <span class="number">1</span>);</span><br><span class="line">        $className = substr($id, $pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// prefix abc</span></span><br><span class="line">    <span class="comment">// className def</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Checks if class name or prefix is incorrect</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isIncorrectClassNameOrPrefix($className, $prefix)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// https://www.pagecolumn.com/tool/pregtest.htm</span></span><br><span class="line">    <span class="comment">// 中划线转大驼峰</span></span><br><span class="line">    $className = preg_replace_callback(<span class="string">'%-([a-z0-9_])%i'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($matches)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ucfirst($matches[<span class="number">1</span>]);</span><br><span class="line">        &#125;, ucfirst($className)) . <span class="string">'Controller'</span>;</span><br><span class="line">    $className = ltrim(<span class="keyword">$this</span>-&gt;controllerNamespace . <span class="string">'\\'</span> . str_replace(<span class="string">'/'</span>, <span class="string">'\\'</span>, $prefix) . $className, <span class="string">'\\'</span>);</span><br><span class="line">    <span class="keyword">if</span> (strpos($className, <span class="string">'-'</span>) !== <span class="keyword">false</span> || !class_exists($className)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// one of its parents or implements it</span></span><br><span class="line">    <span class="comment">// 与 instanceof 的区别是：instanceof 可以是此类的实例，is_subclass_of 要是此类的子类</span></span><br><span class="line">    <span class="keyword">if</span> (is_subclass_of($className, <span class="string">'yii\base\Controller'</span>)) &#123;</span><br><span class="line">        $controller = Yii::createObject($className, [$id, <span class="keyword">$this</span>]);</span><br><span class="line">        <span class="keyword">return</span> get_class($controller) === $className ? $controller : <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (YII_DEBUG) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidConfigException(<span class="string">'Controller class must extend from \\yii\\base\\Controller.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks if class name or prefix is incorrect</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $className</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">isIncorrectClassNameOrPrefix</span><span class="params">($className, $prefix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'%^[a-z][a-z0-9\\-_]*$%'</span>, $className)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($prefix !== <span class="string">''</span> &amp;&amp; !preg_match(<span class="string">'%^[a-z0-9_/]+$%i'</span>, $prefix)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/joyco773/p/6023180.html" target="_blank" rel="noopener">PHP 面向对象编程之深入理解方法重载与方法覆盖（多态）| cnblogs</a></li><li><a href="https://www.cnblogs.com/joyco773/p/6020334.html" target="_blank" rel="noopener">PHP 类方法重写原则 | cnblogs</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书接上文 &lt;code&gt;yii\web\Application&lt;/code&gt; 类的层级结构：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yii\b
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 02 - Configurable BaseObject Component</title>
    <link href="https://zyf.im/2021/07/27/reading-yii2-source-code-02/"/>
    <id>https://zyf.im/2021/07/27/reading-yii2-source-code-02/</id>
    <published>2021-07-27T07:52:00.000Z</published>
    <updated>2022-02-11T08:40:01.083Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文 <code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><h2 id="yii-base-Configurable"><a href="#yii-base-Configurable" class="headerlink" title="yii\base\Configurable"></a>yii\base\Configurable</h2><p>是一个 <code>interface</code>。实现此接口意味着：这些类支持通过其 <code>__constructor</code> 的最后一个数组参数，设置其 <code>properties</code>。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constructor</span><span class="params">($param1, $param2, ..., $config = [])</span></span></span><br></pre></td></tr></table></figure><p>通过 <code>Yii::configure($this, $config);</code> 实现：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span><span class="params">($object, $properties)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($properties <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">        $object-&gt;$name = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口没有声明任何一个方法。主要给 <code>yii\di\Container</code> 使用，以便它可以将 对象配置 作为最后一个参数传递给实现类的构造函数，后文再研究。</p><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-configurations" target="_blank" rel="noopener">配置（Configurations）</a></p></blockquote><h2 id="yii-base-BaseObject"><a href="#yii-base-BaseObject" class="headerlink" title="yii\base\BaseObject"></a>yii\base\BaseObject</h2><p>是个基类；实现了 <code>property</code>、<code>初始化生命周期</code> 相关功能。</p><p>几乎每个 Yii 框架的核心类都继承自 <code>yii\base\BaseObject</code> 或其子类。</p><h3 id="property-属性"><a href="#property-属性" class="headerlink" title="property 属性"></a>property 属性</h3><p>通过重写 <code>__get</code> <code>__set</code> 实现属性由 getter/setter 定义。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> $_label;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLabel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLabel</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;_label = trim($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getter/setter 定义的 属性 与 类成员变量 区别是：当这种属性被读取时，对应的 getter 方法将被调用；而当属性被赋值时，对应的 setter 方法就调用。如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// equivalent to $label = $object-&gt;getLabel();</span></span><br><span class="line">$label = $object-&gt;label;</span><br><span class="line"></span><br><span class="line"><span class="comment">// equivalent to $object-&gt;setLabel('abc');</span></span><br><span class="line">$object-&gt;label = <span class="string">'abc'</span>;</span><br></pre></td></tr></table></figure><p>这里有个技巧，在类上可以通过注释帮助 IDE 提示属性：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span>-read Behavior[] $behaviors ..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">BaseObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个属性只有一个 getter 方法而没有 setter 方法，那么它就被认为是 <code>只读的</code>。在这种情况下，试图修改属性值将导致 <code>InvalidCallException</code>。</p><p>可以调用 <code>hasProperty()</code>、<code>canGetProperty()</code>、<code>canSetProperty()</code> 来检查属性是否存在。依托的方法 <code>method_exists</code>、<code>property_exists</code>。</p><p>通过 getter/setter 定义的 属性 也有一些特殊规则和限制：</p><ul><li>这类属性的名字是 <strong>不区分大小写 case-insensitive</strong> 的。如，<code>$object-&gt;label</code> 和 <code>$object-&gt;Label</code> 是同一个属性。 因为 PHP 方法名是不区分大小写的。（所以内部函数是下划线命名法？）</li><li>如果这类属性的名字和类成员变量相同，以后者为准。例如，假设以上 Foo 类有个 label 成员变量，然后给 <code>$object-&gt;label = &#39;abc&#39;</code> 赋值，将赋给成员变量而不是 setter setLabel() 方法。这是因为 <code>__set</code> 是在没有此成员变量是触发。</li><li>这些属性不支持可见性。如果属性是公共的、受保护的或私有的，它与定义的 getter/setter 方法没有区别。</li><li>这类属性只能由非静态 getter/setter 定义，静态方法不会以相同的方式处理。</li><li>对 property_exists() 的调用，无法判断魔法属性。应该调用 hasProperty()。</li></ul><p>🤔 思考：这里增强了类的属性的操作，是否不利于面向对象编程与理解，因为看起来方便的直接的属性操作是否破坏了封装性？</p><blockquote><p>详细参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-properties" target="_blank" rel="noopener">属性（Properties）</a></p></blockquote><h3 id="initialization-life-cycle"><a href="#initialization-life-cycle" class="headerlink" title="initialization life cycle"></a>initialization life cycle</h3><p>实现了对象初始化的生命周期 <code>initialization life cycle</code>：</p><ol><li><code>__construct</code> 被调用。</li><li>对象属性将根据 <a href="#yii\base\Configurable">Configurable</a> 被初始化。</li><li><code>init()</code> 被调用。</li></ol><p>2、3 发生在构造函数的尾部，推荐在 <code>init()</code> 再进行相关初始化操作，因为此时对象属性已经完成了设置。</p><p>为保证以上生命周期，BaseObject 的子类应该像如下方式重新构造方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($param1, $param2, ..., $config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">parent</span>::__construct($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-base-Component"><a href="#yii-base-Component" class="headerlink" title="yii\base\Component"></a>yii\base\Component</h2><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-components" target="_blank" rel="noopener">组件（Components）</a></p></blockquote><p>是个基类；除了在父类 <a href="#yii\base\BaseObject">BaseObject</a> 中实现的 <code>property</code> 特性外，还提供了 <code>event</code>、<code>behavior</code> 特性。</p><ul><li><code>private $_events</code> the attached event handlers (event name =&gt; handlers)</li><li><code>private $_eventWildcards</code> (event name wildcard =&gt; handlers)</li><li><code>private $_behaviors</code> the attached behaviors (behavior name =&gt; behavior). This is <code>null</code> when not initialized.</li></ul><h3 id="Events-事件"><a href="#Events-事件" class="headerlink" title="Events 事件"></a>Events 事件</h3><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events" target="_blank" rel="noopener">事件（Events）</a></p></blockquote><p>Event is a way to “inject” custom code into existing code at certain places.</p><p>事件称标识在定义它的类中应该是唯一的。事件名称 <strong>区分大小写 case-sensitive</strong>。</p><p>调用 <code>on()</code> 附加到一个事件。一个或多个 PHP 回调函数，称为 <em>event handlers 事件处理器</em>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches an event handler to an event.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The event handler must be a valid PHP callback.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * function ($event) &#123; ... &#125;         // anonymous function</span></span><br><span class="line"><span class="comment"> * [$object, 'handleClick']          // $object-&gt;handleClick()</span></span><br><span class="line"><span class="comment"> * ['Page', 'handleClick']           // Page::handleClick()</span></span><br><span class="line"><span class="comment"> * 'handleClick'                     // global function handleClick()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 事件处理程序必须使用以下签名定义，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * function ($event)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Since 2.0.14 you can specify event name as a wildcard pattern:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * $component-&gt;on('event.group.*', function ($event) &#123;</span></span><br><span class="line"><span class="comment"> *     Yii::trace($event-&gt;name . ' is triggered.');</span></span><br><span class="line"><span class="comment"> * &#125;);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $name the event name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable $handler the event handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $data 事件触发时要传递给事件处理程序的数据。</span></span><br><span class="line"><span class="comment"> *                    当事件处理器被调用时，可以通过 event::data 访问该数据。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool $append 是否将 新的事件处理程序 追加到现有处理程序列表的 末尾。</span></span><br><span class="line"><span class="comment"> *                     如果为 false，新的处理程序 将插入到现有处理程序列表的开头。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> off()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">($name, $handler, $data = null, $append = true)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 确保在 behaviors() 中声明的行为被附加到这个组件。</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strpos($name, <span class="string">'*'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 通配符模式</span></span><br><span class="line">        <span class="keyword">if</span> ($append || <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;_eventWildcards[$name])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_eventWildcards[$name][] = [$handler, $data];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            array_unshift(<span class="keyword">$this</span>-&gt;_eventWildcards[$name], [$handler, $data]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($append || <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;_events[$name])) &#123;</span><br><span class="line">        <span class="comment">// append = true 插入尾部</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_events[$name][] = [$handler, $data];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 插入头部</span></span><br><span class="line">        array_unshift(<span class="keyword">$this</span>-&gt;_events[$name], [$handler, $data]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>trigger()</code> 来 raise 一个事件：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Triggers an event.</span></span><br><span class="line"><span class="comment"> * 它调用事件的所有附加处理程序，包括 class-level 处理程序。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $name the event name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Event $event the event parameter. 如果不设置，将创建一个默认的 Event 对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">($name, Event $event = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line"></span><br><span class="line">    $eventHandlers = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_eventWildcards <span class="keyword">as</span> $wildcard =&gt; $handlers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringHelper::matchWildcard($wildcard, $name)) &#123;</span><br><span class="line">            $eventHandlers = array_merge($eventHandlers, $handlers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;_events[$name])) &#123;</span><br><span class="line">        $eventHandlers = array_merge($eventHandlers, <span class="keyword">$this</span>-&gt;_events[$name]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($eventHandlers)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($event === <span class="keyword">null</span>) &#123;</span><br><span class="line">            $event = <span class="keyword">new</span> Event();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($event-&gt;sender === <span class="keyword">null</span>) &#123;</span><br><span class="line">            $event-&gt;sender = <span class="keyword">$this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $event-&gt;handled = <span class="keyword">false</span>;</span><br><span class="line">        $event-&gt;name = $name;</span><br><span class="line">        <span class="keyword">foreach</span> ($eventHandlers <span class="keyword">as</span> $handler) &#123;</span><br><span class="line">            <span class="comment">// $handler is [callable $handler, $data]</span></span><br><span class="line">            $event-&gt;data = $handler[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 调用</span></span><br><span class="line">            call_user_func($handler[<span class="number">0</span>], $event);</span><br><span class="line">            <span class="comment">// 如果事件 handled = true，停止进一步的处理</span></span><br><span class="line">            <span class="keyword">if</span> ($event-&gt;handled) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 class-level attached 处理程序</span></span><br><span class="line">    <span class="comment">// static $_eventWildcards and $_events</span></span><br><span class="line">    <span class="comment">// 待研究</span></span><br><span class="line">    Event::trigger(<span class="keyword">$this</span>, $name, $event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用类常量来表示事件名：</p><ol><li>它可以防止拼写错误并支持 IDE 的自动完成。</li><li>只要简单检查常量声明就能了解一个类支持哪些事件。</li></ol><p>类级别的事件处理器：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches an event handler to a class-level event.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * When a class-level event is triggered, event handlers attached</span></span><br><span class="line"><span class="comment"> * to that class and all parent classes will be invoked.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string   $class   the fully qualified class name to which the event handler needs to attach</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string   $name    the event name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> callable $handler the event handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed    $data    事件触发时要传递给事件处理程序的数据。</span></span><br><span class="line"><span class="comment"> *                          When the event handler is invoked, this data can be accessed via [[Event::data]].</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool     $append  whether to append new event handler to the end of the existing</span></span><br><span class="line"><span class="comment"> *                          handler list. If `false`, the new handler will be inserted at the beginning of the existing handler list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> off()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span><span class="params">($class, $name, $handler, $data = null, $append = true)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> ($append || <span class="keyword">empty</span>(<span class="keyword">self</span>::$_events[$name][$class])) &#123;</span><br><span class="line">        <span class="keyword">self</span>::$_events[$name][$class][] = [$handler, $data];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        array_unshift(<span class="keyword">self</span>::$_events[$name][$class], [$handler, $data]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Event::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_INSERT, <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123;</span><br><span class="line">    Yii::trace(get_class($event-&gt;sender) . <span class="string">' is inserted.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Since 2.0.14 you can specify either class name or event name as a wildcard pattern:</span></span><br><span class="line"></span><br><span class="line">Event::on(<span class="string">'app\models\db\*'</span>, <span class="string">'*Insert'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123;</span><br><span class="line">    Yii::trace(get_class($event-&gt;sender) . <span class="string">' is inserted.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>每当 <code>ActiveRecord</code> 或其子类的实例触发 <code>EVENT_AFTER_INSERT</code> 事件时， 这个事件处理器都会执行。在这个处理器中，可以通过 <code>$event-&gt;sender</code> 获取触发事件的对象。</p><p>You can also attach a handler to an event when configuring a component with a configuration array.<br>The syntax is like the following:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">'on add'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123; ... &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>where <code>on add</code> stands for attaching an event to the <code>add</code> event.</p><p>其他官方文档：</p><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events#interface-level-event-handlers" target="_blank" rel="noopener">使用接口事件（Events using interfaces）</a></li><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events#global-events" target="_blank" rel="noopener">全局事件（Global Events）</a></li><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-events#wildcard-events" target="_blank" rel="noopener">通配符事件（Wildcard Events）</a></li></ul><h3 id="Behaviors-行为"><a href="#Behaviors-行为" class="headerlink" title="Behaviors 行为"></a>Behaviors 行为</h3><blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-behaviors" target="_blank" rel="noopener">行为（Behaviors）</a></p></blockquote><p>行为是 <code>yii\base\Behavior</code> 或其子类的实例。行为，也称为 <code>mixins</code>，可以无须改变类继承关系即可增强一个已有的 <code>Component</code> 类功能。</p><p>它可以将自己的方法和属性 注入 到组件中，并通过组件直接访问它们。它还可以响应组件中触发的事件，从而拦截正常的代码执行。</p><p>定义行为，<code>yii\base\Behavior</code>：</p><ul><li><code>public $owner</code> Component|null，行为的所有者。</li><li><code>private $_attachedEvents</code> Attached events handlers。</li></ul><p><code>yii\base\Behavior</code> 为 owner 的 events 声明事件处理器：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为 owner 的 events 声明事件处理器。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 子类可以重写这个方法 来声明哪些 PHP 回调函数应该附加到 owner 组件的事件上。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The callbacks can be any of the following:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - method in this behavior: `'handleClick'`, equivalent to `[$this, 'handleClick']`</span></span><br><span class="line"><span class="comment"> * - object method: `[$object, 'handleClick']`</span></span><br><span class="line"><span class="comment"> * - static method: `['Page', 'handleClick']`</span></span><br><span class="line"><span class="comment"> * - anonymous function: `function ($event) &#123; ... &#125;`</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The following is an example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *     Model::EVENT_BEFORE_VALIDATE =&gt; 'myBeforeValidate',</span></span><br><span class="line"><span class="comment"> *     Model::EVENT_AFTER_VALIDATE =&gt; 'myAfterValidate',</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array 事件名 (array keys) and 相应的事件处理器方法 (array values).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">events</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\base\Component</code> 访问行为中的 <strong>属性</strong> 的逻辑：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">// behavior property</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_behaviors <span class="keyword">as</span> $behavior) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($behavior-&gt;canGetProperty($name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $behavior-&gt;$name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\base\Component</code> 访问行为中的 <strong>方法</strong> 的逻辑：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_behaviors <span class="keyword">as</span> $object) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($object-&gt;hasMethod($name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([$object, $name], $params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnknownMethodException(<span class="string">'Calling unknown method: '</span>.get_class(<span class="keyword">$this</span>).<span class="string">"::$name()"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\base\Component</code> 附加行为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches a behavior to this component.</span></span><br><span class="line"><span class="comment"> * This method will create the behavior object based on the given</span></span><br><span class="line"><span class="comment"> * configuration. After that, the behavior object will be attached to</span></span><br><span class="line"><span class="comment"> * this component by calling the [[Behavior::attach()]] method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string                $name     the name of the behavior</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|array|Behavior $behavior the behavior configuration.</span></span><br><span class="line"><span class="comment"> * This can be one of the following:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  - a [[Behavior]] object</span></span><br><span class="line"><span class="comment"> *  - a string specifying the behavior class</span></span><br><span class="line"><span class="comment"> *  - an object configuration array that will be passed to [[Yii::createObject()]] to create the behavior object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Behavior the behavior object</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> detachBehavior()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attachBehavior</span><span class="params">($name, $behavior)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureBehaviors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;attachBehaviorInternal($name, $behavior);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Makes sure that the behaviors declared in [[behaviors()]] are attached to this component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ensureBehaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如属性的注释，This is `null` when not initialized.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_behaviors === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 未初始化</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_behaviors = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;behaviors() <span class="keyword">as</span> $name =&gt; $behavior) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;attachBehaviorInternal($name, $behavior);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attaches a behavior to this component.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|int $name the name of the behavior. 如果这是一个整数，这意味着该行为是匿名的。</span></span><br><span class="line"><span class="comment"> *                         否则，该行为是命名行为，任何具有相同名称的现有行为将首先分离。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|array|Behavior $behavior the behavior to be attached</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Behavior the attached behavior.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">attachBehaviorInternal</span><span class="params">($name, $behavior)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!($behavior <span class="keyword">instanceof</span> Behavior)) &#123;</span><br><span class="line">        <span class="comment">// 当是 string or array 时</span></span><br><span class="line">        $behavior = Yii::createObject($behavior);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is_int($name)) &#123;</span><br><span class="line">        <span class="comment">// name 是数字</span></span><br><span class="line">        <span class="comment">// 1. 绑定 behavior 的 owner 为 $this</span></span><br><span class="line">        <span class="comment">// 2. 在 events 里 声明附加事件处理器</span></span><br><span class="line">        $behavior-&gt;attach(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="comment">// 注册</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_behaviors[] = $behavior;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_behaviors[$name])) &#123;</span><br><span class="line">            <span class="comment">// 已经存在，解绑</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_behaviors[$name]-&gt;detach();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绑定</span></span><br><span class="line">        $behavior-&gt;attach(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="comment">// 注册</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_behaviors[$name] = $behavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $behavior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/concept-behaviors#comparison-with-traits" target="_blank" rel="noopener">比较行为与 Traits</a></li></ul><p><code>yii\behaviors</code> 层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Behavior</span><br><span class="line">|---- AttributeBehavior</span><br><span class="line">      |---- BlameableBehavior 自动使用当前用户 ID 填充指定的属性。</span><br><span class="line">      |---- OptimisticLockBehavior 乐观锁 使用列名自动升级模型的锁版本。</span><br><span class="line">      |---- SluggableBehavior 自动用一个值填充指定的属性，该值可以在URL中使用。</span><br><span class="line">      |---- TimestampBehavior 自动用当前时间戳填充指定的属性。</span><br><span class="line"></span><br><span class="line">|---- AttributesBehavior</span><br><span class="line">|---- AttributeTypecastBehavior 提供自动模型属性类型转换的能力。</span><br><span class="line">|---- CacheableWidgetBehavior 可缓存小部件行为根据指定的持续时间和依赖关系自动缓存小部件内容。</span><br></pre></td></tr></table></figure><p><code>yii\behaviors\AttributeBehavior</code> 当特定事件发生时，自动将指定的值赋给 ActiveRecord 对象的一个或多个属性。</p><ul><li><code>public $attributes = [];</code> 要用 value 指定的值自动填充的属性列表。</li><li><code>public $value;</code> 将分配给当前属性的值。这可以是匿名函数。</li><li><code>public $skipUpdateOnClean = true;</code> 是否在 $owner 未被修改时跳过此行为。</li><li><code>public $preserveNonEmptyValues = false;</code> 是否保留原来非空属性值。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Evaluates 属性值并将其分配给当前属性。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Event $event</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evaluateAttributes</span><span class="params">($event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;skipUpdateOnClean</span><br><span class="line">        &amp;&amp; $event-&gt;name == ActiveRecord::EVENT_BEFORE_UPDATE</span><br><span class="line">        <span class="comment">// 返回自最近加载或保存以来已被修改的属性值 如果没有修改返回 []</span></span><br><span class="line">        &amp;&amp; <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;owner-&gt;dirtyAttributes)</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $event-&gt;name eg ActiveRecord::EVENT_BEFORE_INSERT</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;attributes[$event-&gt;name])) &#123;</span><br><span class="line">        <span class="comment">// str -&gt; [str]</span></span><br><span class="line">        $attributes = (<span class="keyword">array</span>) <span class="keyword">$this</span>-&gt;attributes[$event-&gt;name];</span><br><span class="line">        $value = <span class="keyword">$this</span>-&gt;getValue($event);</span><br><span class="line">        <span class="keyword">foreach</span> ($attributes <span class="keyword">as</span> $attribute) &#123;</span><br><span class="line">            <span class="comment">// ignore attribute names which are not string (e.g. when set by TimestampBehavior::updatedAtAttribute)</span></span><br><span class="line">            <span class="comment">// 确保 attribute 是字符串</span></span><br><span class="line">            <span class="keyword">if</span> (is_string($attribute)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;preserveNonEmptyValues &amp;&amp; !<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;owner-&gt;$attribute)) &#123;</span><br><span class="line">                    <span class="comment">// 保留原来非空属性值</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;owner-&gt;$attribute = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AttributeBehavior</code> 使用例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'class'</span> =&gt; AttributeBehavior::class,</span><br><span class="line">      <span class="string">'attributes'</span> =&gt; [</span><br><span class="line">          ActiveRecord::EVENT_BEFORE_INSERT =&gt; <span class="string">'attribute1'</span>,</span><br><span class="line">          ActiveRecord::EVENT_BEFORE_UPDATE =&gt; <span class="string">'attribute2'</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'value'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($event)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'some value'</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yii\behaviors\OptimisticLockBehavior</code> 乐观锁 使用列名自动升级模型的锁版本。</p><p>乐观锁定允许多个用户访问同一记录进行编辑，从而避免潜在的冲突。如果用户试图在一些过期数据上保存记录（因为另一个用户修改了数据），则会抛出 <code>StaleObjectException</code> 异常，并跳过更新或删除操作。</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书接上文 &lt;code&gt;yii\web\Application&lt;/code&gt; 类的层级结构：&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yii\b
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Yii2 源码阅读 01 - index.php</title>
    <link href="https://zyf.im/2021/07/26/reading-yii2-source-code-01/"/>
    <id>https://zyf.im/2021/07/26/reading-yii2-source-code-01/</id>
    <published>2021-07-26T07:27:13.000Z</published>
    <updated>2022-02-11T08:39:30.832Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参见：<a href="https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-entry-scripts" target="_blank" rel="noopener">入口脚本（Entry Scripts）</a></p></blockquote><h2 id="web-index"><a href="#web-index" class="headerlink" title="web/index"></a>web/index</h2><p>步骤：</p><ol><li>defined const</li><li>composer vendor/autoload</li><li>require Yii.php</li><li>require config web.php</li><li>new Application and run()</li></ol><h3 id="Yii-php"><a href="#Yii-php" class="headerlink" title="Yii.php"></a>Yii.php</h3><p>1、2 比较简单，从 3 开始，进入 <code>/../vendor/yiisoft/yii2/Yii.php&#39;</code> 首行：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/BaseYii.php'</span>;</span><br></pre></td></tr></table></figure><p>进入 <code>BaseYii.php</code>：</p><p>头部仍是 defined const，<code>YII_DEBUG false</code> <code>YII_ENV prod</code>；</p><p><code>YII_ENABLE_ERROR_HANDLER true</code> 默认启用错误处理，在 <code>yii\base\Application::registerErrorHandler</code> 中使用：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Registers the errorHandler component as a PHP error handler.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $config application config</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerErrorHandler</span><span class="params">(&amp;$config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (YII_ENABLE_ERROR_HANDLER) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>][<span class="string">'class'</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Error: no errorHandler component is configured.\n"</span>;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="string">'errorHandler'</span>, $config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="keyword">unset</span>($config[<span class="string">'components'</span>][<span class="string">'errorHandler'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;getErrorHandler()-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$this-&gt;set</code> 调用的 <code>yii\di\ServiceLocator::set</code> 注册 component 定义定位器，后文再分析。</p><p>获取 error handler 注册 <code>yii\base\ErrorHandler</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register this error handler.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.32 this will not do anything if the error handler was already registered</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_registered) &#123;</span><br><span class="line">        ini_set(<span class="string">'display_errors'</span>, <span class="keyword">false</span>);</span><br><span class="line">        set_exception_handler([<span class="keyword">$this</span>, <span class="string">'handleException'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (defined(<span class="string">'HHVM_VERSION'</span>)) &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleHhvmError'</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set_error_handler([<span class="keyword">$this</span>, <span class="string">'handleError'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;memoryReserveSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_memoryReserve = str_repeat(<span class="string">'x'</span>, <span class="keyword">$this</span>-&gt;memoryReserveSize);</span><br><span class="line">        &#125;</span><br><span class="line">        register_shutdown_function([<span class="keyword">$this</span>, <span class="string">'handleFatalError'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_registered = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误处理：</p><ul><li>set_exception_handler 自定义异常处理</li><li>set_error_handler 设置用户自定义的错误处理函数</li><li>register_shutdown_function 定义 PHP 程序执行完成后执行的函数</li></ul><p>在 <code>handleError</code> 里最后，将抛出 <code>yii\base\ErrorException</code>，将处理交给 <code>handleException</code>。</p><blockquote><p>更详细的 异常处理 将在后文再分析，此处不展开。</p></blockquote><p><code>BaseYii</code> is the core helper class for the Yii framework.</p><p>返回 <code>Yii</code> 类：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yii</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">BaseYii</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有再添加额外的属性或方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自动加载的执行方法 Yii::autoload</span></span><br><span class="line">spl_autoload_register([<span class="string">'Yii'</span>, <span class="string">'autoload'</span>], <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $classMap 是 Yii 自动加载机制使用的 类映射</span></span><br><span class="line"><span class="comment">// 数组键是类名(不带前导反斜杠)，数组值是相应的类文件路径(或[路径别名])</span></span><br><span class="line"><span class="comment">// 主要被用于 Yii::autoload</span></span><br><span class="line">Yii::$classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/classes.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Container the dependency injection (DI) container used by createObject()</span></span><br><span class="line"><span class="comment">// 可以使用 Container::set() 来设置类所需的依赖项及其初始属性值</span></span><br><span class="line">Yii::$container = <span class="keyword">new</span> yii\di\Container();</span><br></pre></td></tr></table></figure><p>分析下 <code>Yii::autoload($className)</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class autoload loader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当 PHP 遇到未知类时，将自动调用此方法。</span></span><br><span class="line"><span class="comment"> * 该方法将按照以下过程尝试 include 类文件:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. Search in [[classMap]];</span></span><br><span class="line"><span class="comment"> * 2. If the class is namespaced (e.g. `yii\base\Component`),</span></span><br><span class="line"><span class="comment"> *    它将尝试包含与相应路径 别名 相关联的文件 (e.g. `<span class="doctag">@yii</span>/base/Component.php`);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This autoloader allows loading classes that follow the [PSR-4 standard](http://www.php-fig.org/psr/psr-4/)</span></span><br><span class="line"><span class="comment"> * and have its top-level namespace or sub-namespaces defined as path aliases.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $className 不带前导反斜杠 "\" 的完全限定类名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnknownClassException if the class does not exist in the class file</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$classMap[$className])) &#123;</span><br><span class="line">        <span class="comment">// 1. Search in [[classMap]];</span></span><br><span class="line">        <span class="comment">// 框架的类</span></span><br><span class="line">        $classFile = <span class="keyword">static</span>::$classMap[$className];</span><br><span class="line">        <span class="keyword">if</span> (strpos($classFile, <span class="string">'@'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 可以利用这里重写框架里的类 非常巧妙</span></span><br><span class="line">            <span class="comment">// When aliases `@yii` and `@yii/bootstrap` are defined, classes in the `yii\bootstrap` namespace</span></span><br><span class="line">            <span class="comment">// will be loaded using the `@yii/bootstrap` alias which points to the directory where bootstrap extension</span></span><br><span class="line">            <span class="comment">// files are installed and all classes from other `yii` namespaces will be loaded from the yii framework directory.</span></span><br><span class="line">            $classFile = <span class="keyword">static</span>::getAlias($classFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (strpos($className, <span class="string">'\\'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 含 \</span></span><br><span class="line">        <span class="comment">// 走到这里的类，也就是自己写的类，非框架的</span></span><br><span class="line">        <span class="comment">// eg. yii\console\Controller</span></span><br><span class="line">        <span class="comment">//     @yii/console/Controller.php</span></span><br><span class="line">        <span class="comment">//     /var/www/service/vendor/yiisoft/yii2/console/Controller.php</span></span><br><span class="line">        <span class="comment">// PSR4 规则</span></span><br><span class="line">        $classFile = <span class="keyword">static</span>::getAlias(<span class="string">'@'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $className) . <span class="string">'.php'</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> ($classFile === <span class="keyword">false</span> || !is_file($classFile)) &#123;</span><br><span class="line">            <span class="comment">// 处理不了，交给 composer 尝试处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有命名空间？什么时候会触发呢？</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心</span></span><br><span class="line">    <span class="keyword">include</span> $classFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (YII_DEBUG &amp;&amp; !class_exists($className, <span class="keyword">false</span>) &amp;&amp; !interface_exists($className, <span class="keyword">false</span>) &amp;&amp; !trait_exists($className, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="comment">// if the class does not exist in the class file</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownClassException(<span class="string">"Unable to find '$className' in file: $classFile. Namespace missing?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更详细的 <code>yii\di\Container</code> 将在后文再分析，此处不展开。</p></blockquote><h3 id="yii-web-Application"><a href="#yii-web-Application" class="headerlink" title="yii\web\Application"></a>yii\web\Application</h3><p>再返回 <code>index.php</code>，第 5 步：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> yii\web\Application($config))-&gt;run();</span><br></pre></td></tr></table></figure><p><code>yii\web\Application</code> 类的层级结构：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yii\base\Configurable</span><br><span class="line">|--- yii\base\BaseObject</span><br><span class="line">     |--- yii\base\Component</span><br><span class="line">          |--- yii\di\ServiceLocator</span><br><span class="line">               |--- yii\base\Module</span><br><span class="line">                    |--- yii\base\Application</span><br><span class="line">                         |--- yii\web\Application</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs the application.</span></span><br><span class="line"><span class="comment"> * This is the main entrance of an application.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int the exit status (0 means normal, non-zero values mean abnormal)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_BEFORE_REQUEST;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_BEFORE_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_HANDLING_REQUEST;</span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;handleRequest(<span class="keyword">$this</span>-&gt;getRequest());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_AFTER_REQUEST;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="keyword">self</span>::EVENT_AFTER_REQUEST);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_SENDING_RESPONSE;</span><br><span class="line">        $response-&gt;send();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = <span class="keyword">self</span>::STATE_END;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $response-&gt;exitStatus;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExitException $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;end($e-&gt;statusCode, <span class="keyword">isset</span>($response) ? $response : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> $e-&gt;statusCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Application state</th><th>value</th><th>desc</th></tr></thead><tbody><tr><td>STATE_BEGIN</td><td>0</td><td>just started 在 base\Application __construct</td></tr><tr><td>STATE_INIT</td><td>1</td><td>initializing 在 base\Application init</td></tr><tr><td>STATE_BEFORE_REQUEST</td><td>2</td><td>triggering EVENT_BEFORE_REQUEST 在 base\Application run</td></tr><tr><td>STATE_HANDLING_REQUEST</td><td>3</td><td>handling 在 base\Application run</td></tr><tr><td>STATE_AFTER_REQUEST</td><td>4</td><td>triggering EVENT_AFTER_REQUEST 在 base\Application run</td></tr><tr><td>STATE_SENDING_RESPONSE</td><td>5</td><td>send response 在 base\Application run</td></tr><tr><td>STATE_END</td><td>6</td><td>has ended 在 base\Application run</td></tr></tbody></table><p>这里就涉及很多核心概念了，下节见。</p><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;参见：&lt;a href=&quot;https://www.yiiframework.com/doc/guide/2.0/zh-cn/structure-entry-scripts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;入口脚本（Ent
      
    
    </summary>
    
      <category term="yii2" scheme="https://zyf.im/categories/yii2/"/>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP __invoke 使用</title>
    <link href="https://zyf.im/2021/07/20/php-invoke-is-anybody-using-it/"/>
    <id>https://zyf.im/2021/07/20/php-invoke-is-anybody-using-it/</id>
    <published>2021-07-20T06:58:33.000Z</published>
    <updated>2021-10-13T08:45:42.571Z</updated>
    
    <content type="html"><![CDATA[<p>why they are magic? Because they are magically called by PHP when specific actions happen.</p><p>The <code>__invoke()</code> method is called when a script tries to call an object as a function.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump($x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> CallableClass;</span><br><span class="line">$obj(<span class="number">5</span>);</span><br><span class="line">var_dump(is_callable($obj));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(5)</span><br><span class="line">bool(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="使用明显的操作方法初始化"><a href="#使用明显的操作方法初始化" class="headerlink" title="使用明显的操作方法初始化"></a>使用明显的操作方法初始化</h2><p>例如，当我们有一个提供者时，就会发生这种情况。</p><p><a href="https://github.com/aws/aws-sdk-php/blob/master/src/Endpoint/PatternEndpointProvider.php" target="_blank" rel="noopener">aws-sdk-php/src/Endpoint/PatternEndpointProvider.php</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">(array $args = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $service = <span class="keyword">isset</span>($args[<span class="string">'service'</span>]) ? $args[<span class="string">'service'</span>] : <span class="string">''</span>;</span><br><span class="line">    $region = <span class="keyword">isset</span>($args[<span class="string">'region'</span>]) ? $args[<span class="string">'region'</span>] : <span class="string">''</span>;</span><br><span class="line">    $keys = [<span class="string">"&#123;$region&#125;/&#123;$service&#125;"</span>, <span class="string">"&#123;$region&#125;/*"</span>, <span class="string">"*/&#123;$service&#125;"</span>, <span class="string">"*/*"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($keys <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;patterns[$key])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;expand(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;patterns[$key],</span><br><span class="line">                <span class="keyword">isset</span>($args[<span class="string">'scheme'</span>]) ? $args[<span class="string">'scheme'</span>] : <span class="string">'https'</span>,</span><br><span class="line">                $service,</span><br><span class="line">                $region</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它使用 invoke 使用一些参数提供端点。我们如何使用这个类？</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testReturnsNullWhenUnresolved</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $e = <span class="keyword">new</span> PatternEndpointProvider([<span class="string">'foo'</span> =&gt; [<span class="string">'rules'</span> =&gt; []]]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertNull($e([<span class="string">'service'</span> =&gt; <span class="string">'foo'</span>, <span class="string">'region'</span> =&gt; <span class="string">'bar'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尝试使用单动作控制器？"><a href="#尝试使用单动作控制器？" class="headerlink" title="尝试使用单动作控制器？"></a>尝试使用单动作控制器？</h2><p>控制器应该大而广泛？他们不应该。我们应该有瘦控制器和胖服务。</p><p>在这里，invoke 可以帮助我们，因为我们可以定义一个只处理单个动作的控制器，并在其上放置单个 invoke 方法。</p><p>这也有助于我们实现单一职责原则，即 SOLID 中的 S，这是前五个面向对象设计 (OOD) 原则的首字母缩写词。</p><blockquote><p>A class should have one and only one reason to change, meaning that a class should have only one job.</p></blockquote><p>在 Laravel 中的例子：<a href="https://laravel.com/docs/5.7/controllers#single-action-controllers" target="_blank" rel="noopener">Single Action Controllers | laravel</a>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowProfile</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Show the profile for the given user.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'user.profile'</span>, [<span class="string">'user'</span> =&gt; User::findOrFail($id)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在注册路由时，我们不需要指定方法名称。只有类名。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="string">'ShowProfile'</span>);</span><br></pre></td></tr></table></figure><p>This way we can have Single Action Controllers.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://luis-barros-nobrega.medium.com/php-invoke-is-anybody-using-it-1933c64d17f1" target="_blank" rel="noopener">PHP invoke: is anybody using it? | medium</a></li><li><a href="https://www.php.net/manual/en/language.oop5.magic.php#object.invoke" target="_blank" rel="noopener">__invoke() | php</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;why they are magic? Because they are magically called by PHP when specific actions happen.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;__invoke()&lt;/code&gt; method is ca
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP strict_types 严格模式</title>
    <link href="https://zyf.im/2021/07/19/php-strict-types/"/>
    <id>https://zyf.im/2021/07/19/php-strict-types/</id>
    <published>2021-07-19T11:58:26.000Z</published>
    <updated>2021-10-13T08:46:06.340Z</updated>
    
    <content type="html"><![CDATA[<ul><li>严格模式的声明 _必须_ 放在文件的顶部。</li><li>严格模式不仅作用于函数参数的类型声明，也作用于函数的返回值类型。</li></ul><p>声明 PHP 文件作为严格模式的一个好事是，实际上只适用于当前文件。这确保了这个文件是严格类型，但是他没有影响到整个项目中的其他文件。这允许你一步一步的迁移非严格模式的代码。</p><p>使用提示类型没有 strict_types 可能导致微妙的错误。</p><p>严格类型之前，<code>int $x</code> 意味着 <code>$x must have a value coercible to an int</code>。</p><ul><li>a float (example: 13.1459 -&gt; 13)</li><li>a bool (example: true -&gt; 1)</li><li>a null (example: null -&gt; 0)</li><li>a string with leading digits (example: “15 Trees” -&gt; 15)</li></ul><p>设置严格模式后，you tell the engine that <code>int $x</code> means <code>$x must only be an int proper, no type coercion allowed</code>。</p><p>谁给更关心 <code>strict_type</code> 这行？is more for the reader than for the writer. Why? Bacause it will explicitly tell the reader:</p><p>The types in this current scope are treated strictly.</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行输出 <code>int(3)</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the <span class="built_in">type</span> int, <span class="built_in">float</span> given, ...</span><br></pre></td></tr></table></figure><h2 id="声明位置"><a href="#声明位置" class="headerlink" title="声明位置"></a>声明位置</h2><p>必须在脚本最前。不能写在脚本的中间，如下写法是错误的：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  strict_types declaration must be the very first statement <span class="keyword">in</span> the script <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><p>不得使用 block mode 进行声明：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>) &#123;</span><br><span class="line">  var_dump(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  strict_types declaration must not use block mode <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><h2 id="多文件场景"><a href="#多文件场景" class="headerlink" title="多文件场景"></a>多文件场景</h2><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><p><code>A.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 严格模式</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>B.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 非严格模式</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'A.php'</span>;</span><br><span class="line"><span class="comment">// 违反了 A 的定义</span></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php B.php</span><br><span class="line"></span><br><span class="line">int(3)</span><br></pre></td></tr></table></figure><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><p><code>A.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 非严格模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(int $a, int $b)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>B.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 严格模式</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">'A.php'</span>;</span><br><span class="line"><span class="comment">// 违反了 A 的定义</span></span><br><span class="line">var_dump(add(<span class="number">1.0</span>, <span class="number">2.0</span>));</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php B.php</span><br><span class="line"></span><br><span class="line">PHP Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the <span class="built_in">type</span> int, <span class="built_in">float</span> given, called <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>函数定义时的严格模式，行为并不会出现什么不同。</li><li>函数执行时的，严格模式会出现差异。</li><li><code>declare(strict_types=1);</code> 的声明本身在 A.php 文件中完成。被 B.php 文件 require，而 B.php 并没有定义严格模式，那么执行 require 的 B.php 文件不会变成严格模式。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只有在写 declare 的文件的执行部分才会执行严格模式，该文件中调用的其它函数（其它文件中的函数）也会被影响。</p><p>若果想完全使用严格模式，比较简单的方法是在所有 php 文件都写上 <code>declare(strict_types=1);</code>。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>推荐自动格式化工具：<a href="https://github.com/symplify/easy-coding-standard" target="_blank" rel="noopener">symplify/easy-coding-standard</a>。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://segmentfault.com/a/1190000018389227" target="_blank" rel="noopener">关于 declare(strict_types=1) 的有效范围 | segmentfault</a></li><li><a href="https://chemaclass.medium.com/strict-types-in-php-d4166bd25394" target="_blank" rel="noopener">Strict Types in PHP | medium</a></li><li><a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.scalar-type-declarations" target="_blank" rel="noopener">Scalar type declarations | php</a></li><li><a href="https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict" target="_blank" rel="noopener">Strict typing | php</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;&lt;li&gt;严格模式的声明 _必须_ 放在文件的顶部。&lt;/li&gt;&lt;li&gt;严格模式不仅作用于函数参数的类型声明，也作用于函数的返回值类型。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;声明 PHP 文件作为严格模式的一个好事是，实际上只适用于当前文件。这确保了这个文件是严格类型，但是他没有影响到整
      
    
    </summary>
    
    
      <category term="php" scheme="https://zyf.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Git and GitHub Secrets</title>
    <link href="https://zyf.im/2021/07/12/git-and-github-secrets/"/>
    <id>https://zyf.im/2021/07/12/git-and-github-secrets/</id>
    <published>2021-07-12T02:40:15.000Z</published>
    <updated>2021-07-19T10:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h2><p>Git 记住密码配置后，不用每次 pull、push 都需要输入密码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>会在 <code>cat ~/.gitconfig</code> 看到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure><h2 id="快速检出上一个分支"><a href="#快速检出上一个分支" class="headerlink" title="快速检出上一个分支"></a>快速检出上一个分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h2 id="提交空改动"><a href="#提交空改动" class="headerlink" title="提交空改动"></a>提交空改动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"empty commit"</span> --allow-empty</span><br></pre></td></tr></table></figure><p>在如下几种情况下是有意义：</p><ul><li>标记一批工作或一个新功能的开始。</li><li>记录你对项目进行了跟代码无关的改动。</li><li>跟使用你仓库的其他人交流。</li><li>作为仓库的第一次提交，因为第一次提交日后是不能被 rebase 的：<code>git commit -m &quot;init repo&quot; --allow-empty</code>。</li></ul><h2 id="更直观的-status"><a href="#更直观的-status" class="headerlink" title="更直观的 status"></a>更直观的 status</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status -sb</span><br></pre></td></tr></table></figure><h2 id="更直观的-log"><a href="#更直观的-log" class="headerlink" title="更直观的 log"></a>更直观的 log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset'</span> --abbrev-commit --date=relative</span><br></pre></td></tr></table></figure><h2 id="提交信息查询"><a href="#提交信息查询" class="headerlink" title="提交信息查询"></a>提交信息查询</h2><p>找到其中和搜索条件相匹配的最近的一条。query （区别大小写）是你想要搜索的词语。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show :/query</span><br></pre></td></tr></table></figure><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p>显示所有已经合并到你当前分支的分支列表：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --merged</span><br></pre></td></tr></table></figure><p>相反地：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --no-merged</span><br></pre></td></tr></table></figure><h2 id="gitconfig"><a href="#gitconfig" class="headerlink" title=".gitconfig"></a>.gitconfig</h2><p>打开编辑：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><p>命令修改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.co <span class="string">'checkout'</span></span><br><span class="line">git config --global alias.ac <span class="string">'add -A . &amp;&amp; commit'</span></span><br><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="整行高亮"><a href="#整行高亮" class="headerlink" title="整行高亮"></a>整行高亮</h3><p>多行高亮也可以，比如用 #L53-L60 选择范围，或者按住 shift 键，然后再点击选择的两行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb<span class="comment">#L53-L60</span></span><br></pre></td></tr></table></figure><h3 id="用-commit-信息关闭-issue"><a href="#用-commit-信息关闭-issue" class="headerlink" title="用 commit 信息关闭 issue"></a>用 commit 信息关闭 issue</h3><p>如果某个提交修复了一个 Issue，当提交到 master 分支时，提交信息里可以使用 fix/fixes/fixed , close/closes/closed 或者 resolve/resolves/resolved 等关键词，后面再跟上 Issue 号，这样就会关闭这个 Issue。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"Fix screwup, fixes #12"</span></span><br></pre></td></tr></table></figure><h3 id="链接其他仓库的-Issue"><a href="#链接其他仓库的-Issue" class="headerlink" title="链接其他仓库的 Issue"></a>链接其他仓库的 Issue</h3><p>如果你想引用到同一个仓库中的一个 Issue，只需使用井号 # 加上 Issue 号，这样就会自动创建到此 Issue 的链接。</p><p>要链接到其他仓库的 Issue，就使用 <code>user_name/repo_name#ISSUE_NUMBER</code> 的方式，例如 <code>tiimgreen/toc#12</code>。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://speakerdeck.com/holman/git-and-github-secrets" target="_blank" rel="noopener">Git and GitHub Secrets | speakerdeck</a></li><li><a href="https://speakerdeck.com/holman/more-git-and-github-secrets" target="_blank" rel="noopener">More Git and GitHub Secrets | speakerdeck</a></li></ul><p>– EOF –</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记住密码&quot;&gt;&lt;a href=&quot;#记住密码&quot; class=&quot;headerlink&quot; title=&quot;记住密码&quot;&gt;&lt;/a&gt;记住密码&lt;/h2&gt;&lt;p&gt;Git 记住密码配置后，不用每次 pull、push 都需要输入密码：&lt;/p&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="git" scheme="https://zyf.im/tags/git/"/>
    
  </entry>
  
</feed>
